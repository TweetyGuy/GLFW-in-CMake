; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG33548 DB	'invalid argument', 00H
	ORG $+3
$SG33549 DB	'%s', 00H
	ORG $+1
$SG33553 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG33550 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG33552 DB	00H, 00H
	ORG $+2
$SG27878 DB	'mat3(', 0aH, 00H
	ORG $+1
$SG33551 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+4
$SG27879 DB	09H, 'vec3(%2.3f, %2.3f, %2.3f)', 0aH, 00H
	ORG $+4
$SG27880 DB	09H, 'vec3(%2.3f, %2.3f, %2.3f)', 0aH, 00H
	ORG $+4
$SG27881 DB	09H, 'vec3(%2.3f, %2.3f, %2.3f))', 0aH, 0aH, 00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z		; print
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	?length@?$tmat3x3@N$0A@@glm@@SAHXZ		; glm::tmat3x3<double,0>::length
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
PUBLIC	?test_mat3x3@@YAHXZ				; test_mat3x3
PUBLIC	??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<double,0>::tvec3<double,0><float,float,float>
PUBLIC	??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z ; glm::inverse<double,0,glm::tmat3x3>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::operator*<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_inverse@@YAHXZ				; test_inverse
PUBLIC	??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat3x3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
PUBLIC	?test_ctr@@YAHXZ				; test_ctr
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat3x3<float,0> >::allocator<glm::tmat3x3<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat3x3<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat3x3<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::max_size
PUBLIC	?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first
PUBLIC	??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat3x3<float,0> >::initializer_list<glm::tmat3x3<float,0> >
PUBLIC	?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat3x3<float,0> >::begin
PUBLIC	?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat3x3<float,0> >::end
PUBLIC	?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ ; std::initializer_list<glm::tmat3x3<float,0> >::size
PUBLIC	?test@cast@@YAHXZ				; cast::test
PUBLIC	??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x2<float,0> >
PUBLIC	??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x3<float,0> >
PUBLIC	??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x4<float,0> >
PUBLIC	??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x2<float,0> >
PUBLIC	??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x3<float,0> >
PUBLIC	??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x4<float,0> >
PUBLIC	??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x2<float,0> >
PUBLIC	??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x3<float,0> >
PUBLIC	??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x4<float,0> >
PUBLIC	?test_size@@YAHXZ				; test_size
PUBLIC	main
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat3x3<float,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1><std::allocator<glm::tmat3x3<float,0> > const &>
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z	; glm::operator/<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat3x3<float,0>::operator/=<float>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tmat3x3<float,0> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >
PUBLIC	??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const *>
PUBLIC	??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z		; std::_Get_size_of_n<36>
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
PUBLIC	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat3x3<float,0>::operator*=<float>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat3x3<float,0> const * const &>
PUBLIC	??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat3x3<float,0> >
PUBLIC	??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z ; std::_Copy_memmove<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Release
PUBLIC	??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Emplace_back<glm::tmat3x3<float,0> const &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_To_address<glm::tmat3x3<float,0> const *>
PUBLIC	??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z ; std::_To_address<glm::tmat3x3<float,0> *>
PUBLIC	??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const &>
PUBLIC	??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::construct<glm::tmat3x3<float,0>,glm::tmat3x3<float,0> const &>
PUBLIC	??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tmat3x3<float,0> *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+439
	DD	imagerel $unwind$?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_mat3x3@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$?test_mat3x3@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1792
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_operators@@YAHXZ DD imagerel ?test_operators@@YAHXZ
	DD	imagerel ?test_operators@@YAHXZ+445
	DD	imagerel $unwind$?test_operators@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+223
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+236
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+217
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+236
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+256
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+545
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+179
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+1556
	DD	imagerel $unwind$?test_inverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1687
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ctr@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+1458
	DD	imagerel $unwind$?test_ctr@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_ctr@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??test_ctr@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+323
	DD	imagerel $unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@cast@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$?test@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+350
	DD	imagerel $unwind$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+350
	DD	imagerel $unwind$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+350
	DD	imagerel $unwind$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+350
	DD	imagerel $unwind$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+360
	DD	imagerel $unwind$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+356
	DD	imagerel $unwind$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+350
	DD	imagerel $unwind$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_size@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+312
	DD	imagerel $unwind$?test_size@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z DD imagerel $LN6
	DD	imagerel $LN6+328
	DD	imagerel $unwind$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+3179
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+3167
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+298
	DD	imagerel $unwind$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01aH
	DB	053H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031f19H
	DD	0700cc210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
	DB	03aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 021e19H
	DD	0700bb20fH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0c45H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0430113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0 DB 049H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
	ORG $+8
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 038H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DD	024H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0c51H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z DD 043e19H
	DD	0490113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcName$0 DB 049H ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
	ORG $+8
?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcVarDesc DD 040H ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
	DD	048H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z DB 0aH
	DB	00H
	DB	00H
	DB	09H, 02H
	DB	02H
	DB	'h'
	DB	04H
	DB	0b0H
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z
	DD	imagerel $ip2state$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z DD 033511H
	DD	014011cH
	DD	07015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$0 DB 024H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
	DB	053H
	DB	032H
	DB	00H
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$1 DB 05fH ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$2 DB 05fH ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+13
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcVarDesc DD 088H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
	DD	08H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcName$0
	ORG $+144
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcFrameData DD 03H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
	DD	00H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0280109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0d8H ; cast::entry<glm::tmat4x4<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	098H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	040H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0260109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0c8H ; cast::entry<glm::tmat4x3<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	088H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	030H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0145H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0240109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0110H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0b8H ; cast::entry<glm::tmat4x2<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	078H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	014bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0260109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0c8H ; cast::entry<glm::tmat3x4<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	088H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	030H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	014eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ DD 042d19H
	DD	025010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0110H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0b8H ; cast::entry<glm::tmat3x3<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	078H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0145H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0a8H ; cast::entry<glm::tmat3x2<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	068H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0145H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0240109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0110H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0b8H ; cast::entry<glm::tmat2x4<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	078H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0145H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0a8H ; cast::entry<glm::tmat2x3<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	068H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0145H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0a8H ; cast::entry<glm::tmat2x2<float,0> >
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	068H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_ctr@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	095H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 06dH ; glm::operator/<float,0>
	DB	031H
	DB	05fH
	DB	063H
	DB	06fH
	DB	070H
	DB	079H
	DB	00H
	ORG $+8
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 028H ; glm::operator/<float,0>
	DD	024H
	DQ	FLAT:??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::operator/<float,0>
	DD	00H
	DQ	FLAT:??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	067dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	01d0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 078H ; glm::operator*<float,0>
	DD	024H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	07011b215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	07011b215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	07011b215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	07011b215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700da211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	06e6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z DD 044319H
	DD	02f0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::operator*<double,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 0c0H ; glm::operator*<double,0>
	DD	048H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::operator*<double,0>
	DD	00H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_size@@YAHXZ
	DD	013H
	DD	011fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_ctr@@YAHXZ
	DD	025H
	DD	0598H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse@@YAHXZ
	DD	024H
	DD	05fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_operators@@YAHXZ
	DD	024H
	DD	01a4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_mat3x3@@YAHXZ
	DD	024H
	DD	0133H
voltbl	ENDS
CONST	SEGMENT
	ORG $+2
?test_mat3x3@@YAHXZ$rtcName$0 DB 04dH			; test_mat3x3
	DB	061H
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?test_mat3x3@@YAHXZ$rtcName$1 DB 049H			; test_mat3x3
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?test_mat3x3@@YAHXZ$rtcName$2 DB 052H			; test_mat3x3
	DB	065H
	DB	073H
	DB	030H
	DB	00H
	ORG $+3
?test_mat3x3@@YAHXZ$rtcVarDesc DD 0110H			; test_mat3x3
	DD	048H
	DQ	FLAT:?test_mat3x3@@YAHXZ$rtcName$2
	DD	0a0H
	DD	048H
	DQ	FLAT:?test_mat3x3@@YAHXZ$rtcName$1
	DD	030H
	DD	048H
	DQ	FLAT:?test_mat3x3@@YAHXZ$rtcName$0
	ORG $+144
?test_mat3x3@@YAHXZ$rtcFrameData DD 03H			; test_mat3x3
	DD	00H
	DQ	FLAT:?test_mat3x3@@YAHXZ$rtcVarDesc
?test_operators@@YAHXZ$rtcName$0 DB 06cH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$1 DB 06dH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$2 DB 075H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$3 DB 076H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$4 DB 061H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$5 DB 062H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$6 DB 06eH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$7 DB 06fH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$8 DB 070H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcName$9 DB 071H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YAHXZ$rtcFrameData DD 0aH		; test_operators
	DD	00H
	DQ	FLAT:?test_operators@@YAHXZ$rtcVarDesc
?test_inverse@@YAHXZ$rtcName$0 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_operators@@YAHXZ$rtcVarDesc DD 0228H		; test_operators
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$9
	DD	01e8H
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$8
	DD	01a8H
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$7
	DD	0168H
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$6
	DD	0138H
	DD	0cH
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$5
	DD	0108H
	DD	0cH
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$4
	DD	0d8H
	DD	0cH
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$3
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$2
	DD	068H
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$1
	DD	028H
	DD	024H
	DQ	FLAT:?test_operators@@YAHXZ$rtcName$0
	ORG $+480
?test_inverse@@YAHXZ$rtcName$1 DB 049H			; test_inverse
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?test_inverse@@YAHXZ$rtcName$2 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$3 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$0 DB 06dH			; test_ctr
	DB	030H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$4 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+7
?test_inverse@@YAHXZ$rtcVarDesc DD 0138H		; test_inverse
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$4
	DD	0f8H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$3
	DD	0b8H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$2
	DD	078H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$1
	DD	038H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$0
	ORG $+240
?test_inverse@@YAHXZ$rtcFrameData DD 05H		; test_inverse
	DD	00H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcVarDesc
?test_ctr@@YAHXZ$rtcName$1 DB 06dH			; test_ctr
	DB	031H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$2 DB 06dH			; test_ctr
	DB	032H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$3 DB 076H			; test_ctr
	DB	031H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$4 DB 076H			; test_ctr
	DB	032H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcVarDesc DD 01b8H			; test_ctr
	DD	020H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$4
	DD	0128H
	DD	020H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$3
	DD	0e8H
	DD	024H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$2
	DD	0a8H
	DD	024H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$1
	DD	068H
	DD	024H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$0
	ORG $+240
?test_ctr@@YAHXZ$rtcFrameData DD 05H			; test_ctr
	DD	00H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
xdata	SEGMENT
$unwind$?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z DD 020a01H
	DD	07006920aH
$unwind$?test_mat3x3@@YAHXZ DD 032c19H
	DD	03a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
$unwind$?test_operators@@YAHXZ DD 032c19H
	DD	04e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0268H
$unwind$?test_inverse@@YAHXZ DD 032c19H
	DD	0640109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0310H
$unwind$?test_ctr@@YAHXZ DD 042d19H
	DD	071010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?test_ctr@@YAHXZ
	DD	0372H
$cppxdata$?test_ctr@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_ctr@@YAHXZ
	DD	imagerel $ip2state$?test_ctr@@YAHXZ
$stateUnwindMap$?test_ctr@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA
$ip2state$?test_ctr@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	0d9H, 0fH
	DB	02H
	DB	0edH, 05H
	DB	00H
$unwind$?dtor$0@?0??test_ctr@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test@cast@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_size@@YAHXZ DD 031b19H
	DD	0180109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tmat3x3<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tmat3x3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::construct<glm::tmat3x3<float,0>,glm::tmat3x3<float,0> const &>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tmat3x3@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat3x3@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tmat3x3<float,0> *>
	mov	rdx, rax
	mov	ecx, 36					; 00000024H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const &>
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::construct<glm::tmat3x3<float,0>,glm::tmat3x3<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z PROC ; std::forward<glm::tmat3x3<float,0> const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z ENDP ; std::forward<glm::tmat3x3<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tmat3x3<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tmat3x3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tmat3x3<float,0> const *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tmat3x3<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG33548
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG33549
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG33550
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG33551
	lea	rdx, OFFSET FLAT:$SG33552
	lea	rcx, OFFSET FLAT:$SG33553
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Emplace_back<glm::tmat3x3<float,0> const &>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@AEBU?$tmat3x3@M$0A@@glm@@@std@@YAAEBU?$tmat3x3@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const &>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat3x3<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tmat3x3@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@QEAU?$tmat3x3@M$0A@@glm@@AEBU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::construct<glm::tmat3x3<float,0>,glm::tmat3x3<float,0> const &>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 36					; 00000024H
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Emplace_back<glm::tmat3x3<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat3x3<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z PROC ; std::_Copy_memmove<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_To_address<glm::tmat3x3<float,0> const *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_To_address<glm::tmat3x3<float,0> const *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tmat3x3@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat3x3@M$0A@@glm@@@Z ; std::_To_address<glm::tmat3x3<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z ENDP ; std::_Copy_memmove<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tmat3x3<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tmat3x3<float,0> const * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tmat3x3<float,0> const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 80
this$ = 128
m$ = 136
??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tmat3x3<float,0>::operator*=<float>, COMDAT

; 279  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 280  : 		return (*this = *this * m);

	mov	r8, QWORD PTR m$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 281  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tmat3x3<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>, COMDAT

; 98   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 95   : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 96   : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 97   : 		z(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 98   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec3<float,0>::tvec3<float,0><float,0>, COMDAT

; 138  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 135  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 136  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 137  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 138  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec3<float,0>::tvec3<float,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT

; 66   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<36>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 512409557603043100			; 071c71c71c71c71cH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 512409557603043100			; 071c71c71c71c71cH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 36		; 00000024H
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<36>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 1673 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1674 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1675 :     // note: only called internally from elsewhere in the STL
; 1676 :     using _Ptrval = typename _Alloc::value_type*;
; 1677 : 
; 1678 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat3x3<float,0> const * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1679 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEBU?$tmat3x3@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat3x3<float,0> const * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1680 : 
; 1681 :     if constexpr (conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1682 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1683 : #if _HAS_CXX20
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // _HAS_CXX20
; 1686 :         {
; 1687 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tmat3x3@M$0A@@glm@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat3x3<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEBU?$tmat3x3@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@PEBU12@0PEAU12@@Z ; std::_Copy_memmove<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> *>

; 1688 :             _Dest += _ULast - _UFirst;

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 36					; 00000024H
	idiv	rcx
	imul	rax, rax, 36				; 00000024H
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Dest$[rsp], rax

; 1689 :             return _Dest;

	mov	rax, QWORD PTR _Dest$[rsp]
	jmp	SHORT $LN1@Uninitiali

; 1690 :         }
; 1691 :     }
; 1692 : 
; 1693 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat3x3@M$0A@@glm@@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >

; 1694 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 36					; 00000024H
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1695 :         _Backout._Emplace_back(*_UFirst);

	mov	rdx, QWORD PTR _UFirst$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@AEBU?$tmat3x3@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat3x3@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Emplace_back<glm::tmat3x3<float,0> const &>

; 1696 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1697 : 
; 1698 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1699 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat3x3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z PROC ; std::forward<glm::tmat3x3<float,0> const *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z ENDP ; std::forward<glm::tmat3x3<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z PROC ; std::forward<std::allocator<glm::tmat3x3<float,0> > const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z ENDP ; std::forward<std::allocator<glm::tmat3x3<float,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 80
this$ = 112
m$ = 120
??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tmat3x3<float,0>::operator/=<float>, COMDAT

; 296  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 297  : 		return *this *= inverse(m);

	mov	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat3x3>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$?XM@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat3x3<float,0>::operator*=<float>

; 298  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tmat3x3<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
OneOverDeterminant$ = 32
Inverse$ = 56
tv68 = 112
tv74 = 120
tv82 = 128
tv87 = 136
tv129 = 144
tv134 = 152
tv140 = 160
tv148 = 168
tv153 = 176
tv164 = 184
tv169 = 192
tv175 = 200
tv183 = 208
tv188 = 216
tv213 = 224
tv221 = 232
tv226 = 240
tv237 = 248
tv248 = 256
tv256 = 264
tv261 = 272
tv273 = 280
tv284 = 288
tv292 = 296
tv297 = 304
tv308 = 312
tv319 = 320
tv327 = 328
tv332 = 336
tv344 = 344
tv355 = 352
tv363 = 360
tv368 = 368
tv379 = 376
tv390 = 384
tv398 = 392
tv403 = 400
tv415 = 408
tv426 = 416
tv434 = 424
tv439 = 432
tv450 = 440
tv461 = 448
tv469 = 456
tv474 = 464
tv486 = 472
tv497 = 480
tv505 = 488
tv510 = 496
tv521 = 504
__$ArrayPad$ = 512
__$ReturnUdt$ = 560
m$ = 568
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call, COMDAT

; 275  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+560]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 276  : 			T OneOverDeterminant = static_cast<T>(1) / (

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv87[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv87[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv82[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv68[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv129[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv134[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv148[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv153[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv153[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv148[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv134[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv129[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv164[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv169[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv175[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv175[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv183[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv188[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv188[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv183[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv169[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv164[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 277  : 				+ m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
; 278  : 				- m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
; 279  : 				+ m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]));
; 280  : 
; 281  : 			tmat3x3<T, P> Inverse(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 282  : 			Inverse[0][0] = + (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv213[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv213[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv221[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv226[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv226[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv221[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv237[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv237[rsp]
	movss	DWORD PTR [rax], xmm0

; 283  : 			Inverse[1][0] = - (m[1][0] * m[2][2] - m[2][0] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv256[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv261[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv261[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv256[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv273[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv273[rsp]
	movss	DWORD PTR [rax], xmm0

; 284  : 			Inverse[2][0] = + (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv284[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv284[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv292[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv297[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv292[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv308[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv308[rsp]
	movss	DWORD PTR [rax], xmm0

; 285  : 			Inverse[0][1] = - (m[0][1] * m[2][2] - m[2][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv319[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv319[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv327[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv332[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv332[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv327[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv344[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv344[rsp]
	movss	DWORD PTR [rax], xmm0

; 286  : 			Inverse[1][1] = + (m[0][0] * m[2][2] - m[2][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv355[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv355[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv363[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv368[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv368[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv363[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv379[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv379[rsp]
	movss	DWORD PTR [rax], xmm0

; 287  : 			Inverse[2][1] = - (m[0][0] * m[2][1] - m[2][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv390[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv390[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv398[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv403[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv403[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv398[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv415[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv415[rsp]
	movss	DWORD PTR [rax], xmm0

; 288  : 			Inverse[0][2] = + (m[0][1] * m[1][2] - m[1][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv426[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv426[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv434[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv439[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv439[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv434[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv450[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv450[rsp]
	movss	DWORD PTR [rax], xmm0

; 289  : 			Inverse[1][2] = - (m[0][0] * m[1][2] - m[1][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv461[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv461[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv469[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv474[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv474[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv469[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv486[rsp]
	movss	DWORD PTR [rax], xmm0

; 290  : 			Inverse[2][2] = + (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv497[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv497[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv505[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv510[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv510[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv505[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv521[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv521[rsp]
	movss	DWORD PTR [rax], xmm0

; 291  : 
; 292  : 			return Inverse;

	lea	rax, QWORD PTR Inverse$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 1001 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1002 : 		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1003 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 1007 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1008 : 		return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 1
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1009 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 673  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 675  : 			v.x / scalar,
; 676  : 			v.y / scalar,
; 677  : 			v.z / scalar);
; 678  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
scalar$ = 72
v$ = 80
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator/<float,0>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 692  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	divss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	divss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR scalar$[rsp]
	divss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 693  : 			scalar / v.x,
; 694  : 			scalar / v.y,
; 695  : 			scalar / v.z);
; 696  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
OneOverDeterminant$ = 32
Inverse$ = 64
tv68 = 160
tv74 = 168
tv82 = 176
tv87 = 184
tv129 = 192
tv134 = 200
tv140 = 208
tv148 = 216
tv153 = 224
tv164 = 232
tv169 = 240
tv175 = 248
tv183 = 256
tv188 = 264
tv213 = 272
tv221 = 280
tv226 = 288
tv237 = 296
tv248 = 304
tv256 = 312
tv261 = 320
tv273 = 328
tv284 = 336
tv292 = 344
tv297 = 352
tv308 = 360
tv319 = 368
tv327 = 376
tv332 = 384
tv344 = 392
tv355 = 400
tv363 = 408
tv368 = 416
tv379 = 424
tv390 = 432
tv398 = 440
tv403 = 448
tv415 = 456
tv426 = 464
tv434 = 472
tv439 = 480
tv450 = 488
tv461 = 496
tv469 = 504
tv474 = 512
tv486 = 520
tv497 = 528
tv505 = 536
tv510 = 544
tv521 = 552
__$ArrayPad$ = 560
__$ReturnUdt$ = 608
m$ = 616
?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call, COMDAT

; 275  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+608]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 276  : 			T OneOverDeterminant = static_cast<T>(1) / (

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv87[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv87[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv82[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv68[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv129[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv134[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv148[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv153[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv153[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv148[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv134[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR tv129[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR tv164[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv169[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv175[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv175[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv183[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv188[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv188[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv183[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv169[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR tv164[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR OneOverDeterminant$[rsp], xmm0

; 277  : 				+ m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
; 278  : 				- m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
; 279  : 				+ m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]));
; 280  : 
; 281  : 			tmat3x3<T, P> Inverse(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>

; 282  : 			Inverse[0][0] = + (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv213[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv213[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv221[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv226[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv226[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv221[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv237[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv237[rsp]
	movsd	QWORD PTR [rax], xmm0

; 283  : 			Inverse[1][0] = - (m[1][0] * m[2][2] - m[2][0] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv256[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv261[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv261[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv256[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv273[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv273[rsp]
	movsd	QWORD PTR [rax], xmm0

; 284  : 			Inverse[2][0] = + (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv284[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv284[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv292[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv297[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv292[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv308[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv308[rsp]
	movsd	QWORD PTR [rax], xmm0

; 285  : 			Inverse[0][1] = - (m[0][1] * m[2][2] - m[2][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv319[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv319[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv327[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv332[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv332[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv327[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv344[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv344[rsp]
	movsd	QWORD PTR [rax], xmm0

; 286  : 			Inverse[1][1] = + (m[0][0] * m[2][2] - m[2][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv355[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv355[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv363[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv368[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv368[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv363[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv379[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv379[rsp]
	movsd	QWORD PTR [rax], xmm0

; 287  : 			Inverse[2][1] = - (m[0][0] * m[2][1] - m[2][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv390[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv390[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv398[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv403[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv403[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv398[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv415[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv415[rsp]
	movsd	QWORD PTR [rax], xmm0

; 288  : 			Inverse[0][2] = + (m[0][1] * m[1][2] - m[1][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv426[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv426[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv434[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv439[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv439[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv434[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv450[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv450[rsp]
	movsd	QWORD PTR [rax], xmm0

; 289  : 			Inverse[1][2] = - (m[0][0] * m[1][2] - m[1][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv461[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv461[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv469[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv474[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv474[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv469[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv486[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv486[rsp]
	movsd	QWORD PTR [rax], xmm0

; 290  : 			Inverse[2][2] = + (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv497[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv497[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv505[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv510[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv510[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv505[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR OneOverDeterminant$[rsp]
	movsd	QWORD PTR tv521[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv521[rsp]
	movsd	QWORD PTR [rax], xmm0

; 291  : 
; 292  : 			return Inverse;

	lea	rax, QWORD PTR Inverse$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 72					; 00000048H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 584				; 00000248H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT

; 80   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat3x3<float,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	$LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);
; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	rcx, QWORD PTR <_Val_1>$[rsp]
	call	??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const *>
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@PEBU?$tmat3x3@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat3x3@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat3x3<float,0> const *>
	mov	r9, QWORD PTR _Al$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_copy@PEBU?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat3x3@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ; std::_Uninitialized_copy<glm::tmat3x3<float,0> const *,std::allocator<glm::tmat3x3<float,0> > >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA PROC ; `std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA ENDP ; `std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA PROC ; `std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z@4HA ENDP ; `std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 960  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 961  :     // convert size_t to _Size_type, avoiding truncation
; 962  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 963  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 964  :             _Xlength_error("size_t too long for _Size_type");
; 965  :         }
; 966  :     }
; 967  : 
; 968  :     return static_cast<_Size_type>(_Len);

	mov	rax, QWORD PTR _Len$[rsp]

; 969  : }

	pop	rdi
	ret	0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1><std::allocator<glm::tmat3x3<float,0> > const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tmat3x3<float,0> > const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1><std::allocator<glm::tmat3x3<float,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat3x3<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 187  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 188  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 189  : 
; 190  : 	Error += cast::test();

	call	?test@cast@@YAHXZ			; cast::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 191  : 	Error += test_ctr();

	call	?test_ctr@@YAHXZ			; test_ctr
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 192  : 	Error += test_mat3x3();

	call	?test_mat3x3@@YAHXZ			; test_mat3x3
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 193  : 	Error += test_operators();

	call	?test_operators@@YAHXZ			; test_operators
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 194  : 	Error += test_inverse();

	call	?test_inverse@@YAHXZ			; test_inverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 195  : 	Error += test_size();

	call	?test_size@@YAHXZ			; test_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 196  : 
; 197  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 198  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 40
$T2 = 80
tv67 = 168
tv72 = 172
tv76 = 176
tv80 = 180
__$ArrayPad$ = 184
?test_size@@YAHXZ PROC					; test_size

; 173  : {

$LN11:
	push	rdi
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 174  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 175  : 
; 176  : 	Error += 36 == sizeof(glm::mat3x3) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 177  : 	Error += 72 == sizeof(glm::dmat3x3) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 178  : 	Error += glm::mat3x3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ		; glm::tmat3x3<float,0>::tmat3x3<float,0>
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN3@test_size
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_size
$LN3@test_size:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_size:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 179  : 	Error += glm::dmat3x3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ		; glm::tmat3x3<double,0>::tmat3x3<double,0>
	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN5@test_size
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_size
$LN5@test_size:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_size:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 180  : 	Error += glm::mat3x3::length() == 3 ? 0 : 1;

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN7@test_size
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN8@test_size
$LN7@test_size:
	mov	DWORD PTR tv76[rsp], 1
$LN8@test_size:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 181  : 	Error += glm::dmat3x3::length() == 3 ? 0 : 1;

	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN9@test_size
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN10@test_size
$LN9@test_size:
	mov	DWORD PTR tv80[rsp], 1
$LN10@test_size:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 182  : 
; 183  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 184  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_size@@YAHXZ ENDP					; test_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 64
B$ = 152
Identity$ = 216
i$6 = 260
length$7 = 264
$T8 = 280
$T9 = 284
tv76 = 288
tv87 = 296
__$ArrayPad$ = 304
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x4<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 136
Identity$ = 200
i$6 = 244
length$7 = 248
$T8 = 264
$T9 = 268
tv76 = 272
tv87 = 280
__$ArrayPad$ = 288
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x3<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 120
Identity$ = 184
i$6 = 228
length$7 = 232
$T8 = 248
tv76 = 256
tv87 = 264
__$ArrayPad$ = 272
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x2<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 136
Identity$ = 200
i$6 = 244
length$7 = 248
$T8 = 264
tv76 = 272
tv87 = 280
__$ArrayPad$ = 288
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x4<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 120
Identity$ = 184
i$6 = 228
length$7 = 232
$T8 = 248
tv74 = 256
tv85 = 264
__$ArrayPad$ = 272
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x3<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rax, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 36					; 00000024H
	rep movsb

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv85[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
Identity$ = 168
i$6 = 212
length$7 = 216
$T8 = 232
tv76 = 240
tv87 = 248
__$ArrayPad$ = 256
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x2<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 120
Identity$ = 184
i$6 = 228
length$7 = 232
$T8 = 248
tv76 = 256
tv87 = 264
__$ArrayPad$ = 272
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x4<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
Identity$ = 168
i$6 = 212
length$7 = 216
$T8 = 232
tv76 = 240
tv87 = 248
__$ArrayPad$ = 256
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x3<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
;	COMDAT ??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
Identity$ = 168
i$6 = 212
length$7 = 216
$T8 = 232
tv76 = 240
tv87 = 248
__$ArrayPad$ = 256
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x2<float,0> >, COMDAT

; 141  : 	{

$LN8:
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 142  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 143  : 
; 144  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 145  : 		glm::mat3x3 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 146  : 		glm::mat3x3 Identity(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 147  : 
; 148  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 149  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 150  : 
; 151  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Error$ = 32
?test@cast@@YAHXZ PROC					; cast::test

; 155  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 156  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 157  : 		
; 158  : 		Error += entry<glm::mat2x2>();

	call	??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 159  : 		Error += entry<glm::mat2x3>();

	call	??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 160  : 		Error += entry<glm::mat2x4>();

	call	??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 161  : 		Error += entry<glm::mat3x2>();

	call	??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 162  : 		Error += entry<glm::mat3x3>();

	call	??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 163  : 		Error += entry<glm::mat3x4>();

	call	??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 164  : 		Error += entry<glm::mat4x2>();

	call	??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 165  : 		Error += entry<glm::mat4x3>();

	call	??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 166  : 		Error += entry<glm::mat4x4>();

	call	??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 167  : 
; 168  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 169  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@cast@@YAHXZ ENDP					; cast::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 16
?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ PROC ; std::initializer_list<glm::tmat3x3<float,0> >::size, COMDAT

; 45   :     _NODISCARD constexpr size_t size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   :         return static_cast<size_t>(_Last - _First);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	cdq
	mov	ecx, 36					; 00000024H
	idiv	rcx

; 47   :     }

	pop	rdi
	ret	0
?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ ENDP ; std::initializer_list<glm::tmat3x3<float,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ PROC ; std::initializer_list<glm::tmat3x3<float,0> >::end, COMDAT

; 41   :     _NODISCARD constexpr const _Elem* end() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 42   :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 43   :     }

	pop	rdi
	ret	0
?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ENDP ; std::initializer_list<glm::tmat3x3<float,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ PROC ; std::initializer_list<glm::tmat3x3<float,0> >::begin, COMDAT

; 37   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   :         return _First;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]

; 39   :     }

	pop	rdi
	ret	0
?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ENDP ; std::initializer_list<glm::tmat3x3<float,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 16
_First_arg$ = 24
_Last_arg$ = 32
??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z PROC ; std::initializer_list<glm::tmat3x3<float,0> >::initializer_list<glm::tmat3x3<float,0> >, COMDAT

; 35   :         : _First(_First_arg), _Last(_Last_arg) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _First_arg$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Last_arg$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z ENDP ; std::initializer_list<glm::tmat3x3<float,0> >::initializer_list<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat3x3@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat3x3<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	cdq
	mov	ecx, 36					; 00000024H
	idiv	rcx
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat3x3<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat3x3<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 36	; 00000024H
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tmat3x3@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat3x3<float,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
_Ilist$ = 88
_Al$ = 96
??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z PROC ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >, COMDAT

; 702  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat3x3@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat3x3<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat3x3<float,0> > >,1><std::allocator<glm::tmat3x3<float,0> > const &>

; 703  :         _Construct_n(_Convert_size<size_type>(_Ilist.size()), _Ilist.begin(), _Ilist.end());

	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?end@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat3x3<float,0> >::end
	mov	QWORD PTR $T2[rsp], rax
	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?begin@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBAPEBU?$tmat3x3@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat3x3<float,0> >::begin
	mov	QWORD PTR $T3[rsp], rax
	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?size@?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEBA_KXZ ; std::initializer_list<glm::tmat3x3<float,0> >::size
	mov	rcx, rax
	call	??$_Convert_size@_K@std@@YA_K_K@Z	; std::_Convert_size<unsigned __int64>
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@PEBU?$tmat3x3@M$0A@@glm@@PEBU12@@?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat3x3@M$0A@@glm@@1@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::_Construct_n<glm::tmat3x3<float,0> const *,glm::tmat3x3<float,0> const *>

; 704  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ENDP ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 512409557603043100			; 071c71c71c71c71cH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tmat3x3<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tmat3x3<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0CE@@std@@YA_K_K@Z	; std::_Get_size_of_n<36>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAPEAU?$tmat3x3@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tmat3x3<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tmat3x3<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 36		; 00000024H
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAAXQEAU?$tmat3x3@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tmat3x3<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tmat3x3<float,0> >::allocator<glm::tmat3x3<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tmat3x3<float,0> >::allocator<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv78 = 68
tv90 = 72
tv134 = 76
this$ = 112
x1$ = 120
y1$ = 128
z1$ = 136
x2$ = 144
y2$ = 152
z2$ = 160
x3$ = 168
y3$ = 176
z3$ = 184
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>, COMDAT

; 92   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 93   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));

	cvtsi2ss xmm0, DWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv78[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 94   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));

	cvtsi2ss xmm0, DWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv90[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv90[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 95   : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));

	cvtsi2ss xmm0, DWORD PTR z3$[rsp]
	cvtsi2ss xmm1, DWORD PTR y3$[rsp]
	cvtsi2ss xmm2, DWORD PTR x3$[rsp]
	movss	DWORD PTR tv134[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 96   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Error$ = 80
m0$ = 104
m1$ = 168
m2$ = 232
i$8 = 276
i$9 = 280
v1$ = 296
$T10 = 352
v2$ = 440
$T11 = 496
$T12 = 584
$T13 = 596
$T14 = 608
$T15 = 620
$T16 = 632
$T17 = 644
$T18 = 656
$T19 = 659
$T20 = 662
$T21 = 664
$T22 = 680
$T23 = 684
$T24 = 696
$T25 = 708
$T26 = 720
$T27 = 732
$T28 = 744
$T29 = 760
$T30 = 776
$T31 = 784
$T32 = 800
tv67 = 816
tv73 = 824
tv147 = 832
tv158 = 840
tv166 = 848
tv177 = 856
tv182 = 864
tv214 = 872
__$ArrayPad$ = 880
?test_ctr@@YAHXZ PROC					; test_ctr

; 92   : {

$LN15:
	push	rsi
	push	rdi
	sub	rsp, 904				; 00000388H
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 206				; 000000ceH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 93   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 94   : 
; 95   : #if(GLM_HAS_INITIALIZER_LISTS)
; 96   : 	glm::mat3x3 m0(

	mov	r9d, 8
	mov	r8d, 7
	mov	edx, 6
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv67[rsp], rax
	mov	r9d, 5
	mov	r8d, 4
	mov	edx, 3
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv73[rsp], rax
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m0$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 97   : 		glm::vec3(0, 1, 2),
; 98   : 		glm::vec3(3, 4, 5),
; 99   : 		glm::vec3(6, 7, 8));
; 100  : 	
; 101  : 	glm::mat3x3 m1{0, 1, 2, 3, 4, 5, 6, 7, 8};

	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m1$[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>

; 102  : 	
; 103  : 	glm::mat3x3 m2{

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 5
	mov	r8d, 4
	mov	edx, 3
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 8
	mov	r8d, 7
	mov	edx, 6
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r9, QWORD PTR $T15[rsp]
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 104  : 		{0, 1, 2},
; 105  : 		{3, 4, 5},
; 106  : 		{6, 7, 8}};
; 107  : 	
; 108  : 	for(glm::length_t i = 0; i < m0.length(); ++i)

	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN4@test_ctr
$LN2@test_ctr:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN4@test_ctr:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN3@test_ctr

; 109  : 		Error += glm::all(glm::equal(m0[i], m2[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv147[rsp], rax
	mov	edx, DWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR m0$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv147[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_ctr
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN10@test_ctr
$LN9@test_ctr:
	mov	DWORD PTR tv158[rsp], 1
$LN10@test_ctr:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@test_ctr
$LN3@test_ctr:

; 110  : 	
; 111  : 	for(glm::length_t i = 0; i < m1.length(); ++i)

	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN7@test_ctr
$LN5@test_ctr:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
$LN7@test_ctr:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$9[rsp], eax
	jge	$LN6@test_ctr

; 112  : 		Error += glm::all(glm::equal(m1[i], m2[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv166[rsp], rax
	mov	edx, DWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv166[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_ctr
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN12@test_ctr
$LN11@test_ctr:
	mov	DWORD PTR tv177[rsp], 1
$LN12@test_ctr:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@test_ctr
$LN6@test_ctr:

; 113  : 	
; 114  : 	std::vector<glm::mat3x3> v1{

	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp+36]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat3x3<float,0> >::allocator<glm::tmat3x3<float,0> >
	mov	QWORD PTR tv182[rsp], rax
	lea	rcx, QWORD PTR $T10[rsp+72]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat3x3<float,0> >::initializer_list<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR tv182[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR $T31[rsp]
	lea	rcx, QWORD PTR v1$[rsp]
	call	??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	npad	1

; 115  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8},
; 116  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8}
; 117  : 	};
; 118  : 	
; 119  : 	std::vector<glm::mat3x3> v2{

	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 5
	mov	r8d, 4
	mov	edx, 3
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 8
	mov	r8d, 7
	mov	edx, 6
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r9, QWORD PTR $T23[rsp]
	lea	r8, QWORD PTR $T24[rsp]
	lea	rdx, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 5
	mov	r8d, 4
	mov	edx, 3
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r9d, 8
	mov	r8d, 7
	mov	edx, 6
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	lea	r9, QWORD PTR $T26[rsp]
	lea	r8, QWORD PTR $T27[rsp]
	lea	rdx, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR $T11[rsp+36]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat3x3<float,0> >::allocator<glm::tmat3x3<float,0> >
	mov	QWORD PTR tv214[rsp], rax
	lea	rcx, QWORD PTR $T11[rsp+72]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$initializer_list@U?$tmat3x3@M$0A@@glm@@@std@@QEAA@PEBU?$tmat3x3@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat3x3<float,0> >::initializer_list<glm::tmat3x3<float,0> >
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR tv214[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR $T32[rsp]
	lea	rcx, QWORD PTR v2$[rsp]
	call	??0?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat3x3@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat3x3@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >

; 120  : 		{
; 121  : 			{ 0, 1, 2},
; 122  : 			{ 3, 4, 5},
; 123  : 			{ 6, 7, 8}
; 124  : 		},
; 125  : 		{
; 126  : 			{ 0, 1, 2},
; 127  : 			{ 3, 4, 5},
; 128  : 			{ 6, 7, 8}
; 129  : 		}
; 130  : 	};
; 131  : 	
; 132  : #endif//GLM_HAS_INITIALIZER_LISTS
; 133  : 	
; 134  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T30[rsp], eax
	lea	rcx, QWORD PTR v2$[rsp]
	call	??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	npad	1
	lea	rcx, QWORD PTR v1$[rsp]
	call	??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	mov	eax, DWORD PTR $T30[rsp]

; 135  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ctr@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 904				; 00000388H
	pop	rdi
	pop	rsi
	ret	0
?test_ctr@@YAHXZ ENDP					; test_ctr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 80
m0$ = 104
m1$ = 168
m2$ = 232
i$8 = 276
i$9 = 280
v1$ = 296
$T10 = 352
v2$ = 440
$T11 = 496
$T12 = 584
$T13 = 596
$T14 = 608
$T15 = 620
$T16 = 632
$T17 = 644
$T18 = 656
$T19 = 659
$T20 = 662
$T21 = 664
$T22 = 680
$T23 = 684
$T24 = 696
$T25 = 708
$T26 = 720
$T27 = 732
$T28 = 744
$T29 = 760
$T30 = 776
$T31 = 784
$T32 = 800
tv67 = 816
tv73 = 824
tv147 = 832
tv158 = 840
tv166 = 848
tv177 = 856
tv182 = 864
tv214 = 872
__$ArrayPad$ = 880
?dtor$0@?0??test_ctr@@YAHXZ@4HA PROC			; `test_ctr'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR v1$[rbp]
	call	??1?$vector@U?$tmat3x3@M$0A@@glm@@V?$allocator@U?$tmat3x3@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >::~vector<glm::tmat3x3<float,0>,std::allocator<glm::tmat3x3<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_ctr@@YAHXZ@4HA ENDP			; `test_ctr'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
m1_copy$ = 40
__$ArrayPad$ = 96
__$ReturnUdt$ = 144
m1$ = 152
m2$ = 160
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 543  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 544  : 		tmat3x3<T, P> m1_copy(m1);

	lea	rax, QWORD PTR m1_copy$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m1$[rsp]
	mov	ecx, 36					; 00000024H
	rep movsb

; 545  : 		return m1_copy /= m2;

	mov	rdx, QWORD PTR m2$[rsp]
	lea	rcx, QWORD PTR m1_copy$[rsp]
	call	??$?_0M@?$tmat3x3@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat3x3<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec3>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 12
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA00$ = 32
SrcA01$ = 36
SrcA02$ = 40
SrcA10$ = 44
SrcA11$ = 48
SrcA12$ = 52
SrcA20$ = 56
SrcA21$ = 60
SrcA22$ = 64
SrcB00$ = 68
SrcB01$ = 72
SrcB02$ = 76
SrcB10$ = 80
SrcB11$ = 84
SrcB12$ = 88
SrcB20$ = 92
SrcB21$ = 96
SrcB22$ = 100
Result$ = 120
tv216 = 176
tv227 = 180
tv238 = 184
tv249 = 188
tv260 = 192
tv271 = 196
tv282 = 200
tv293 = 204
tv304 = 208
__$ArrayPad$ = 216
__$ReturnUdt$ = 256
m1$ = 264
m2$ = 272
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 447  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 448  : 		T const SrcA00 = m1[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA00$[rsp], xmm0

; 449  : 		T const SrcA01 = m1[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA01$[rsp], xmm0

; 450  : 		T const SrcA02 = m1[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA02$[rsp], xmm0

; 451  : 		T const SrcA10 = m1[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA10$[rsp], xmm0

; 452  : 		T const SrcA11 = m1[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA11$[rsp], xmm0

; 453  : 		T const SrcA12 = m1[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA12$[rsp], xmm0

; 454  : 		T const SrcA20 = m1[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA20$[rsp], xmm0

; 455  : 		T const SrcA21 = m1[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA21$[rsp], xmm0

; 456  : 		T const SrcA22 = m1[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA22$[rsp], xmm0

; 457  : 
; 458  : 		T const SrcB00 = m2[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB00$[rsp], xmm0

; 459  : 		T const SrcB01 = m2[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB01$[rsp], xmm0

; 460  : 		T const SrcB02 = m2[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB02$[rsp], xmm0

; 461  : 		T const SrcB10 = m2[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB10$[rsp], xmm0

; 462  : 		T const SrcB11 = m2[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB11$[rsp], xmm0

; 463  : 		T const SrcB12 = m2[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB12$[rsp], xmm0

; 464  : 		T const SrcB20 = m2[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB20$[rsp], xmm0

; 465  : 		T const SrcB21 = m2[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB21$[rsp], xmm0

; 466  : 		T const SrcB22 = m2[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB22$[rsp], xmm0

; 467  : 
; 468  : 		tmat3x3<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 469  : 		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv216[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv216[rsp]
	movss	DWORD PTR [rax], xmm0

; 470  : 		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv227[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv227[rsp]
	movss	DWORD PTR [rax], xmm0

; 471  : 		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv238[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv238[rsp]
	movss	DWORD PTR [rax], xmm0

; 472  : 		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv249[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv249[rsp]
	movss	DWORD PTR [rax], xmm0

; 473  : 		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv260[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv260[rsp]
	movss	DWORD PTR [rax], xmm0

; 474  : 		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv271[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv271[rsp]
	movss	DWORD PTR [rax], xmm0

; 475  : 		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv282[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv282[rsp]
	movss	DWORD PTR [rax], xmm0

; 476  : 		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv293[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv293[rsp]
	movss	DWORD PTR [rax], xmm0

; 477  : 		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv304[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv304[rsp]
	movss	DWORD PTR [rax], xmm0

; 478  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 479  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat3x3>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat3x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Error$ = 32
Matrix$8 = 56
Inverse$9 = 120
Identity$10 = 184
Matrix$11 = 248
Identity$12 = 312
$T13 = 368
$T14 = 380
$T15 = 392
$T16 = 404
$T17 = 416
$T18 = 428
$T19 = 432
$T20 = 444
$T21 = 456
$T22 = 460
$T23 = 472
$T24 = 484
$T25 = 488
$T26 = 500
$T27 = 512
$T28 = 524
$T29 = 536
$T30 = 548
$T31 = 552
$T32 = 564
$T33 = 576
$T34 = 580
$T35 = 592
$T36 = 604
tv67 = 608
tv73 = 616
tv91 = 624
tv95 = 632
tv140 = 640
tv145 = 648
tv149 = 656
tv162 = 664
tv167 = 672
tv171 = 680
tv184 = 688
tv189 = 696
tv195 = 704
tv211 = 712
tv215 = 720
tv228 = 728
tv233 = 736
tv237 = 744
tv250 = 752
tv255 = 760
tv259 = 768
tv272 = 776
__$ArrayPad$ = 784
?test_inverse@@YAHXZ PROC				; test_inverse

; 60   : {

$LN15:
	push	rdi
	sub	rsp, 800				; 00000320H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 192				; 000000c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 61   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 62   : 
; 63   : 	{
; 64   : 		glm::mat3 const Matrix(

	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv73[rsp], rax
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$8[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 65   : 			glm::vec3(0.6f, 0.2f, 0.3f), 
; 66   : 			glm::vec3(0.2f, 0.7f, 0.5f), 
; 67   : 			glm::vec3(0.3f, 0.5f, 0.7f));
; 68   : 		glm::mat3 const Inverse = glm::inverse(Matrix);

	lea	rdx, QWORD PTR Matrix$8[rsp]
	lea	rcx, QWORD PTR Inverse$9[rsp]
	call	??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat3x3>

; 69   : 		glm::mat3 const Identity = Matrix * Inverse;

	lea	r8, QWORD PTR Inverse$9[rsp]
	lea	rdx, QWORD PTR Matrix$8[rsp]
	lea	rcx, QWORD PTR Identity$10[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 70   : 
; 71   : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::vec3(1.0f, 0.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv91[rsp], rax
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv95[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$10[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv91[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv95[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_inver
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN4@test_inver
$LN3@test_inver:
	mov	DWORD PTR tv140[rsp], 1
$LN4@test_inver:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 72   : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::vec3(0.0f, 1.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T19[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv145[rsp], rax
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv149[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$10[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv145[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv149[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_inver
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN6@test_inver
$LN5@test_inver:
	mov	DWORD PTR tv162[rsp], 1
$LN6@test_inver:
	mov	eax, DWORD PTR tv162[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::vec3(0.0f, 0.0f, 1.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv167[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv171[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$10[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv171[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_inver
	mov	DWORD PTR tv184[rsp], 0
	jmp	SHORT $LN8@test_inver
$LN7@test_inver:
	mov	DWORD PTR tv184[rsp], 1
$LN8@test_inver:
	mov	eax, DWORD PTR tv184[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 	}
; 75   : 
; 76   : 	{
; 77   : 		glm::mat3 const Matrix(

	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv189[rsp], rax
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv195[rsp], rax
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv189[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv195[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$11[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 78   : 			glm::vec3(0.6f, 0.2f, 0.3f), 
; 79   : 			glm::vec3(0.2f, 0.7f, 0.5f), 
; 80   : 			glm::vec3(0.3f, 0.5f, 0.7f));
; 81   : 		glm::mat3 const Identity = Matrix / Matrix;

	lea	r8, QWORD PTR Matrix$11[rsp]
	lea	rdx, QWORD PTR Matrix$11[rsp]
	lea	rcx, QWORD PTR Identity$12[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>

; 82   : 
; 83   : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::vec3(1.0f, 0.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv211[rsp], rax
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv215[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$12[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv211[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv215[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_inver
	mov	DWORD PTR tv228[rsp], 0
	jmp	SHORT $LN10@test_inver
$LN9@test_inver:
	mov	DWORD PTR tv228[rsp], 1
$LN10@test_inver:
	mov	eax, DWORD PTR tv228[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 84   : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::vec3(0.0f, 1.0f, 0.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv233[rsp], rax
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv237[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$12[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv233[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv237[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_inver
	mov	DWORD PTR tv250[rsp], 0
	jmp	SHORT $LN12@test_inver
$LN11@test_inver:
	mov	DWORD PTR tv250[rsp], 1
$LN12@test_inver:
	mov	eax, DWORD PTR tv250[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 85   : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::vec3(0.0f, 0.0f, 1.0f), glm::vec3(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv255[rsp], rax
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv259[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$12[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv255[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv259[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_inver
	mov	DWORD PTR tv272[rsp], 0
	jmp	SHORT $LN14@test_inver
$LN13@test_inver:
	mov	DWORD PTR tv272[rsp], 1
$LN14@test_inver:
	mov	eax, DWORD PTR tv272[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 86   : 	}
; 87   : 
; 88   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 89   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 800				; 00000320H
	pop	rdi
	ret	0
?test_inverse@@YAHXZ ENDP				; test_inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv129 = 56
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 552  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 553  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv129[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv129[rsp]

; 554  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv129 = 56
m1$ = 80
m2$ = 88
??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 558  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 559  : 		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv129[rsp], 1
$LN4@operator:
	movzx	eax, BYTE PTR tv129[rsp]

; 560  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
tv74 = 80
__$ReturnUdt$ = 112
m$ = 120
scalar$ = 128
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 412  : 		return tmat3x3<T, P>(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 413  : 			m[0] * scalar,
; 414  : 			m[1] * scalar,
; 415  : 			m[2] * scalar);
; 416  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
tv74 = 80
__$ReturnUdt$ = 112
scalar$ = 120
m$ = 128
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 420  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 421  : 		return tmat3x3<T, P>(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 422  : 			m[0] * scalar,
; 423  : 			m[1] * scalar,
; 424  : 			m[2] * scalar);
; 425  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
tv74 = 80
__$ReturnUdt$ = 112
m$ = 120
scalar$ = 128
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 513  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 514  : 		return tmat3x3<T, P>(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	movss	xmm2, DWORD PTR scalar$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 515  : 			m[0] / scalar,
; 516  : 			m[1] / scalar,
; 517  : 			m[2] / scalar);
; 518  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
tv74 = 80
__$ReturnUdt$ = 112
scalar$ = 120
m$ = 128
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z PROC	; glm::operator/<float,0>, COMDAT

; 522  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 523  : 		return tmat3x3<T, P>(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	r8, rax
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	r8, rax
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	r8, rax
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 524  : 			scalar / m[0],
; 525  : 			scalar / m[1],
; 526  : 			scalar / m[2]);
; 527  : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z
_TEXT	SEGMENT
tv73 = 32
tv82 = 36
tv91 = 40
tv132 = 44
tv141 = 48
tv150 = 52
tv159 = 56
tv168 = 60
__$ReturnUdt$ = 80
v$ = 88
m$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z PROC ; glm::operator*<float,0>, COMDAT

; 438  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 439  : 		return typename tmat3x3<T, P>::row_type(

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv73[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv82[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv91[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv132[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv132[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv141[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv141[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv150[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv159[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv159[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv168[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv168[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv91[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv150[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 440  : 			m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z,
; 441  : 			m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z,
; 442  : 			m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z);
; 443  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
tv82 = 36
tv91 = 40
tv132 = 44
tv141 = 48
tv150 = 52
tv159 = 56
tv168 = 60
__$ReturnUdt$ = 80
m$ = 88
v$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 429  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 430  : 		return typename tmat3x3<T, P>::col_type(

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv73[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv82[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv91[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv132[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv132[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv141[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv141[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv150[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR tv159[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	xmm1, DWORD PTR tv159[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv168[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	xmm1, DWORD PTR tv168[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv91[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv150[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 431  : 			m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
; 432  : 			m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
; 433  : 			m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);
; 434  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
this$ = 112
s$ = 120
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 48   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 49   : 		this->value[0] = col_type(s, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 		this->value[2] = col_type(0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 53   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 44   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 46   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
this$ = 96
scalar$ = 104
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 45   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
scalar$ = 88
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 167  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 168  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 168				; 000000a8H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 169  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 170  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
Zero$ = 48
$T1 = 52
$T2 = 68
this$ = 128
scalar$ = 136
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		value_type const Zero(0);

	xorps	xmm0, xmm0
	movss	DWORD PTR Zero$[rsp], xmm0

; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scalar$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 46   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 225  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 226  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 226				; 000000e2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 227  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
this$ = 80
scalar$ = 88
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 55   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 57   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 60   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 128
scalar$ = 136
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 191  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 192  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 192				; 000000c0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 193  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 194  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 64
m$ = 72
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 181  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 182  : 		this->value[0] = m[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 183  : 		this->value[1] = m[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 184  : 		this->value[2] = m[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 185  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 173  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 174  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 175  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 176  : 		this->value[2] = col_type(m[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 177  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 165  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 166  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 167  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 168  : 		this->value[2] = col_type(m[2], 1);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	r8d, 1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 169  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 157  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 158  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 159  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 160  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 161  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 149  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 150  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 151  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 152  : 		this->value[2] = col_type(m[2], 1);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	r8d, 1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 153  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
m$ = 88
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 142  : 		this->value[0] = m[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 143  : 		this->value[1] = m[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 144  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 145  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 133  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 134  : 		this->value[0] = col_type(m[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 135  : 		this->value[1] = col_type(m[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 136  : 		this->value[2] = col_type(m[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0M$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec3<float,0>::tvec3<float,0><float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 137  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat4x4@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
m$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 125  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 126  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 127  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec3@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@H@Z ; glm::tvec3<float,0>::tvec3<float,0><float,int,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 128  : 		this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 129  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 73   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 74   : 		this->value[0] = v0;

	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 12
	rep movsb

; 75   : 		this->value[1] = v1;

	mov	eax, 12
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 12
	rep movsb

; 76   : 		this->value[2] = v2;

	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 12
	rep movsb

; 77   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
scalar$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 47   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 43   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 18   : #			endif
; 19   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
l$ = 40
m$ = 104
u$ = 168
v$ = 216
x$ = 244
a$ = 264
b$ = 312
n$ = 360
o$ = 424
p$ = 488
q$ = 552
R$ = 596
S$ = 597
tv132 = 608
__$ArrayPad$ = 616
?test_operators@@YAHXZ PROC				; test_operators

; 41   : {

	push	rdi
	sub	rsp, 624				; 00000270H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 42   : 	glm::mat3x3 l(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR l$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 43   : 	glm::mat3x3 m(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 44   : 	glm::vec3 u(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR u$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 45   : 	glm::vec3 v(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 46   : 	float x = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR x$[rsp], xmm0

; 47   : 	glm::vec3 a = m * u;

	lea	r8, QWORD PTR u$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 48   : 	glm::vec3 b = v * m;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tmat3x3@M$0A@@0@@Z ; glm::operator*<float,0>

; 49   : 	glm::mat3x3 n = x / m;

	lea	r8, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR n$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>

; 50   : 	glm::mat3x3 o = m / x;

	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>

; 51   : 	glm::mat3x3 p = x * m;

	lea	r8, QWORD PTR m$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>

; 52   : 	glm::mat3x3 q = m * x;

	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR q$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>

; 53   : 	bool R = m != q;

	lea	rdx, QWORD PTR q$[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?9M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ; glm::operator!=<float,0>
	mov	BYTE PTR R$[rsp], al

; 54   : 	bool S = m == l;

	lea	rdx, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	mov	BYTE PTR S$[rsp], al

; 55   : 
; 56   : 	return (S && !R) ? 0 : 1;

	movzx	eax, BYTE PTR S$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_opera
	movzx	eax, BYTE PTR R$[rsp]
	test	eax, eax
	jne	SHORT $LN3@test_opera
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN4@test_opera
$LN3@test_opera:
	mov	DWORD PTR tv132[rsp], 1
$LN4@test_opera:
	mov	eax, DWORD PTR tv132[rsp]

; 57   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_operators@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 624				; 00000270H
	pop	rdi
	ret	0
?test_operators@@YAHXZ ENDP				; test_operators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA00$ = 32
SrcA01$ = 40
SrcA02$ = 48
SrcA10$ = 56
SrcA11$ = 64
SrcA12$ = 72
SrcA20$ = 80
SrcA21$ = 88
SrcA22$ = 96
SrcB00$ = 104
SrcB01$ = 112
SrcB02$ = 120
SrcB10$ = 128
SrcB11$ = 136
SrcB12$ = 144
SrcB20$ = 152
SrcB21$ = 160
SrcB22$ = 168
Result$ = 192
tv216 = 288
tv227 = 296
tv238 = 304
tv249 = 312
tv260 = 320
tv271 = 328
tv282 = 336
tv293 = 344
tv304 = 352
__$ArrayPad$ = 360
__$ReturnUdt$ = 400
m1$ = 408
m2$ = 416
??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 447  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+400]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 448  : 		T const SrcA00 = m1[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA00$[rsp], xmm0

; 449  : 		T const SrcA01 = m1[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA01$[rsp], xmm0

; 450  : 		T const SrcA02 = m1[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA02$[rsp], xmm0

; 451  : 		T const SrcA10 = m1[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA10$[rsp], xmm0

; 452  : 		T const SrcA11 = m1[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA11$[rsp], xmm0

; 453  : 		T const SrcA12 = m1[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA12$[rsp], xmm0

; 454  : 		T const SrcA20 = m1[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA20$[rsp], xmm0

; 455  : 		T const SrcA21 = m1[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA21$[rsp], xmm0

; 456  : 		T const SrcA22 = m1[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcA22$[rsp], xmm0

; 457  : 
; 458  : 		T const SrcB00 = m2[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB00$[rsp], xmm0

; 459  : 		T const SrcB01 = m2[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB01$[rsp], xmm0

; 460  : 		T const SrcB02 = m2[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB02$[rsp], xmm0

; 461  : 		T const SrcB10 = m2[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB10$[rsp], xmm0

; 462  : 		T const SrcB11 = m2[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB11$[rsp], xmm0

; 463  : 		T const SrcB12 = m2[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB12$[rsp], xmm0

; 464  : 		T const SrcB20 = m2[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB20$[rsp], xmm0

; 465  : 		T const SrcB21 = m2[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB21$[rsp], xmm0

; 466  : 		T const SrcB22 = m2[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR SrcB22$[rsp], xmm0

; 467  : 
; 468  : 		tmat3x3<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>

; 469  : 		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;

	movsd	xmm0, QWORD PTR SrcA00$[rsp]
	mulsd	xmm0, QWORD PTR SrcB00$[rsp]
	movsd	xmm1, QWORD PTR SrcA10$[rsp]
	mulsd	xmm1, QWORD PTR SrcB01$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA20$[rsp]
	mulsd	xmm1, QWORD PTR SrcB02$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv216[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv216[rsp]
	movsd	QWORD PTR [rax], xmm0

; 470  : 		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;

	movsd	xmm0, QWORD PTR SrcA01$[rsp]
	mulsd	xmm0, QWORD PTR SrcB00$[rsp]
	movsd	xmm1, QWORD PTR SrcA11$[rsp]
	mulsd	xmm1, QWORD PTR SrcB01$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA21$[rsp]
	mulsd	xmm1, QWORD PTR SrcB02$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv227[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv227[rsp]
	movsd	QWORD PTR [rax], xmm0

; 471  : 		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;

	movsd	xmm0, QWORD PTR SrcA02$[rsp]
	mulsd	xmm0, QWORD PTR SrcB00$[rsp]
	movsd	xmm1, QWORD PTR SrcA12$[rsp]
	mulsd	xmm1, QWORD PTR SrcB01$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA22$[rsp]
	mulsd	xmm1, QWORD PTR SrcB02$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv238[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv238[rsp]
	movsd	QWORD PTR [rax], xmm0

; 472  : 		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;

	movsd	xmm0, QWORD PTR SrcA00$[rsp]
	mulsd	xmm0, QWORD PTR SrcB10$[rsp]
	movsd	xmm1, QWORD PTR SrcA10$[rsp]
	mulsd	xmm1, QWORD PTR SrcB11$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA20$[rsp]
	mulsd	xmm1, QWORD PTR SrcB12$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv249[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv249[rsp]
	movsd	QWORD PTR [rax], xmm0

; 473  : 		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;

	movsd	xmm0, QWORD PTR SrcA01$[rsp]
	mulsd	xmm0, QWORD PTR SrcB10$[rsp]
	movsd	xmm1, QWORD PTR SrcA11$[rsp]
	mulsd	xmm1, QWORD PTR SrcB11$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA21$[rsp]
	mulsd	xmm1, QWORD PTR SrcB12$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv260[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv260[rsp]
	movsd	QWORD PTR [rax], xmm0

; 474  : 		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;

	movsd	xmm0, QWORD PTR SrcA02$[rsp]
	mulsd	xmm0, QWORD PTR SrcB10$[rsp]
	movsd	xmm1, QWORD PTR SrcA12$[rsp]
	mulsd	xmm1, QWORD PTR SrcB11$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA22$[rsp]
	mulsd	xmm1, QWORD PTR SrcB12$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv271[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv271[rsp]
	movsd	QWORD PTR [rax], xmm0

; 475  : 		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;

	movsd	xmm0, QWORD PTR SrcA00$[rsp]
	mulsd	xmm0, QWORD PTR SrcB20$[rsp]
	movsd	xmm1, QWORD PTR SrcA10$[rsp]
	mulsd	xmm1, QWORD PTR SrcB21$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA20$[rsp]
	mulsd	xmm1, QWORD PTR SrcB22$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv282[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv282[rsp]
	movsd	QWORD PTR [rax], xmm0

; 476  : 		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;

	movsd	xmm0, QWORD PTR SrcA01$[rsp]
	mulsd	xmm0, QWORD PTR SrcB20$[rsp]
	movsd	xmm1, QWORD PTR SrcA11$[rsp]
	mulsd	xmm1, QWORD PTR SrcB21$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA21$[rsp]
	mulsd	xmm1, QWORD PTR SrcB22$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv293[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv293[rsp]
	movsd	QWORD PTR [rax], xmm0

; 477  : 		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;

	movsd	xmm0, QWORD PTR SrcA02$[rsp]
	mulsd	xmm0, QWORD PTR SrcB20$[rsp]
	movsd	xmm1, QWORD PTR SrcA12$[rsp]
	mulsd	xmm1, QWORD PTR SrcB21$[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR SrcA22$[rsp]
	mulsd	xmm1, QWORD PTR SrcB22$[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv304[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR tv304[rsp]
	movsd	QWORD PTR [rax], xmm0

; 478  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 72					; 00000048H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 479  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z PROC ; glm::inverse<double,0,glm::tmat3x3>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat3x3@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,double,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z ENDP ; glm::inverse<double,0,glm::tmat3x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><float,float,float>, COMDAT

; 80   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtss2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtss2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtss2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
Mat0$ = 48
Inv0$ = 160
Res0$ = 272
$T6 = 368
$T7 = 392
$T8 = 416
tv67 = 440
tv73 = 448
__$ArrayPad$ = 456
?test_mat3x3@@YAHXZ PROC				; test_mat3x3

; 25   : {

$LN3:
	push	rdi
	sub	rsp, 464				; 000001d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 26   : 	glm::dmat3 Mat0(

	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<double,0>::tvec3<double,0><float,float,float>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<double,0>::tvec3<double,0><float,float,float>
	mov	QWORD PTR tv73[rsp], rax
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0MMM@?$tvec3@N$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<double,0>::tvec3<double,0><float,float,float>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv73[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Mat0$[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z ; glm::tmat3x3<double,0>::tmat3x3<double,0>

; 27   : 		glm::dvec3(0.6f, 0.2f, 0.3f), 
; 28   : 		glm::dvec3(0.2f, 0.7f, 0.5f), 
; 29   : 		glm::dvec3(0.3f, 0.5f, 0.7f));
; 30   : 	glm::dmat3 Inv0 = glm::inverse(Mat0);

	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$inverse@N$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@@Z ; glm::inverse<double,0,glm::tmat3x3>

; 31   : 	glm::dmat3 Res0 = Mat0 * Inv0;

	lea	r8, QWORD PTR Inv0$[rsp]
	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Res0$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tmat3x3@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 32   : 
; 33   : 	print(Mat0);

	lea	rcx, QWORD PTR Mat0$[rsp]
	call	?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z	; print

; 34   : 	print(Inv0);

	lea	rcx, QWORD PTR Inv0$[rsp]
	call	?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z	; print

; 35   : 	print(Res0);

	lea	rcx, QWORD PTR Res0$[rsp]
	call	?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z	; print

; 36   : 
; 37   : 	return 0;

	xor	eax, eax

; 38   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_mat3x3@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 464				; 000001d0H
	pop	rdi
	ret	0
?test_mat3x3@@YAHXZ ENDP				; test_mat3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat3x3<double,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z PROC ; glm::tmat3x3<double,0>::operator[], COMDAT

; 191  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 192  : 		assert(i < this->length());

	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 192				; 000000c0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 193  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 194  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@N$0A@@glm@@QEAAAEAU?$tvec3@N$0A@@1@H@Z ENDP ; glm::tmat3x3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<double,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z PROC ; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 73   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 3
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 74   : 		this->value[0] = v0;

	mov	eax, 24
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 24
	rep movsb

; 75   : 		this->value[1] = v1;

	mov	eax, 24
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 24
	rep movsb

; 76   : 		this->value[2] = v2;

	mov	eax, 24
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 24
	rep movsb

; 77   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@AEBU?$tvec3@N$0A@@1@00@Z ENDP ; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 43   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 3
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
this$ = 144
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 3
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 18   : #			endif
; 19   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat3x3.cpp
_TEXT	SEGMENT
tv70 = 32
tv77 = 40
tv92 = 48
tv131 = 56
tv146 = 64
tv153 = 72
Mat0$ = 96
?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z PROC		; print

; 17   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 18   : 	printf("mat3(\n");

	lea	rcx, OFFSET FLAT:$SG27878
	call	printf

; 19   : 	printf("\tvec3(%2.3f, %2.3f, %2.3f)\n", Mat0[0][0], Mat0[0][1], Mat0[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv77[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv70[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv77[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG27879
	call	printf

; 20   : 	printf("\tvec3(%2.3f, %2.3f, %2.3f)\n", Mat0[1][0], Mat0[1][1], Mat0[1][2]);

	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv92[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv92[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv131[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG27880
	call	printf

; 21   : 	printf("\tvec3(%2.3f, %2.3f, %2.3f))\n\n", Mat0[2][0], Mat0[2][1], Mat0[2][2]);

	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv146[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv153[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat3x3@N$0A@@glm@@QEBAAEBU?$tvec3@N$0A@@1@H@Z ; glm::tmat3x3<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	rcx, QWORD PTR tv146[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv153[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG27881
	call	printf

; 22   : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?print@@YAXAEBU?$tmat3x3@N$0A@@glm@@@Z ENDP		; print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
