; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG51619 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 'n'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+4
$SG51620 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?exp@@YAMM@Z					; exp
PUBLIC	?log@@YAMM@Z					; log
PUBLIC	?log2@@YAMM@Z					; log2
PUBLIC	?nextafter@@YAMMM@Z				; nextafter
PUBLIC	?pow@@YAMMM@Z					; pow
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?max@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::max
PUBLIC	??$next_float@M@glm@@YAMAEBM@Z			; glm::next_float<float>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?test_pow@@YAHXZ				; test_pow
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec1>
PUBLIC	??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec2>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec3>
PUBLIC	??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec4>
PUBLIC	?test_exp@@YAHXZ				; test_exp
PUBLIC	??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec1>
PUBLIC	??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec2>
PUBLIC	??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec3>
PUBLIC	??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec4>
PUBLIC	?test_log@@YAHXZ				; test_log
PUBLIC	??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec1>
PUBLIC	??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec2>
PUBLIC	??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec3>
PUBLIC	??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec4>
PUBLIC	?test_exp2@@YAHXZ				; test_exp2
PUBLIC	??$exp2@M@glm@@YAMM@Z				; glm::exp2<float>
PUBLIC	??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec1>
PUBLIC	??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec2>
PUBLIC	??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec3>
PUBLIC	??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec4>
PUBLIC	?test_log2@@YAHXZ				; test_log2
PUBLIC	??$log2@M@glm@@YAMM@Z				; glm::log2<float>
PUBLIC	??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec1>
PUBLIC	??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec2>
PUBLIC	??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec3>
PUBLIC	??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec4>
PUBLIC	?test_sqrt@@YAHXZ				; test_sqrt
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec1>
PUBLIC	??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec2>
PUBLIC	??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec3>
PUBLIC	??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec4>
PUBLIC	?test_inversesqrt@@YAHXZ			; test_inversesqrt
PUBLIC	??0?$tvec1@M$01@glm@@QEAA@M@Z			; glm::tvec1<float,2>::tvec1<float,2>
PUBLIC	??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z ; glm::inversesqrt<float,2,glm::tvec1>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$float_distance@M@glm@@YAIAEBM0@Z		; glm::float_distance<float>
PUBLIC	??$max@I@glm@@YAIII@Z				; glm::max<unsigned int>
PUBLIC	main
PUBLIC	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
PUBLIC	?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec2,1,0>::call
PUBLIC	?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec3,1,0>::call
PUBLIC	?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec1,float,0,0>::call
PUBLIC	?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z	; glm::operator*<float,2>
PUBLIC	??0?$tvec1@I$01@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
PUBLIC	??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z	; glm::operator>><unsigned int,2>
PUBLIC	??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z	; glm::operator-<unsigned int,2>
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z	; glm::operator*<float,2>
PUBLIC	??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z	; glm::operator-<float,2>
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f317218
PUBLIC	__real@3f800000
PUBLIC	__real@3f8147ae
PUBLIC	__real@3fc00000
PUBLIC	__real@41200000
PUBLIC	__real@41f00000
PUBLIC	__real@7f7fffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	__imp_log2f:PROC
EXTRN	__imp_nextafterf:PROC
EXTRN	__imp_expf:PROC
EXTRN	__imp_logf:PROC
EXTRN	__imp_powf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?exp@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?exp@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?log@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log2@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?log2@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?nextafter@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?nextafter@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pow@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?pow@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?max@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$next_float@M@glm@@YAMAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$next_float@M@glm@@YAMAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_pow@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+392
	DD	imagerel $unwind$?test_pow@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_exp@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$?test_exp@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_log@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$?test_log@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_exp2@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$?test_exp2@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp2@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$exp2@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_log2@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$?test_log2@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$log2@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_sqrt@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+469
	DD	imagerel $unwind$?test_sqrt@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inversesqrt@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+302
	DD	imagerel $unwind$?test_inversesqrt@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$01@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$inversesqrt@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$float_distance@M@glm@@YAIAEBM0@Z DD imagerel $LN13
	DD	imagerel $LN13+263
	DD	imagerel $unwind$??$float_distance@M@glm@@YAIAEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@I@glm@@YAIII@Z DD imagerel $LN5
	DD	imagerel $LN5+48
	DD	imagerel $unwind$??$max@I@glm@@YAIII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+350
	DD	imagerel $unwind$?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$01@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$01@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f317218
CONST	SEGMENT
__real@3f317218 DD 03f317218r			; 0.693147
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$01@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z DD 032b01H
	DD	0160112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$0 DB 074H ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	DB	06dH
	DB	070H
	DB	00H
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$1 DB 078H ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	DB	068H
	DB	061H
	DB	06cH
	DB	066H
	DB	00H
	ORG $+2
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$2 DB 069H ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	DB	00H
	ORG $+2
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcVarDesc DD 064H ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcName$0
	ORG $+144
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcFrameData DD 03H ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@I@glm@@YAIII@Z DD 020d01H
	DD	07009120dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$float_distance@M@glm@@YAIAEBM0@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$0 DB 074H	; glm::float_distance<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$1 DB 074H	; glm::float_distance<float>
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$float_distance@M@glm@@YAIAEBM0@Z$rtcVarDesc DD 054H	; glm::float_distance<float>
	DD	04H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcName$0
	ORG $+96
??$float_distance@M@glm@@YAIAEBM0@Z$rtcFrameData DD 02H	; glm::float_distance<float>
	DD	00H
	DQ	FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$01@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log2@M@glm@@YAMM@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp2@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
xdata	SEGMENT
$unwind$?test_pow@@YAHXZ DD 031a01H
	DD	0280109H
	DD	07002H
$unwind$?test_exp@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?test_log@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?test_exp2@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?test_log2@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?test_sqrt@@YAHXZ DD 031a01H
	DD	0260109H
	DD	07002H
$unwind$?test_inversesqrt@@YAHXZ DD 031a01H
	DD	0120109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?test_pow@@YAHXZ$rtcName$0 DB 042H			; test_pow
	DB	00H
	ORG $+2
?test_pow@@YAHXZ$rtcName$1 DB 043H			; test_pow
	DB	00H
	ORG $+2
?test_pow@@YAHXZ$rtcName$2 DB 044H			; test_pow
	DB	00H
	ORG $+2
?test_pow@@YAHXZ$rtcName$3 DB 045H			; test_pow
	DB	00H
	ORG $+2
?test_pow@@YAHXZ$rtcVarDesc DD 0a8H			; test_pow
	DD	010H
	DQ	FLAT:?test_pow@@YAHXZ$rtcName$3
	DD	078H
	DD	0cH
	DQ	FLAT:?test_pow@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_pow@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_pow@@YAHXZ$rtcName$0
	ORG $+192
?test_pow@@YAHXZ$rtcFrameData DD 04H			; test_pow
	DD	00H
	DQ	FLAT:?test_pow@@YAHXZ$rtcVarDesc
?test_exp@@YAHXZ$rtcName$0 DB 042H			; test_exp
	DB	00H
	ORG $+2
?test_exp@@YAHXZ$rtcName$1 DB 043H			; test_exp
	DB	00H
	ORG $+2
?test_exp@@YAHXZ$rtcName$2 DB 044H			; test_exp
	DB	00H
	ORG $+2
?test_exp@@YAHXZ$rtcName$3 DB 045H			; test_exp
	DB	00H
	ORG $+2
?test_exp@@YAHXZ$rtcVarDesc DD 0a8H			; test_exp
	DD	010H
	DQ	FLAT:?test_exp@@YAHXZ$rtcName$3
	DD	078H
	DD	0cH
	DQ	FLAT:?test_exp@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_exp@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_exp@@YAHXZ$rtcName$0
	ORG $+192
?test_exp@@YAHXZ$rtcFrameData DD 04H			; test_exp
	DD	00H
	DQ	FLAT:?test_exp@@YAHXZ$rtcVarDesc
?test_log@@YAHXZ$rtcName$0 DB 042H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcName$1 DB 043H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcName$2 DB 044H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcName$3 DB 045H			; test_log
	DB	00H
	ORG $+2
?test_log@@YAHXZ$rtcVarDesc DD 0a8H			; test_log
	DD	010H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$3
	DD	078H
	DD	0cH
	DQ	FLAT:?test_log@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_log@@YAHXZ$rtcName$0
	ORG $+192
?test_log@@YAHXZ$rtcFrameData DD 04H			; test_log
	DD	00H
	DQ	FLAT:?test_log@@YAHXZ$rtcVarDesc
?test_exp2@@YAHXZ$rtcName$0 DB 042H			; test_exp2
	DB	00H
	ORG $+2
?test_exp2@@YAHXZ$rtcName$1 DB 043H			; test_exp2
	DB	00H
	ORG $+2
?test_exp2@@YAHXZ$rtcName$2 DB 044H			; test_exp2
	DB	00H
	ORG $+2
?test_exp2@@YAHXZ$rtcName$3 DB 045H			; test_exp2
	DB	00H
	ORG $+2
?test_exp2@@YAHXZ$rtcVarDesc DD 0a8H			; test_exp2
	DD	010H
	DQ	FLAT:?test_exp2@@YAHXZ$rtcName$3
	DD	078H
	DD	0cH
	DQ	FLAT:?test_exp2@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_exp2@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_exp2@@YAHXZ$rtcName$0
	ORG $+192
?test_exp2@@YAHXZ$rtcFrameData DD 04H			; test_exp2
	DD	00H
	DQ	FLAT:?test_exp2@@YAHXZ$rtcVarDesc
?test_log2@@YAHXZ$rtcName$0 DB 042H			; test_log2
	DB	00H
	ORG $+2
?test_log2@@YAHXZ$rtcName$1 DB 043H			; test_log2
	DB	00H
	ORG $+2
?test_log2@@YAHXZ$rtcName$2 DB 044H			; test_log2
	DB	00H
	ORG $+2
?test_log2@@YAHXZ$rtcName$3 DB 045H			; test_log2
	DB	00H
	ORG $+2
?test_log2@@YAHXZ$rtcVarDesc DD 0a8H			; test_log2
	DD	010H
	DQ	FLAT:?test_log2@@YAHXZ$rtcName$3
	DD	078H
	DD	0cH
	DQ	FLAT:?test_log2@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_log2@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_log2@@YAHXZ$rtcName$0
	ORG $+192
?test_log2@@YAHXZ$rtcFrameData DD 04H			; test_log2
	DD	00H
	DQ	FLAT:?test_log2@@YAHXZ$rtcVarDesc
?test_sqrt@@YAHXZ$rtcName$0 DB 042H			; test_sqrt
	DB	00H
	ORG $+2
?test_sqrt@@YAHXZ$rtcName$1 DB 043H			; test_sqrt
	DB	00H
	ORG $+2
?test_sqrt@@YAHXZ$rtcName$2 DB 044H			; test_sqrt
	DB	00H
	ORG $+2
?test_sqrt@@YAHXZ$rtcName$3 DB 045H			; test_sqrt
	DB	00H
	ORG $+2
?test_sqrt@@YAHXZ$rtcVarDesc DD 0d8H			; test_sqrt
	DD	010H
	DQ	FLAT:?test_sqrt@@YAHXZ$rtcName$3
	DD	0a8H
	DD	0cH
	DQ	FLAT:?test_sqrt@@YAHXZ$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?test_sqrt@@YAHXZ$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:?test_sqrt@@YAHXZ$rtcName$0
	ORG $+192
?test_sqrt@@YAHXZ$rtcFrameData DD 04H			; test_sqrt
	DD	00H
	DQ	FLAT:?test_sqrt@@YAHXZ$rtcVarDesc
?test_inversesqrt@@YAHXZ$rtcName$0 DB 075H		; test_inversesqrt
	DB	00H
	ORG $+2
?test_inversesqrt@@YAHXZ$rtcName$1 DB 06cH		; test_inversesqrt
	DB	06fH
	DB	077H
	DB	070H
	DB	05fH
	DB	076H
	DB	00H
	ORG $+5
?test_inversesqrt@@YAHXZ$rtcName$2 DB 064H		; test_inversesqrt
	DB	065H
	DB	066H
	DB	061H
	DB	075H
	DB	06cH
	DB	074H
	DB	070H
	DB	05fH
	DB	076H
	DB	00H
	ORG $+5
?test_inversesqrt@@YAHXZ$rtcVarDesc DD 074H		; test_inversesqrt
	DD	04H
	DQ	FLAT:?test_inversesqrt@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test_inversesqrt@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_inversesqrt@@YAHXZ$rtcName$0
	ORG $+144
?test_inversesqrt@@YAHXZ$rtcFrameData DD 03H		; test_inversesqrt
	DD	00H
	DQ	FLAT:?test_inversesqrt@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$next_float@M@glm@@YAMAEBM@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pow@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?nextafter@@YAMMM@Z DD 021101H
	DD	0700d5211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log2@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?exp@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z PROC	; glm::operator-<float,2>, COMDAT

; 344  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 345  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	subss	xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$01@glm@@QEAA@M@Z		; glm::tvec1<float,2>::tvec1<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 346  : 			scalar - v.x);
; 347  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z ENDP	; glm::operator-<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$01@glm@@QEAA@M@Z		; glm::tvec1<float,2>::tvec1<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,2>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$01@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z
_TEXT	SEGMENT
tv72 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z PROC	; glm::operator>><unsigned int,2>, COMDAT

; 521  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 522  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v2$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	QWORD PTR tv72[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv72[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$01@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 523  : 			v1.x >> v2.x);
; 524  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z ENDP	; glm::operator>><unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$01@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$01@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$01@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 358  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$01@glm@@QEAA@M@Z		; glm::tvec1<float,2>::tvec1<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 360  : 			v.x * scalar);
; 361  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z
_TEXT	SEGMENT
tmp$ = 36
xhalf$ = 68
p$ = 88
i$ = 100
ptmp$ = 120
$T6 = 128
$T7 = 132
$T8 = 136
$T9 = 140
$T10 = 144
$T11 = 148
$T12 = 152
tv69 = 160
__$ReturnUdt$ = 192
x$ = 200
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z PROC ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call, COMDAT

; 54   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 55   : 			vecType<float, lowp> tmp(x);

	mov	rax, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tmp$[rsp], eax

; 56   : 			vecType<float, lowp> xhalf(tmp * 0.5f);

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR tmp$[rsp]
	lea	rcx, QWORD PTR xhalf$[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>

; 57   : 			vecType<uint, lowp>* p = reinterpret_cast<vecType<uint, lowp>*>(const_cast<vecType<float, lowp>*>(&x));

	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR p$[rsp], rax

; 58   : 			vecType<uint, lowp> i = vecType<uint, lowp>(0x5f375a86) - (*p >> vecType<uint, lowp>(1));

	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec1@I$01@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
	mov	r8, rax
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5I$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z ; glm::operator>><unsigned int,2>
	mov	QWORD PTR tv69[rsp], rax
	mov	edx, 1597463174				; 5f375a86H
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec1@I$01@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,2>::tvec1<unsigned int,2>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR i$[rsp]
	call	??$?GI$01@glm@@YA?AU?$tvec1@I$01@0@AEBU10@0@Z ; glm::operator-<unsigned int,2>

; 59   : 			vecType<float, lowp>* ptmp = reinterpret_cast<vecType<float, lowp>*>(&i);

	lea	rax, QWORD PTR i$[rsp]
	mov	QWORD PTR ptmp$[rsp], rax

; 60   : 			tmp = *ptmp;

	mov	rax, QWORD PTR ptmp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tmp$[rsp], eax

; 61   : 			tmp = tmp * (1.5f - xhalf * tmp * tmp);

	lea	r8, QWORD PTR tmp$[rsp]
	lea	rdx, QWORD PTR xhalf$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	lea	r8, QWORD PTR tmp$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	r8, rax
	movss	xmm1, DWORD PTR __real@3fc00000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec1@M$01@0@MAEBU10@@Z ; glm::operator-<float,2>
	mov	r8, rax
	lea	rdx, QWORD PTR tmp$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec1@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tmp$[rsp], eax

; 62   : 			return tmp;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR tmp$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 63   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z ENDP ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sqrt<glm::tvec4,float,0,0>::call, COMDAT

; 36   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 37   : 			return detail::functor1<T, T, P, vecType>::call(std::sqrt, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?sqrt@@YAMM@Z		; sqrt
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 38   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sqrt<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sqrt<glm::tvec3,float,0,0>::call, COMDAT

; 36   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 37   : 			return detail::functor1<T, T, P, vecType>::call(std::sqrt, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?sqrt@@YAMM@Z		; sqrt
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 38   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sqrt<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sqrt<glm::tvec2,float,0,0>::call, COMDAT

; 36   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 37   : 			return detail::functor1<T, T, P, vecType>::call(std::sqrt, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?sqrt@@YAMM@Z		; sqrt
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 38   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sqrt<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sqrt<glm::tvec1,float,0,0>::call, COMDAT

; 36   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 37   : 			return detail::functor1<T, T, P, vecType>::call(std::sqrt, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?sqrt@@YAMM@Z		; sqrt
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 38   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sqrt<glm::tvec1,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<float,0,glm::tvec4,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	lea	rdx, OFFSET FLAT:?log2@@YAMM@Z		; log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<float,0,glm::tvec3,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	lea	rdx, OFFSET FLAT:?log2@@YAMM@Z		; log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<float,0,glm::tvec3,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<float,0,glm::tvec2,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	lea	rdx, OFFSET FLAT:?log2@@YAMM@Z		; log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<float,0,glm::tvec2,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
vec$ = 56
?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call, COMDAT

; 27   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 28   : 			return detail::functor1<T, T, P, vecType>::call(log2, vec);

	mov	r8, QWORD PTR vec$[rsp]
	lea	rdx, OFFSET FLAT:?log2@@YAMM@Z		; log2
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 29   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec3>::call, COMDAT

; 78   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 79   : 			return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 80   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
a$ = 64
b$ = 72
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec1>::call, COMDAT

; 60   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 61   : 			return tvec1<T, P>(Func(a.x, b.x));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 116  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 117  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 118  : 
; 119  : 	Error += test_pow();

	call	?test_pow@@YAHXZ			; test_pow
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 120  : 	Error += test_exp();

	call	?test_exp@@YAHXZ			; test_exp
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 121  : 	Error += test_log();

	call	?test_log@@YAHXZ			; test_log
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 122  : 	Error += test_exp2();

	call	?test_exp2@@YAHXZ			; test_exp2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 123  : 	Error += test_log2();

	call	?test_log2@@YAHXZ			; test_log2
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 124  : 	Error += test_sqrt();

	call	?test_sqrt@@YAHXZ			; test_sqrt
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 	Error += test_inversesqrt();

	call	?test_inversesqrt@@YAHXZ		; test_inversesqrt
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 126  : 
; 127  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 128  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@I@glm@@YAIII@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
??$max@I@glm@@YAIII@Z PROC				; glm::max<unsigned int>, COMDAT

; 24   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jbe	SHORT $LN3@max
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@max:
	mov	eax, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$max@I@glm@@YAIII@Z ENDP				; glm::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$float_distance@M@glm@@YAIAEBM0@Z
_TEXT	SEGMENT
ulp$ = 32
temp$5 = 52
temp$6 = 84
x$ = 128
y$ = 136
??$float_distance@M@glm@@YAIAEBM0@Z PROC		; glm::float_distance<float>, COMDAT

; 284  : 	{

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 285  : 		uint ulp = 0;

	mov	DWORD PTR ulp$[rsp], 0

; 286  : 
; 287  : 		if(x < y)

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN6@float_dist

; 288  : 		{
; 289  : 			T temp = x;

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$5[rsp], xmm0
$LN2@float_dist:

; 290  : 			while(temp != y)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR temp$5[rsp]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN12@float_dist
	je	SHORT $LN3@float_dist
$LN12@float_dist:

; 291  : 			{
; 292  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 293  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$5[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR temp$5[rsp], xmm0

; 294  : 			}

	jmp	SHORT $LN2@float_dist
$LN3@float_dist:

; 295  : 		}

	jmp	SHORT $LN7@float_dist
$LN6@float_dist:

; 296  : 		else if(y < x)

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN8@float_dist

; 297  : 		{
; 298  : 			T temp = y;

	mov	rax, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR temp$6[rsp], xmm0
$LN4@float_dist:

; 299  : 			while(temp != x)// && ulp < std::numeric_limits<std::size_t>::max())

	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR temp$6[rsp]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN11@float_dist
	je	SHORT $LN5@float_dist
$LN11@float_dist:

; 300  : 			{
; 301  : 				++ulp;

	mov	eax, DWORD PTR ulp$[rsp]
	inc	eax
	mov	DWORD PTR ulp$[rsp], eax

; 302  : 				temp = next_float(temp);

	lea	rcx, QWORD PTR temp$6[rsp]
	call	??$next_float@M@glm@@YAMAEBM@Z		; glm::next_float<float>
	movss	DWORD PTR temp$6[rsp], xmm0

; 303  : 			}

	jmp	SHORT $LN4@float_dist
$LN5@float_dist:
$LN8@float_dist:
$LN7@float_dist:

; 304  : 		}
; 305  : 		else // ==
; 306  : 		{
; 307  : 
; 308  : 		}
; 309  : 
; 310  : 		return ulp;

	mov	eax, DWORD PTR ulp$[rsp]

; 311  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$float_distance@M@glm@@YAIAEBM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$float_distance@M@glm@@YAIAEBM0@Z ENDP		; glm::float_distance<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 132  : 		return static_cast<genType>(1) / sqrt(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 133  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z PROC ; glm::inversesqrt<float,2,glm::tvec1>, COMDAT

; 137  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 138  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'inversesqrt' only accept floating-point inputs");
; 139  : 		return detail::compute_inversesqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inversesqrt@Utvec1@glm@@M$01$0A@@detail@glm@@SA?AU?$tvec1@M$01@3@AEBU43@@Z ; glm::detail::compute_inversesqrt<glm::tvec1,float,2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 140  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z ENDP ; glm::inversesqrt<float,2,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$01@glm@@QEAA@M@Z PROC			; glm::tvec1<float,2>::tvec1<float,2>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,2>::tvec1<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
ulp$ = 36
diff$ = 40
f$6 = 44
u$7 = 52
lowp_v$8 = 84
defaultp_v$9 = 116
tv82 = 132
?test_inversesqrt@@YAHXZ PROC				; test_inversesqrt

; 95   : {

$LN8:
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 96   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 97   : 
; 98   : 	glm::uint ulp(0);

	mov	DWORD PTR ulp$[rsp], 0

; 99   : 	float diff(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR diff$[rsp], xmm0

; 100  : 
; 101  : 	for(float f = 0.001f; f < 10.f; f *= 1.01f)

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR f$6[rsp], xmm0
	jmp	SHORT $LN4@test_inver
$LN2@test_inver:
	movss	xmm0, DWORD PTR f$6[rsp]
	mulss	xmm0, DWORD PTR __real@3f8147ae
	movss	DWORD PTR f$6[rsp], xmm0
$LN4@test_inver:
	movss	xmm0, DWORD PTR __real@41200000
	comiss	xmm0, DWORD PTR f$6[rsp]
	jbe	$LN3@test_inver

; 102  : 	{
; 103  : 		glm::lowp_fvec1 u(f);

	movss	xmm1, DWORD PTR f$6[rsp]
	lea	rcx, QWORD PTR u$7[rsp]
	call	??0?$tvec1@M$01@glm@@QEAA@M@Z		; glm::tvec1<float,2>::tvec1<float,2>

; 104  : 		glm::lowp_fvec1 lowp_v = glm::inversesqrt(u);

	lea	rdx, QWORD PTR u$7[rsp]
	lea	rcx, QWORD PTR lowp_v$8[rsp]
	call	??$inversesqrt@M$01Utvec1@glm@@@glm@@YA?AU?$tvec1@M$01@0@AEBU10@@Z ; glm::inversesqrt<float,2,glm::tvec1>

; 105  : 		float defaultp_v = glm::inversesqrt(f);

	movss	xmm0, DWORD PTR f$6[rsp]
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	movss	DWORD PTR defaultp_v$9[rsp], xmm0

; 106  : 
; 107  : 		ulp = glm::max(glm::float_distance(lowp_v.x, defaultp_v), ulp);

	lea	rdx, QWORD PTR defaultp_v$9[rsp]
	lea	rcx, QWORD PTR lowp_v$8[rsp]
	call	??$float_distance@M@glm@@YAIAEBM0@Z	; glm::float_distance<float>
	mov	edx, DWORD PTR ulp$[rsp]
	mov	ecx, eax
	call	??$max@I@glm@@YAIII@Z			; glm::max<unsigned int>
	mov	DWORD PTR ulp$[rsp], eax

; 108  : 		diff = glm::abs(lowp_v.x - defaultp_v);

	movss	xmm0, DWORD PTR lowp_v$8[rsp]
	subss	xmm0, DWORD PTR defaultp_v$9[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR diff$[rsp], xmm0

; 109  : 		Error += diff > 0.1f ? 1 : 0;

	movss	xmm0, DWORD PTR diff$[rsp]
	comiss	xmm0, DWORD PTR __real@3dcccccd
	jbe	SHORT $LN6@test_inver
	mov	DWORD PTR tv82[rsp], 1
	jmp	SHORT $LN7@test_inver
$LN6@test_inver:
	mov	DWORD PTR tv82[rsp], 0
$LN7@test_inver:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 110  : 	}

	jmp	$LN2@test_inver
$LN3@test_inver:

; 111  : 
; 112  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 113  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inversesqrt@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?test_inversesqrt@@YAHXZ ENDP				; test_inversesqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::sqrt<float,0,glm::tvec4>, COMDAT

; 123  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
; 125  : 		return detail::compute_sqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sqrt@Utvec4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::sqrt<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::sqrt<float,0,glm::tvec3>, COMDAT

; 123  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
; 125  : 		return detail::compute_sqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sqrt@Utvec3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::sqrt<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::sqrt<float,0,glm::tvec2>, COMDAT

; 123  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
; 125  : 		return detail::compute_sqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sqrt@Utvec2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::sqrt<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::sqrt<float,0,glm::tvec1>, COMDAT

; 123  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
; 125  : 		return detail::compute_sqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sqrt@Utvec1@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sqrt<glm::tvec1,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::sqrt<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
f$7 = 36
r$8 = 40
$T9 = 48
$T10 = 64
s$11 = 80
A$ = 84
B$ = 100
C$ = 136
D$ = 168
E$ = 216
$T12 = 244
$T13 = 248
$T14 = 256
$T15 = 268
tv72 = 284
tv79 = 288
?test_sqrt@@YAHXZ PROC					; test_sqrt

; 72   : {

$LN9:
	push	rdi
	sub	rsp, 304				; 00000130H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 73   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 74   : 
; 75   : #	if GLM_ARCH & GLM_ARCH_SSE2_BIT
; 76   : 	for(float f = 0.1f; f < 30.0f; f += 0.1f)

	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR f$7[rsp], xmm0
	jmp	SHORT $LN4@test_sqrt
$LN2@test_sqrt:
	movss	xmm0, DWORD PTR f$7[rsp]
	addss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR f$7[rsp], xmm0
$LN4@test_sqrt:
	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR f$7[rsp]
	jbe	$LN3@test_sqrt

; 77   : 	{
; 78   : 		float r = _mm_cvtss_f32(_mm_sqrt_ps(_mm_set1_ps(f)));

	movss	xmm0, DWORD PTR f$7[rsp]
	shufps	xmm0, xmm0, 0
	movaps	XMMWORD PTR $T9[rsp], xmm0
	sqrtps	xmm0, XMMWORD PTR $T9[rsp]
	movaps	XMMWORD PTR $T10[rsp], xmm0
	movaps	xmm0, XMMWORD PTR $T10[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	movss	xmm0, DWORD PTR tv72[rsp]
	movss	DWORD PTR r$8[rsp], xmm0

; 79   : 		float s = std::sqrt(f);

	movss	xmm0, DWORD PTR f$7[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR s$11[rsp], xmm0

; 80   : 		Error += glm::abs(r - s) < 0.01f ? 0 : 1;

	movss	xmm0, DWORD PTR r$8[rsp]
	subss	xmm0, DWORD PTR s$11[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3c23d70a
	comiss	xmm1, xmm0
	jbe	SHORT $LN6@test_sqrt
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN7@test_sqrt
$LN6@test_sqrt:
	mov	DWORD PTR tv79[rsp], 1
$LN7@test_sqrt:
	mov	eax, DWORD PTR tv79[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 81   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_sqrt
	mov	r8d, 81					; 00000051H
	lea	rdx, OFFSET FLAT:$SG51619
	lea	rcx, OFFSET FLAT:$SG51620
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_sqrt:

; 82   : 	}

	jmp	$LN2@test_sqrt
$LN3@test_sqrt:

; 83   : #	endif//GLM_ARCH & GLM_ARCH_SSE2_BIT
; 84   : 
; 85   : 	float A = glm::sqrt(10.f);

	movss	xmm0, DWORD PTR __real@41200000
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR A$[rsp], xmm0

; 86   : 	glm::vec1 B = glm::sqrt(glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$sqrt@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec1>

; 87   : 	glm::vec2 C = glm::sqrt(glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$sqrt@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec2>

; 88   : 	glm::vec3 D = glm::sqrt(glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$sqrt@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec3>

; 89   : 	glm::vec4 E = glm::sqrt(glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$sqrt@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::sqrt<float,0,glm::tvec4>

; 90   : 
; 91   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 92   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_sqrt@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
?test_sqrt@@YAHXZ ENDP					; test_sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::log2<float,0,glm::tvec4>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::log2<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::log2<float,0,glm::tvec3>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@M$0A@Utvec3@glm@@$00$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec3,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::log2<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::log2<float,0,glm::tvec2>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@M$0A@Utvec2@glm@@$00$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec2,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::log2<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::log2<float,0,glm::tvec1>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 116  : 		return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_log2@M$0A@Utvec1@glm@@$00$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_log2<float,0,glm::tvec1,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 117  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::log2<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log2@M@glm@@YAMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
??$log2@M@glm@@YAMM@Z PROC				; glm::log2<float>, COMDAT

; 109  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 110  : 		return log2(tvec1<genType>(x)).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 111  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$log2@M@glm@@YAMM@Z ENDP				; glm::log2<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 88
D$ = 120
E$ = 168
$T7 = 196
$T8 = 200
$T9 = 208
$T10 = 220
?test_log2@@YAHXZ PROC					; test_log2

; 59   : {

$LN3:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 61   : 
; 62   : 	float A = glm::log2(10.f);

	movss	xmm0, DWORD PTR __real@41200000
	call	??$log2@M@glm@@YAMM@Z			; glm::log2<float>
	movss	DWORD PTR A$[rsp], xmm0

; 63   : 	glm::vec1 B = glm::log2(glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$log2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec1>

; 64   : 	glm::vec2 C = glm::log2(glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$log2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec2>

; 65   : 	glm::vec3 D = glm::log2(glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$log2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec3>

; 66   : 	glm::vec4 E = glm::log2(glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$log2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::log2<float,0,glm::tvec4>

; 67   : 
; 68   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 69   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_log2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_log2@@YAHXZ ENDP					; test_log2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::exp2<float,0,glm::tvec4>, COMDAT

; 102  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		return detail::functor1<T, T, P, vecType>::call(exp2, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$exp2@M@glm@@YAMM@Z	; glm::exp2<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 104  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::exp2<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::exp2<float,0,glm::tvec3>, COMDAT

; 102  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		return detail::functor1<T, T, P, vecType>::call(exp2, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$exp2@M@glm@@YAMM@Z	; glm::exp2<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 104  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::exp2<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::exp2<float,0,glm::tvec2>, COMDAT

; 102  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		return detail::functor1<T, T, P, vecType>::call(exp2, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$exp2@M@glm@@YAMM@Z	; glm::exp2<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 104  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::exp2<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::exp2<float,0,glm::tvec1>, COMDAT

; 102  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		return detail::functor1<T, T, P, vecType>::call(exp2, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$exp2@M@glm@@YAMM@Z	; glm::exp2<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 104  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::exp2<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp2@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$exp2@M@glm@@YAMM@Z PROC				; glm::exp2<float>, COMDAT

; 94   : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 95   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'exp2' only accept floating-point inputs");
; 96   : 
; 97   : 		return std::exp(static_cast<genType>(0.69314718055994530941723212145818) * x);

	movss	xmm0, DWORD PTR __real@3f317218
	mulss	xmm0, DWORD PTR x$[rsp]
	call	?exp@@YAMM@Z				; exp

; 98   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$exp2@M@glm@@YAMM@Z ENDP				; glm::exp2<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 88
D$ = 120
E$ = 168
$T7 = 196
$T8 = 200
$T9 = 208
$T10 = 220
?test_exp2@@YAHXZ PROC					; test_exp2

; 46   : {

$LN3:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 47   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 48   : 
; 49   : 	float A = glm::exp2(10.f);

	movss	xmm0, DWORD PTR __real@41200000
	call	??$exp2@M@glm@@YAMM@Z			; glm::exp2<float>
	movss	DWORD PTR A$[rsp], xmm0

; 50   : 	glm::vec1 B = glm::exp2(glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$exp2@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec1>

; 51   : 	glm::vec2 C = glm::exp2(glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$exp2@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec2>

; 52   : 	glm::vec3 D = glm::exp2(glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$exp2@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec3>

; 53   : 	glm::vec4 E = glm::exp2(glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$exp2@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::exp2<float,0,glm::tvec4>

; 54   : 
; 55   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 56   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_exp2@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_exp2@@YAHXZ ENDP					; test_exp2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::log<float,0,glm::tvec4>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		return detail::functor1<T, T, P, vecType>::call(log, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?log@@YAMM@Z		; log
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::log<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::log<float,0,glm::tvec3>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		return detail::functor1<T, T, P, vecType>::call(log, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?log@@YAMM@Z		; log
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::log<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::log<float,0,glm::tvec2>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		return detail::functor1<T, T, P, vecType>::call(log, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?log@@YAMM@Z		; log
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::log<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::log<float,0,glm::tvec1>, COMDAT

; 87   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 88   : 		return detail::functor1<T, T, P, vecType>::call(log, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?log@@YAMM@Z		; log
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::log<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 88
D$ = 120
E$ = 168
$T7 = 196
$T8 = 200
$T9 = 208
$T10 = 220
?test_log@@YAHXZ PROC					; test_log

; 33   : {

$LN3:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 34   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 35   : 
; 36   : 	float A = glm::log(10.f);

	movss	xmm0, DWORD PTR __real@41200000
	call	?log@@YAMM@Z				; log
	movss	DWORD PTR A$[rsp], xmm0

; 37   : 	glm::vec1 B = glm::log(glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$log@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec1>

; 38   : 	glm::vec2 C = glm::log(glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$log@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec2>

; 39   : 	glm::vec3 D = glm::log(glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$log@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec3>

; 40   : 	glm::vec4 E = glm::log(glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$log@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::log<float,0,glm::tvec4>

; 41   : 
; 42   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 43   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_log@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_log@@YAHXZ ENDP					; test_log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::exp<float,0,glm::tvec4>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		return detail::functor1<T, T, P, vecType>::call(exp, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?exp@@YAMM@Z		; exp
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::exp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::exp<float,0,glm::tvec3>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		return detail::functor1<T, T, P, vecType>::call(exp, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?exp@@YAMM@Z		; exp
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::exp<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::exp<float,0,glm::tvec2>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		return detail::functor1<T, T, P, vecType>::call(exp, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?exp@@YAMM@Z		; exp
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::exp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::exp<float,0,glm::tvec1>, COMDAT

; 79   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 80   : 		return detail::functor1<T, T, P, vecType>::call(exp, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?exp@@YAMM@Z		; exp
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::exp<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 88
D$ = 120
E$ = 168
$T7 = 196
$T8 = 200
$T9 = 208
$T10 = 220
?test_exp@@YAHXZ PROC					; test_exp

; 20   : {

$LN3:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 22   : 
; 23   : 	float A = glm::exp(10.f);

	movss	xmm0, DWORD PTR __real@41200000
	call	?exp@@YAMM@Z				; exp
	movss	DWORD PTR A$[rsp], xmm0

; 24   : 	glm::vec1 B = glm::exp(glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$exp@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec1>

; 25   : 	glm::vec2 C = glm::exp(glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$exp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec2>

; 26   : 	glm::vec3 D = glm::exp(glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$exp@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec3>

; 27   : 	glm::vec4 E = glm::exp(glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$exp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::exp<float,0,glm::tvec4>

; 28   : 
; 29   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 30   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_exp@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test_exp@@YAHXZ ENDP					; test_exp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
base$ = 56
exponent$ = 64
??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::pow<float,0,glm::tvec4>, COMDAT

; 71   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		return detail::functor2<T, P, vecType>::call(pow, base, exponent);

	mov	r9, QWORD PTR exponent$[rsp]
	mov	r8, QWORD PTR base$[rsp]
	lea	rdx, OFFSET FLAT:?pow@@YAMMM@Z		; pow
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 73   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::pow<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
base$ = 56
exponent$ = 64
??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::pow<float,0,glm::tvec3>, COMDAT

; 71   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		return detail::functor2<T, P, vecType>::call(pow, base, exponent);

	mov	r9, QWORD PTR exponent$[rsp]
	mov	r8, QWORD PTR base$[rsp]
	lea	rdx, OFFSET FLAT:?pow@@YAMMM@Z		; pow
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 73   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::pow<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
base$ = 56
exponent$ = 64
??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::pow<float,0,glm::tvec2>, COMDAT

; 71   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		return detail::functor2<T, P, vecType>::call(pow, base, exponent);

	mov	r9, QWORD PTR exponent$[rsp]
	mov	r8, QWORD PTR base$[rsp]
	lea	rdx, OFFSET FLAT:?pow@@YAMMM@Z		; pow
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 73   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::pow<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
base$ = 56
exponent$ = 64
??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::pow<float,0,glm::tvec1>, COMDAT

; 71   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		return detail::functor2<T, P, vecType>::call(pow, base, exponent);

	mov	r9, QWORD PTR exponent$[rsp]
	mov	r8, QWORD PTR base$[rsp]
	lea	rdx, OFFSET FLAT:?pow@@YAMMM@Z		; pow
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 73   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::pow<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_exponential.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 36
B$ = 52
C$ = 88
D$ = 120
E$ = 168
$T7 = 196
$T8 = 200
$T9 = 204
$T10 = 212
$T11 = 220
$T12 = 232
$T13 = 244
$T14 = 260
tv69 = 280
tv78 = 288
tv87 = 296
tv128 = 304
?test_pow@@YAHXZ PROC					; test_pow

; 7    : {

$LN3:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8    : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 9    : 
; 10   : 	float A = glm::pow(10.f, 10.f);

	movss	xmm1, DWORD PTR __real@41200000
	movss	xmm0, DWORD PTR __real@41200000
	call	?pow@@YAMMM@Z				; pow
	movss	DWORD PTR A$[rsp], xmm0

; 11   : 	glm::vec1 B = glm::pow(glm::vec1(10.f), glm::vec1(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv69[rsp], rax
	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B$[rsp]
	call	??$pow@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec1>

; 12   : 	glm::vec2 C = glm::pow(glm::vec2(10.f), glm::vec2(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv78[rsp], rax
	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv78[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR C$[rsp]
	call	??$pow@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec2>

; 13   : 	glm::vec3 D = glm::pow(glm::vec3(10.f), glm::vec3(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv87[rsp], rax
	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv87[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR D$[rsp]
	call	??$pow@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec3>

; 14   : 	glm::vec4 E = glm::pow(glm::vec4(10.f), glm::vec4(10.f));

	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv128[rsp], rax
	movss	xmm1, DWORD PTR __real@41200000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv128[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR E$[rsp]
	call	??$pow@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::pow<float,0,glm::tvec4>

; 15   : 
; 16   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 17   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_pow@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test_pow@@YAHXZ ENDP					; test_pow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\ulp.inl
;	COMDAT ??$next_float@M@glm@@YAMAEBM@Z
_TEXT	SEGMENT
x$ = 64
??$next_float@M@glm@@YAMAEBM@Z PROC			; glm::next_float<float>, COMDAT

; 176  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 177  : #		if GLM_HAS_CXX11_STL
; 178  : 			return std::nextafter(x, std::numeric_limits<float>::max());

	call	?max@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::max
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?nextafter@@YAMMM@Z			; nextafter

; 179  : #		elif((GLM_COMPILER & GLM_COMPILER_VC) || ((GLM_COMPILER & GLM_COMPILER_INTEL) && (GLM_PLATFORM & GLM_PLATFORM_WINDOWS)))
; 180  : 			return detail::nextafterf(x, FLT_MAX);
; 181  : #		elif(GLM_PLATFORM & GLM_PLATFORM_ANDROID)
; 182  : 			return __builtin_nextafterf(x, FLT_MAX);
; 183  : #		else
; 184  : 			return nextafterf(x, FLT_MAX);
; 185  : #		endif
; 186  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$next_float@M@glm@@YAMAEBM@Z ENDP			; glm::next_float<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?max@?$numeric_limits@M@std@@SAMXZ PROC			; std::numeric_limits<float>::max, COMDAT

; 864  :     _NODISCARD static constexpr float(max)() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 865  :         return FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff

; 866  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?max@?$numeric_limits@M@std@@SAMXZ ENDP			; std::numeric_limits<float>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?pow@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?pow@@YAMMM@Z PROC					; pow, COMDAT

; 222  : _NODISCARD _Check_return_ inline float pow(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 223  :     return _CSTD powf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_powf

; 224  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?pow@@YAMMM@Z ENDP					; pow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?nextafter@@YAMMM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?nextafter@@YAMMM@Z PROC				; nextafter, COMDAT

; 214  : _NODISCARD _Check_return_ inline float nextafter(_In_ float _Xx, _In_ float _Yx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 215  :     return _CSTD nextafterf(_Xx, _Yx);

	movss	xmm1, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_nextafterf

; 216  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?nextafter@@YAMMM@Z ENDP				; nextafter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?log2@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?log2@@YAMM@Z PROC					; log2, COMDAT

; 190  : _NODISCARD _Check_return_ inline float log2(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 191  :     return _CSTD log2f(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_log2f

; 192  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?log2@@YAMM@Z ENDP					; log2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?log@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?log@@YAMM@Z PROC					; log, COMDAT

; 178  : _NODISCARD _Check_return_ inline float log(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 179  :     return _CSTD logf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_logf

; 180  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?log@@YAMM@Z ENDP					; log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?exp@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?exp@@YAMM@Z PROC					; exp, COMDAT

; 104  : _NODISCARD _Check_return_ inline float exp(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 105  :     return _CSTD expf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_expf

; 106  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?exp@@YAMM@Z ENDP					; exp
_TEXT	ENDS
END
