; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG61350 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, '1', 00H, '.'
	DB	00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG61351 DB	'v', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@XZ			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	?test_vec1_operators@@YAHXZ			; test_vec1_operators
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec1<float,0>::operator*=<float>
PUBLIC	??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z	; glm::tvec1<float,0>::operator*=<double>
PUBLIC	??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec1<float,0>::operator+=<float>
PUBLIC	??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z	; glm::tvec1<float,0>::operator+=<double>
PUBLIC	?test_vec1_ctor@@YAHXZ				; test_vec1_ctor
PUBLIC	??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z		; glm::tvec2<float,0>::tvec2<float,0><float,double>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><double,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><int,0>
PUBLIC	?test_vec1_size@@YAHXZ				; test_vec1_size
PUBLIC	?length@?$tvec1@N$0A@@glm@@SAHXZ		; glm::tvec1<double,0>::length
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@XZ			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	?test_vec1_operator_increment@@YAHXZ		; test_vec1_operator_increment
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ		; glm::tvec1<int,0>::operator++
PUBLIC	??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z		; glm::tvec1<int,0>::operator++
PUBLIC	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	main
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4008000000000000
PUBLIC	__real@40400000
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?v1@@3U?$tvec1@M$0A@@glm@@A DD 01H DUP (?)		; v1
?v2@@3U?$tvec1@M$0A@@glm@@A DD 01H DUP (?)		; v2
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ev1@@YAXXZ DD imagerel ??__Ev1@@YAXXZ
	DD	imagerel ??__Ev1@@YAXXZ+24
	DD	imagerel $unwind$??__Ev1@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ev2@@YAXXZ DD imagerel ??__Ev2@@YAXXZ
	DD	imagerel ??__Ev2@@YAXXZ+32
	DD	imagerel $unwind$??__Ev2@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_vec1_operators@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+348
	DD	imagerel $unwind$?test_vec1_operators@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN6
	DD	imagerel $LN6+62
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_vec1_ctor@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$?test_vec1_ctor@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_vec1_size@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+252
	DD	imagerel $unwind$?test_vec1_size@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0?$tvec1@N$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_vec1_operator_increment@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+662
	DD	imagerel $unwind$?test_vec1_operator_increment@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN4
	DD	imagerel $LN4+176
	DD	imagerel $unwind$main
pdata	ENDS
CRT$XCU	SEGMENT
?v1$initializer$@@3P6AXXZEA DQ FLAT:??__Ev1@@YAXXZ	; v1$initializer$
CRT$XCU	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4008000000000000
CONST	SEGMENT
__real@4008000000000000 DQ 04008000000000000r	; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z DD 022a01H
	DD	070107214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcName$0 DB 052H	; glm::tvec1<int,0>::operator++
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcVarDesc DD 024H	; glm::tvec1<int,0>::operator++
	DD	04H
	DQ	FLAT:??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcName$0
	ORG $+48
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcFrameData DD 01H	; glm::tvec1<int,0>::operator++
	DD	00H
	DQ	FLAT:??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
xdata	SEGMENT
$unwind$?test_vec1_operators@@YAHXZ DD 021701H
	DD	07002d206H
$unwind$?test_vec1_ctor@@YAHXZ DD 031a01H
	DD	01c0109H
	DD	07002H
$unwind$?test_vec1_size@@YAHXZ DD 020601H
	DD	070027206H
$unwind$?test_vec1_operator_increment@@YAHXZ DD 031a01H
	DD	0200109H
	DD	07002H
$unwind$main DD	021701H
	DD	070029206H
xdata	ENDS
CONST	SEGMENT
?test_vec1_operators@@YAHXZ$rtcName$0 DB 041H		; test_vec1_operators
	DB	00H
	ORG $+2
?test_vec1_operators@@YAHXZ$rtcName$1 DB 042H		; test_vec1_operators
	DB	00H
	ORG $+2
?test_vec1_operators@@YAHXZ$rtcFrameData DD 02H		; test_vec1_operators
	DD	00H
	DQ	FLAT:?test_vec1_operators@@YAHXZ$rtcVarDesc
?test_vec1_ctor@@YAHXZ$rtcName$0 DB 041H		; test_vec1_ctor
	DB	00H
	ORG $+6
?test_vec1_operators@@YAHXZ$rtcVarDesc DD 054H		; test_vec1_operators
	DD	04H
	DQ	FLAT:?test_vec1_operators@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_vec1_operators@@YAHXZ$rtcName$0
	ORG $+96
?test_vec1_ctor@@YAHXZ$rtcName$1 DB 042H		; test_vec1_ctor
	DB	00H
	ORG $+2
?test_vec1_ctor@@YAHXZ$rtcName$2 DB 043H		; test_vec1_ctor
	DB	00H
	ORG $+2
?test_vec1_ctor@@YAHXZ$rtcName$3 DB 045H		; test_vec1_ctor
	DB	00H
	ORG $+2
?test_vec1_ctor@@YAHXZ$rtcName$4 DB 046H		; test_vec1_ctor
	DB	00H
	ORG $+2
?test_vec1_ctor@@YAHXZ$rtcVarDesc DD 0b8H		; test_vec1_ctor
	DD	08H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcName$0
	ORG $+240
?test_vec1_ctor@@YAHXZ$rtcFrameData DD 05H		; test_vec1_ctor
	DD	00H
	DQ	FLAT:?test_vec1_ctor@@YAHXZ$rtcVarDesc
?test_vec1_operator_increment@@YAHXZ$rtcName$0 DB 076H	; test_vec1_operator_increment
	DB	030H
	DB	00H
	ORG $+1
?test_vec1_operator_increment@@YAHXZ$rtcName$1 DB 076H	; test_vec1_operator_increment
	DB	031H
	DB	00H
	ORG $+1
?test_vec1_operator_increment@@YAHXZ$rtcName$2 DB 076H	; test_vec1_operator_increment
	DB	032H
	DB	00H
	ORG $+1
?test_vec1_operator_increment@@YAHXZ$rtcName$3 DB 076H	; test_vec1_operator_increment
	DB	033H
	DB	00H
	ORG $+1
?test_vec1_operator_increment@@YAHXZ$rtcName$4 DB 076H	; test_vec1_operator_increment
	DB	034H
	DB	00H
	ORG $+5
?test_vec1_operator_increment@@YAHXZ$rtcFrameData DD 05H ; test_vec1_operator_increment
	DD	00H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcVarDesc
main$rtcName$0 DB 076H
	DB	00H
	ORG $+6
?test_vec1_operator_increment@@YAHXZ$rtcVarDesc DD 0b4H	; test_vec1_operator_increment
	DD	04H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test_vec1_operator_increment@@YAHXZ$rtcName$0
	ORG $+240
main$rtcVarDesc DD 034H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+48
main$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ev2@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ev1@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
CRT$XCU	SEGMENT
?v2$initializer$@@3P6AXXZEA DQ FLAT:??__Ev2@@YAXXZ	; v2$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
_TEXT	SEGMENT
Error$ = 32
v$ = 52
main	PROC

; 140  : {

$LN4:
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 141  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 142  : 
; 143  : 	glm::vec1 v;

	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@XZ		; glm::tvec1<float,0>::tvec1<float,0>

; 144  : 	assert(v.length() == 1);

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	eax, 1
	je	SHORT $LN3@main
	mov	r8d, 144				; 00000090H
	lea	rdx, OFFSET FLAT:$SG61350
	lea	rcx, OFFSET FLAT:$SG61351
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@main:

; 145  : 
; 146  : 	Error += test_vec1_size();

	call	?test_vec1_size@@YAHXZ			; test_vec1_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 147  : 	Error += test_vec1_ctor();

	call	?test_vec1_ctor@@YAHXZ			; test_vec1_ctor
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 148  : 	Error += test_vec1_operators();

	call	?test_vec1_operators@@YAHXZ		; test_vec1_operators
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 149  : 	Error += test_vec1_operator_increment();

	call	?test_vec1_operator_increment@@YAHXZ	; test_vec1_operator_increment
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 150  : 	
; 151  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 152  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z
_TEXT	SEGMENT
Result$ = 36
this$ = 80
__$ReturnUdt$ = 88
__formal$ = 96
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z PROC		; glm::tvec1<int,0>::operator++, COMDAT

; 184  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 185  : 		tvec1<T, P> Result(*this);

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR Result$[rsp], eax

; 186  : 		++*this;

	mov	rcx, QWORD PTR this$[rsp]
	call	??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ	; glm::tvec1<int,0>::operator++

; 187  : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 188  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z ENDP		; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ
_TEXT	SEGMENT
this$ = 16
??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ PROC		; glm::tvec1<int,0>::operator++, COMDAT

; 170  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 171  : 		++this->x;

	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 172  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 173  : 	}

	pop	rdi
	ret	0
??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ ENDP		; glm::tvec1<int,0>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
_TEXT	SEGMENT
Error$ = 32
v0$ = 52
v1$ = 84
v2$ = 116
v3$ = 148
v4$ = 180
i0$ = 196
i1$ = 200
i2$ = 204
i3$ = 208
i4$ = 212
$T8 = 216
$T9 = 217
$T10 = 218
tv80 = 220
tv90 = 224
tv132 = 228
tv137 = 232
tv140 = 236
tv143 = 240
?test_vec1_operator_increment@@YAHXZ PROC		; test_vec1_operator_increment

; 113  : {

$LN15:
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 114  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 115  : 
; 116  : 	glm::ivec1 v0(1);

	mov	edx, 1
	lea	rcx, QWORD PTR v0$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 117  : 	glm::ivec1 v1(v0);

	mov	eax, DWORD PTR v0$[rsp]
	mov	DWORD PTR v1$[rsp], eax

; 118  : 	glm::ivec1 v2(v0);

	mov	eax, DWORD PTR v0$[rsp]
	mov	DWORD PTR v2$[rsp], eax

; 119  : 	glm::ivec1 v3 = ++v1;

	lea	rcx, QWORD PTR v1$[rsp]
	call	??E?$tvec1@H$0A@@glm@@QEAAAEAU01@XZ	; glm::tvec1<int,0>::operator++
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v3$[rsp], eax

; 120  : 	glm::ivec1 v4 = v2++;

	xor	r8d, r8d
	lea	rdx, QWORD PTR v4$[rsp]
	lea	rcx, QWORD PTR v2$[rsp]
	call	??E?$tvec1@H$0A@@glm@@QEAA?AU01@H@Z	; glm::tvec1<int,0>::operator++

; 121  : 
; 122  : 	Error += glm::all(glm::equal(v0, v4)) ? 0 : 1;

	lea	r8, QWORD PTR v4$[rsp]
	lea	rdx, QWORD PTR v0$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_vec1_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN4@test_vec1_
$LN3@test_vec1_:
	mov	DWORD PTR tv80[rsp], 1
$LN4@test_vec1_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 123  : 	Error += glm::all(glm::equal(v1, v2)) ? 0 : 1;

	lea	r8, QWORD PTR v2$[rsp]
	lea	rdx, QWORD PTR v1$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_vec1_
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN6@test_vec1_
$LN5@test_vec1_:
	mov	DWORD PTR tv90[rsp], 1
$LN6@test_vec1_:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 124  : 	Error += glm::all(glm::equal(v1, v3)) ? 0 : 1;

	lea	r8, QWORD PTR v3$[rsp]
	lea	rdx, QWORD PTR v1$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_vec1_
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN8@test_vec1_
$LN7@test_vec1_:
	mov	DWORD PTR tv132[rsp], 1
$LN8@test_vec1_:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 
; 126  : 	int i0(1);

	mov	DWORD PTR i0$[rsp], 1

; 127  : 	int i1(i0);

	mov	eax, DWORD PTR i0$[rsp]
	mov	DWORD PTR i1$[rsp], eax

; 128  : 	int i2(i0);

	mov	eax, DWORD PTR i0$[rsp]
	mov	DWORD PTR i2$[rsp], eax

; 129  : 	int i3 = ++i1;

	mov	eax, DWORD PTR i1$[rsp]
	inc	eax
	mov	DWORD PTR i1$[rsp], eax
	mov	eax, DWORD PTR i1$[rsp]
	mov	DWORD PTR i3$[rsp], eax

; 130  : 	int i4 = i2++;

	mov	eax, DWORD PTR i2$[rsp]
	mov	DWORD PTR i4$[rsp], eax
	mov	eax, DWORD PTR i2$[rsp]
	inc	eax
	mov	DWORD PTR i2$[rsp], eax

; 131  : 
; 132  : 	Error += i0 == i4 ? 0 : 1;

	mov	eax, DWORD PTR i4$[rsp]
	cmp	DWORD PTR i0$[rsp], eax
	jne	SHORT $LN9@test_vec1_
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN10@test_vec1_
$LN9@test_vec1_:
	mov	DWORD PTR tv137[rsp], 1
$LN10@test_vec1_:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 133  : 	Error += i1 == i2 ? 0 : 1;

	mov	eax, DWORD PTR i2$[rsp]
	cmp	DWORD PTR i1$[rsp], eax
	jne	SHORT $LN11@test_vec1_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN12@test_vec1_
$LN11@test_vec1_:
	mov	DWORD PTR tv140[rsp], 1
$LN12@test_vec1_:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 134  : 	Error += i1 == i3 ? 0 : 1;

	mov	eax, DWORD PTR i3$[rsp]
	cmp	DWORD PTR i1$[rsp], eax
	jne	SHORT $LN13@test_vec1_
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN14@test_vec1_
$LN13@test_vec1_:
	mov	DWORD PTR tv143[rsp], 1
$LN14@test_vec1_:
	mov	eax, DWORD PTR tv143[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 135  : 
; 136  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 137  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_vec1_operator_increment@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?test_vec1_operator_increment@@YAHXZ ENDP		; test_vec1_operator_increment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec1@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 14   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 12   : 				: x(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0

; 14   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$0A@@glm@@SAHXZ PROC			; glm::tvec1<double,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 40
tv67 = 48
tv72 = 52
tv76 = 56
tv80 = 60
?test_vec1_size@@YAHXZ PROC				; test_vec1_size

; 97   : {

$LN11:
	push	rdi
	sub	rsp, 64					; 00000040H

; 98   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 99   : 
; 100  : 	Error += sizeof(glm::vec1) == sizeof(glm::mediump_vec1) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 101  : 	Error += 4 == sizeof(glm::mediump_vec1) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 102  : 	Error += sizeof(glm::dvec1) == sizeof(glm::highp_dvec1) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 103  : 	Error += 8 == sizeof(glm::highp_dvec1) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 104  : 	Error += glm::vec1().length() == 1 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@XZ		; glm::tvec1<float,0>::tvec1<float,0>
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	eax, 1
	jne	SHORT $LN3@test_vec1_
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_vec1_
$LN3@test_vec1_:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_vec1_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 105  : 	Error += glm::dvec1().length() == 1 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@XZ		; glm::tvec1<double,0>::tvec1<double,0>
	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	cmp	eax, 1
	jne	SHORT $LN5@test_vec1_
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_vec1_
$LN5@test_vec1_:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_vec1_:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 106  : 	Error += glm::vec1::length() == 1 ? 0 : 1;

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	eax, 1
	jne	SHORT $LN7@test_vec1_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN8@test_vec1_
$LN7@test_vec1_:
	mov	DWORD PTR tv76[rsp], 1
$LN8@test_vec1_:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 107  : 	Error += glm::dvec1::length() == 1 ? 0 : 1;

	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	cmp	eax, 1
	jne	SHORT $LN9@test_vec1_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN10@test_vec1_
$LN9@test_vec1_:
	mov	DWORD PTR tv80[rsp], 1
$LN10@test_vec1_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 108  : 
; 109  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 110  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?test_vec1_size@@YAHXZ ENDP				; test_vec1_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z PROC ; glm::tvec2<float,0>::tvec2<float,0><double,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvtsd2ss xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvtsd2ss xmm0, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ENDP ; glm::tvec2<float,0>::tvec2<float,0><double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 52   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,double>, COMDAT

; 66   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
_TEXT	SEGMENT
Error$ = 32
A$8 = 56
B$9 = 88
C$10 = 120
E$11 = 152
F$12 = 184
$T13 = 200
$T14 = 216
?test_vec1_ctor@@YAHXZ PROC				; test_vec1_ctor

; 38   : {

$LN3:
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 39   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 40   : 
; 41   : #	if GLM_HAS_TRIVIAL_QUERIES
; 42   : 	//	Error += std::is_trivially_default_constructible<glm::vec1>::value ? 0 : 1;
; 43   : 	//	Error += std::is_trivially_copy_assignable<glm::vec1>::value ? 0 : 1;
; 44   : 		Error += std::is_trivially_copyable<glm::vec1>::value ? 0 : 1;
; 45   : 		Error += std::is_trivially_copyable<glm::dvec1>::value ? 0 : 1;
; 46   : 		Error += std::is_trivially_copyable<glm::ivec1>::value ? 0 : 1;
; 47   : 		Error += std::is_trivially_copyable<glm::uvec1>::value ? 0 : 1;
; 48   : 
; 49   : 		Error += std::is_copy_constructible<glm::vec1>::value ? 0 : 1;
; 50   : #	endif
; 51   : 
; 52   : /*
; 53   : #if GLM_HAS_INITIALIZER_LISTS
; 54   : 	{
; 55   : 		glm::vec1 a{ 0 };
; 56   : 		std::vector<glm::vec1> v = {
; 57   : 			{0.f},
; 58   : 			{4.f},
; 59   : 			{8.f}};
; 60   : 	}
; 61   : 
; 62   : 	{
; 63   : 		glm::dvec2 a{ 0 };
; 64   : 		std::vector<glm::dvec1> v = {
; 65   : 			{0.0},
; 66   : 			{4.0},
; 67   : 			{8.0}};
; 68   : 	}
; 69   : #endif
; 70   : */
; 71   : #if GLM_HAS_UNRESTRICTED_UNIONS && defined(GLM_FORCE_SWIZZLE)
; 72   : 	{
; 73   : 		glm::vec2 A = glm::vec2(1.0f, 2.0f);
; 74   : 		glm::vec2 B = A.xy;
; 75   : 		glm::vec2 C(A.xy);
; 76   : 		glm::vec2 D(A.xy());
; 77   : 
; 78   : 		Error += glm::all(glm::equal(A, B)) ? 0 : 1;
; 79   : 		Error += glm::all(glm::equal(A, C)) ? 0 : 1;
; 80   : 		Error += glm::all(glm::equal(A, D)) ? 0 : 1;
; 81   : 	}
; 82   : #endif//GLM_HAS_UNRESTRICTED_UNIONS && defined(GLM_FORCE_SWIZZLE)
; 83   : 
; 84   : 	{
; 85   : 		glm::vec2 A = glm::vec2(2.0f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR A$8[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 86   : 		glm::vec2 B = glm::vec2(2.0f, 3.0f);

	movss	xmm2, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR B$9[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 87   : 		glm::vec2 C = glm::vec2(2.0f, 3.0);

	movsd	xmm2, QWORD PTR __real@4008000000000000
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR C$10[rsp]
	call	??$?0MN@?$tvec2@M$0A@@glm@@QEAA@MN@Z	; glm::tvec2<float,0>::tvec2<float,0><float,double>

; 88   : 		//glm::vec2 D = glm::dvec2(2.0); // Build error TODO: What does the specification says?
; 89   : 		glm::vec2 E(glm::dvec2(2.0));

	movsd	xmm1, QWORD PTR __real@4000000000000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR E$11[rsp]
	call	??$?0N$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@N$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><double,0>

; 90   : 		glm::vec2 F(glm::ivec2(2));

	mov	edx, 2
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR F$12[rsp]
	call	??$?0H$0A@@?$tvec2@M$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<float,0>::tvec2<float,0><int,0>

; 91   : 	}
; 92   : 
; 93   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 94   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_vec1_ctor@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test_vec1_ctor@@YAHXZ ENDP				; test_vec1_ctor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z PROC		; glm::tvec1<float,0>::operator+=<double>, COMDAT

; 105  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 106  : 		this->x += static_cast<T>(scalar);

	cvtsd2ss xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 107  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 108  : 	}

	pop	rdi
	ret	0
??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z ENDP		; glm::tvec1<float,0>::operator+=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec1<float,0>::operator+=<float>, COMDAT

; 105  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 106  : 		this->x += static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 107  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 108  : 	}

	pop	rdi
	ret	0
??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec1<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z PROC		; glm::tvec1<float,0>::operator*=<double>, COMDAT

; 137  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 138  : 		this->x *= static_cast<T>(scalar);

	cvtsd2ss xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 139  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 140  : 	}

	pop	rdi
	ret	0
??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z ENDP		; glm::tvec1<float,0>::operator*=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec1<float,0>::operator*=<float>, COMDAT

; 137  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 138  : 		this->x *= static_cast<T>(scalar);

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 139  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 140  : 	}

	pop	rdi
	ret	0
??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec1<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
tv67 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 537  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 538  : 		return (v1.x == v2.x);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv67[rsp]

; 539  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
tv67 = 0
v1$ = 32
v2$ = 40
??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 543  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 544  : 		return (v1.x != v2.x);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN5@operator
	je	SHORT $LN3@operator
$LN5@operator:
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv67[rsp]

; 545  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 52
B$ = 84
R$5 = 100
S$6 = 101
R$7 = 102
S$8 = 103
tv78 = 104
tv130 = 108
?test_vec1_operators@@YAHXZ PROC			; test_vec1_operators

; 10   : {

$LN7:
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 11   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 12   : 
; 13   : 	glm::vec1 A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 14   : 	glm::vec1 B(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 15   : 	{
; 16   : 		bool R = A != B;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ; glm::operator!=<float,0>
	mov	BYTE PTR R$5[rsp], al

; 17   : 		bool S = A == B;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ; glm::operator==<float,0>
	mov	BYTE PTR S$6[rsp], al

; 18   : 
; 19   : 		Error += (S && !R) ? 0 : 1;

	movzx	eax, BYTE PTR S$6[rsp]
	test	eax, eax
	je	SHORT $LN3@test_vec1_
	movzx	eax, BYTE PTR R$5[rsp]
	test	eax, eax
	jne	SHORT $LN3@test_vec1_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_vec1_
$LN3@test_vec1_:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_vec1_:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	}
; 21   : 
; 22   : 	{
; 23   : 		A *= 1.0f;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?XM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec1<float,0>::operator*=<float>

; 24   : 		B *= 1.0;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR B$[rsp]
	call	??$?XN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z ; glm::tvec1<float,0>::operator*=<double>

; 25   : 		A += 1.0f;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?YM@?$tvec1@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec1<float,0>::operator+=<float>

; 26   : 		B += 1.0;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR B$[rsp]
	call	??$?YN@?$tvec1@M$0A@@glm@@QEAAAEAU01@N@Z ; glm::tvec1<float,0>::operator+=<double>

; 27   : 
; 28   : 		bool R = A != B;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ; glm::operator!=<float,0>
	mov	BYTE PTR R$7[rsp], al

; 29   : 		bool S = A == B;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec1@M$0A@@0@0@Z ; glm::operator==<float,0>
	mov	BYTE PTR S$8[rsp], al

; 30   : 
; 31   : 		Error += (S && !R) ? 0 : 1;

	movzx	eax, BYTE PTR S$8[rsp]
	test	eax, eax
	je	SHORT $LN5@test_vec1_
	movzx	eax, BYTE PTR R$7[rsp]
	test	eax, eax
	jne	SHORT $LN5@test_vec1_
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN6@test_vec1_
$LN5@test_vec1_:
	mov	DWORD PTR tv130[rsp], 1
$LN6@test_vec1_:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 32   : 	}
; 33   : 
; 34   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 35   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_vec1_operators@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?test_vec1_operators@@YAHXZ ENDP			; test_vec1_operators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
;	COMDAT ??__Ev2@@YAXXZ
text$di	SEGMENT
??__Ev2@@YAXXZ PROC					; `dynamic initializer for 'v2'', COMDAT

; 7    : static glm::vec1 v2(1);

	push	rdi
	sub	rsp, 32					; 00000020H
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?v2@@3U?$tvec1@M$0A@@glm@@A
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__Ev2@@YAXXZ ENDP					; `dynamic initializer for 'v2''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_vec1.cpp
;	COMDAT ??__Ev1@@YAXXZ
text$di	SEGMENT
??__Ev1@@YAXXZ PROC					; `dynamic initializer for 'v1'', COMDAT

; 6    : static glm::vec1 v1;

	push	rdi
	sub	rsp, 32					; 00000020H
	lea	rcx, OFFSET FLAT:?v1@@3U?$tvec1@M$0A@@glm@@A
	call	??0?$tvec1@M$0A@@glm@@QEAA@XZ		; glm::tvec1<float,0>::tvec1<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__Ev1@@YAXXZ ENDP					; `dynamic initializer for 'v1''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec1@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 14   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 12   : 				: x(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0

; 14   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
END
