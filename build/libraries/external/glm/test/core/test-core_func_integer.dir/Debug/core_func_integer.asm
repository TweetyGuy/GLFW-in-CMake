; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
?DataI32@findLSB@@3QBU?$type@HH@1@B DD 01H		; findLSB::DataI32
	DD	00H
	DD	03H
	DD	00H
	DD	02H
	DD	01H
	DD	010000H
	DD	010H
	DD	07fff0000H
	DD	010H
	DD	07f000000H
	DD	018H
	DD	07f00ff00H
	DD	08H
	DD	00H
	DD	0ffffffffH
$SG58056 DB	'glm::findLSB: %d clocks', 0aH, 00H
	ORG $+7
$SG58057 DB	'findLSB - 0.9.5: %d clocks', 0aH, 00H
$SG68723 DB	'%s', 00H
	ORG $+1
$SG58058 DB	'findLSB - intrinsics: %d clocks', 0aH, 00H
	ORG $+3
$SG68726 DB	00H, 00H
	ORG $+2
$SG58059 DB	'findLSB - ntz2: %d clocks', 0aH, 00H
	ORG $+5
$SG58060 DB	'findLSB - branchfree: %d clocks', 0aH, 00H
	ORG $+7
?DataI32@bitCount@@3QBU?$type@H@1@B DD 01H		; bitCount::DataI32
	DD	01H
	DD	03H
	DD	02H
	DD	02H
	DD	01H
	DD	07fffffffH
	DD	01fH
	DD	00H
	DD	00H
$SG68722 DB	'invalid argument', 00H
	ORG $+7
$SG68724 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+6
$SG68727 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG68725 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+4
$SG60876 DB	'bitCount - TimeIf %d', 0aH, 00H
	ORG $+2
$SG60877 DB	'bitCount - TimeVec %d', 0aH, 00H
	ORG $+1
$SG60878 DB	'bitCount - TimeDefault %d', 0aH, 00H
	ORG $+5
$SG60879 DB	'bitCount - TimeVec4 %d', 0aH, 00H
$SG60880 DB	'bitCount - bitfield %d', 0aH, 00H
	ORG $+8
$SG60905 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'g'
	DB	00H, 'e', 00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+4
$SG60906 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
?Data32@bitfieldInsert@@3QBU?$type@II@1@B DD 00H	; bitfieldInsert::Data32
	DD	0ffffffffH
	DD	00H
	DD	020H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01fH
	DD	07fffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	0ff000000H
	DD	0ff00H
	DD	08H
	DD	08H
	DD	0ff00ff00H
	DD	0ffff0000H
	DD	0ffffH
	DD	010H
	DD	010H
	DD	00H
	DD	0ffffH
	DD	0ffff0000H
	DD	010H
	DD	010H
	DD	0ffffffffH
	ORG $+8
?Data32@bitfieldExtract@@3QBU?$type@II@1@B DD 0ffffffffH ; bitfieldExtract::Data32
	DD	00H
	DD	020H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	020H
	DD	00H
	DD	00H
	DD	0f0f0f0fH
	DD	00H
	DD	020H
	DD	0f0f0f0fH
	DD	00H
	DD	00H
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DD	080000000H
	DD	01fH
	DD	01H
	DD	01H
	DD	00H
	DD	07fffffffH
	DD	01fH
	DD	01H
	DD	00H
	DD	00H
	DD	0300H
	DD	08H
	DD	08H
	DD	03H
	DD	00H
	DD	0ff00H
	DD	08H
	DD	08H
	DD	0ffH
	DD	00H
	DD	0fffffff0H
	DD	00H
	DD	05H
	DD	010H
	DD	00H
	DD	0ffH
	DD	01H
	DD	03H
	DD	07H
	DD	00H
	DD	0ffH
	DD	00H
	DD	03H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	08H
	DD	0ffH
	DD	00H
	DD	0ffff0000H
	DD	010H
	DD	010H
	DD	0ffffH
	DD	00H
	DD	0fffffff0H
	DD	00H
	DD	08H
	DD	00H
	DD	01H
	DD	0ffffffffH
	DD	010H
	DD	010H
	DD	00H
	DD	01H
	ORG $+12
?Data32@bitfieldReverse@@3QBU?$type@I@1@B DD 01H	; bitfieldReverse::Data32
	DD	080000000H
	DD	00H
	DD	0fH
	DD	0f0000000H
	DD	00H
	DD	0ffH
	DD	0ff000000H
	DD	00H
	DD	0f0000000H
	DD	0fH
	DD	00H
	DD	0ff000000H
	DD	0ffH
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	ORG $+12
?Data64@bitfieldReverse@@3QBU?$type@_K@1@B DQ 00000000000000ffH ; bitfieldReverse::Data64
	DQ	ff00000000000000H
	DD	00H
	ORG $+4
	DQ	000000000000000fH
	DQ	f000000000000000H
	DD	00H
	ORG $+4
	DQ	f000000000000000H
	DQ	000000000000000fH
	DD	00H
	ORG $+4
	DQ	ffffffffffffffffH
	DQ	ffffffffffffffffH
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG56548 DB	'glm::bitfieldReverse: %d clocks', 0aH, 00H
	ORG $+7
$SG56549 DB	'bitfieldReverseLoop: %d clocks', 0aH, 00H
$SG56550 DB	'bitfieldReverseUint32: %d clocks', 0aH, 00H
	ORG $+6
$SG56551 DB	'bitfieldReverseOps: %d clocks', 0aH, 00H
	ORG $+1
$SG57102 DB	'glm::bitfieldReverse - 64: %d clocks', 0aH, 00H
	ORG $+2
$SG57103 DB	'bitfieldReverseLoop - 64: %d clocks', 0aH, 00H
	ORG $+3
$SG57104 DB	'bitfieldReverseUint - 64: %d clocks', 0aH, 00H
	ORG $+3
$SG57105 DB	'bitfieldReverseOps - 64: %d clocks', 0aH, 00H
	ORG $+4
$SG57268 DB	'glm::findMSB: %d clocks', 0aH, 00H
	ORG $+7
$SG57269 DB	'findMSB - nlz1: %d clocks', 0aH, 00H
	ORG $+5
$SG57270 DB	'findMSB - nlz2: %d clocks', 0aH, 00H
	ORG $+5
$SG57271 DB	'findMSB - 0.9.5: %d clocks', 0aH, 00H
	ORG $+4
$SG57272 DB	'findMSB - intrinsics: %d clocks', 0aH, 00H
	ORG $+7
$SG57273 DB	'findMSB - pop: %d clocks', 0aH, 00H
	ORG $+6
$SG57274 DB	'findMSB - avx tzcnt: %d clocks', 0aH, 00H
CONST	ENDS
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?max@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::max
PUBLIC	?uaddCarry@glm@@YAIAEBI0AEAI@Z			; glm::uaddCarry
PUBLIC	?usubBorrow@glm@@YAIAEBI0AEAI@Z			; glm::usubBorrow
PUBLIC	?umulExtended@glm@@YAXAEBI0AEAI1@Z		; glm::umulExtended
PUBLIC	?imulExtended@glm@@YAXHHAEAH0@Z			; glm::imulExtended
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@I@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?test@bitfieldInsert@@YAHXZ			; bitfieldInsert::test
PUBLIC	??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z		; glm::bitfieldInsert<unsigned int>
PUBLIC	?test@bitfieldExtract@@YAHXZ			; bitfieldExtract::test
PUBLIC	??$bitfieldExtract@I@glm@@YAIIHH@Z		; glm::bitfieldExtract<unsigned int>
PUBLIC	?bitfieldReverseUint32@bitfieldReverse@@YAII@Z	; bitfieldReverse::bitfieldReverseUint32
PUBLIC	?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseUint64
PUBLIC	?test32_bitfieldReverse@bitfieldReverse@@YAHXZ	; bitfieldReverse::test32_bitfieldReverse
PUBLIC	??$bitfieldReverse@I@glm@@YAII@Z		; glm::bitfieldReverse<unsigned int>
PUBLIC	?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseLoop
PUBLIC	??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned int>
PUBLIC	?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseUint32
PUBLIC	?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseOps
PUBLIC	??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z	; bitfieldReverse::bitfieldReverseOps<unsigned int>
PUBLIC	?test64_bitfieldReverse@bitfieldReverse@@YAHXZ	; bitfieldReverse::test64_bitfieldReverse
PUBLIC	??$bitfieldReverse@_K@glm@@YA_K_K@Z		; glm::bitfieldReverse<unsigned __int64>
PUBLIC	?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseLoop
PUBLIC	??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64>
PUBLIC	?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseUint64
PUBLIC	?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseOps
PUBLIC	??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseOps<unsigned __int64>
PUBLIC	?test@bitfieldReverse@@YAHXZ			; bitfieldReverse::test
PUBLIC	?perf32@bitfieldReverse@@YAHI@Z			; bitfieldReverse::perf32
PUBLIC	??0?$allocator@I@std@@QEAA@XZ			; std::allocator<unsigned int>::allocator<unsigned int>
PUBLIC	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z	; std::allocator<unsigned int>::deallocate
PUBLIC	?allocate@?$allocator@I@std@@QEAAPEAI_K@Z	; std::allocator<unsigned int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
PUBLIC	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
PUBLIC	?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
PUBLIC	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
PUBLIC	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
PUBLIC	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
PUBLIC	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
PUBLIC	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	?perf64@bitfieldReverse@@YAH_K@Z		; bitfieldReverse::perf64
PUBLIC	??0?$allocator@_K@std@@QEAA@XZ			; std::allocator<unsigned __int64>::allocator<unsigned __int64>
PUBLIC	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z	; std::allocator<unsigned __int64>::deallocate
PUBLIC	?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z	; std::allocator<unsigned __int64>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
PUBLIC	??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
PUBLIC	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
PUBLIC	?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::resize
PUBLIC	?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
PUBLIC	?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::capacity
PUBLIC	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Change_array
PUBLIC	?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy
PUBLIC	?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range
PUBLIC	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
PUBLIC	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
PUBLIC	?perf@bitfieldReverse@@YAH_K@Z			; bitfieldReverse::perf
PUBLIC	?findMSB_nlz2@findMSB@@YAHI@Z			; findMSB::findMSB_nlz2
PUBLIC	?findMSB_pop@findMSB@@YAHI@Z			; findMSB::findMSB_pop
PUBLIC	??$bitCount@I@glm@@YAHI@Z			; glm::bitCount<unsigned int>
PUBLIC	?perf_int@findMSB@@YAH_K@Z			; findMSB::perf_int
PUBLIC	??$findMSB@H@glm@@YAHH@Z			; glm::findMSB<int>
PUBLIC	??$findMSB_nlz1@H@findMSB@@YAHH@Z		; findMSB::findMSB_nlz1<int>
PUBLIC	??$findMSB_095@H@findMSB@@YAHH@Z		; findMSB::findMSB_095<int>
PUBLIC	??$findMSB_intrinsic@H@findMSB@@YAHH@Z		; findMSB::findMSB_intrinsic<int>
PUBLIC	??$findMSB_avx@H@findMSB@@YAHH@Z		; findMSB::findMSB_avx<int>
PUBLIC	?test_ivec4@findMSB@@YAHXZ			; findMSB::test_ivec4
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::findMSB<int,0,glm::tvec4>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test_int@findMSB@@YAHXZ			; findMSB::test_int
PUBLIC	??$findMSB@I@glm@@YAHI@Z			; glm::findMSB<unsigned int>
PUBLIC	??$findMSB_nlz1@I@findMSB@@YAHI@Z		; findMSB::findMSB_nlz1<unsigned int>
PUBLIC	??$findMSB_095@I@findMSB@@YAHI@Z		; findMSB::findMSB_095<unsigned int>
PUBLIC	??$findMSB_intrinsic@I@findMSB@@YAHI@Z		; findMSB::findMSB_intrinsic<unsigned int>
PUBLIC	?test@findMSB@@YAHXZ				; findMSB::test
PUBLIC	?perf@findMSB@@YAH_K@Z				; findMSB::perf
PUBLIC	?test_int@findLSB@@YAHXZ			; findLSB::test_int
PUBLIC	??$findLSB@H@glm@@YAHH@Z			; glm::findLSB<int>
PUBLIC	??$findLSB_095@H@findLSB@@YAHH@Z		; findLSB::findLSB_095<int>
PUBLIC	??$findLSB_intrinsic@H@findLSB@@YAHH@Z		; findLSB::findLSB_intrinsic<int>
PUBLIC	??$findLSB_ntz2@H@findLSB@@YAHH@Z		; findLSB::findLSB_ntz2<int>
PUBLIC	??$findLSB_branchfree@H@findLSB@@YAHH@Z		; findLSB::findLSB_branchfree<int>
PUBLIC	?test@findLSB@@YAHXZ				; findLSB::test
PUBLIC	?perf_int@findLSB@@YAH_K@Z			; findLSB::perf_int
PUBLIC	?perf@findLSB@@YAH_K@Z				; findLSB::perf
PUBLIC	?test@uaddCarry@@YAHXZ				; uaddCarry::test
PUBLIC	?length@?$tvec1@I$0A@@glm@@SAHXZ		; glm::tvec1<unsigned int,0>::length
PUBLIC	??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec1<unsigned int,0>::operator[]
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::uaddCarry<0,glm::tvec1>
PUBLIC	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	?test@usubBorrow@@YAHXZ				; usubBorrow::test
PUBLIC	??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec1>
PUBLIC	??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec2>
PUBLIC	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec3<unsigned int,0>::operator[]
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@I@Z			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@III@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec3>
PUBLIC	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec4<unsigned int,0>::operator[]
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@I@Z			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec4>
PUBLIC	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
PUBLIC	?test@umulExtended@@YAHXZ			; umulExtended::test
PUBLIC	??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec1>
PUBLIC	??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec2>
PUBLIC	??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec3>
PUBLIC	??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec4>
PUBLIC	?test@imulExtended@@YAHXZ			; imulExtended::test
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec1>
PUBLIC	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@H@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec2>
PUBLIC	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@H@Z			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec3>
PUBLIC	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
PUBLIC	??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec4>
PUBLIC	?perf@bitCount@@YAH_K@Z				; bitCount::perf
PUBLIC	??0?$allocator@H@std@@QEAA@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z	; std::allocator<int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
PUBLIC	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
PUBLIC	?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::resize
PUBLIC	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
PUBLIC	??$bitCount_if@H@bitCount@@YAHH@Z		; bitCount::bitCount_if<int>
PUBLIC	??$bitCount_vec@_K@bitCount@@YAH_K@Z		; bitCount::bitCount_vec<unsigned __int64>
PUBLIC	??$bitCount@_K@glm@@YAH_K@Z			; glm::bitCount<unsigned __int64>
PUBLIC	??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::bitCount<int,0,glm::tvec4>
PUBLIC	??$bitCount_bitfield@H@bitCount@@YAHH@Z		; bitCount::bitCount_bitfield<int>
PUBLIC	?test@bitCount@@YAHXZ				; bitCount::test
PUBLIC	??$bitCount@H@glm@@YAHH@Z			; glm::bitCount<int>
PUBLIC	??$bitCount_vec@H@bitCount@@YAHH@Z		; bitCount::bitCount_vec<int>
PUBLIC	main
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize<std::_Value_init_tag>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>
PUBLIC	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >
PUBLIC	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z ; glm::bitfieldInsert<unsigned int,0,glm::tvec1>
PUBLIC	??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z ; glm::bitfieldExtract<unsigned int,0,glm::tvec1>
PUBLIC	??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
PUBLIC	??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
PUBLIC	??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_K$0A@@glm@@SAHXZ		; glm::tvec1<unsigned __int64,0>::length
PUBLIC	??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z		; glm::tvec1<unsigned __int64,0>::operator[]
PUBLIC	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
PUBLIC	??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
PUBLIC	??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
PUBLIC	??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
PUBLIC	??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::bitCount<unsigned int,0,glm::tvec1>
PUBLIC	??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::findMSB<int,0,glm::tvec1>
PUBLIC	?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_findMSB_vec<int,0,glm::tvec4,32>::call
PUBLIC	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
PUBLIC	?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z ; glm::detail::compute_findLSB<int,32>::call
PUBLIC	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned __int64,0>
PUBLIC	??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
PUBLIC	??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec1>
PUBLIC	??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator+<unsigned __int64,0>
PUBLIC	??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>
PUBLIC	??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned int,0>
PUBLIC	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec1<__int64,0>::tvec1<__int64,0>
PUBLIC	??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><unsigned int,0>
PUBLIC	??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><__int64,0>
PUBLIC	??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
PUBLIC	??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec2>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned int,0>
PUBLIC	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z		; glm::tvec2<__int64,0>::tvec2<__int64,0>
PUBLIC	??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned int,0>
PUBLIC	??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><__int64,0>
PUBLIC	??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
PUBLIC	??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec3>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned int,0>
PUBLIC	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z		; glm::tvec3<__int64,0>::tvec3<__int64,0>
PUBLIC	??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><unsigned int,0>
PUBLIC	??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><__int64,0>
PUBLIC	??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
PUBLIC	??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec4>
PUBLIC	??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z	; glm::operator-<unsigned int,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z		; glm::tvec4<__int64,0>::tvec4<__int64,0>
PUBLIC	??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><unsigned int,0>
PUBLIC	??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
PUBLIC	??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><__int64,0>
PUBLIC	??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>
PUBLIC	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
PUBLIC	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z		; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
PUBLIC	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>
PUBLIC	??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned __int64,0>
PUBLIC	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z		; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
PUBLIC	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>
PUBLIC	??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
PUBLIC	??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><unsigned int,0>
PUBLIC	??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>
PUBLIC	??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
PUBLIC	??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><unsigned __int64,0>
PUBLIC	??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><int,0>
PUBLIC	??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>
PUBLIC	??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><__int64,0>
PUBLIC	??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
PUBLIC	??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><int,0>
PUBLIC	??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>
PUBLIC	??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><__int64,0>
PUBLIC	??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
PUBLIC	??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><int,0>
PUBLIC	??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>
PUBLIC	??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><__int64,0>
PUBLIC	??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
PUBLIC	??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><int,0>
PUBLIC	??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>
PUBLIC	??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
PUBLIC	??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><__int64,0>
PUBLIC	??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
PUBLIC	??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z ; glm::bitCount<unsigned __int64,0,glm::tvec1>
PUBLIC	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
PUBLIC	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,0>::call
PUBLIC	??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><unsigned int,0>
PUBLIC	??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
PUBLIC	??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::bitCount<int,0,glm::tvec1>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
PUBLIC	??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z	; glm::operator&<unsigned int,0>
PUBLIC	??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z	; glm::operator>><unsigned int,0>
PUBLIC	??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned int,0>
PUBLIC	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
PUBLIC	??$compute_findMSB_32@H@detail@glm@@YAHH@Z	; glm::detail::compute_findMSB_32<int>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$mask@H@detail@glm@@YAHH@Z			; glm::detail::mask<int>
PUBLIC	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator&<unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator>><unsigned int,0>
PUBLIC	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
PUBLIC	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,0>::call
PUBLIC	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator<<<unsigned int,0>
PUBLIC	??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec1<unsigned int,0>::operator|=<unsigned int>
PUBLIC	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
PUBLIC	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<0>::call<unsigned int,0,glm::tvec1>
PUBLIC	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
PUBLIC	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
PUBLIC	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
PUBLIC	??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec1<unsigned __int64,0>::operator|=<unsigned __int64>
PUBLIC	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
PUBLIC	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
PUBLIC	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,0>::call
PUBLIC	??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>
PUBLIC	?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_findMSB_vec<int,0,glm::tvec1,32>::call
PUBLIC	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
PUBLIC	?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
PUBLIC	??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<unsigned int,0>::operator-=<unsigned int>
PUBLIC	??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<__int64,0>::operator-=<__int64>
PUBLIC	??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z	; glm::tvec4<__int64,0>::operator+=<__int64>
PUBLIC	??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<unsigned __int64,0>::operator*=<unsigned __int64>
PUBLIC	??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z	; glm::tvec4<unsigned __int64,0>::operator>>=<unsigned __int64>
PUBLIC	??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<__int64,0>::operator*=<__int64>
PUBLIC	??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z	; glm::tvec4<__int64,0>::operator&=<__int64>
PUBLIC	??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z	; glm::tvec4<__int64,0>::operator>>=<__int64>
PUBLIC	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
PUBLIC	??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned __int64,0>
PUBLIC	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
PUBLIC	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<0>::call<unsigned int,0,glm::tvec1>
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
PUBLIC	??$_Unfancy@H@std@@YAPEAHPEAH@Z			; std::_Unfancy<int>
PUBLIC	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z		; std::_Zero_range<int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
PUBLIC	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z		; std::_Unfancy<unsigned __int64>
PUBLIC	??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z	; std::_Zero_range<unsigned __int64 *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
PUBLIC	??$_Unfancy@I@std@@YAPEAIPEAI@Z			; std::_Unfancy<unsigned int>
PUBLIC	??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z		; std::_Zero_range<unsigned int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>
PUBLIC	??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z	; glm::tvec4<unsigned int,0>::operator&=<unsigned int>
PUBLIC	??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z	; glm::tvec4<unsigned int,0>::operator>>=<unsigned int>
PUBLIC	??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<unsigned int,0>::operator+=<unsigned int>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
PUBLIC	??$compute_findMSB_32@I@detail@glm@@YAHI@Z	; glm::detail::compute_findMSB_32<unsigned int>
PUBLIC	?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec1>::call
PUBLIC	??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator+<unsigned int,0>
PUBLIC	??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$07@std@@YA_K_K@Z		; std::_Get_size_of_n<8>
PUBLIC	?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<unsigned int,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<__int64,0,0>::call
PUBLIC	?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<__int64,0,0>::call
PUBLIC	?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<unsigned __int64,0,0>::call
PUBLIC	?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<unsigned __int64,0,-1,64,0>::call
PUBLIC	?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<__int64,0,0>::call
PUBLIC	?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<__int64,0,-1,64,0>::call
PUBLIC	?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<__int64,0,-1,64,0>::call
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
PUBLIC	??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<int,0> &>
PUBLIC	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>
PUBLIC	??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >
PUBLIC	??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0> >
PUBLIC	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z	; std::_Get_unwrapped<int * const &>
PUBLIC	??$move@AEAH@std@@YA$$QEAHAEAH@Z		; std::move<int &>
PUBLIC	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
PUBLIC	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z	; std::_To_address<int *>
PUBLIC	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
PUBLIC	??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z ; std::_Get_unwrapped<unsigned __int64 * const &>
PUBLIC	??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z		; std::move<unsigned __int64 &>
PUBLIC	??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z ; std::_Copy_memmove<unsigned __int64 *,unsigned __int64 *>
PUBLIC	??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<unsigned __int64>
PUBLIC	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z	; std::_To_address<unsigned __int64 *>
PUBLIC	??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>
PUBLIC	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z	; std::_Get_unwrapped<unsigned int * const &>
PUBLIC	??$move@AEAI@std@@YA$$QEAIAEAI@Z		; std::move<unsigned int &>
PUBLIC	??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z	; std::_Copy_memmove<unsigned int *,unsigned int *>
PUBLIC	??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>
PUBLIC	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z	; std::_To_address<unsigned int *>
PUBLIC	??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>
PUBLIC	?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<unsigned int,0,-1,32,0>::call
PUBLIC	?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<unsigned int,0,-1,32,0>::call
PUBLIC	?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<unsigned int,0,0>::call
PUBLIC	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
PUBLIC	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
PUBLIC	??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
PUBLIC	??$forward@H@std@@YA$$QEAHAEAH@Z		; std::forward<int>
PUBLIC	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
PUBLIC	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z		; std::_Voidify_iter<int *>
PUBLIC	??$forward@_K@std@@YA$$QEA_KAEA_K@Z		; std::forward<unsigned __int64>
PUBLIC	??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64>
PUBLIC	??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z	; std::_Voidify_iter<unsigned __int64 *>
PUBLIC	??$forward@I@std@@YA$$QEAIAEAI@Z		; std::forward<unsigned int>
PUBLIC	??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
PUBLIC	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z		; std::_Voidify_iter<unsigned int *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1ME@EGLCKJKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DA@PHCGLBFJ@?$AAM?$AAo?$AAs?$AAt?$AAS?$AAi?$AAg?$AAn?$AAi?$AAf?$AAi?$AAc?$AAa?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp_clock:PROC
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@I@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@I@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uaddCarry@glm@@YAIAEBI0AEAI@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$?uaddCarry@glm@@YAIAEBI0AEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?usubBorrow@glm@@YAIAEBI0AEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+134
	DD	imagerel $unwind$?usubBorrow@glm@@YAIAEBI0AEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?umulExtended@glm@@YAXAEBI0AEAI1@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?umulExtended@glm@@YAXAEBI0AEAI1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?imulExtended@glm@@YAXHHAEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?imulExtended@glm@@YAXHHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitfieldInsert@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+238
	DD	imagerel $unwind$?test@bitfieldInsert@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitfieldExtract@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+285
	DD	imagerel $unwind$?test@bitfieldExtract@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldExtract@I@glm@@YAIIHH@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$bitfieldExtract@I@glm@@YAIIHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldReverseUint32@bitfieldReverse@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$?bitfieldReverseUint32@bitfieldReverse@@YAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+354
	DD	imagerel $unwind$?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test32_bitfieldReverse@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+257
	DD	imagerel $unwind$?test32_bitfieldReverse@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverse@I@glm@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitfieldReverse@I@glm@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+257
	DD	imagerel $unwind$?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+257
	DD	imagerel $unwind$?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ
$pdata$?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+257
	DD	imagerel $unwind$?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test64_bitfieldReverse@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+261
	DD	imagerel $unwind$?test64_bitfieldReverse@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverse@_K@glm@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$bitfieldReverse@_K@glm@@YA_K_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+261
	DD	imagerel $unwind$?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+261
	DD	imagerel $unwind$?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ
$pdata$?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ DD imagerel $LN14
	DD	imagerel $LN14+261
	DD	imagerel $unwind$?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitfieldReverse@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$?test@bitfieldReverse@@YAHXZ
$pdata$?perf32@bitfieldReverse@@YAHI@Z DD imagerel $LN16
	DD	imagerel $LN16+612
	DD	imagerel $unwind$?perf32@bitfieldReverse@@YAHI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA DD imagerel ?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA
	DD	imagerel ?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@I@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@I@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?perf64@bitfieldReverse@@YAH_K@Z DD imagerel $LN16
	DD	imagerel $LN16+673
	DD	imagerel $unwind$?perf64@bitfieldReverse@@YAH_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA DD imagerel ?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@_K@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@_K@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@bitfieldReverse@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?perf@bitfieldReverse@@YAH_K@Z
$pdata$?findMSB_nlz2@findMSB@@YAHI@Z DD imagerel $LN8
	DD	imagerel $LN8+204
	DD	imagerel $unwind$?findMSB_nlz2@findMSB@@YAHI@Z
$pdata$?findMSB_pop@findMSB@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$?findMSB_pop@findMSB@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@I@glm@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitCount@I@glm@@YAHI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_int@findMSB@@YAH_K@Z DD imagerel $LN59
	DD	imagerel $LN59+2556
	DD	imagerel $unwind$?perf_int@findMSB@@YAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$findMSB@H@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_nlz1@H@findMSB@@YAHH@Z DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$??$findMSB_nlz1@H@findMSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_095@H@findMSB@@YAHH@Z DD imagerel $LN17
	DD	imagerel $LN17+256
	DD	imagerel $unwind$??$findMSB_095@H@findMSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_intrinsic@H@findMSB@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??$findMSB_intrinsic@H@findMSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_avx@H@findMSB@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+27
	DD	imagerel $unwind$??$findMSB_avx@H@findMSB@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec4@findMSB@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+1530
	DD	imagerel $unwind$?test_ivec4@findMSB@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_int@findMSB@@YAHXZ DD imagerel $LN28
	DD	imagerel $LN28+1516
	DD	imagerel $unwind$?test_int@findMSB@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I@glm@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$findMSB@I@glm@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_nlz1@I@findMSB@@YAHI@Z DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$??$findMSB_nlz1@I@findMSB@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_095@I@findMSB@@YAHI@Z DD imagerel $LN17
	DD	imagerel $LN17+256
	DD	imagerel $unwind$??$findMSB_095@I@findMSB@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB_intrinsic@I@findMSB@@YAHI@Z DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??$findMSB_intrinsic@I@findMSB@@YAHI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@findMSB@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?test@findMSB@@YAHXZ
$pdata$?perf@findMSB@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?perf@findMSB@@YAH_K@Z
$pdata$?test_int@findLSB@@YAHXZ DD imagerel $LN28
	DD	imagerel $LN28+618
	DD	imagerel $unwind$?test_int@findLSB@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findLSB@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??$findLSB@H@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findLSB_095@H@findLSB@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+84
	DD	imagerel $unwind$??$findLSB_095@H@findLSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findLSB_intrinsic@H@findLSB@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+94
	DD	imagerel $unwind$??$findLSB_intrinsic@H@findLSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findLSB_ntz2@H@findLSB@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$??$findLSB_ntz2@H@findLSB@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findLSB_branchfree@H@findLSB@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+126
	DD	imagerel $unwind$??$findLSB_branchfree@H@findLSB@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@findLSB@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?test@findLSB@@YAHXZ
$pdata$?perf_int@findLSB@@YAH_K@Z DD imagerel $LN43
	DD	imagerel $LN43+1139
	DD	imagerel $unwind$?perf_int@findLSB@@YAH_K@Z
$pdata$?perf@findLSB@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?perf@findLSB@@YAH_K@Z
$pdata$?test@uaddCarry@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+974
	DD	imagerel $unwind$?test@uaddCarry@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+342
	DD	imagerel $unwind$??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@usubBorrow@@YAHXZ DD imagerel $LN23
	DD	imagerel $LN23+1372
	DD	imagerel $unwind$?test@usubBorrow@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+395
	DD	imagerel $unwind$??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+403
	DD	imagerel $unwind$??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@III@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@III@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+418
	DD	imagerel $unwind$??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+418
	DD	imagerel $unwind$??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@umulExtended@@YAHXZ DD imagerel $LN23
	DD	imagerel $LN23+1432
	DD	imagerel $unwind$?test@umulExtended@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+206
	DD	imagerel $unwind$??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+225
	DD	imagerel $unwind$??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+238
	DD	imagerel $unwind$??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+241
	DD	imagerel $unwind$??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@imulExtended@@YAHXZ DD imagerel $LN23
	DD	imagerel $LN23+1415
	DD	imagerel $unwind$?test@imulExtended@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+269
	DD	imagerel $unwind$??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+282
	DD	imagerel $unwind$??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z DD imagerel $LN3
	DD	imagerel $LN3+285
	DD	imagerel $unwind$??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf@bitCount@@YAH_K@Z DD imagerel $LN20
	DD	imagerel $LN20+1035
	DD	imagerel $unwind$?perf@bitCount@@YAH_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA DD imagerel ?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA
$pdata$?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA DD imagerel ?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA
	DD	imagerel ?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@H@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@H@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount_if@H@bitCount@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$??$bitCount_if@H@bitCount@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount_vec@_K@bitCount@@YAH_K@Z DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$??$bitCount_vec@_K@bitCount@@YAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@_K@glm@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$bitCount@_K@glm@@YAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+400
	DD	imagerel $unwind$??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount_bitfield@H@bitCount@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitCount_bitfield@H@bitCount@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@bitCount@@YAHXZ DD imagerel $LN15
	DD	imagerel $LN15+433
	DD	imagerel $unwind$?test@bitCount@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$bitCount@H@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount_vec@H@bitCount@@YAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+91
	DD	imagerel $unwind$??$bitCount_vec@H@bitCount@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+194
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+359
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+289
	DD	imagerel $unwind$??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z DD imagerel $LN6
	DD	imagerel $LN6+247
	DD	imagerel $unwind$??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+289
	DD	imagerel $unwind$??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_K$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_K$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+337
	DD	imagerel $unwind$??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z DD imagerel $LN6
	DD	imagerel $LN6+272
	DD	imagerel $unwind$??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+337
	DD	imagerel $unwind$??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+293
	DD	imagerel $unwind$??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+339
	DD	imagerel $unwind$??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+293
	DD	imagerel $unwind$??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+293
	DD	imagerel $unwind$??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+336
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+333
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+333
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+333
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compute_findMSB_32@H@detail@glm@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$compute_findMSB_32@H@detail@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mask@H@detail@glm@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$??$mask@H@detail@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+220
	DD	imagerel $unwind$?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+235
	DD	imagerel $unwind$?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+235
	DD	imagerel $unwind$?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@I@std@@YAPEAIPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@I@std@@YAPEAIPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAI@std@@YA$$QEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAI@std@@YA$$QEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@H@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@H@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@_K@std@@YA$$QEA_KAEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@_K@std@@YA$$QEA_KAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@I@std@@YA$$QEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@I@std@@YA$$QEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@PHCGLBFJ@?$AAM?$AAo?$AAs?$AAt?$AAS?$AAi?$AAg?$AAn?$AAi?$AAf?$AAi?$AAc?$AAa?$AAn?$AAt@
CONST	SEGMENT
??_C@_1DA@PHCGLBFJ@?$AAM?$AAo?$AAs?$AAt?$AAS?$AAi?$AAg?$AAn?$AAi?$AAf?$AAi?$AAc?$AAa?$AAn?$AAt@ DB 'M'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, 't', 00H, 'B', 00H, 'i', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@EGLCKJKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1ME@EGLCKJKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H, 'c', 00H
	DB	'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'r'
	DB	00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H
	DB	'_', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@I@std@@YA$$QEAIAEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@_K@std@@YA$$QEA_KAEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@H@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAI@std@@YA$$QEAIAEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compute_findMSB_32@I@detail@glm@@YAHI@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0 DB 052H ; glm::detail::compute_findMSB_32<unsigned int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc DD 024H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	04H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcName$0
	ORG $+48
??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData DD 01H ; glm::detail::compute_findMSB_32<unsigned int>
	DD	00H
	DQ	FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z DD 030f01H
	DD	0700b820fH
	DD	0600aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z DD 030f01H
	DD	0700b820fH
	DD	0600aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@I@std@@YAPEAIPEAI@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<int *,std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc DD 024H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mask@H@detail@glm@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$compute_findMSB_32@H@detail@glm@@YAHH@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcName$0 DB 052H ; glm::detail::compute_findMSB_32<int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcVarDesc DD 024H ; glm::detail::compute_findMSB_32<int>
	DD	04H
	DQ	FLAT:??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcName$0
	ORG $+48
??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcFrameData DD 01H ; glm::detail::compute_findMSB_32<int>
	DD	00H
	DQ	FLAT:??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 06H
	DB	00H
	DB	00H
	DB	'~'
	DB	02H
	DB	'd'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD 022a11H
	DD	070109214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc DD 028H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'U', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcName$0 DB 078H ; glm::bitCount<int,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcVarDesc DD 024H ; glm::bitCount<int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+48
??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcFrameData DD 01H ; glm::bitCount<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcName$0 DB 078H ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 024H ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+48
??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcFrameData DD 01H ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z DD 021601H
	DD	060157016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcName$0 DB 078H ; glm::bitCount<unsigned __int64,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcVarDesc DD 028H ; glm::bitCount<unsigned __int64,0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcName$0
	ORG $+48
??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcFrameData DD 01H ; glm::bitCount<unsigned __int64,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcName$0 DB 052H ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcName$0
	ORG $+48
??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcFrameData DD 01H ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcName$0 DB 052H ; glm::detail::compute_findLSB<int,32>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcVarDesc DD 024H ; glm::detail::compute_findLSB<int,32>::call
	DD	04H
	DQ	FLAT:?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcName$0
	ORG $+48
?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcFrameData DD 01H ; glm::detail::compute_findLSB<int,32>::call
	DD	00H
	DQ	FLAT:?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcName$0 DB 078H ; glm::bitCount<unsigned int,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcVarDesc DD 024H ; glm::bitCount<unsigned int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcName$0
	ORG $+48
??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcFrameData DD 01H ; glm::bitCount<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$0 DB 078H ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 028H ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+48
??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcFrameData DD 01H ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z DD 032b01H
	DD	0140112H
	DD	0700bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$0 DB 052H ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$1 DB 042H ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	DB	069H
	DB	074H
	DB	053H
	DB	065H
	DB	074H
	DB	00H
	ORG $+1
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$2 DB 042H ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	DB	069H
	DB	074H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 078H ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+144
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcFrameData DD 03H ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z DD 022801H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcName$0 DB 078H ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcVarDesc DD 028H ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+48
??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcFrameData DD 01H ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_K$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$0 DB 078H ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 024H ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+48
??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcFrameData DD 01H ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z DD 022b01H
	DD	0700bf212H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$0 DB 052H ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$1 DB 042H ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	DB	069H
	DB	074H
	DB	053H
	DB	065H
	DB	074H
	DB	00H
	ORG $+1
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$2 DB 042H ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	DB	069H
	DB	074H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcVarDesc DD 064H ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$2
	DD	044H
	DD	04H
	DQ	FLAT:??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcName$0
	ORG $+144
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcFrameData DD 03H ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcName$0 DB 078H ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
	DB	00H
	ORG $+14
??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcVarDesc DD 024H ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+48
??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcFrameData DD 01H ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount_vec@H@bitCount@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@H@glm@@YAHH@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount_bitfield@H@bitCount@@YAHH@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 042c01H
	DD	0170113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcName$0 DB 078H ; glm::bitCount<int,0,glm::tvec4>
	DB	00H
	ORG $+14
??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcVarDesc DD 028H ; glm::bitCount<int,0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcName$0
	ORG $+48
??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcFrameData DD 01H ; glm::bitCount<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@_K@glm@@YAH_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount_vec@_K@bitCount@@YAH_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount_if@H@bitCount@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0 DB 05fH ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc DD 024H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DB	053H
	DB	032H
	DB	00H
	ORG $+12
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	01H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	00H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@H@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z DD 043601H
	DD	025011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::imulExtended<0,glm::tvec4>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::imulExtended<0,glm::tvec4>
	DD	020H
	DQ	FLAT:??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::imulExtended<0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z DD 043601H
	DD	01f011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::imulExtended<0,glm::tvec3>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::imulExtended<0,glm::tvec3>
	DD	018H
	DQ	FLAT:??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::imulExtended<0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z DD 033501H
	DD	016011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::imulExtended<0,glm::tvec2>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::imulExtended<0,glm::tvec2>
	DD	010H
	DQ	FLAT:??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::imulExtended<0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z DD 023501H
	DD	07015f21cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::imulExtended<0,glm::tvec1>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::imulExtended<0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::imulExtended<0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z DD 043601H
	DD	01d011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::umulExtended<0,glm::tvec4>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::umulExtended<0,glm::tvec4>
	DD	020H
	DQ	FLAT:??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::umulExtended<0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z DD 043601H
	DD	019011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::umulExtended<0,glm::tvec3>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::umulExtended<0,glm::tvec3>
	DD	018H
	DQ	FLAT:??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::umulExtended<0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z DD 033501H
	DD	012011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::umulExtended<0,glm::tvec2>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::umulExtended<0,glm::tvec2>
	DD	010H
	DQ	FLAT:??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::umulExtended<0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z DD 023201H
	DD	07015d219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcName$0 DB 056H ; glm::umulExtended<0,glm::tvec1>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
	ORG $+8
??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcVarDesc DD 028H ; glm::umulExtended<0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcName$0
	ORG $+48
??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcFrameData DD 01H ; glm::umulExtended<0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z DD 043601H
	DD	02b011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0 DB 059H ; glm::usubBorrow<0,glm::tvec4>
	DB	067H
	DB	065H
	DB	058H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1 DB 058H ; glm::usubBorrow<0,glm::tvec4>
	DB	067H
	DB	065H
	DB	059H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc DD 058H ; glm::usubBorrow<0,glm::tvec4>
	DD	010H
	DQ	FLAT:??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0
	ORG $+96
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData DD 02H ; glm::usubBorrow<0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z DD 043601H
	DD	025011dH
	DD	060157016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0 DB 059H ; glm::usubBorrow<0,glm::tvec3>
	DB	067H
	DB	065H
	DB	058H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1 DB 058H ; glm::usubBorrow<0,glm::tvec3>
	DB	067H
	DB	065H
	DB	059H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc DD 058H ; glm::usubBorrow<0,glm::tvec3>
	DD	0cH
	DQ	FLAT:??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0
	ORG $+96
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData DD 02H ; glm::usubBorrow<0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@III@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z DD 033501H
	DD	01a011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0 DB 059H ; glm::usubBorrow<0,glm::tvec2>
	DB	067H
	DB	065H
	DB	058H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1 DB 058H ; glm::usubBorrow<0,glm::tvec2>
	DB	067H
	DB	065H
	DB	059H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc DD 048H ; glm::usubBorrow<0,glm::tvec2>
	DD	08H
	DQ	FLAT:??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0
	ORG $+96
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData DD 02H ; glm::usubBorrow<0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z DD 033501H
	DD	016011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0 DB 059H ; glm::usubBorrow<0,glm::tvec1>
	DB	067H
	DB	065H
	DB	058H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1 DB 058H ; glm::usubBorrow<0,glm::tvec1>
	DB	067H
	DB	065H
	DB	059H
	DB	00H
	ORG $+3
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc DD 044H ; glm::usubBorrow<0,glm::tvec1>
	DD	04H
	DQ	FLAT:??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0
	ORG $+96
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData DD 02H ; glm::usubBorrow<0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<unsigned int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<unsigned int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<unsigned int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z DD 033501H
	DD	014011cH
	DD	07015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0 DB 056H ; glm::uaddCarry<0,glm::tvec1>
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	036H
	DB	034H
	DB	00H
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1 DB 04dH ; glm::uaddCarry<0,glm::tvec1>
	DB	061H
	DB	078H
	DB	033H
	DB	032H
	DB	00H
	ORG $+2
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc DD 048H ; glm::uaddCarry<0,glm::tvec1>
	DD	08H
	DQ	FLAT:??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcName$0
	ORG $+96
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData DD 02H ; glm::uaddCarry<0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findLSB_branchfree@H@findLSB@@YAHH@Z DD 020901H
	DD	070057209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findLSB_ntz2@H@findLSB@@YAHH@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findLSB_intrinsic@H@findLSB@@YAHH@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcName$0 DB 052H ; findLSB::findLSB_intrinsic<int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcVarDesc DD 024H ; findLSB::findLSB_intrinsic<int>
	DD	04H
	DQ	FLAT:??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcName$0
	ORG $+48
??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcFrameData DD 01H ; findLSB::findLSB_intrinsic<int>
	DD	00H
	DQ	FLAT:??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findLSB_095@H@findLSB@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findLSB@H@glm@@YAHH@Z DD 020901H
	DD	070053209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_intrinsic@I@findMSB@@YAHI@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcName$0 DB 052H ; findMSB::findMSB_intrinsic<unsigned int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcVarDesc DD 024H ; findMSB::findMSB_intrinsic<unsigned int>
	DD	04H
	DQ	FLAT:??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcName$0
	ORG $+48
??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcFrameData DD 01H ; findMSB::findMSB_intrinsic<unsigned int>
	DD	00H
	DQ	FLAT:??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_095@I@findMSB@@YAHI@Z DD 020901H
	DD	070057209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_nlz1@I@findMSB@@YAHI@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@I@glm@@YAHI@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_avx@H@findMSB@@YAHH@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_intrinsic@H@findMSB@@YAHH@Z DD 021e01H
	DD	070057209H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcName$0 DB 052H ; findMSB::findMSB_intrinsic<int>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcVarDesc DD 024H ; findMSB::findMSB_intrinsic<int>
	DD	04H
	DQ	FLAT:??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcName$0
	ORG $+48
??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcFrameData DD 01H ; findMSB::findMSB_intrinsic<int>
	DD	00H
	DQ	FLAT:??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_095@H@findMSB@@YAHH@Z DD 020901H
	DD	070057209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB_nlz1@H@findMSB@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$findMSB@H@glm@@YAHH@Z DD 020901H
	DD	070055209H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_int@findMSB@@YAHXZ
	DD	024H
	DD	05d3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_ivec4@findMSB@@YAHXZ
	DD	024H
	DD	05e1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?perf_int@findMSB@@YAH_K@Z
	DD	030H
	DD	09e3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitCount@I@glm@@YAHI@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcName$0 DB 05fH ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcVarDesc DD 024H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcFrameData DD 01H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DB	053H
	DB	033H
	DB	00H
	ORG $+12
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DD	01H
	DQ	FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	DD	00H
	DQ	FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@_K@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcName$0 DB 05fH ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcVarDesc DD 024H ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcFrameData DD 01H ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DB	053H
	DB	034H
	DB	00H
	ORG $+12
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DD	01H
	DQ	FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	DD	00H
	DQ	FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@I@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA
	DD	00H
	DD	05H
voltbl	ENDS
CONST	SEGMENT
?perf32@bitfieldReverse@@YAHI@Z$rtcName$0 DB 044H	; bitfieldReverse::perf32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+11
?perf32@bitfieldReverse@@YAHI@Z$rtcVarDesc DD 038H	; bitfieldReverse::perf32
	DD	020H
	DQ	FLAT:?perf32@bitfieldReverse@@YAHI@Z$rtcName$0
	ORG $+48
?perf32@bitfieldReverse@@YAHI@Z$rtcFrameData DD 01H	; bitfieldReverse::perf32
	DD	00H
	DQ	FLAT:?perf32@bitfieldReverse@@YAHI@Z$rtcVarDesc
?perf64@bitfieldReverse@@YAH_K@Z$rtcName$0 DB 044H	; bitfieldReverse::perf64
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?perf64@bitfieldReverse@@YAH_K@Z$rtcFrameData DD 01H	; bitfieldReverse::perf64
	DD	00H
	DQ	FLAT:?perf64@bitfieldReverse@@YAH_K@Z$rtcVarDesc
?perf_int@findMSB@@YAH_K@Z$rtcName$0 DB 044H		; findMSB::perf_int
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?perf64@bitfieldReverse@@YAH_K@Z$rtcVarDesc DD 038H	; bitfieldReverse::perf64
	DD	020H
	DQ	FLAT:?perf64@bitfieldReverse@@YAH_K@Z$rtcName$0
	ORG $+48
?perf_int@findMSB@@YAH_K@Z$rtcVarDesc DD 030H		; findMSB::perf_int
	DD	0118H
	DQ	FLAT:?perf_int@findMSB@@YAH_K@Z$rtcName$0
	ORG $+48
?perf_int@findMSB@@YAH_K@Z$rtcFrameData DD 01H		; findMSB::perf_int
	DD	00H
	DQ	FLAT:?perf_int@findMSB@@YAH_K@Z$rtcVarDesc
?test_ivec4@findMSB@@YAHXZ$rtcName$0 DB 044H		; findMSB::test_ivec4
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_ivec4@findMSB@@YAHXZ$rtcName$1 DB 052H		; findMSB::test_ivec4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	030H
	DB	00H
?test_ivec4@findMSB@@YAHXZ$rtcVarDesc DD 04a8H		; findMSB::test_ivec4
	DD	010H
	DQ	FLAT:?test_ivec4@findMSB@@YAHXZ$rtcName$1
	DD	030H
	DD	0460H
	DQ	FLAT:?test_ivec4@findMSB@@YAHXZ$rtcName$0
	ORG $+96
?test_ivec4@findMSB@@YAHXZ$rtcFrameData DD 02H		; findMSB::test_ivec4
	DD	00H
	DQ	FLAT:?test_ivec4@findMSB@@YAHXZ$rtcVarDesc
?test_int@findMSB@@YAHXZ$rtcName$0 DB 044H		; findMSB::test_int
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_int@findMSB@@YAHXZ$rtcFrameData DD 01H		; findMSB::test_int
	DD	00H
	DQ	FLAT:?test_int@findMSB@@YAHXZ$rtcVarDesc
?test@uaddCarry@@YAHXZ$rtcName$0 DB 078H		; uaddCarry::test
	DB	00H
	ORG $+6
?test_int@findMSB@@YAHXZ$rtcVarDesc DD 030H		; findMSB::test_int
	DD	0118H
	DQ	FLAT:?test_int@findMSB@@YAHXZ$rtcName$0
	ORG $+48
?test@uaddCarry@@YAHXZ$rtcName$1 DB 079H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$2 DB 043H		; uaddCarry::test
	DB	061H
	DB	072H
	DB	072H
	DB	079H
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$3 DB 078H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$4 DB 079H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$5 DB 043H		; uaddCarry::test
	DB	061H
	DB	072H
	DB	072H
	DB	079H
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$6 DB 078H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$7 DB 079H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$8 DB 043H		; uaddCarry::test
	DB	061H
	DB	072H
	DB	072H
	DB	079H
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$9 DB 052H		; uaddCarry::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@uaddCarry@@YAHXZ$rtcName$10 DB 078H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$11 DB 079H		; uaddCarry::test
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$12 DB 043H		; uaddCarry::test
	DB	061H
	DB	072H
	DB	072H
	DB	079H
	DB	00H
	ORG $+2
?test@uaddCarry@@YAHXZ$rtcName$13 DB 052H		; uaddCarry::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?test@uaddCarry@@YAHXZ$rtcVarDesc DD 01d4H		; uaddCarry::test
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$13
	DD	01b4H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$12
	DD	0194H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$11
	DD	0174H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$10
	DD	0154H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcName$0
	ORG $+672
?test@uaddCarry@@YAHXZ$rtcFrameData DD 0eH		; uaddCarry::test
	DD	00H
	DQ	FLAT:?test@uaddCarry@@YAHXZ$rtcVarDesc
?test@usubBorrow@@YAHXZ$rtcName$0 DB 078H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$1 DB 079H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$2 DB 042H		; usubBorrow::test
	DB	06fH
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$3 DB 078H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$4 DB 079H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$5 DB 042H		; usubBorrow::test
	DB	06fH
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$6 DB 052H		; usubBorrow::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$7 DB 078H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$8 DB 079H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$9 DB 042H		; usubBorrow::test
	DB	06fH
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$10 DB 052H		; usubBorrow::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$11 DB 078H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$12 DB 079H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$13 DB 042H		; usubBorrow::test
	DB	06fH
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$14 DB 052H		; usubBorrow::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$15 DB 078H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$16 DB 079H		; usubBorrow::test
	DB	00H
	ORG $+2
?test@usubBorrow@@YAHXZ$rtcName$17 DB 042H		; usubBorrow::test
	DB	06fH
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcName$18 DB 052H		; usubBorrow::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@usubBorrow@@YAHXZ$rtcVarDesc DD 02e8H		; usubBorrow::test
	DD	010H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$18
	DD	02b8H
	DD	010H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$17
	DD	0288H
	DD	010H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$16
	DD	0258H
	DD	010H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$15
	DD	0228H
	DD	0cH
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$14
	DD	01f8H
	DD	0cH
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$13
	DD	01c8H
	DD	0cH
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$12
	DD	0198H
	DD	0cH
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$11
	DD	0178H
	DD	08H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$10
	DD	0158H
	DD	08H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$9
	DD	0138H
	DD	08H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$8
	DD	0118H
	DD	08H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcName$0
	ORG $+912
?test@usubBorrow@@YAHXZ$rtcFrameData DD 013H		; usubBorrow::test
	DD	00H
	DQ	FLAT:?test@usubBorrow@@YAHXZ$rtcVarDesc
?test@umulExtended@@YAHXZ$rtcName$0 DB 078H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$1 DB 079H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$2 DB 06dH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$3 DB 06cH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$4 DB 078H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$5 DB 079H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$6 DB 06dH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$7 DB 06cH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$8 DB 078H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$9 DB 079H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$10 DB 06dH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$11 DB 06cH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$12 DB 078H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$13 DB 079H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$14 DB 06dH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$15 DB 06cH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$16 DB 078H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$17 DB 079H		; umulExtended::test
	DB	00H
	ORG $+2
?test@umulExtended@@YAHXZ$rtcName$18 DB 06dH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcName$19 DB 06cH		; umulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@umulExtended@@YAHXZ$rtcVarDesc DD 0308H		; umulExtended::test
	DD	010H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$19
	DD	02d8H
	DD	010H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$18
	DD	02a8H
	DD	010H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$17
	DD	0278H
	DD	010H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$16
	DD	0248H
	DD	0cH
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$15
	DD	0218H
	DD	0cH
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$14
	DD	01e8H
	DD	0cH
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$13
	DD	01b8H
	DD	0cH
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$12
	DD	0198H
	DD	08H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$11
	DD	0178H
	DD	08H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$10
	DD	0158H
	DD	08H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$9
	DD	0138H
	DD	08H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcName$0
	ORG $+960
?test@umulExtended@@YAHXZ$rtcFrameData DD 014H		; umulExtended::test
	DD	00H
	DQ	FLAT:?test@umulExtended@@YAHXZ$rtcVarDesc
?test@imulExtended@@YAHXZ$rtcName$0 DB 06dH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$1 DB 06cH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$2 DB 078H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$3 DB 079H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$4 DB 06dH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$5 DB 06cH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$6 DB 078H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$7 DB 079H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$8 DB 06dH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$9 DB 06cH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$10 DB 078H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$11 DB 079H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$12 DB 06dH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$13 DB 06cH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$14 DB 078H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$15 DB 079H		; imulExtended::test
	DB	00H
	ORG $+2
?test@imulExtended@@YAHXZ$rtcName$16 DB 06dH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?test@imulExtended@@YAHXZ$rtcName$17 DB 06cH		; imulExtended::test
	DB	073H
	DB	062H
	DB	00H
?perf@bitCount@@YAH_K@Z$rtcName$0 DB 076H		; bitCount::perf
	DB	00H
	ORG $+6
?test@imulExtended@@YAHXZ$rtcVarDesc DD 02c8H		; imulExtended::test
	DD	010H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$17
	DD	0298H
	DD	010H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$16
	DD	0268H
	DD	010H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$15
	DD	0238H
	DD	010H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$14
	DD	0208H
	DD	0cH
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$13
	DD	01d8H
	DD	0cH
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$12
	DD	01a8H
	DD	0cH
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$11
	DD	0178H
	DD	0cH
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$10
	DD	0158H
	DD	08H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$9
	DD	0138H
	DD	08H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$8
	DD	0118H
	DD	08H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$7
	DD	0f8H
	DD	08H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcName$0
	ORG $+864
?test@imulExtended@@YAHXZ$rtcFrameData DD 012H		; imulExtended::test
	DD	00H
	DQ	FLAT:?test@imulExtended@@YAHXZ$rtcVarDesc
?perf@bitCount@@YAH_K@Z$rtcName$1 DB 077H		; bitCount::perf
	DB	00H
	ORG $+6
?perf@bitCount@@YAH_K@Z$rtcFrameData DD 02H		; bitCount::perf
	DD	00H
	DQ	FLAT:?perf@bitCount@@YAH_K@Z$rtcVarDesc
	ORG $+8
?perf@bitCount@@YAH_K@Z$rtcVarDesc DD 078H		; bitCount::perf
	DD	020H
	DQ	FLAT:?perf@bitCount@@YAH_K@Z$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?perf@bitCount@@YAH_K@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverse@_K@glm@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldReverse@I@glm@@YAII@Z DD 020901H
	DD	070055209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bitfieldReverseUint32@bitfieldReverse@@YAII@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldExtract@I@glm@@YAIIHH@Z DD 021201H
	DD	0700e5212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z DD 021901H
	DD	070159219H
xdata	ENDS
xdata	SEGMENT
$unwind$?test@bitfieldInsert@@YAHXZ DD 020601H
	DD	070027206H
$unwind$?test@bitfieldExtract@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test32_bitfieldReverse@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test64_bitfieldReverse@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ DD 020601H
	DD	070029206H
$unwind$?test@bitfieldReverse@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?perf32@bitfieldReverse@@YAHI@Z DD 032411H
	DD	014010cH
	DD	07005H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf32@bitfieldReverse@@YAHI@Z
$cppxdata$?perf32@bitfieldReverse@@YAHI@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf32@bitfieldReverse@@YAHI@Z
	DD	imagerel $ip2state$?perf32@bitfieldReverse@@YAHI@Z
$stateUnwindMap$?perf32@bitfieldReverse@@YAHI@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA
$ip2state$?perf32@bitfieldReverse@@YAHI@Z DB 06H
	DB	00H
	DB	00H
	DB	'n'
	DB	02H
	DB	01H, 08H
	DB	00H
$cppxdata$?perf64@bitfieldReverse@@YAH_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf64@bitfieldReverse@@YAH_K@Z
	DD	imagerel $ip2state$?perf64@bitfieldReverse@@YAH_K@Z
$unwind$?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf64@bitfieldReverse@@YAH_K@Z DD 032611H
	DD	018010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf64@bitfieldReverse@@YAH_K@Z
$stateUnwindMap$?perf64@bitfieldReverse@@YAH_K@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA
$ip2state$?perf64@bitfieldReverse@@YAH_K@Z DB 06H
	DB	00H
	DB	00H
	DB	'r'
	DB	02H
	DB	0edH, 08H
	DB	00H
$cppxdata$?perf@bitCount@@YAH_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf@bitCount@@YAH_K@Z
	DD	imagerel $ip2state$?perf@bitCount@@YAH_K@Z
	ORG $+1
$unwind$?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf@bitfieldReverse@@YAH_K@Z DD 020a01H
	DD	07006520aH
$unwind$?findMSB_nlz2@findMSB@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?findMSB_pop@findMSB@@YAHI@Z DD 020901H
	DD	070053209H
$unwind$?perf_int@findMSB@@YAH_K@Z DD 033819H
	DD	048010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0230H
$unwind$?test_ivec4@findMSB@@YAHXZ DD 032c19H
	DD	09c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	04d8H
$unwind$?test_int@findMSB@@YAHXZ DD 032c19H
	DD	03a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
$unwind$?test@findMSB@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?perf@findMSB@@YAH_K@Z DD 020a01H
	DD	07006520aH
$unwind$?test_int@findLSB@@YAHXZ DD 030901H
	DD	0120109H
	DD	07002H
$unwind$?test@findLSB@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?perf_int@findLSB@@YAH_K@Z DD 030d01H
	DD	018010dH
	DD	07006H
$unwind$?perf@findLSB@@YAH_K@Z DD 020a01H
	DD	07006520aH
$unwind$?test@uaddCarry@@YAHXZ DD 031a01H
	DD	0460109H
	DD	07002H
$unwind$?test@usubBorrow@@YAHXZ DD 031a01H
	DD	0740109H
	DD	07002H
$unwind$?test@umulExtended@@YAHXZ DD 031a01H
	DD	0780109H
	DD	07002H
$unwind$?test@imulExtended@@YAHXZ DD 031a01H
	DD	0700109H
	DD	07002H
$unwind$?perf@bitCount@@YAH_K@Z DD 042711H
	DD	02d010eH
	DD	060067007H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf@bitCount@@YAH_K@Z
$stateUnwindMap$?perf@bitCount@@YAH_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA
$ip2state$?perf@bitCount@@YAH_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	't'
	DB	02H
	DB	':'
	DB	04H
	DB	0edH, 0dH
	DB	02H
	DB	016H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test@bitCount@@YAHXZ DD 020601H
	DD	07002b206H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?imulExtended@glm@@YAXHHAEAH0@Z DD 021701H
	DD	070131217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?umulExtended@glm@@YAXAEBI0AEAI1@Z DD 021901H
	DD	070151219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?usubBorrow@glm@@YAIAEBI0AEAI@Z DD 021401H
	DD	070101214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uaddCarry@glm@@YAIAEBI0AEAI@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@I@std@@SAIXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z PROC		; std::_Voidify_iter<unsigned int *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z ENDP		; std::_Voidify_iter<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z	; std::_Voidify_iter<unsigned int *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@I@std@@YA$$QEAIAEAI@Z	; std::forward<unsigned int>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@I@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@I@std@@YA$$QEAIAEAI@Z PROC			; std::forward<unsigned int>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@I@std@@YA$$QEAIAEAI@Z ENDP			; std::forward<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z PROC		; std::_Voidify_iter<unsigned __int64 *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z ENDP		; std::_Voidify_iter<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z ; std::_Voidify_iter<unsigned __int64 *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@_K@std@@YA$$QEA_KAEA_K@Z	; std::forward<unsigned __int64>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@_K@std@@YA$$QEA_KAEA_K@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@_K@std@@YA$$QEA_KAEA_K@Z PROC		; std::forward<unsigned __int64>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@_K@std@@YA$$QEA_KAEA_K@Z ENDP		; std::forward<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z PROC		; std::_Voidify_iter<int *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z ENDP		; std::_Voidify_iter<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@H@std@@YA$$QEAHAEAH@Z PROC			; std::forward<int>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@H@std@@YA$$QEAHAEAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<int,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<int,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<int,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<unsigned int,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR b$[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR b$[rsp]
	add	ecx, DWORD PTR [rdx+8]
	mov	rdx, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	r8, QWORD PTR b$[rsp]
	add	edx, DWORD PTR [r8+4]
	mov	r8, QWORD PTR a$[rsp]
	mov	r8d, DWORD PTR [r8]
	mov	r9, QWORD PTR b$[rsp]
	add	r8d, DWORD PTR [r9]
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<unsigned int,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv90 = 48
tv72 = 56
tv76 = 60
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_shift_right<unsigned int,0,-1,32,0>::call, COMDAT

; 122  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 123  : 			return tvec4<T, P>(a.x >> b.x, a.y >> b.y, a.z >> b.z, a.w >> b.w);

	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv90[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv90[rsp]
	mov	eax, DWORD PTR [rax+12]
	shr	eax, cl
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR a$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	shr	edx, cl
	mov	ecx, edx
	mov	DWORD PTR tv72[rsp], ecx
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	edx, DWORD PTR [r8+4]
	shr	edx, cl
	mov	ecx, edx
	mov	DWORD PTR tv76[rsp], ecx
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	edx, DWORD PTR [r8]
	shr	edx, cl
	mov	ecx, edx
	mov	DWORD PTR [rsp+32], eax
	mov	eax, DWORD PTR tv72[rsp]
	mov	r9d, eax
	mov	eax, DWORD PTR tv76[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 124  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_shift_right<unsigned int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_and<unsigned int,0,-1,32,0>::call, COMDAT

; 86   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 87   : 			return tvec4<T, P>(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	eax, DWORD PTR [rax+12]
	and	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rcx+8]
	and	ecx, edx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	mov	edx, DWORD PTR [rdx+4]
	and	edx, r8d
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9d, DWORD PTR [r9]
	mov	r8d, DWORD PTR [r8]
	and	r8d, r9d
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 88   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_and<unsigned int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 4
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAI@std@@YAPEAXPEAI@Z	; std::_Voidify_iter<unsigned int *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z PROC		; std::_To_address<unsigned int *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ENDP		; std::_To_address<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@I@std@@YA$$QEAIAEAI@Z	; std::forward<unsigned int>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@II@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI$$QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC	; std::_Copy_memmove<unsigned int *,unsigned int *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP	; std::_Copy_memmove<unsigned int *,unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAI@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAI@std@@YA$$QEAIAEAI@Z PROC			; std::move<unsigned int &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAI@std@@YA$$QEAIAEAI@Z ENDP			; std::move<unsigned int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z PROC	; std::_Get_unwrapped<unsigned int * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ENDP	; std::_Get_unwrapped<unsigned int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 8
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEA_K@std@@YAPEAXPEA_K@Z ; std::_Voidify_iter<unsigned __int64 *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z PROC		; std::_To_address<unsigned __int64 *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ENDP		; std::_To_address<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<unsigned __int64>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@_K@std@@YA$$QEA_KAEA_K@Z	; std::forward<unsigned __int64>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@_K_K@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K$$QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64,unsigned __int64>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z PROC	; std::_Copy_memmove<unsigned __int64 *,unsigned __int64 *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z ENDP	; std::_Copy_memmove<unsigned __int64 *,unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z PROC		; std::move<unsigned __int64 &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z ENDP		; std::move<unsigned __int64 &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z PROC	; std::_Get_unwrapped<unsigned __int64 * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z ENDP	; std::_Get_unwrapped<unsigned __int64 * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 4
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z PROC		; std::_To_address<int *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ENDP		; std::_To_address<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z PROC	; std::_Copy_memmove<int *,int *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ENDP	; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAH@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAH@std@@YA$$QEAHAEAH@Z PROC			; std::move<int &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAH@std@@YA$$QEAHAEAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z PROC	; std::_Get_unwrapped<int * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ENDP	; std::_Get_unwrapped<int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@H$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@H$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<int,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@XZ		; glm::tvec4<int,0>::tvec4<int,0>

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<int,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@H$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0>,glm::tvec4<int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@H$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_To_address<glm::tvec4<int,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<int,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<int,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<int,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv90 = 48
tv72 = 56
tv76 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_shift_right<__int64,0,-1,64,0>::call, COMDAT

; 122  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 123  : 			return tvec4<T, P>(a.x >> b.x, a.y >> b.y, a.z >> b.z, a.w >> b.w);

	mov	rax, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv90[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv90[rsp]
	mov	rax, QWORD PTR [rax+24]
	sar	rax, cl
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	sar	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv72[rsp], rcx
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8+8]
	sar	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv76[rsp], rcx
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8]
	sar	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	r9, rax
	mov	rax, QWORD PTR tv76[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 124  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_shift_right<__int64,0,-1,64,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_and<__int64,0,-1,64,0>::call, COMDAT

; 86   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 87   : 			return tvec4<T, P>(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+24]
	and	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	rcx, QWORD PTR [rcx+16]
	and	rcx, rdx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR [rdx+8]
	and	rdx, r8
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9, QWORD PTR [r9]
	mov	r8, QWORD PTR [r8]
	and	r8, r9
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 88   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_and<__int64,0,-1,64,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<__int64,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rax+24]
	imul	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	imul	rcx, QWORD PTR [rdx+16]
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	imul	rdx, QWORD PTR [r8+8]
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR [r8]
	imul	r8, QWORD PTR [r9]
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<__int64,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv90 = 48
tv72 = 56
tv76 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_shift_right<unsigned __int64,0,-1,64,0>::call, COMDAT

; 122  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 123  : 			return tvec4<T, P>(a.x >> b.x, a.y >> b.y, a.z >> b.z, a.w >> b.w);

	mov	rax, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv90[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv90[rsp]
	mov	rax, QWORD PTR [rax+24]
	shr	rax, cl
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	shr	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv72[rsp], rcx
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8+8]
	shr	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv76[rsp], rcx
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8, QWORD PTR a$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8]
	shr	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	r9, rax
	mov	rax, QWORD PTR tv76[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z	; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 124  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_shift_right<unsigned __int64,0,-1,64,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<unsigned __int64,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR [rax+24]
	imul	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	imul	rcx, QWORD PTR [rdx+16]
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	imul	rdx, QWORD PTR [r8+8]
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR [r8]
	imul	r8, QWORD PTR [r9]
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z	; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<unsigned __int64,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<__int64,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR b$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR b$[rsp]
	add	rcx, QWORD PTR [rdx+16]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r8, QWORD PTR b$[rsp]
	add	rdx, QWORD PTR [r8+8]
	mov	r8, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	r9, QWORD PTR b$[rsp]
	add	r8, QWORD PTR [r9]
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<__int64,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<__int64,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	rcx, QWORD PTR [rcx+16]
	sub	rcx, rdx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8, QWORD PTR [r8+8]
	mov	rdx, QWORD PTR [rdx+8]
	sub	rdx, r8
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9, QWORD PTR [r9]
	mov	r8, QWORD PTR [r8]
	sub	r8, r9
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<__int64,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<unsigned int,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, edx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	mov	edx, DWORD PTR [rdx+4]
	sub	edx, r8d
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9d, DWORD PTR [r9]
	mov	r8d, DWORD PTR [r8]
	sub	r8d, r9d
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<unsigned int,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$07@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$07@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned __int64,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	or	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned int,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR v2$[rsp]
	add	eax, DWORD PTR [rcx]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$compute_findMSB_32@I@detail@glm@@YAHI@Z
_TEXT	SEGMENT
Result$ = 36
IsNotNull$ = 52
tv69 = 56
Value$ = 80
??$compute_findMSB_32@I@detail@glm@@YAHI@Z PROC		; glm::detail::compute_findMSB_32<unsigned int>, COMDAT

; 144  : 		{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 145  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 146  : 			unsigned char IsNotNull = _BitScanReverse(&Result, *reinterpret_cast<unsigned long*>(&Value));

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax
	setne	al
	mov	BYTE PTR IsNotNull$[rsp], al

; 147  : 			return IsNotNull ? int(Result) : -1;

	movzx	eax, BYTE PTR IsNotNull$[rsp]
	test	eax, eax
	je	SHORT $LN3@compute_fi
	mov	eax, DWORD PTR Result$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@compute_fi
$LN3@compute_fi:
	mov	DWORD PTR tv69[rsp], -1
$LN4@compute_fi:
	mov	eax, DWORD PTR tv69[rsp]

; 148  : 		}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$compute_findMSB_32@I@detail@glm@@YAHI@Z ENDP		; glm::detail::compute_findMSB_32<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG68722
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG68723
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG68724
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG68725
	lea	rdx, OFFSET FLAT:$SG68726
	lea	rcx, OFFSET FLAT:$SG68727
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<unsigned int,0>::operator+=<unsigned int>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<unsigned int,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<unsigned int,0>::operator+=<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z PROC		; glm::tvec4<unsigned int,0>::operator>>=<unsigned int>, COMDAT

; 598  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 599  : 		return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_shift_right@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<unsigned int,0,-1,32,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 600  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z ENDP		; glm::tvec4<unsigned int,0>::operator>>=<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z PROC		; glm::tvec4<unsigned int,0>::operator&=<unsigned int>, COMDAT

; 514  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 515  : 		return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_and@I$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<unsigned int,0,-1,32,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 516  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z ENDP		; glm::tvec4<unsigned int,0>::operator&=<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@I$$V@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@QEAI@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::construct<unsigned int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z PROC		; std::_Zero_range<unsigned int *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAI@std@@YA?A_PAEBQEAI@Z ; std::_To_address<unsigned int *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z ENDP		; std::_Zero_range<unsigned int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@I@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@I@std@@YAPEAIPEAI@Z PROC			; std::_Unfancy<unsigned int>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@I@std@@YAPEAIPEAI@Z ENDP			; std::_Unfancy<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z PROC ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ; std::_Get_unwrapped<unsigned int * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAI@std@@YA?A_TAEBQEAI@Z ; std::_Get_unwrapped<unsigned int * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Copy_memmove<unsigned int *,unsigned int *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAI@std@@YA$$QEAIAEAI@Z	; std::move<unsigned int &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@I@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<unsigned int>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ENDP ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@_K$$V@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SAXAEAV?$allocator@_K@1@QEA_K@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::construct<unsigned __int64>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z PROC		; std::_Zero_range<unsigned __int64 *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEA_K@std@@YA?A_PAEBQEA_K@Z ; std::_To_address<unsigned __int64 *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z ENDP		; std::_Zero_range<unsigned __int64 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z PROC			; std::_Unfancy<unsigned __int64>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z ENDP			; std::_Unfancy<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z PROC ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z ; std::_Get_unwrapped<unsigned __int64 * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEA_K@std@@YA?A_TAEBQEA_K@Z ; std::_Get_unwrapped<unsigned __int64 * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEA_KPEA_K@std@@YAPEA_KPEA_K00@Z ; std::_Copy_memmove<unsigned __int64 *,unsigned __int64 *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 8
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEA_K@std@@YA$$QEA_KAEA_K@Z	; std::move<unsigned __int64 &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@_K@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAX$$QEA_K@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<unsigned __int64>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z ENDP ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA PROC ; `std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z@4HA ENDP ; `std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z PROC		; std::_Zero_range<int *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z ENDP		; std::_Zero_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@H@std@@YAPEAHPEAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@H@std@@YAPEAHPEAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,std::allocator<int> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ; std::_Copy_memmove<int *,int *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAH@std@@YA$$QEAHAEAH@Z	; std::move<int &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@H$0A@@glm@@$$V@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::construct<glm::tvec4<int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@H$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@H$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<int,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@H$0A@@glm@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<int,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@H$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<int,0> *,glm::tvec4<int,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@H$0A@@glm@@@std@@YA$$QEAU?$tvec4@H$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<int,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@H$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@H$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<glm::tvec4<int,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
__formal$ = 40
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z PROC ; bitCount::compute_bitfieldBitCountStep<0>::call<unsigned int,0,glm::tvec1>, COMDAT

; 1412 : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1413 : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 1414 : 		}

	pop	rdi
	ret	0
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ENDP ; bitCount::compute_bitfieldBitCountStep<0>::call<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
tv65 = 48
__$ReturnUdt$ = 80
v$ = 88
Mask$ = 96
Shift$ = 104
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z PROC ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>, COMDAT

; 1422 : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1423 : 			return (v & Mask) + ((v >> Shift) & Mask);

	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 1424 : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ENDP ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z PROC ; glm::tvec1<int,0>::tvec1<int,0><unsigned __int64,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ENDP ; glm::tvec1<int,0>::tvec1<int,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv65 = 56
__$ReturnUdt$ = 80
v$ = 88
Mask$ = 96
Shift$ = 104
?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z PROC ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call, COMDAT

; 64   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 65   : 			return (v & Mask) + ((v >> Shift) & Mask);

	mov	r8, QWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	r8, QWORD PTR Mask$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ENDP ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
scalar$ = 136
??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z PROC	; glm::tvec4<__int64,0>::operator>>=<__int64>, COMDAT

; 598  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 599  : 		return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_shift_right@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<__int64,0,-1,64,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 600  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ENDP	; glm::tvec4<__int64,0>::operator>>=<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
scalar$ = 136
??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z PROC	; glm::tvec4<__int64,0>::operator&=<__int64>, COMDAT

; 514  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 515  : 		return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_and@_J$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_and<__int64,0,-1,64,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 516  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ENDP	; glm::tvec4<__int64,0>::operator&=<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<__int64,0>::operator*=<__int64>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<__int64,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<__int64,0>::operator*=<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
scalar$ = 136
??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z PROC	; glm::tvec4<unsigned __int64,0>::operator>>=<unsigned __int64>, COMDAT

; 598  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 599  : 		return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_shift_right@_K$0A@$0?0$0EA@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_shift_right<unsigned __int64,0,-1,64,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 600  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z ENDP	; glm::tvec4<unsigned __int64,0>::operator>>=<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<unsigned __int64,0>::operator*=<unsigned __int64>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@_K$0A@$0A@@detail@glm@@SA?AU?$tvec4@_K$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<unsigned __int64,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<unsigned __int64,0>::operator*=<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
scalar$ = 136
??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z PROC	; glm::tvec4<__int64,0>::operator+=<__int64>, COMDAT

; 369  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 370  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec4<__int64,0>::tvec4<__int64,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<__int64,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 371  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ENDP	; glm::tvec4<__int64,0>::operator+=<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<__int64,0>::operator-=<__int64>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@_J$0A@$0A@@detail@glm@@SA?AU?$tvec4@_J$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<__int64,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<__int64,0>::operator-=<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<unsigned int,0>::operator-=<unsigned int>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@I$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<unsigned int,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<unsigned int,0>::operator-=<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	ecx, DWORD PTR tv83[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	ecx, DWORD PTR tv83[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	ecx, DWORD PTR tv83[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	ecx, DWORD PTR tv83[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z PROC ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call, COMDAT

; 154  : 			{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 				return detail::functor1<int, T, P, vecType>::call(compute_findMSB_32, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@I@detail@glm@@YAHI@Z ; glm::detail::compute_findMSB_32<unsigned int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HI$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHI@ZAEBU?$tvec1@I$0A@@3@@Z ; glm::detail::functor1<int,unsigned int,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 156  : 			}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ENDP ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_findMSB_vec<int,0,glm::tvec1,32>::call, COMDAT

; 154  : 			{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 				return detail::functor1<int, T, P, vecType>::call(compute_findMSB_32, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@H@detail@glm@@YAHH@Z ; glm::detail::compute_findMSB_32<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 156  : 			}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_findMSB_vec<int,0,glm::tvec1,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
__formal$ = 40
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,0>::call, COMDAT

; 55   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 57   : 		}

	pop	rdi
	ret	0
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
tv65 = 48
__$ReturnUdt$ = 80
v$ = 88
Mask$ = 96
Shift$ = 104
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call, COMDAT

; 64   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 65   : 			return (v & Mask) + ((v >> Shift) & Mask);

	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
tv65 = 64
__$ReturnUdt$ = 96
v$ = 104
Mask$ = 112
Shift$ = 120
??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z PROC ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>, COMDAT

; 212  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 213  : 			return (v & Mask) << Shift | (v & (~Mask)) >> Shift;

	mov	rax, QWORD PTR Mask$[rsp]
	not	rax
	mov	r8, rax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	r8, QWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	r8, QWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 214  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ENDP ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec1<unsigned __int64,0>::operator|=<unsigned __int64>, COMDAT

; 243  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 244  : 		this->x |= U(v.x);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	or	rax, rcx
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 245  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 246  : 	}

	pop	rdi
	ret	0
??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec1<unsigned __int64,0>::operator|=<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator<<<unsigned __int64,0>, COMDAT

; 486  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 487  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	rax, QWORD PTR [rax]
	shl	rax, cl
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator<<<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator&<unsigned __int64,0>, COMDAT

; 423  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 424  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 425  : 			v.x & scalar);
; 426  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator&<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
tv65 = 64
__$ReturnUdt$ = 96
v$ = 104
Mask$ = 112
Shift$ = 120
?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z PROC ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call, COMDAT

; 46   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 47   : 			return (v & Mask) << Shift | (v & (~Mask)) >> Shift;

	mov	rax, QWORD PTR Mask$[rsp]
	not	rax
	mov	r8, rax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	r8, QWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8, QWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>
	mov	r8, QWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?U_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 48   : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ENDP ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
__formal$ = 40
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z PROC ; bitfieldReverse::compute_bitfieldReverseStep<0>::call<unsigned int,0,glm::tvec1>, COMDAT

; 202  : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 203  : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 204  : 		}

	pop	rdi
	ret	0
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ENDP ; bitfieldReverse::compute_bitfieldReverseStep<0>::call<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
tv65 = 48
__$ReturnUdt$ = 80
v$ = 88
Mask$ = 96
Shift$ = 104
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z PROC ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>, COMDAT

; 212  : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 213  : 			return (v & Mask) << Shift | (v & (~Mask)) >> Shift;

	mov	eax, DWORD PTR Mask$[rsp]
	not	eax
	mov	r8d, eax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 214  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ENDP ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec1<unsigned int,0>::operator|=<unsigned int>, COMDAT

; 243  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 244  : 		this->x |= U(v.x);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 245  : 		return *this;

	mov	rax, QWORD PTR this$[rsp]

; 246  : 	}

	pop	rdi
	ret	0
??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec1<unsigned int,0>::operator|=<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator<<<unsigned int,0>, COMDAT

; 486  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 487  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator<<<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
__formal$ = 32
__formal$ = 40
?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,0>::call, COMDAT

; 37   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 			return v;

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 39   : 		}

	pop	rdi
	ret	0
?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
tv65 = 48
__$ReturnUdt$ = 80
v$ = 88
Mask$ = 96
Shift$ = 104
?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call, COMDAT

; 46   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 47   : 			return (v & Mask) << Shift | (v & (~Mask)) >> Shift;

	mov	eax, DWORD PTR Mask$[rsp]
	not	eax
	mov	r8d, eax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 48   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator>><unsigned int,0>, COMDAT

; 507  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 508  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 509  : 			v.x >> scalar);
; 510  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator>><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator&<unsigned int,0>, COMDAT

; 423  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 424  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 425  : 			v.x & scalar);
; 426  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator&<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$mask@H@detail@glm@@YAHH@Z
_TEXT	SEGMENT
tv68 = 0
tv71 = 4
Bits$ = 32
??$mask@H@detail@glm@@YAHH@Z PROC			; glm::detail::mask<int>, COMDAT

; 29   : 	{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 30   : 		return Bits >= sizeof(T) * 8 ? ~static_cast<T>(0) : (static_cast<T>(1) << Bits) - static_cast<T>(1);

	movsxd	rax, DWORD PTR Bits$[rsp]
	cmp	rax, 32					; 00000020H
	jb	SHORT $LN3@mask
	mov	DWORD PTR tv68[rsp], -1
	jmp	SHORT $LN4@mask
$LN3@mask:
	mov	eax, DWORD PTR Bits$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv71[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv71[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR tv68[rsp], eax
$LN4@mask:
	mov	eax, DWORD PTR tv68[rsp]

; 31   : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$mask@H@detail@glm@@YAHH@Z ENDP			; glm::detail::mask<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$compute_findMSB_32@H@detail@glm@@YAHH@Z
_TEXT	SEGMENT
Result$ = 36
IsNotNull$ = 52
tv69 = 56
Value$ = 80
??$compute_findMSB_32@H@detail@glm@@YAHH@Z PROC		; glm::detail::compute_findMSB_32<int>, COMDAT

; 144  : 		{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 145  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 146  : 			unsigned char IsNotNull = _BitScanReverse(&Result, *reinterpret_cast<unsigned long*>(&Value));

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax
	setne	al
	mov	BYTE PTR IsNotNull$[rsp], al

; 147  : 			return IsNotNull ? int(Result) : -1;

	movzx	eax, BYTE PTR IsNotNull$[rsp]
	test	eax, eax
	je	SHORT $LN3@compute_fi
	mov	eax, DWORD PTR Result$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@compute_fi
$LN3@compute_fi:
	mov	DWORD PTR tv69[rsp], -1
$LN4@compute_fi:
	mov	eax, DWORD PTR tv69[rsp]

; 148  : 		}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@H@detail@glm@@YAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$compute_findMSB_32@H@detail@glm@@YAHH@Z ENDP		; glm::detail::compute_findMSB_32<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z PROC ; glm::detail::functor1<int,int,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	DWORD PTR tv74[rsp], eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	ecx, DWORD PTR tv70[rsp]
	mov	r9d, ecx
	mov	ecx, DWORD PTR tv74[rsp]
	mov	r8d, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ENDP ; glm::detail::functor1<int,int,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned int,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<unsigned int,0>::operator+=<unsigned int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z PROC	; glm::operator>><unsigned int,0>, COMDAT

; 906  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 907  : 		return tvec4<T, P>(v) >>= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_2I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z ; glm::tvec4<unsigned int,0>::operator>>=<unsigned int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 908  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator>><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z PROC	; glm::operator&<unsigned int,0>, COMDAT

; 786  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 787  : 		return tvec4<T, P>(v) &= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	edx, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_4I@?$tvec4@I$0A@@glm@@QEAAAEAU01@I@Z ; glm::tvec4<unsigned int,0>::operator&=<unsigned int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 788  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator&<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@I@std@@YAPEAIPEAI@Z		; std::_Unfancy<unsigned int>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAI@std@@YAPEAIQEAI0@Z	; std::_Zero_range<unsigned int *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@PEAIAEAV?$allocator@I@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Uninitialized_backout_al<std::allocator<unsigned int> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAAPEAIXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned int> >::~_Uninitialized_backout_al<std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ; std::allocator<unsigned int>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAIV?$allocator@I@std@@@std@@YAPEAIQEAI0PEAIAEAV?$allocator@I@0@@Z ; std::_Uninitialized_move<unsigned int *,std::allocator<unsigned int> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@_K@std@@YAPEA_KPEA_K@Z	; std::_Unfancy<unsigned __int64>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEA_K@std@@YAPEA_KQEA_K0@Z ; std::_Zero_range<unsigned __int64 *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@PEA_KAEAV?$allocator@_K@1@@Z ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Uninitialized_backout_al<std::allocator<unsigned __int64> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAAPEA_KXZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@_K@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<unsigned __int64> >::~_Uninitialized_backout_al<std::allocator<unsigned __int64> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z ; std::allocator<unsigned __int64>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEA_KV?$allocator@_K@std@@@std@@YAPEA_KQEA_K0PEA_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_move<unsigned __int64 *,std::allocator<unsigned __int64> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ; std::allocator<unsigned __int64>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<int> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z	; std::_Zero_range<int *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ; std::allocator<int>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);
; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1843 :             return _First + _Count;
; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@H$0A@@glm@@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	npad	1

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	mov	rax, QWORD PTR $T4[rsp]

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 40
$T4 = 72
_First$ = 96
_Count$ = 104
_Al$ = 112
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	imul	rax, QWORD PTR _Oldsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<int,0> *,std::allocator<glm::tvec4<int,0> > >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
x$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
__$ReturnUdt$ = 96
v$ = 104
??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z PROC ; glm::bitCount<int,0,glm::tvec1>, COMDAT

; 319  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 320  : 		vecType<typename detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename detail::make_unsigned<T>::type, P> const *>(&v));

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 321  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 322  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 323  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 324  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 325  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 326  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,0>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 327  : 		return vecType<int, P>(x);

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ENDP ; glm::bitCount<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
x$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
__$ReturnUdt$ = 96
v$ = 104
??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z PROC ; bitCount::bitCount_bitfield<int,0,glm::tvec1>, COMDAT

; 1429 : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1430 : 		vecType<typename glm::detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename glm::detail::make_unsigned<T>::type, P> const *>(&v));

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1431 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >=  2>::call(x, typename glm::detail::make_unsigned<T>::type(0x5555555555555555ull), typename glm::detail::make_unsigned<T>::type( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1432 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >=  4>::call(x, typename glm::detail::make_unsigned<T>::type(0x3333333333333333ull), typename glm::detail::make_unsigned<T>::type( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1433 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >=  8>::call(x, typename glm::detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename glm::detail::make_unsigned<T>::type( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1434 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >= 16>::call(x, typename glm::detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename glm::detail::make_unsigned<T>::type( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1435 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >= 32>::call(x, typename glm::detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename glm::detail::make_unsigned<T>::type(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$00@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1436 : 		x = compute_bitfieldBitCountStep<sizeof(T) * 8 >= 64>::call(x, typename glm::detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename glm::detail::make_unsigned<T>::type(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldBitCountStep@$0A@@bitCount@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitCount::compute_bitfieldBitCountStep<0>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 1437 : 		return vecType<int, P>(x);

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 1438 : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z ENDP ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><unsigned int,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+8], ecx

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rax+12], ecx

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
__formal$ = 40
__formal$ = 48
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,0>::call, COMDAT

; 55   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 56   : 			return v;

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 57   : 		}

	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv65 = 80
__$ReturnUdt$ = 112
v$ = 120
Mask$ = 128
Shift$ = 136
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z PROC ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call, COMDAT

; 64   : 		{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 65   : 			return (v & Mask) + ((v >> Shift) & Mask);

	mov	r8d, DWORD PTR Shift$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ENDP ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z
_TEXT	SEGMENT
x$ = 40
$T4 = 56
$T5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
$T9 = 96
__$ReturnUdt$ = 128
v$ = 136
??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z PROC ; glm::bitCount<unsigned __int64,0,glm::tvec1>, COMDAT

; 319  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 320  : 		vecType<typename detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename detail::make_unsigned<T>::type, P> const *>(&v));

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 321  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));

	mov	r9d, 1
	mov	r8, 6148914691236517205			; 5555555555555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 322  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));

	mov	r9d, 2
	mov	r8, 3689348814741910323			; 3333333333333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 323  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));

	mov	r9d, 4
	mov	r8, 1085102592571150095			; 0f0f0f0f0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 324  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));

	mov	r9d, 8
	mov	r8, 71777214294589695			; 00ff00ff00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 325  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));

	mov	r9d, 16
	mov	r8, 281470681808895			; 0000ffff0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 326  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldBitCountStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 327  : 		return vecType<int, P>(x);

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0_K$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z ENDP ; glm::bitCount<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v$ = 104
scalar$ = 112
??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator>><__int64,0>, COMDAT

; 906  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 907  : 		return tvec4<T, P>(v) >>= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_2_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ; glm::tvec4<__int64,0>::operator>>=<__int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 908  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator>><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><__int64,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rax+12], ecx

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v$ = 104
scalar$ = 112
??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator&<__int64,0>, COMDAT

; 786  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 787  : 		return tvec4<T, P>(v) &= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_4_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ; glm::tvec4<__int64,0>::operator&=<__int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 788  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator&<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator*<__int64,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?X_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<__int64,0>::operator*=<__int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z PROC ; glm::tvec4<__int64,0>::tvec4<__int64,0><int,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ENDP ; glm::tvec4<__int64,0>::tvec4<__int64,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
tv80 = 32
tv70 = 40
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator>><__int64,0>, COMDAT

; 945  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 946  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv80[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv80[rsp]
	mov	rax, QWORD PTR [rax+16]
	sar	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	sar	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv70[rsp], rcx
	mov	rdx, QWORD PTR scalar$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8]
	sar	rdx, cl
	mov	rcx, rdx
	mov	r9, rax
	mov	rax, QWORD PTR tv70[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z	; glm::tvec3<__int64,0>::tvec3<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 947  : 			v.x >> scalar,
; 948  : 			v.y >> scalar,
; 949  : 			v.z >> scalar);
; 950  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator>><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z PROC ; glm::tvec3<int,0>::tvec3<int,0><__int64,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ENDP ; glm::tvec3<int,0>::tvec3<int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator&<__int64,0>, COMDAT

; 765  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 766  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR [rax+16]
	and	rax, rcx
	mov	rcx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	and	rcx, rdx
	mov	rdx, QWORD PTR v$[rsp]
	mov	r8, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR [rdx]
	and	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z	; glm::tvec3<__int64,0>::tvec3<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 767  : 			v.x & scalar,
; 768  : 			v.y & scalar,
; 769  : 			v.z & scalar);
; 770  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator&<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator*<__int64,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax+16]
	imul	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	imul	rcx, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	imul	rdx, QWORD PTR [r8]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z	; glm::tvec3<__int64,0>::tvec3<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z PROC ; glm::tvec3<__int64,0>::tvec3<__int64,0><int,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ENDP ; glm::tvec3<__int64,0>::tvec3<__int64,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
tv75 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator>><__int64,0>, COMDAT

; 823  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 824  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv75[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv75[rsp]
	mov	rax, QWORD PTR [rax+8]
	sar	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sar	rdx, cl
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 825  : 			v.x >> scalar,
; 826  : 			v.y >> scalar);
; 827  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator>><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z PROC ; glm::tvec2<int,0>::tvec2<int,0><__int64,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ENDP ; glm::tvec2<int,0>::tvec2<int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator&<__int64,0>, COMDAT

; 663  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 664  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR [rax+8]
	and	rax, rcx
	mov	rcx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR [rcx]
	and	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 665  : 			v.x & scalar,
; 666  : 			v.y & scalar);
; 667  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator&<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator*<__int64,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax+8]
	imul	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	imul	rcx, QWORD PTR [rdx]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z PROC ; glm::tvec2<__int64,0>::tvec2<__int64,0><int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ENDP ; glm::tvec2<__int64,0>::tvec2<__int64,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator>><__int64,0>, COMDAT

; 507  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 508  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	rax, QWORD PTR [rax]
	sar	rax, cl
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec1<__int64,0>::tvec1<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 509  : 			v.x >> scalar);
; 510  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator>><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z PROC ; glm::tvec1<int,0>::tvec1<int,0><__int64,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ENDP ; glm::tvec1<int,0>::tvec1<int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z PROC	; glm::operator&<__int64,0>, COMDAT

; 423  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 424  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec1<__int64,0>::tvec1<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 425  : 			v.x & scalar);
; 426  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ENDP	; glm::operator&<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator*<__int64,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax]
	imul	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec1<__int64,0>::tvec1<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z PROC ; glm::tvec1<__int64,0>::tvec1<__int64,0><int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ENDP ; glm::tvec1<__int64,0>::tvec1<__int64,0><int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z PROC ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><unsigned __int64,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rax+12], ecx

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ENDP ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v$ = 104
scalar$ = 112
??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator>><unsigned __int64,0>, COMDAT

; 906  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 907  : 		return tvec4<T, P>(v) >>= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_2_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@_K@Z ; glm::tvec4<unsigned __int64,0>::operator>>=<unsigned __int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 908  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator>><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator*<unsigned __int64,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?X_K@?$tvec4@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<unsigned __int64,0>::operator*=<unsigned __int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z PROC ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><unsigned int,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ENDP ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z PROC		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@_K000@Z ENDP		; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned __int64,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv80 = 32
tv70 = 40
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator>><unsigned __int64,0>, COMDAT

; 945  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 946  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv80[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv80[rsp]
	mov	rax, QWORD PTR [rax+16]
	shr	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	shr	rdx, cl
	mov	rcx, rdx
	mov	QWORD PTR tv70[rsp], rcx
	mov	rdx, QWORD PTR scalar$[rsp]
	mov	r8, QWORD PTR v$[rsp]
	movzx	ecx, dl
	mov	rdx, QWORD PTR [r8]
	shr	rdx, cl
	mov	rcx, rdx
	mov	r9, rax
	mov	rax, QWORD PTR tv70[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z	; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 947  : 			v.x >> scalar,
; 948  : 			v.y >> scalar,
; 949  : 			v.z >> scalar);
; 950  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator>><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator*<unsigned __int64,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax+16]
	imul	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	imul	rcx, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	imul	rdx, QWORD PTR [r8]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z	; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z PROC			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_K$0A@@glm@@QEAA@_K00@Z ENDP			; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned __int64,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv75 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator>><unsigned __int64,0>, COMDAT

; 823  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 824  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv75[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv75[rsp]
	mov	rax, QWORD PTR [rax+8]
	shr	rax, cl
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx]
	shr	rdx, cl
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 825  : 			v.x >> scalar,
; 826  : 			v.y >> scalar);
; 827  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator>><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator*<unsigned __int64,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax+8]
	imul	rax, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	imul	rcx, QWORD PTR [rdx]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z	; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z PROC			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s2$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_K$0A@@glm@@QEAA@_K0@Z ENDP			; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator>><unsigned __int64,0>, COMDAT

; 507  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 508  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	rax, QWORD PTR [rax]
	shr	rax, cl
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 509  : 			v.x >> scalar);
; 510  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator>><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator*<unsigned __int64,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rax, QWORD PTR [rax]
	imul	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z PROC ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><__int64,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rax+12], ecx

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ENDP ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
scalar$ = 104
v$ = 112
??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 646  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 647  : 		return tvec4<T, P>(v) += scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?Y_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@_J@Z ; glm::tvec4<__int64,0>::operator+=<__int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 648  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator-<__int64,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?Z_J@?$tvec4@_J$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<__int64,0>::operator-=<__int64>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z PROC ; glm::tvec4<__int64,0>::tvec4<__int64,0><unsigned int,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+24], rax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ENDP ; glm::tvec4<__int64,0>::tvec4<__int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z PROC		; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR d$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@_J000@Z ENDP		; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec4<__int64,0>::tvec4<__int64,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax+24], rcx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec4<__int64,0>::tvec4<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZI@?$tvec4@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<unsigned int,0>::operator-=<unsigned int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::mix<unsigned int,bool,0,glm::tvec4>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@I_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::mix<unsigned int,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z PROC ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><__int64,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+8], ecx

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ENDP ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 556  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 557  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR scalar$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR scalar$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8, QWORD PTR scalar$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z	; glm::tvec3<__int64,0>::tvec3<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 558  : 			scalar + v.x,
; 559  : 			scalar + v.y,
; 560  : 			scalar + v.z);
; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator-<__int64,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, QWORD PTR [rcx+8]
	sub	rcx, rdx
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	r8, QWORD PTR [r8]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z	; glm::tvec3<__int64,0>::tvec3<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z PROC ; glm::tvec3<__int64,0>::tvec3<__int64,0><unsigned int,0>, COMDAT

; 130  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 127  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 128  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 129  : 		z(static_cast<T>(v.z))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 130  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ENDP ; glm::tvec3<__int64,0>::tvec3<__int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z PROC			; glm::tvec3<__int64,0>::tvec3<__int64,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_J$0A@@glm@@QEAA@_J00@Z ENDP			; glm::tvec3<__int64,0>::tvec3<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	ecx, DWORD PTR [rcx+4]
	sub	ecx, edx
	mov	rdx, QWORD PTR v1$[rsp]
	mov	r8, QWORD PTR v2$[rsp]
	mov	r8d, DWORD PTR [r8]
	mov	edx, DWORD PTR [rdx]
	sub	edx, r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@III@Z	; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::mix<unsigned int,bool,0,glm::tvec3>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@I_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@I$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::mix<unsigned int,bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z PROC ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><__int64,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ENDP ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 477  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 478  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR scalar$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR scalar$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 479  : 			scalar + v.x,
; 480  : 			scalar + v.y);
; 481  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator-<__int64,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	rcx, QWORD PTR [rcx]
	sub	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z	; glm::tvec2<__int64,0>::tvec2<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z PROC ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned int,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ENDP ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z PROC			; glm::tvec2<__int64,0>::tvec2<__int64,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR s2$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_J$0A@@glm@@QEAA@_J0@Z ENDP			; glm::tvec2<__int64,0>::tvec2<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR v1$[rsp]
	mov	rdx, QWORD PTR v2$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, edx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::mix<unsigned int,bool,0,glm::tvec2>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@I_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@I$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::mix<unsigned int,bool,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z PROC ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><__int64,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ENDP ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z PROC	; glm::operator+<__int64,0>, COMDAT

; 322  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 323  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR scalar$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec1<__int64,0>::tvec1<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 324  : 			scalar + v.x);
; 325  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z ENDP	; glm::operator+<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z PROC	; glm::operator-<__int64,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z	; glm::tvec1<__int64,0>::tvec1<__int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<__int64,0>::tvec1<__int64,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<__int64,0>::tvec1<__int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z PROC			; glm::tvec1<__int64,0>::tvec1<__int64,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_J$0A@@glm@@QEAA@_J@Z ENDP			; glm::tvec1<__int64,0>::tvec1<__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator-<unsigned int,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z PROC ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>, COMDAT

; 44   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 45   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 45					; 0000002dH
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 46   : 
; 47   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 48   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 49   : 			Result[i] = x[i] >= y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jb	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 50   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 51   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ENDP ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z PROC ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ENDP ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator%<unsigned __int64,0>, COMDAT

; 416  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 417  : 		return tvec1<T, P>(

	xor	edx, edx
	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR v2$[rsp]
	div	QWORD PTR [rcx]
	mov	rax, rdx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 418  : 			v1.x % v2.x);
; 419  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator%<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z PROC	; glm::operator+<unsigned __int64,0>, COMDAT

; 315  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 316  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR scalar$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 317  : 			v.x + scalar);
; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ENDP	; glm::operator+<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::mix<unsigned int,bool,0,glm::tvec1>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@I_N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@0AEBU?$tvec1@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<unsigned int,bool,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::mix<unsigned int,bool,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z PROC ; glm::greaterThan<unsigned __int64,0,glm::tvec1>, COMDAT

; 33   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 34   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@_K$0A@@glm@@SAHXZ	; glm::tvec1<unsigned __int64,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@_K$0A@@glm@@SAHXZ	; glm::tvec1<unsigned __int64,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@greaterTha
	mov	r8d, 34					; 00000022H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@greaterTha:

; 35   : 
; 36   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 37   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@greaterTha
$LN2@greaterTha:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@greaterTha:
	call	?length@?$tvec1@_K$0A@@glm@@SAHXZ	; glm::tvec1<unsigned __int64,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@greaterTha

; 38   : 			Result[i] = x[i] > y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec1<unsigned __int64,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z	; glm::tvec1<unsigned __int64,0>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	QWORD PTR [rcx], rax
	jbe	SHORT $LN7@greaterTha
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@greaterTha
$LN7@greaterTha:
	mov	DWORD PTR tv86[rsp], 0
$LN8@greaterTha:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@greaterTha
$LN3@greaterTha:

; 39   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 40   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z ENDP ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z PROC	; glm::operator+<unsigned __int64,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR v2$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z
_TEXT	SEGMENT
Result$ = 36
IsNotNull$ = 52
tv69 = 56
Value$ = 80
?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z PROC	; glm::detail::compute_findLSB<int,32>::call, COMDAT

; 86   : 			{

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 87   : 				unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 88   : 				unsigned char IsNotNull = _BitScanForward(&Result, *reinterpret_cast<unsigned long*>(&Value));

	mov	eax, DWORD PTR Value$[rsp]
	bsf	eax, eax
	mov	DWORD PTR Result$[rsp], eax
	setne	al
	mov	BYTE PTR IsNotNull$[rsp], al

; 89   : 				return IsNotNull ? int(Result) : -1;

	movzx	eax, BYTE PTR IsNotNull$[rsp]
	test	eax, eax
	je	SHORT $LN3@call
	mov	eax, DWORD PTR Result$[rsp]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv69[rsp], -1
$LN4@call:
	mov	eax, DWORD PTR tv69[rsp]

; 90   : 			}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z ENDP	; glm::detail::compute_findLSB<int,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z PROC ; glm::findMSB<unsigned int,0,glm::tvec1>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");
; 360  : 
; 361  : 		return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_findMSB_vec@I$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU?$tvec1@I$0A@@3@@Z ; glm::detail::compute_findMSB_vec<unsigned int,0,glm::tvec1,32>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 362  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ENDP ; glm::findMSB<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_findMSB_vec<int,0,glm::tvec4,32>::call, COMDAT

; 154  : 			{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 155  : 				return detail::functor1<int, T, P, vecType>::call(compute_findMSB_32, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$compute_findMSB_32@H@detail@glm@@YAHH@Z ; glm::detail::compute_findMSB_32<int>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@HH$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@H$0A@@3@P6AHH@ZAEBU43@@Z ; glm::detail::functor1<int,int,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 156  : 			}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_findMSB_vec<int,0,glm::tvec4,32>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z PROC ; glm::findMSB<int,0,glm::tvec1>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");
; 360  : 
; 361  : 		return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_findMSB_vec@H$0A@Utvec1@glm@@$0CA@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_findMSB_vec<int,0,glm::tvec1,32>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 362  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ENDP ; glm::findMSB<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z
_TEXT	SEGMENT
x$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
__$ReturnUdt$ = 96
v$ = 104
??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z PROC ; glm::bitCount<unsigned int,0,glm::tvec1>, COMDAT

; 319  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 320  : 		vecType<typename detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename detail::make_unsigned<T>::type, P> const *>(&v));

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 321  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 322  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 323  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 324  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 325  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 326  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec1,0,0>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 327  : 		return vecType<int, P>(x);

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0I$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ENDP ; glm::bitCount<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
x$ = 40
$T4 = 56
$T5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
$T9 = 96
__$ReturnUdt$ = 128
v$ = 136
??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z PROC ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>, COMDAT

; 219  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 220  : 		vecType<T, P> x(v);

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 221  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  2>::call(x, T(0x5555555555555555ull), static_cast<T>( 1));

	mov	r9d, 1
	mov	r8, 6148914691236517205			; 5555555555555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 222  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  4>::call(x, T(0x3333333333333333ull), static_cast<T>( 2));

	mov	r9d, 2
	mov	r8, 3689348814741910323			; 3333333333333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 223  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  8>::call(x, T(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));

	mov	r9d, 4
	mov	r8, 1085102592571150095			; 0f0f0f0f0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 224  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 16>::call(x, T(0x00FF00FF00FF00FFull), static_cast<T>( 8));

	mov	r9d, 8
	mov	r8, 71777214294589695			; 00ff00ff00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 225  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 32>::call(x, T(0x0000FFFF0000FFFFull), static_cast<T>(16));

	mov	r9d, 16
	mov	r8, 281470681808895			; 0000ffff0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 226  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 64>::call(x, T(0x00000000FFFFFFFFull), static_cast<T>(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$call@_K$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@_K$0A@@glm@@AEBU23@_K1@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 227  : 		return x;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 228  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ENDP ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Result$ = 40
BitSize$ = 56
i$6 = 64
BitSet$7 = 88
BitFirst$8 = 120
$T9 = 136
tv86 = 144
__$ReturnUdt$ = 176
v$ = 184
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z PROC ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>, COMDAT

; 156  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 157  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitfieldReverse' only accept integer values");
; 158  : 
; 159  : 		vecType<T, P> Result(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>

; 160  : 		T const BitSize = static_cast<T>(sizeof(T) * 8);

	mov	QWORD PTR BitSize$[rsp], 64		; 00000040H

; 161  : 		for(T i = 0; i < BitSize; ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@bitfieldRe
$LN2@bitfieldRe:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@bitfieldRe:
	cmp	QWORD PTR i$6[rsp], 64			; 00000040H
	jae	SHORT $LN3@bitfieldRe

; 162  : 		{
; 163  : 			vecType<T, P> const BitSet(v & (static_cast<T>(1) << i));

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, 1
	mov	QWORD PTR tv86[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv86[rsp]
	shl	rax, cl
	mov	r8, rax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR BitSet$7[rsp]
	call	??$?I_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator&<unsigned __int64,0>

; 164  : 			vecType<T, P> const BitFirst(BitSet >> i);

	mov	r8, QWORD PTR i$6[rsp]
	lea	rdx, QWORD PTR BitSet$7[rsp]
	lea	rcx, QWORD PTR BitFirst$8[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>

; 165  : 			Result |= BitFirst << (BitSize - 1 - i);

	mov	eax, 63					; 0000003fH
	sub	rax, QWORD PTR i$6[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR BitFirst$8[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?6_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator<<<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$?_5_K@?$tvec1@_K$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec1<unsigned __int64,0>::operator|=<unsigned __int64>

; 166  : 		}

	jmp	$LN2@bitfieldRe
$LN3@bitfieldRe:

; 167  : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 168  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ENDP ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
x$ = 40
$T4 = 56
$T5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
$T9 = 96
__$ReturnUdt$ = 128
v$ = 136
??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z PROC ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>, COMDAT

; 299  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 300  : 		vecType<T, P> x(v);

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 301  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, T(0x5555555555555555ull), static_cast<T>( 1));

	mov	r9d, 1
	mov	r8, 6148914691236517205			; 5555555555555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 302  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, T(0x3333333333333333ull), static_cast<T>( 2));

	mov	r9d, 2
	mov	r8, 3689348814741910323			; 3333333333333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 303  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, T(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));

	mov	r9d, 4
	mov	r8, 1085102592571150095			; 0f0f0f0f0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 304  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, T(0x00FF00FF00FF00FFull), static_cast<T>( 8));

	mov	r9d, 8
	mov	r8, 71777214294589695			; 00ff00ff00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 305  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, T(0x0000FFFF0000FFFFull), static_cast<T>(16));

	mov	r9d, 16
	mov	r8, 281470681808895			; 0000ffff0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 306  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, T(0x00000000FFFFFFFFull), static_cast<T>(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldReverseStep@_K$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@_K$0A@@3@AEBU43@_K1@Z ; glm::detail::compute_bitfieldReverseStep<unsigned __int64,0,glm::tvec1,0,1>::call
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR x$[rsp], rax

; 307  : 		return x;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 308  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z ENDP ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z PROC			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR scalar$[rsp]
	mov	QWORD PTR [rax], rcx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z ENDP			; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z PROC		; glm::tvec1<unsigned __int64,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_K$0A@@glm@@SAHXZ	; glm::tvec1<unsigned __int64,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_K$0A@@glm@@QEBAAEB_KH@Z ENDP		; glm::tvec1<unsigned __int64,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_K$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_K$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned __int64,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_K$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned __int64,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
x$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
__$ReturnUdt$ = 96
v$ = 104
??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z PROC ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>, COMDAT

; 219  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 220  : 		vecType<T, P> x(v);

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 221  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  2>::call(x, T(0x5555555555555555ull), static_cast<T>( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 222  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  4>::call(x, T(0x3333333333333333ull), static_cast<T>( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 223  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >=  8>::call(x, T(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 224  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 16>::call(x, T(0x00FF00FF00FF00FFull), static_cast<T>( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 225  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 32>::call(x, T(0x0000FFFF0000FFFFull), static_cast<T>(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$00@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<1>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 226  : 		x = compute_bitfieldReverseStep<sizeof(T) * 8 >= 64>::call(x, T(0x00000000FFFFFFFFull), static_cast<T>(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$call@I$0A@Utvec1@glm@@@?$compute_bitfieldReverseStep@$0A@@bitfieldReverse@@SA?AU?$tvec1@I$0A@@glm@@AEBU23@II@Z ; bitfieldReverse::compute_bitfieldReverseStep<0>::call<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 227  : 		return x;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 228  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ENDP ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
Result$ = 36
BitSize$ = 52
i$6 = 56
BitSet$7 = 68
BitFirst$8 = 100
$T9 = 116
tv86 = 120
__$ReturnUdt$ = 144
v$ = 152
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z PROC ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>, COMDAT

; 156  : 	{

$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 157  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitfieldReverse' only accept integer values");
; 158  : 
; 159  : 		vecType<T, P> Result(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 160  : 		T const BitSize = static_cast<T>(sizeof(T) * 8);

	mov	DWORD PTR BitSize$[rsp], 32		; 00000020H

; 161  : 		for(T i = 0; i < BitSize; ++i)

	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@bitfieldRe
$LN2@bitfieldRe:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@bitfieldRe:
	cmp	DWORD PTR i$6[rsp], 32			; 00000020H
	jae	SHORT $LN3@bitfieldRe

; 162  : 		{
; 163  : 			vecType<T, P> const BitSet(v & (static_cast<T>(1) << i));

	mov	eax, DWORD PTR i$6[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv86[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv86[rsp]
	shl	eax, cl
	mov	r8d, eax
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR BitSet$7[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>

; 164  : 			vecType<T, P> const BitFirst(BitSet >> i);

	mov	r8d, DWORD PTR i$6[rsp]
	lea	rdx, QWORD PTR BitSet$7[rsp]
	lea	rcx, QWORD PTR BitFirst$8[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>

; 165  : 			Result |= BitFirst << (BitSize - 1 - i);

	mov	eax, 31
	sub	eax, DWORD PTR i$6[rsp]
	mov	r8d, eax
	lea	rdx, QWORD PTR BitFirst$8[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$[rsp]
	call	??$?_5I@?$tvec1@I$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec1<unsigned int,0>::operator|=<unsigned int>

; 166  : 		}

	jmp	SHORT $LN2@bitfieldRe
$LN3@bitfieldRe:

; 167  : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 168  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ENDP ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
x$ = 36
$T4 = 52
$T5 = 56
$T6 = 60
$T7 = 64
$T8 = 68
$T9 = 72
__$ReturnUdt$ = 96
v$ = 104
??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z PROC ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>, COMDAT

; 299  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 300  : 		vecType<T, P> x(v);

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 301  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, T(0x5555555555555555ull), static_cast<T>( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 302  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, T(0x3333333333333333ull), static_cast<T>( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 303  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, T(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 304  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, T(0x00FF00FF00FF00FFull), static_cast<T>( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 305  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, T(0x0000FFFF0000FFFFull), static_cast<T>(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$00@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,1>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 306  : 		x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, T(0x00000000FFFFFFFFull), static_cast<T>(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldReverseStep@I$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldReverseStep<unsigned int,0,glm::tvec1,0,0>::call
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR x$[rsp], eax

; 307  : 		return x;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 308  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ENDP ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z
_TEXT	SEGMENT
$T1 = 32
tv65 = 36
__$ReturnUdt$ = 64
Value$ = 72
Offset$ = 80
Bits$ = 88
??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z PROC ; glm::bitfieldExtract<unsigned int,0,glm::tvec1>, COMDAT

; 268  : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 269  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitfieldExtract' only accept integer inputs");
; 270  : 
; 271  : 		return (Value >> static_cast<T>(Offset)) & static_cast<T>(detail::mask(Bits));

	mov	ecx, DWORD PTR Bits$[rsp]
	call	??$mask@H@detail@glm@@YAHH@Z		; glm::detail::mask<int>
	mov	DWORD PTR tv65[rsp], eax
	mov	r8d, DWORD PTR Offset$[rsp]
	mov	rdx, QWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?5I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator>><unsigned int,0>
	mov	ecx, DWORD PTR tv65[rsp]
	mov	r8d, ecx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 272  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z ENDP ; glm::bitfieldExtract<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z
_TEXT	SEGMENT
Mask$ = 32
$T1 = 36
$T2 = 40
tv68 = 48
__$ReturnUdt$ = 80
Base$ = 88
Insert$ = 96
Offset$ = 104
Bits$ = 112
??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z PROC ; glm::bitfieldInsert<unsigned int,0,glm::tvec1>, COMDAT

; 283  : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 284  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitfieldInsert' only accept integer values");
; 285  : 
; 286  : 		T const Mask = static_cast<T>(detail::mask(Bits) << Offset);

	mov	ecx, DWORD PTR Bits$[rsp]
	call	??$mask@H@detail@glm@@YAHH@Z		; glm::detail::mask<int>
	mov	ecx, DWORD PTR Offset$[rsp]
	shl	eax, cl
	mov	DWORD PTR Mask$[rsp], eax

; 287  : 		return (Base & ~Mask) | (Insert & Mask);

	mov	r8d, DWORD PTR Mask$[rsp]
	mov	rdx, QWORD PTR Insert$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	ecx, DWORD PTR Mask$[rsp]
	not	ecx
	mov	r8d, ecx
	mov	rdx, QWORD PTR Base$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?II$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator&<unsigned int,0>
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 288  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z ENDP ; glm::bitfieldInsert<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned int> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned __int64> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@I@std@@QEAA@XZ		; std::allocator<unsigned int>::allocator<unsigned int>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@I@std@@@std@@YAPEAIPEAI_KAEAV?$allocator@I@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned int> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@_K@std@@QEAA@XZ		; std::allocator<unsigned __int64>::allocator<unsigned __int64>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@_K@std@@@std@@YAPEA_KPEA_K_KAEAV?$allocator@_K@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<unsigned __int64> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@H@std@@QEAA@XZ		; std::allocator<int>::allocator<int>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@H$0A@@glm@@PEAU12@_KAEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<glm::tvec4<int,0> > >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 1531 : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 1532 : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 1533 : 
; 1534 : 	Error += ::bitCount::test();

	call	?test@bitCount@@YAHXZ			; bitCount::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1535 : 	Error += ::bitfieldReverse::test();

	call	?test@bitfieldReverse@@YAHXZ		; bitfieldReverse::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1536 : 	Error += ::findMSB::test();

	call	?test@findMSB@@YAHXZ			; findMSB::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1537 : 	Error += ::findLSB::test();

	call	?test@findLSB@@YAHXZ			; findLSB::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1538 : 	Error += ::umulExtended::test();

	call	?test@umulExtended@@YAHXZ		; umulExtended::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1539 : 	Error += ::imulExtended::test();

	call	?test@imulExtended@@YAHXZ		; imulExtended::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1540 : 	Error += ::uaddCarry::test();

	call	?test@uaddCarry@@YAHXZ			; uaddCarry::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1541 : 	Error += ::usubBorrow::test();

	call	?test@usubBorrow@@YAHXZ			; usubBorrow::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1542 : 	Error += ::bitfieldInsert::test();

	call	?test@bitfieldInsert@@YAHXZ		; bitfieldInsert::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1543 : 	Error += ::bitfieldExtract::test();

	call	?test@bitfieldExtract@@YAHXZ		; bitfieldExtract::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1544 : 
; 1545 : #	ifdef NDEBUG
; 1546 : 		std::size_t const Samples = 1000;
; 1547 : 		::bitCount::perf(Samples);
; 1548 : 		::bitfieldReverse::perf(Samples);
; 1549 : 		::findMSB::perf(Samples);
; 1550 : 		::findLSB::perf(Samples);
; 1551 : #	endif
; 1552 : 
; 1553 : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1554 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitCount_vec@H@bitCount@@YAHH@Z
_TEXT	SEGMENT
Count$ = 0
i$1 = 4
n$2 = 8
v$ = 32
??$bitCount_vec@H@bitCount@@YAHH@Z PROC			; bitCount::bitCount_vec<int>, COMDAT

; 1396 : 	{

$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 1397 : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitCount' only accept integer values");
; 1398 : 
; 1399 : 		int Count(0);

	mov	DWORD PTR Count$[rsp], 0

; 1400 : 		for(T i = 0, n = static_cast<T>(sizeof(T) * 8); i < n; ++i)

	mov	DWORD PTR i$1[rsp], 0
	mov	DWORD PTR n$2[rsp], 32			; 00000020H
	jmp	SHORT $LN4@bitCount_v
$LN2@bitCount_v:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@bitCount_v:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@bitCount_v

; 1401 : 		{
; 1402 : 			Count += static_cast<int>((v >> i) & static_cast<T>(1));

	mov	eax, DWORD PTR i$1[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, cl
	and	eax, 1
	mov	ecx, DWORD PTR Count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Count$[rsp], eax

; 1403 : 		}

	jmp	SHORT $LN2@bitCount_v
$LN3@bitCount_v:

; 1404 : 		return Count;

	mov	eax, DWORD PTR Count$[rsp]

; 1405 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$bitCount_vec@H@bitCount@@YAHH@Z ENDP			; bitCount::bitCount_vec<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@H@glm@@YAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$bitCount@H@glm@@YAHH@Z PROC				; glm::bitCount<int>, COMDAT

; 313  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 314  : 		return bitCount(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitCount@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::bitCount<int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 315  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitCount@H@glm@@YAHH@Z ENDP				; glm::bitCount<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
i$1 = 40
n$2 = 48
ResultA$3 = 56
ResultB$4 = 60
ResultC$5 = 64
ResultE$6 = 68
tv90 = 72
tv128 = 76
tv134 = 80
tv140 = 84
?test@bitCount@@YAHXZ PROC				; bitCount::test

; 1508 : 	{

$LN15:
	push	rdi
	sub	rsp, 96					; 00000060H

; 1509 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1510 : 
; 1511 : 		for(std::size_t i = 0, n = sizeof(DataI32) / sizeof(type<int>); i < n; ++i)

	mov	QWORD PTR i$1[rsp], 0
	mov	QWORD PTR n$2[rsp], 5
	jmp	SHORT $LN4@test
$LN2@test:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test:
	mov	rax, QWORD PTR n$2[rsp]
	cmp	QWORD PTR i$1[rsp], rax
	jae	$LN3@test

; 1512 : 		{
; 1513 : 			int ResultA = glm::bitCount(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$bitCount@H@glm@@YAHH@Z		; glm::bitCount<int>
	mov	DWORD PTR ResultA$3[rsp], eax

; 1514 : 			int ResultB = bitCount_if(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$bitCount_if@H@bitCount@@YAHH@Z	; bitCount::bitCount_if<int>
	mov	DWORD PTR ResultB$4[rsp], eax

; 1515 : 			int ResultC = bitCount_vec(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$bitCount_vec@H@bitCount@@YAHH@Z	; bitCount::bitCount_vec<int>
	mov	DWORD PTR ResultC$5[rsp], eax

; 1516 : 			int ResultE = bitCount_bitfield(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$bitCount_bitfield@H@bitCount@@YAHH@Z	; bitCount::bitCount_bitfield<int>
	mov	DWORD PTR ResultE$6[rsp], eax

; 1517 : 
; 1518 : 			Error += DataI32[i].Return == ResultA ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, DWORD PTR ResultA$3[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN6@test
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN7@test
$LN6@test:
	mov	DWORD PTR tv90[rsp], 1
$LN7@test:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1519 : 			Error += DataI32[i].Return == ResultB ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, DWORD PTR ResultB$4[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN8@test
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN9@test
$LN8@test:
	mov	DWORD PTR tv128[rsp], 1
$LN9@test:
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1520 : 			Error += DataI32[i].Return == ResultC ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, DWORD PTR ResultC$5[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN10@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN11@test
$LN10@test:
	mov	DWORD PTR tv134[rsp], 1
$LN11@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1521 : 			Error += DataI32[i].Return == ResultE ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@bitCount@@3QBU?$type@H@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, DWORD PTR ResultE$6[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN12@test
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN13@test
$LN12@test:
	mov	DWORD PTR tv140[rsp], 1
$LN13@test:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1522 : 
; 1523 : 			assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN14@test
	mov	r8d, 1523				; 000005f3H
	lea	rdx, OFFSET FLAT:$SG60905
	lea	rcx, OFFSET FLAT:$SG60906
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@test:

; 1524 : 		}

	jmp	$LN2@test
$LN3@test:

; 1525 : 
; 1526 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1527 : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?test@bitCount@@YAHXZ ENDP				; bitCount::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitCount_bitfield@H@bitCount@@YAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$bitCount_bitfield@H@bitCount@@YAHH@Z PROC		; bitCount::bitCount_bitfield<int>, COMDAT

; 1442 : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1443 : 		return bitCount_bitfield(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitCount_bitfield@H$0A@Utvec1@glm@@@bitCount@@YA?AU?$tvec1@H$0A@@glm@@AEBU12@@Z ; bitCount::bitCount_bitfield<int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 1444 : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitCount_bitfield@H@bitCount@@YAHH@Z ENDP		; bitCount::bitCount_bitfield<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
x$ = 40
$T4 = 68
$T5 = 84
$T6 = 100
$T7 = 116
$T8 = 132
$T9 = 148
__$ReturnUdt$ = 208
v$ = 216
??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC ; glm::bitCount<int,0,glm::tvec4>, COMDAT

; 319  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]

; 320  : 		vecType<typename detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename detail::make_unsigned<T>::type, P> const *>(&v));

	lea	rax, QWORD PTR x$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb

; 321  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));

	mov	r9d, 1
	mov	r8d, 1431655765				; 55555555H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 322  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));

	mov	r9d, 2
	mov	r8d, 858993459				; 33333333H
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 323  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>=  8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));

	mov	r9d, 4
	mov	r8d, 252645135				; 0f0f0f0fH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 324  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));

	mov	r9d, 8
	mov	r8d, 16711935				; 00ff00ffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 325  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));

	mov	r9d, 16
	mov	r8d, 65535				; 0000ffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$00@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,1>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 326  : 		x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));

	mov	r9d, 32					; 00000020H
	mov	r8d, -1					; ffffffffH
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?call@?$compute_bitfieldBitCountStep@I$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@I$0A@@3@AEBU43@II@Z ; glm::detail::compute_bitfieldBitCountStep<unsigned int,0,glm::tvec4,0,0>::call
	lea	rcx, QWORD PTR x$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 327  : 		return vecType<int, P>(x);

	lea	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0I$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 328  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP ; glm::bitCount<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@_K@glm@@YAH_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
x$ = 64
??$bitCount@_K@glm@@YAH_K@Z PROC			; glm::bitCount<unsigned __int64>, COMDAT

; 313  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 314  : 		return bitCount(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitCount@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@_K$0A@@0@@Z ; glm::bitCount<unsigned __int64,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 315  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitCount@_K@glm@@YAH_K@Z ENDP			; glm::bitCount<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitCount_vec@_K@bitCount@@YAH_K@Z
_TEXT	SEGMENT
Count$ = 0
i$1 = 8
n$2 = 16
v$ = 48
??$bitCount_vec@_K@bitCount@@YAH_K@Z PROC		; bitCount::bitCount_vec<unsigned __int64>, COMDAT

; 1396 : 	{

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1397 : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitCount' only accept integer values");
; 1398 : 
; 1399 : 		int Count(0);

	mov	DWORD PTR Count$[rsp], 0

; 1400 : 		for(T i = 0, n = static_cast<T>(sizeof(T) * 8); i < n; ++i)

	mov	QWORD PTR i$1[rsp], 0
	mov	QWORD PTR n$2[rsp], 64			; 00000040H
	jmp	SHORT $LN4@bitCount_v
$LN2@bitCount_v:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@bitCount_v:
	mov	rax, QWORD PTR n$2[rsp]
	cmp	QWORD PTR i$1[rsp], rax
	jae	SHORT $LN3@bitCount_v

; 1401 : 		{
; 1402 : 			Count += static_cast<int>((v >> i) & static_cast<T>(1));

	mov	rax, QWORD PTR i$1[rsp]
	movzx	ecx, al
	mov	rax, QWORD PTR v$[rsp]
	shr	rax, cl
	and	rax, 1
	mov	ecx, DWORD PTR Count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Count$[rsp], eax

; 1403 : 		}

	jmp	SHORT $LN2@bitCount_v
$LN3@bitCount_v:

; 1404 : 		return Count;

	mov	eax, DWORD PTR Count$[rsp]

; 1405 : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$bitCount_vec@_K@bitCount@@YAH_K@Z ENDP		; bitCount::bitCount_vec<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitCount_if@H@bitCount@@YAHH@Z
_TEXT	SEGMENT
Count$ = 0
i$1 = 4
n$2 = 8
tv74 = 12
v$ = 32
??$bitCount_if@H@bitCount@@YAHH@Z PROC			; bitCount::bitCount_if<int>, COMDAT

; 1382 : 	{

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 1383 : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'bitCount' only accept integer values");
; 1384 : 
; 1385 : 		int Count(0);

	mov	DWORD PTR Count$[rsp], 0

; 1386 : 		for(T i = 0, n = static_cast<T>(sizeof(T) * 8); i < n; ++i)

	mov	DWORD PTR i$1[rsp], 0
	mov	DWORD PTR n$2[rsp], 32			; 00000020H
	jmp	SHORT $LN4@bitCount_i
$LN2@bitCount_i:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@bitCount_i:
	mov	eax, DWORD PTR n$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@bitCount_i

; 1387 : 		{
; 1388 : 			if(v & static_cast<T>(1 << i))

	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv74[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv74[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR v$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@bitCount_i

; 1389 : 				++Count;

	mov	eax, DWORD PTR Count$[rsp]
	inc	eax
	mov	DWORD PTR Count$[rsp], eax
$LN5@bitCount_i:

; 1390 : 		}

	jmp	SHORT $LN2@bitCount_i
$LN3@bitCount_i:

; 1391 : 		return Count;

	mov	eax, DWORD PTR Count$[rsp]

; 1392 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$bitCount_if@H@bitCount@@YAHH@Z ENDP			; bitCount::bitCount_if<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@H$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@H$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@H$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<int,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<int,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@H$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@H$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<int,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@H$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@H$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@H$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<int,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@H$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<int,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAPEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<int,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<int,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAAXQEAU?$tvec4@H$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<int,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@H$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<int,0> >::allocator<glm::tvec4<int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z PROC ; std::vector<int,std::allocator<int> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ENDP ; std::vector<int,std::allocator<int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z PROC ; std::vector<int,std::allocator<int> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ENDP ; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ENDP ; std::vector<int,std::allocator<int> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
$T4 = 68
this$ = 96
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z PROC		; std::allocator<int>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z PROC	; std::allocator<int>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ENDP	; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@H@std@@QEAA@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@H@std@@QEAA@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
v$ = 56
w$ = 120
TimestampsA$ = 164
i$5 = 168
n$6 = 176
TimestampsB$ = 184
i$7 = 192
n$8 = 200
TimestampsC$ = 208
i$9 = 216
n$10 = 224
TimestampsD$ = 232
i$11 = 240
n$12 = 248
TimestampsE$ = 256
i$13 = 264
n$14 = 272
TimestampsF$ = 280
$T15 = 284
$T16 = 300
$T17 = 316
tv82 = 320
tv92 = 324
tv134 = 328
tv144 = 336
tv159 = 344
Size$ = 384
?perf@bitCount@@YAH_K@Z PROC				; bitCount::perf

; 1447 : 	{

$LN20:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+384]

; 1448 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1449 : 
; 1450 : 		std::vector<int> v;

	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 1451 : 		v.resize(Size);

	mov	rdx, QWORD PTR Size$[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 1452 : 
; 1453 : 		std::vector<glm::ivec4> w;

	lea	rcx, QWORD PTR w$[rsp]
	call	??0?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	npad	1

; 1454 : 		w.resize(Size);

	mov	rdx, QWORD PTR Size$[rsp]
	lea	rcx, QWORD PTR w$[rsp]
	call	?resize@?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAX_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::resize

; 1455 : 
; 1456 : 
; 1457 : 		std::clock_t TimestampsA = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsA$[rsp], eax

; 1458 : 
; 1459 : 		// bitCount - TimeIf
; 1460 : 		{
; 1461 : 			for(std::size_t i = 0, n = v.size(); i < n; ++i)

	mov	QWORD PTR i$5[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
	mov	QWORD PTR n$6[rsp], rax
	jmp	SHORT $LN4@perf
$LN2@perf:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@perf:
	mov	rax, QWORD PTR n$6[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN3@perf

; 1462 : 				v[i] = bitCount_if(static_cast<int>(i));

	mov	ecx, DWORD PTR i$5[rsp]
	call	??$bitCount_if@H@bitCount@@YAHH@Z	; bitCount::bitCount_if<int>
	mov	DWORD PTR tv82[rsp], eax
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv82[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf
$LN3@perf:

; 1463 : 		}
; 1464 : 
; 1465 : 		std::clock_t TimestampsB = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsB$[rsp], eax

; 1466 : 
; 1467 : 		// bitCount - TimeVec
; 1468 : 		{
; 1469 : 			for(std::size_t i = 0, n = v.size(); i < n; ++i)

	mov	QWORD PTR i$7[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
	mov	QWORD PTR n$8[rsp], rax
	jmp	SHORT $LN7@perf
$LN5@perf:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN7@perf:
	mov	rax, QWORD PTR n$8[rsp]
	cmp	QWORD PTR i$7[rsp], rax
	jae	SHORT $LN6@perf

; 1470 : 				v[i] = bitCount_vec(i);

	mov	rcx, QWORD PTR i$7[rsp]
	call	??$bitCount_vec@_K@bitCount@@YAH_K@Z	; bitCount::bitCount_vec<unsigned __int64>
	mov	DWORD PTR tv92[rsp], eax
	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv92[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf
$LN6@perf:

; 1471 : 		}
; 1472 : 
; 1473 : 		std::clock_t TimestampsC = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsC$[rsp], eax

; 1474 : 
; 1475 : 		// bitCount - TimeDefault
; 1476 : 		{
; 1477 : 			for(std::size_t i = 0, n = v.size(); i < n; ++i)

	mov	QWORD PTR i$9[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
	mov	QWORD PTR n$10[rsp], rax
	jmp	SHORT $LN10@perf
$LN8@perf:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN10@perf:
	mov	rax, QWORD PTR n$10[rsp]
	cmp	QWORD PTR i$9[rsp], rax
	jae	SHORT $LN9@perf

; 1478 : 				v[i] = glm::bitCount(i);

	mov	rcx, QWORD PTR i$9[rsp]
	call	??$bitCount@_K@glm@@YAH_K@Z		; glm::bitCount<unsigned __int64>
	mov	DWORD PTR tv134[rsp], eax
	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv134[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN8@perf
$LN9@perf:

; 1479 : 		}
; 1480 : 
; 1481 : 		std::clock_t TimestampsD = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsD$[rsp], eax

; 1482 : 
; 1483 : 		// bitCount - TimeVec4
; 1484 : 		{
; 1485 : 			for(std::size_t i = 0, n = v.size(); i < n; ++i)

	mov	QWORD PTR i$11[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
	mov	QWORD PTR n$12[rsp], rax
	jmp	SHORT $LN13@perf
$LN11@perf:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN13@perf:
	mov	rax, QWORD PTR n$12[rsp]
	cmp	QWORD PTR i$11[rsp], rax
	jae	SHORT $LN12@perf

; 1486 : 				w[i] = glm::bitCount(glm::ivec4(static_cast<int>(i)));

	mov	edx, DWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$bitCount@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::bitCount<int,0,glm::tvec4>
	mov	QWORD PTR tv144[rsp], rax
	mov	rdx, QWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR w$[rsp]
	call	??A?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@H$0A@@glm@@_K@Z ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv144[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN11@perf
$LN12@perf:

; 1487 : 		}
; 1488 : 
; 1489 : 		std::clock_t TimestampsE = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsE$[rsp], eax

; 1490 : 
; 1491 : 		{
; 1492 : 			for(std::size_t i = 0, n = v.size(); i < n; ++i)

	mov	QWORD PTR i$13[rsp], 0
	lea	rcx, QWORD PTR v$[rsp]
	call	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
	mov	QWORD PTR n$14[rsp], rax
	jmp	SHORT $LN16@perf
$LN14@perf:
	mov	rax, QWORD PTR i$13[rsp]
	inc	rax
	mov	QWORD PTR i$13[rsp], rax
$LN16@perf:
	mov	rax, QWORD PTR n$14[rsp]
	cmp	QWORD PTR i$13[rsp], rax
	jae	SHORT $LN15@perf

; 1493 : 				v[i] = bitCount_bitfield(static_cast<int>(i));

	mov	ecx, DWORD PTR i$13[rsp]
	call	??$bitCount_bitfield@H@bitCount@@YAHH@Z	; bitCount::bitCount_bitfield<int>
	mov	DWORD PTR tv159[rsp], eax
	mov	rdx, QWORD PTR i$13[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv159[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN14@perf
$LN15@perf:

; 1494 : 		}
; 1495 : 
; 1496 : 		std::clock_t TimestampsF = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR TimestampsF$[rsp], eax

; 1497 : 
; 1498 : 		std::printf("bitCount - TimeIf %d\n", static_cast<unsigned int>(TimestampsB - TimestampsA));

	mov	eax, DWORD PTR TimestampsA$[rsp]
	mov	ecx, DWORD PTR TimestampsB$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG60876
	call	printf

; 1499 : 		std::printf("bitCount - TimeVec %d\n", static_cast<unsigned int>(TimestampsC - TimestampsB));

	mov	eax, DWORD PTR TimestampsB$[rsp]
	mov	ecx, DWORD PTR TimestampsC$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG60877
	call	printf

; 1500 : 		std::printf("bitCount - TimeDefault %d\n", static_cast<unsigned int>(TimestampsD - TimestampsC));

	mov	eax, DWORD PTR TimestampsC$[rsp]
	mov	ecx, DWORD PTR TimestampsD$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG60878
	call	printf

; 1501 : 		std::printf("bitCount - TimeVec4 %d\n", static_cast<unsigned int>(TimestampsE - TimestampsD));

	mov	eax, DWORD PTR TimestampsD$[rsp]
	mov	ecx, DWORD PTR TimestampsE$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG60879
	call	printf

; 1502 : 		std::printf("bitCount - bitfield %d\n", static_cast<unsigned int>(TimestampsF - TimestampsE));

	mov	eax, DWORD PTR TimestampsE$[rsp]
	mov	ecx, DWORD PTR TimestampsF$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG60880
	call	printf

; 1503 : 
; 1504 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T17[rsp], eax
	lea	rcx, QWORD PTR w$[rsp]
	call	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	npad	1
	lea	rcx, QWORD PTR v$[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR $T17[rsp]

; 1505 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf@bitCount@@YAH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
?perf@bitCount@@YAH_K@Z ENDP				; bitCount::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
v$ = 56
w$ = 120
TimestampsA$ = 164
i$5 = 168
n$6 = 176
TimestampsB$ = 184
i$7 = 192
n$8 = 200
TimestampsC$ = 208
i$9 = 216
n$10 = 224
TimestampsD$ = 232
i$11 = 240
n$12 = 248
TimestampsE$ = 256
i$13 = 264
n$14 = 272
TimestampsF$ = 280
$T15 = 284
$T16 = 300
$T17 = 316
tv82 = 320
tv92 = 324
tv134 = 328
tv144 = 336
tv159 = 344
Size$ = 384
?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA PROC		; `bitCount::perf'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR v$[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf@bitCount@@YAH_K@Z@4HA ENDP		; `bitCount::perf'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
v$ = 56
w$ = 120
TimestampsA$ = 164
i$5 = 168
n$6 = 176
TimestampsB$ = 184
i$7 = 192
n$8 = 200
TimestampsC$ = 208
i$9 = 216
n$10 = 224
TimestampsD$ = 232
i$11 = 240
n$12 = 248
TimestampsE$ = 256
i$13 = 264
n$14 = 272
TimestampsF$ = 280
$T15 = 284
$T16 = 300
$T17 = 316
tv82 = 320
tv92 = 324
tv134 = 328
tv144 = 336
tv159 = 344
Size$ = 384
?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA PROC		; `bitCount::perf'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR w$[rbp]
	call	??1?$vector@U?$tvec4@H$0A@@glm@@V?$allocator@U?$tvec4@H$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >::~vector<glm::tvec4<int,0>,std::allocator<glm::tvec4<int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??perf@bitCount@@YAH_K@Z@4HA ENDP		; `bitCount::perf'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 88
$T5 = 120
$T6 = 152
$T7 = 168
$T8 = 200
$T9 = 216
$T10 = 248
tv66 = 280
x$ = 320
y$ = 328
msb$ = 336
lsb$ = 344
??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z PROC ; glm::imulExtended<0,glm::tvec4>, COMDAT

; 251  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]

; 252  : 		GLM_STATIC_ASSERT(sizeof(int) == sizeof(int32), "int and int32 size mismatch");
; 253  : 
; 254  : 		vecType<int64, P> Value64(vecType<int64, P>(x) * vecType<int64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0H$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@H$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>

; 255  : 		lsb = vecType<int32, P>(Value64 & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, -1
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><__int64,0>
	mov	rdi, QWORD PTR lsb$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 256  : 		msb = vecType<int32, P>((Value64 >> static_cast<int64>(32)) & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?5_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
	mov	r8d, -1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_J$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><__int64,0>
	mov	rdi, QWORD PTR msb$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 257  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z ENDP ; glm::imulExtended<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 72
$T5 = 96
$T6 = 120
$T7 = 136
$T8 = 160
$T9 = 176
$T10 = 200
tv66 = 224
x$ = 272
y$ = 280
msb$ = 288
lsb$ = 296
??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z PROC ; glm::imulExtended<0,glm::tvec3>, COMDAT

; 251  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+272]

; 252  : 		GLM_STATIC_ASSERT(sizeof(int) == sizeof(int32), "int and int32 size mismatch");
; 253  : 
; 254  : 		vecType<int64, P> Value64(vecType<int64, P>(x) * vecType<int64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0H$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@H$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>

; 255  : 		lsb = vecType<int32, P>(Value64 & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, -1
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><__int64,0>
	mov	rdi, QWORD PTR lsb$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 256  : 		msb = vecType<int32, P>((Value64 >> static_cast<int64>(32)) & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?5_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
	mov	r8d, -1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_J$0A@@?$tvec3@H$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<int,0>::tvec3<int,0><__int64,0>
	mov	rdi, QWORD PTR msb$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 257  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z ENDP ; glm::imulExtended<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 65   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 72
$T5 = 88
$T6 = 104
$T7 = 112
$T8 = 128
$T9 = 136
$T10 = 152
tv66 = 168
x$ = 192
y$ = 200
msb$ = 208
lsb$ = 216
??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z PROC ; glm::imulExtended<0,glm::tvec2>, COMDAT

; 251  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 252  : 		GLM_STATIC_ASSERT(sizeof(int) == sizeof(int32), "int and int32 size mismatch");
; 253  : 
; 254  : 		vecType<int64, P> Value64(vecType<int64, P>(x) * vecType<int64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0H$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@H$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>

; 255  : 		lsb = vecType<int32, P>(Value64 & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, -1
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><__int64,0>
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR lsb$[rsp]
	mov	QWORD PTR [rcx], rax

; 256  : 		msb = vecType<int32, P>((Value64 >> static_cast<int64>(32)) & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?5_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
	mov	r8d, -1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_J$0A@@?$tvec2@H$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<int,0>::tvec2<int,0><__int64,0>
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR msb$[rsp]
	mov	QWORD PTR [rcx], rax

; 257  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z ENDP ; glm::imulExtended<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 56
$T5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
$T9 = 96
$T10 = 104
tv66 = 112
x$ = 144
y$ = 152
msb$ = 160
lsb$ = 168
??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z PROC ; glm::imulExtended<0,glm::tvec1>, COMDAT

; 251  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 252  : 		GLM_STATIC_ASSERT(sizeof(int) == sizeof(int32), "int and int32 size mismatch");
; 253  : 
; 254  : 		vecType<int64, P> Value64(vecType<int64, P>(x) * vecType<int64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0H$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@H$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ; glm::operator*<__int64,0>

; 255  : 		lsb = vecType<int32, P>(Value64 & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, -1
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><__int64,0>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR lsb$[rsp]
	mov	DWORD PTR [rcx], eax

; 256  : 		msb = vecType<int32, P>((Value64 >> static_cast<int64>(32)) & static_cast<int64>(0xFFFFFFFF));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?5_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ; glm::operator>><__int64,0>
	mov	r8d, -1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?I_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@_J@Z ; glm::operator&<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_J$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><__int64,0>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR msb$[rsp]
	mov	DWORD PTR [rcx], eax

; 257  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z ENDP ; glm::imulExtended<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
x$21 = 36
y$22 = 40
msb$23 = 52
lsb$24 = 84
x$25 = 116
y$26 = 148
msb$27 = 180
lsb$28 = 212
x$29 = 248
y$30 = 280
msb$31 = 312
lsb$32 = 344
x$33 = 376
y$34 = 424
msb$35 = 472
lsb$36 = 520
x$37 = 568
y$38 = 616
msb$39 = 664
lsb$40 = 712
$T41 = 740
$T42 = 744
$T43 = 748
$T44 = 752
$T45 = 756
$T46 = 764
$T47 = 768
$T48 = 776
$T49 = 780
$T50 = 792
$T51 = 796
$T52 = 808
$T53 = 812
$T54 = 828
$T55 = 832
$T56 = 848
tv69 = 852
tv72 = 856
tv129 = 860
tv142 = 864
tv167 = 868
tv180 = 872
tv205 = 876
tv218 = 880
tv243 = 884
tv288 = 888
?test@imulExtended@@YAHXZ PROC				; imulExtended::test

; 1300 : 	{

$LN23:
	push	rdi
	sub	rsp, 896				; 00000380H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 216				; 000000d8H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1301 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1302 : 		
; 1303 : 		{
; 1304 : 			int x = 2;

	mov	DWORD PTR x$21[rsp], 2

; 1305 : 			int y = 3;

	mov	DWORD PTR y$22[rsp], 3

; 1306 : 			int msb = 0;

	mov	DWORD PTR msb$23[rsp], 0

; 1307 : 			int lsb = 0;

	mov	DWORD PTR lsb$24[rsp], 0

; 1308 : 			glm::imulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$24[rsp]
	lea	r8, QWORD PTR msb$23[rsp]
	mov	edx, DWORD PTR y$22[rsp]
	mov	ecx, DWORD PTR x$21[rsp]
	call	?imulExtended@glm@@YAXHHAEAH0@Z		; glm::imulExtended

; 1309 : 
; 1310 : 			Error += msb == 0 ? 0 : 1;

	cmp	DWORD PTR msb$23[rsp], 0
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1311 : 			Error += lsb == 6 ? 0 : 1;

	cmp	DWORD PTR lsb$24[rsp], 6
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1312 : 		}
; 1313 : 
; 1314 : 		{
; 1315 : 			glm::ivec1 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$25[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 1316 : 			glm::ivec1 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$26[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 1317 : 			glm::ivec1 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$27[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 1318 : 			glm::ivec1 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$28[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 1319 : 			glm::imulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$28[rsp]
	lea	r8, QWORD PTR msb$27[rsp]
	lea	rdx, QWORD PTR y$26[rsp]
	lea	rcx, QWORD PTR x$25[rsp]
	call	??$imulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec1>

; 1320 : 
; 1321 : 			Error += glm::all(glm::equal(msb, glm::ivec1(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$27[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv129[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1322 : 			Error += glm::all(glm::equal(lsb, glm::ivec1(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$28[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv142[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1323 : 		}
; 1324 : 
; 1325 : 		{
; 1326 : 			glm::ivec2 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$29[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 1327 : 			glm::ivec2 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$30[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 1328 : 			glm::ivec2 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$31[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 1329 : 			glm::ivec2 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$32[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 1330 : 			glm::imulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$32[rsp]
	lea	r8, QWORD PTR msb$31[rsp]
	lea	rdx, QWORD PTR y$30[rsp]
	lea	rcx, QWORD PTR x$29[rsp]
	call	??$imulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec2>

; 1331 : 
; 1332 : 			Error += glm::all(glm::equal(msb, glm::ivec2(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$31[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv167[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv167[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv167[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1333 : 			Error += glm::all(glm::equal(lsb, glm::ivec2(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@H@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$32[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv180[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1334 : 		}
; 1335 : 
; 1336 : 		{
; 1337 : 			glm::ivec3 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$33[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>

; 1338 : 			glm::ivec3 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$34[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>

; 1339 : 			glm::ivec3 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$35[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>

; 1340 : 			glm::ivec3 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$36[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>

; 1341 : 			glm::imulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$36[rsp]
	lea	r8, QWORD PTR msb$35[rsp]
	lea	rdx, QWORD PTR y$34[rsp]
	lea	rcx, QWORD PTR x$33[rsp]
	call	??$imulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec3>

; 1342 : 
; 1343 : 			Error += glm::all(glm::equal(msb, glm::ivec3(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$35[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv205[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv205[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv205[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1344 : 			Error += glm::all(glm::equal(lsb, glm::ivec3(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@H@Z		; glm::tvec3<int,0>::tvec3<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$36[rsp]
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv218[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv218[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1345 : 		}
; 1346 : 
; 1347 : 		{
; 1348 : 			glm::ivec4 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$37[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 1349 : 			glm::ivec4 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$38[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 1350 : 			glm::ivec4 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$39[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 1351 : 			glm::ivec4 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$40[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 1352 : 			glm::imulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$40[rsp]
	lea	r8, QWORD PTR msb$39[rsp]
	lea	rdx, QWORD PTR y$38[rsp]
	lea	rcx, QWORD PTR x$37[rsp]
	call	??$imulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@H$0A@@0@0AEAU10@1@Z ; glm::imulExtended<0,glm::tvec4>

; 1353 : 
; 1354 : 			Error += glm::all(glm::equal(msb, glm::ivec4(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T53[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$39[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv243[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv243[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv243[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1355 : 			Error += glm::all(glm::equal(lsb, glm::ivec4(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$40[rsp]
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv288[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv288[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv288[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1356 : 		}
; 1357 : 
; 1358 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1359 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@imulExtended@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 896				; 00000380H
	pop	rdi
	ret	0
?test@imulExtended@@YAHXZ ENDP				; imulExtended::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 88
$T5 = 120
$T6 = 152
$T7 = 168
$T8 = 200
tv66 = 216
x$ = 256
y$ = 264
msb$ = 272
lsb$ = 280
??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z PROC ; glm::umulExtended<0,glm::tvec4>, COMDAT

; 231  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]

; 232  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 233  : 
; 234  : 		vecType<uint64, P> Value64(vecType<uint64, P>(x) * vecType<uint64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><unsigned int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0I$0A@@?$tvec4@_K$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<unsigned __int64,0>::tvec4<unsigned __int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>

; 235  : 		msb = vecType<uint32, P>(Value64 >> static_cast<uint64>(32));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec4@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><unsigned __int64,0>
	mov	rdi, QWORD PTR msb$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 236  : 		lsb = vecType<uint32, P>(Value64);

	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_K$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_K$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><unsigned __int64,0>
	mov	rdi, QWORD PTR lsb$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 237  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z ENDP ; glm::umulExtended<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 72
$T5 = 96
$T6 = 120
$T7 = 136
$T8 = 160
tv66 = 176
x$ = 224
y$ = 232
msb$ = 240
lsb$ = 248
??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z PROC ; glm::umulExtended<0,glm::tvec3>, COMDAT

; 231  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+224]

; 232  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 233  : 
; 234  : 		vecType<uint64, P> Value64(vecType<uint64, P>(x) * vecType<uint64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0I$0A@@?$tvec3@_K$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<unsigned __int64,0>::tvec3<unsigned __int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>

; 235  : 		msb = vecType<uint32, P>(Value64 >> static_cast<uint64>(32));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec3@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned __int64,0>
	mov	rdi, QWORD PTR msb$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 236  : 		lsb = vecType<uint32, P>(Value64);

	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_K$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_K$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><unsigned __int64,0>
	mov	rdi, QWORD PTR lsb$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 237  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z ENDP ; glm::umulExtended<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 72
$T5 = 88
$T6 = 104
$T7 = 112
$T8 = 128
tv66 = 136
x$ = 160
y$ = 168
msb$ = 176
lsb$ = 184
??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z PROC ; glm::umulExtended<0,glm::tvec2>, COMDAT

; 231  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 232  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 233  : 
; 234  : 		vecType<uint64, P> Value64(vecType<uint64, P>(x) * vecType<uint64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0I$0A@@?$tvec2@_K$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<unsigned __int64,0>::tvec2<unsigned __int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>

; 235  : 		msb = vecType<uint32, P>(Value64 >> static_cast<uint64>(32));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec2@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned __int64,0>
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR msb$[rsp]
	mov	QWORD PTR [rcx], rax

; 236  : 		lsb = vecType<uint32, P>(Value64);

	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_K$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_K$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><unsigned __int64,0>
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR lsb$[rsp]
	mov	QWORD PTR [rcx], rax

; 237  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z ENDP ; glm::umulExtended<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z
_TEXT	SEGMENT
Value64$ = 40
$T4 = 56
$T5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
tv66 = 96
x$ = 128
y$ = 136
msb$ = 144
lsb$ = 152
??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z PROC ; glm::umulExtended<0,glm::tvec1>, COMDAT

; 231  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 232  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 233  : 
; 234  : 		vecType<uint64, P> Value64(vecType<uint64, P>(x) * vecType<uint64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?D_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator*<unsigned __int64,0>

; 235  : 		msb = vecType<uint32, P>(Value64 >> static_cast<uint64>(32));

	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?5_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator>><unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR msb$[rsp]
	mov	DWORD PTR [rcx], eax

; 236  : 		lsb = vecType<uint32, P>(Value64);

	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR lsb$[rsp]
	mov	DWORD PTR [rcx], eax

; 237  : 	}

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z ENDP ; glm::umulExtended<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
x$23 = 52
y$24 = 84
msb$25 = 116
lsb$26 = 148
x$27 = 180
y$28 = 212
msb$29 = 244
lsb$30 = 276
x$31 = 312
y$32 = 344
msb$33 = 376
lsb$34 = 408
x$35 = 440
y$36 = 488
msb$37 = 536
lsb$38 = 584
x$39 = 632
y$40 = 680
msb$41 = 728
lsb$42 = 776
$T43 = 804
$T44 = 808
$T45 = 812
$T46 = 816
$T47 = 820
$T48 = 828
$T49 = 832
$T50 = 840
$T51 = 844
$T52 = 856
$T53 = 860
$T54 = 872
$T55 = 876
$T56 = 892
$T57 = 896
$T58 = 912
tv69 = 916
tv72 = 920
tv129 = 924
tv142 = 928
tv167 = 932
tv180 = 936
tv205 = 940
tv218 = 944
tv243 = 948
tv288 = 952
?test@umulExtended@@YAHXZ PROC				; umulExtended::test

; 1235 : 	{

$LN23:
	push	rdi
	sub	rsp, 960				; 000003c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 232				; 000000e8H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1236 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1237 : 		
; 1238 : 		{
; 1239 : 			glm::uint x = 2;

	mov	DWORD PTR x$23[rsp], 2

; 1240 : 			glm::uint y = 3;

	mov	DWORD PTR y$24[rsp], 3

; 1241 : 			glm::uint msb = 0;

	mov	DWORD PTR msb$25[rsp], 0

; 1242 : 			glm::uint lsb = 0;

	mov	DWORD PTR lsb$26[rsp], 0

; 1243 : 			glm::umulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$26[rsp]
	lea	r8, QWORD PTR msb$25[rsp]
	lea	rdx, QWORD PTR y$24[rsp]
	lea	rcx, QWORD PTR x$23[rsp]
	call	?umulExtended@glm@@YAXAEBI0AEAI1@Z	; glm::umulExtended

; 1244 : 
; 1245 : 			Error += msb == 0 ? 0 : 1;

	cmp	DWORD PTR msb$25[rsp], 0
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1246 : 			Error += lsb == 6 ? 0 : 1;

	cmp	DWORD PTR lsb$26[rsp], 6
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1247 : 		}
; 1248 : 
; 1249 : 		{
; 1250 : 			glm::uvec1 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$27[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1251 : 			glm::uvec1 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$28[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1252 : 			glm::uvec1 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$29[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1253 : 			glm::uvec1 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$30[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1254 : 			glm::umulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$30[rsp]
	lea	r8, QWORD PTR msb$29[rsp]
	lea	rdx, QWORD PTR y$28[rsp]
	lea	rcx, QWORD PTR x$27[rsp]
	call	??$umulExtended@$0A@Utvec1@glm@@@glm@@YAXAEBU?$tvec1@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec1>

; 1255 : 
; 1256 : 			Error += glm::all(glm::equal(msb, glm::uvec1(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$29[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv129[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1257 : 			Error += glm::all(glm::equal(lsb, glm::uvec1(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$30[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv142[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1258 : 		}
; 1259 : 
; 1260 : 		{
; 1261 : 			glm::uvec2 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$31[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1262 : 			glm::uvec2 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$32[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1263 : 			glm::uvec2 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$33[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1264 : 			glm::uvec2 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$34[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1265 : 			glm::umulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$34[rsp]
	lea	r8, QWORD PTR msb$33[rsp]
	lea	rdx, QWORD PTR y$32[rsp]
	lea	rcx, QWORD PTR x$31[rsp]
	call	??$umulExtended@$0A@Utvec2@glm@@@glm@@YAXAEBU?$tvec2@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec2>

; 1266 : 
; 1267 : 			Error += glm::all(glm::equal(msb, glm::uvec2(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$33[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv167[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv167[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv167[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1268 : 			Error += glm::all(glm::equal(lsb, glm::uvec2(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$34[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv180[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1269 : 		}
; 1270 : 
; 1271 : 		{
; 1272 : 			glm::uvec3 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$35[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1273 : 			glm::uvec3 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$36[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1274 : 			glm::uvec3 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$37[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1275 : 			glm::uvec3 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$38[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1276 : 			glm::umulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$38[rsp]
	lea	r8, QWORD PTR msb$37[rsp]
	lea	rdx, QWORD PTR y$36[rsp]
	lea	rcx, QWORD PTR x$35[rsp]
	call	??$umulExtended@$0A@Utvec3@glm@@@glm@@YAXAEBU?$tvec3@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec3>

; 1277 : 
; 1278 : 			Error += glm::all(glm::equal(msb, glm::uvec3(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$37[rsp]
	lea	rcx, QWORD PTR $T52[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv205[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv205[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv205[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1279 : 			Error += glm::all(glm::equal(lsb, glm::uvec3(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T53[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$38[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv218[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv218[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1280 : 		}
; 1281 : 
; 1282 : 		{
; 1283 : 			glm::uvec4 x(2);

	mov	edx, 2
	lea	rcx, QWORD PTR x$39[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1284 : 			glm::uvec4 y(3);

	mov	edx, 3
	lea	rcx, QWORD PTR y$40[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1285 : 			glm::uvec4 msb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR msb$41[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1286 : 			glm::uvec4 lsb(0);

	xor	edx, edx
	lea	rcx, QWORD PTR lsb$42[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1287 : 			glm::umulExtended(x, y, msb, lsb);

	lea	r9, QWORD PTR lsb$42[rsp]
	lea	r8, QWORD PTR msb$41[rsp]
	lea	rdx, QWORD PTR y$40[rsp]
	lea	rcx, QWORD PTR x$39[rsp]
	call	??$umulExtended@$0A@Utvec4@glm@@@glm@@YAXAEBU?$tvec4@I$0A@@0@0AEAU10@1@Z ; glm::umulExtended<0,glm::tvec4>

; 1288 : 
; 1289 : 			Error += glm::all(glm::equal(msb, glm::uvec4(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR msb$41[rsp]
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv243[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv243[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv243[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1290 : 			Error += glm::all(glm::equal(lsb, glm::uvec4(6))) ? 0 : 1;

	mov	edx, 6
	lea	rcx, QWORD PTR $T57[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR lsb$42[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv288[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv288[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv288[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1291 : 		}
; 1292 : 
; 1293 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1294 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@umulExtended@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 960				; 000003c0H
	pop	rdi
	ret	0
?test@umulExtended@@YAHXZ ENDP				; umulExtended::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec4<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z
_TEXT	SEGMENT
YgeX$ = 40
XgeY$ = 88
$T5 = 116
$T6 = 120
$T7 = 136
$T8 = 152
$T9 = 168
$T10 = 200
$T11 = 232
$T12 = 264
$T13 = 296
tv65 = 304
tv71 = 312
tv88 = 320
__$ReturnUdt$ = 368
x$ = 376
y$ = 384
Borrow$ = 392
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z PROC ; glm::usubBorrow<0,glm::tvec4>, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]

; 213  : 		Borrow = mix(vecType<uint, P>(1), vecType<uint, P>(0), greaterThanEqual(x, y));

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
	mov	QWORD PTR tv65[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	QWORD PTR tv71[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec4>
	mov	rdi, QWORD PTR Borrow$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 214  : 		vecType<uint, P> const YgeX(y - x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR YgeX$[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned int,0>

; 215  : 		vecType<uint, P> const XgeY(vecType<uint32, P>((static_cast<int64>(1) << static_cast<int64>(32)) + (vecType<int64, P>(y) - vecType<int64, P>(x))));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><unsigned int,0>
	mov	QWORD PTR tv88[rsp], rax
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0I$0A@@?$tvec4@_J$0A@@glm@@QEAA@AEBU?$tvec4@I$0A@@1@@Z ; glm::tvec4<__int64,0>::tvec4<__int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?G_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
	mov	r8, rax
	mov	rdx, 4294967296				; 0000000100000000H
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec4@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR XgeY$[rsp]
	call	??$?0_J$0A@@?$tvec4@I$0A@@glm@@QEAA@AEBU?$tvec4@_J$0A@@1@@Z ; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0><__int64,0>

; 216  : 		return mix(XgeY, YgeX, greaterThanEqual(y, x));

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$greaterThanEqual@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec4>
	mov	r9, rax
	lea	r8, QWORD PTR YgeX$[rsp]
	lea	rdx, QWORD PTR XgeY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@I_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 217  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z ENDP ; glm::usubBorrow<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@IIII@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec4<unsigned int,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec4<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec3<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z
_TEXT	SEGMENT
YgeX$ = 40
XgeY$ = 88
$T5 = 116
$T6 = 120
$T7 = 132
$T8 = 144
$T9 = 160
$T10 = 184
$T11 = 208
$T12 = 232
$T13 = 256
tv65 = 264
tv71 = 272
tv88 = 280
__$ReturnUdt$ = 320
x$ = 328
y$ = 336
Borrow$ = 344
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z PROC ; glm::usubBorrow<0,glm::tvec3>, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+320]

; 213  : 		Borrow = mix(vecType<uint, P>(1), vecType<uint, P>(0), greaterThanEqual(x, y));

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
	mov	QWORD PTR tv65[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	QWORD PTR tv71[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec3>
	mov	rdi, QWORD PTR Borrow$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 214  : 		vecType<uint, P> const YgeX(y - x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR YgeX$[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned int,0>

; 215  : 		vecType<uint, P> const XgeY(vecType<uint32, P>((static_cast<int64>(1) << static_cast<int64>(32)) + (vecType<int64, P>(y) - vecType<int64, P>(x))));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><unsigned int,0>
	mov	QWORD PTR tv88[rsp], rax
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0I$0A@@?$tvec3@_J$0A@@glm@@QEAA@AEBU?$tvec3@I$0A@@1@@Z ; glm::tvec3<__int64,0>::tvec3<__int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?G_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
	mov	r8, rax
	mov	rdx, 4294967296				; 0000000100000000H
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec3@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR XgeY$[rsp]
	call	??$?0_J$0A@@?$tvec3@I$0A@@glm@@QEAA@AEBU?$tvec3@_J$0A@@1@@Z ; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0><__int64,0>

; 216  : 		return mix(XgeY, YgeX, greaterThanEqual(y, x));

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$greaterThanEqual@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec3>
	mov	r9, rax
	lea	r8, QWORD PTR YgeX$[rsp]
	lea	rdx, QWORD PTR XgeY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@I_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 217  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z ENDP ; glm::usubBorrow<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@I$0A@@glm@@QEAA@III@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@III@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 65   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec3<unsigned int,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec3<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z
_TEXT	SEGMENT
YgeX$ = 40
XgeY$ = 72
$T5 = 84
$T6 = 88
$T7 = 96
$T8 = 104
$T9 = 112
$T10 = 128
$T11 = 144
$T12 = 160
$T13 = 176
tv65 = 184
tv71 = 192
tv88 = 200
__$ReturnUdt$ = 224
x$ = 232
y$ = 240
Borrow$ = 248
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z PROC ; glm::usubBorrow<0,glm::tvec2>, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+224]

; 213  : 		Borrow = mix(vecType<uint, P>(1), vecType<uint, P>(0), greaterThanEqual(x, y));

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	mov	QWORD PTR tv65[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	QWORD PTR tv71[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec2>
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR Borrow$[rsp]
	mov	QWORD PTR [rcx], rax

; 214  : 		vecType<uint, P> const YgeX(y - x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR YgeX$[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned int,0>

; 215  : 		vecType<uint, P> const XgeY(vecType<uint32, P>((static_cast<int64>(1) << static_cast<int64>(32)) + (vecType<int64, P>(y) - vecType<int64, P>(x))));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned int,0>
	mov	QWORD PTR tv88[rsp], rax
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0I$0A@@?$tvec2@_J$0A@@glm@@QEAA@AEBU?$tvec2@I$0A@@1@@Z ; glm::tvec2<__int64,0>::tvec2<__int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?G_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
	mov	r8, rax
	mov	rdx, 4294967296				; 0000000100000000H
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec2@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR XgeY$[rsp]
	call	??$?0_J$0A@@?$tvec2@I$0A@@glm@@QEAA@AEBU?$tvec2@_J$0A@@1@@Z ; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><__int64,0>

; 216  : 		return mix(XgeY, YgeX, greaterThanEqual(y, x));

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$greaterThanEqual@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec2>
	mov	r9, rax
	lea	r8, QWORD PTR YgeX$[rsp]
	lea	rdx, QWORD PTR XgeY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@I_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 217  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z ENDP ; glm::usubBorrow<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z
_TEXT	SEGMENT
YgeX$ = 36
XgeY$ = 68
$T5 = 84
$T6 = 88
$T7 = 92
$T8 = 96
$T9 = 104
$T10 = 112
$T11 = 120
$T12 = 128
$T13 = 136
tv65 = 144
tv71 = 152
tv88 = 160
__$ReturnUdt$ = 192
x$ = 200
y$ = 208
Borrow$ = 216
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z PROC ; glm::usubBorrow<0,glm::tvec1>, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]

; 213  : 		Borrow = mix(vecType<uint, P>(1), vecType<uint, P>(0), greaterThanEqual(x, y));

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
	mov	QWORD PTR tv65[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	QWORD PTR tv71[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Borrow$[rsp]
	mov	DWORD PTR [rcx], eax

; 214  : 		vecType<uint, P> const YgeX(y - x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR YgeX$[rsp]
	call	??$?GI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator-<unsigned int,0>

; 215  : 		vecType<uint, P> const XgeY(vecType<uint32, P>((static_cast<int64>(1) << static_cast<int64>(32)) + (vecType<int64, P>(y) - vecType<int64, P>(x))));

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><unsigned int,0>
	mov	QWORD PTR tv88[rsp], rax
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0I$0A@@?$tvec1@_J$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<__int64,0>::tvec1<__int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv88[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?G_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@AEBU10@0@Z ; glm::operator-<__int64,0>
	mov	r8, rax
	mov	rdx, 4294967296				; 0000000100000000H
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?H_J$0A@@glm@@YA?AU?$tvec1@_J$0A@@0@_JAEBU10@@Z ; glm::operator+<__int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR XgeY$[rsp]
	call	??$?0_J$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_J$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><__int64,0>

; 216  : 		return mix(XgeY, YgeX, greaterThanEqual(y, x));

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$greaterThanEqual@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::greaterThanEqual<unsigned int,0,glm::tvec1>
	mov	r9, rax
	lea	r8, QWORD PTR YgeX$[rsp]
	lea	rdx, QWORD PTR XgeY$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 217  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ENDP ; glm::usubBorrow<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
x$22 = 52
y$23 = 84
Borrow$24 = 116
Result$25 = 132
x$26 = 148
y$27 = 180
Borrow$28 = 212
Result$29 = 244
x$30 = 280
y$31 = 312
Borrow$32 = 344
Result$33 = 376
x$34 = 408
y$35 = 456
Borrow$36 = 504
Result$37 = 552
x$38 = 600
y$39 = 648
Borrow$40 = 696
Result$41 = 744
$T42 = 772
$T43 = 776
$T44 = 780
$T45 = 784
$T46 = 788
$T47 = 796
$T48 = 800
$T49 = 808
$T50 = 812
$T51 = 824
$T52 = 828
$T53 = 840
$T54 = 844
$T55 = 860
$T56 = 864
$T57 = 880
tv69 = 884
tv72 = 888
tv95 = 892
tv140 = 896
tv163 = 900
tv176 = 904
tv199 = 908
tv212 = 912
tv267 = 916
tv280 = 920
?test@usubBorrow@@YAHXZ PROC				; usubBorrow::test

; 1175 : 	{

$LN23:
	push	rdi
	sub	rsp, 928				; 000003a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 224				; 000000e0H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1176 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1177 : 		
; 1178 : 		{
; 1179 : 			glm::uint x = 16;

	mov	DWORD PTR x$22[rsp], 16

; 1180 : 			glm::uint y = 17;

	mov	DWORD PTR y$23[rsp], 17

; 1181 : 			glm::uint Borrow = 0;

	mov	DWORD PTR Borrow$24[rsp], 0

; 1182 : 			glm::uint Result = glm::usubBorrow(x, y, Borrow);

	lea	r8, QWORD PTR Borrow$24[rsp]
	lea	rdx, QWORD PTR y$23[rsp]
	lea	rcx, QWORD PTR x$22[rsp]
	call	?usubBorrow@glm@@YAIAEBI0AEAI@Z		; glm::usubBorrow
	mov	DWORD PTR Result$25[rsp], eax

; 1183 : 
; 1184 : 			Error += Borrow == 1 ? 0 : 1;

	cmp	DWORD PTR Borrow$24[rsp], 1
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1185 : 			Error += Result == 1 ? 0 : 1;

	cmp	DWORD PTR Result$25[rsp], 1
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1186 : 		}
; 1187 : 
; 1188 : 		{
; 1189 : 			glm::uvec1 x(16);

	mov	edx, 16
	lea	rcx, QWORD PTR x$26[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1190 : 			glm::uvec1 y(17);

	mov	edx, 17
	lea	rcx, QWORD PTR y$27[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1191 : 			glm::uvec1 Borrow(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Borrow$28[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1192 : 			glm::uvec1 Result(glm::usubBorrow(x, y, Borrow));

	lea	r9, QWORD PTR Borrow$28[rsp]
	lea	r8, QWORD PTR y$27[rsp]
	lea	rdx, QWORD PTR x$26[rsp]
	lea	rcx, QWORD PTR Result$29[rsp]
	call	??$usubBorrow@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec1>

; 1193 : 
; 1194 : 			Error += glm::all(glm::equal(Borrow, glm::uvec1(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Borrow$28[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv95[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1195 : 			Error += glm::all(glm::equal(Result, glm::uvec1(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$29[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv140[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1196 : 		}
; 1197 : 
; 1198 : 		{
; 1199 : 			glm::uvec2 x(16);

	mov	edx, 16
	lea	rcx, QWORD PTR x$30[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1200 : 			glm::uvec2 y(17);

	mov	edx, 17
	lea	rcx, QWORD PTR y$31[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1201 : 			glm::uvec2 Borrow(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Borrow$32[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>

; 1202 : 			glm::uvec2 Result(glm::usubBorrow(x, y, Borrow));

	lea	r9, QWORD PTR Borrow$32[rsp]
	lea	r8, QWORD PTR y$31[rsp]
	lea	rdx, QWORD PTR x$30[rsp]
	lea	rcx, QWORD PTR Result$33[rsp]
	call	??$usubBorrow@$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec2>

; 1203 : 
; 1204 : 			Error += glm::all(glm::equal(Borrow, glm::uvec2(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T46[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Borrow$32[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv163[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1205 : 			Error += glm::all(glm::equal(Result, glm::uvec2(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T48[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@I@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$33[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	call	??$equal@I$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv176[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1206 : 		}
; 1207 : 
; 1208 : 		{
; 1209 : 			glm::uvec3 x(16);

	mov	edx, 16
	lea	rcx, QWORD PTR x$34[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1210 : 			glm::uvec3 y(17);

	mov	edx, 17
	lea	rcx, QWORD PTR y$35[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1211 : 			glm::uvec3 Borrow(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Borrow$36[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>

; 1212 : 			glm::uvec3 Result(glm::usubBorrow(x, y, Borrow));

	lea	r9, QWORD PTR Borrow$36[rsp]
	lea	r8, QWORD PTR y$35[rsp]
	lea	rdx, QWORD PTR x$34[rsp]
	lea	rcx, QWORD PTR Result$37[rsp]
	call	??$usubBorrow@$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec3>

; 1213 : 
; 1214 : 			Error += glm::all(glm::equal(Borrow, glm::uvec3(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T50[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Borrow$36[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv199[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv199[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1215 : 			Error += glm::all(glm::equal(Result, glm::uvec3(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T52[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@I@Z		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$37[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$equal@I$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv212[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv212[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1216 : 		}
; 1217 : 
; 1218 : 		{
; 1219 : 			glm::uvec4 x(16);

	mov	edx, 16
	lea	rcx, QWORD PTR x$38[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1220 : 			glm::uvec4 y(17);

	mov	edx, 17
	lea	rcx, QWORD PTR y$39[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1221 : 			glm::uvec4 Borrow(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Borrow$40[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>

; 1222 : 			glm::uvec4 Result(glm::usubBorrow(x, y, Borrow));

	lea	r9, QWORD PTR Borrow$40[rsp]
	lea	r8, QWORD PTR y$39[rsp]
	lea	rdx, QWORD PTR x$38[rsp]
	lea	rcx, QWORD PTR Result$41[rsp]
	call	??$usubBorrow@$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::usubBorrow<0,glm::tvec4>

; 1223 : 
; 1224 : 			Error += glm::all(glm::equal(Borrow, glm::uvec4(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T54[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Borrow$40[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv267[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv267[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv267[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1225 : 			Error += glm::all(glm::equal(Result, glm::uvec4(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T56[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@I@Z		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$41[rsp]
	lea	rcx, QWORD PTR $T57[rsp]
	call	??$equal@I$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv280[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv280[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv280[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1226 : 		}
; 1227 : 
; 1228 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1229 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@usubBorrow@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 928				; 000003a0H
	pop	rdi
	ret	0
?test@usubBorrow@@YAHXZ ENDP				; usubBorrow::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z PROC ; glm::equal<unsigned int,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec1<unsigned int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ENDP ; glm::equal<unsigned int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z
_TEXT	SEGMENT
Value64$ = 40
Max32$ = 72
$T5 = 88
$T6 = 96
$T7 = 104
$T8 = 108
$T9 = 112
$T10 = 116
$T11 = 120
$T12 = 128
tv66 = 136
tv76 = 144
tv82 = 152
__$ReturnUdt$ = 176
x$ = 184
y$ = 192
Carry$ = 200
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z PROC ; glm::uaddCarry<0,glm::tvec1>, COMDAT

; 191  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 192  : 		vecType<uint64, P> Value64(vecType<uint64, P>(x) + vecType<uint64, P>(y));

	mov	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0I$0A@@?$tvec1@_K$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0><unsigned int,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Value64$[rsp]
	call	??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator+<unsigned __int64,0>

; 193  : 		vecType<uint64, P> Max32((static_cast<uint64>(1) << static_cast<uint64>(32)) - static_cast<uint64>(1));

	mov	edx, -1					; ffffffffH
	lea	rcx, QWORD PTR Max32$[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>

; 194  : 		Carry = mix(vecType<uint32, P>(0), vecType<uint32, P>(1), greaterThan(Value64, Max32));

	lea	r8, QWORD PTR Max32$[rsp]
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$greaterThan@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@_K$0A@@0@0@Z ; glm::greaterThan<unsigned __int64,0,glm::tvec1>
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$mix@I_N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEBU?$tvec1@_N$0A@@0@@Z ; glm::mix<unsigned int,bool,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR Carry$[rsp]
	mov	DWORD PTR [rcx], eax

; 195  : 		return vecType<uint32,P>(Value64 % (Max32 + static_cast<uint64>(1)));

	mov	r8d, 1
	lea	rdx, QWORD PTR Max32$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?H_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@_K@Z ; glm::operator+<unsigned __int64,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Value64$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?L_K$0A@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@0@Z ; glm::operator%<unsigned __int64,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?0_K$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@_K$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned __int64,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 196  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ENDP ; glm::uaddCarry<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec1<unsigned int,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@I$0A@@glm@@SAHXZ	; glm::tvec1<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec1<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@I$0A@@glm@@SAHXZ PROC			; glm::tvec1<unsigned int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@I$0A@@glm@@SAHXZ ENDP			; glm::tvec1<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
x$17 = 52
y$18 = 84
Carry$19 = 116
Result$20 = 132
x$21 = 148
y$22 = 180
Carry$23 = 212
Result$24 = 228
x$25 = 244
y$26 = 276
Carry$27 = 308
Result$28 = 340
x$29 = 372
y$30 = 404
Carry$31 = 436
Result$32 = 468
$T33 = 484
$T34 = 488
$T35 = 492
$T36 = 496
$T37 = 500
$T38 = 504
$T39 = 508
$T40 = 512
tv70 = 516
tv74 = 520
tv82 = 524
tv85 = 528
tv141 = 532
tv155 = 536
tv179 = 540
tv192 = 544
?test@uaddCarry@@YAHXZ PROC				; uaddCarry::test

; 1125 : 	{

$LN19:
	push	rdi
	sub	rsp, 560				; 00000230H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1126 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1127 : 		
; 1128 : 		{
; 1129 : 			glm::uint x = std::numeric_limits<glm::uint>::max();

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	DWORD PTR x$17[rsp], eax

; 1130 : 			glm::uint y = 0;

	mov	DWORD PTR y$18[rsp], 0

; 1131 : 			glm::uint Carry = 0;

	mov	DWORD PTR Carry$19[rsp], 0

; 1132 : 			glm::uint Result = glm::uaddCarry(x, y, Carry);

	lea	r8, QWORD PTR Carry$19[rsp]
	lea	rdx, QWORD PTR y$18[rsp]
	lea	rcx, QWORD PTR x$17[rsp]
	call	?uaddCarry@glm@@YAIAEBI0AEAI@Z		; glm::uaddCarry
	mov	DWORD PTR Result$20[rsp], eax

; 1133 : 
; 1134 : 			Error += Carry == 0 ? 0 : 1;

	cmp	DWORD PTR Carry$19[rsp], 0
	jne	SHORT $LN3@test
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv70[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv70[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1135 : 			Error += Result == std::numeric_limits<glm::uint>::max() ? 0 : 1;

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	cmp	DWORD PTR Result$20[rsp], eax
	jne	SHORT $LN5@test
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv74[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1136 : 		}
; 1137 : 
; 1138 : 		{
; 1139 : 			glm::uint x = std::numeric_limits<glm::uint>::max();

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	DWORD PTR x$21[rsp], eax

; 1140 : 			glm::uint y = 1;

	mov	DWORD PTR y$22[rsp], 1

; 1141 : 			glm::uint Carry = 0;

	mov	DWORD PTR Carry$23[rsp], 0

; 1142 : 			glm::uint Result = glm::uaddCarry(x, y, Carry);

	lea	r8, QWORD PTR Carry$23[rsp]
	lea	rdx, QWORD PTR y$22[rsp]
	lea	rcx, QWORD PTR x$21[rsp]
	call	?uaddCarry@glm@@YAIAEBI0AEAI@Z		; glm::uaddCarry
	mov	DWORD PTR Result$24[rsp], eax

; 1143 : 
; 1144 : 			Error += Carry == 1 ? 0 : 1;

	cmp	DWORD PTR Carry$23[rsp], 1
	jne	SHORT $LN7@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv82[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1145 : 			Error += Result == 0 ? 0 : 1;

	cmp	DWORD PTR Result$24[rsp], 0
	jne	SHORT $LN9@test
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv85[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1146 : 		}
; 1147 : 
; 1148 : 		{
; 1149 : 			glm::uvec1 x(std::numeric_limits<glm::uint>::max());

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	edx, eax
	lea	rcx, QWORD PTR x$25[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1150 : 			glm::uvec1 y(0);

	xor	edx, edx
	lea	rcx, QWORD PTR y$26[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1151 : 			glm::uvec1 Carry(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Carry$27[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1152 : 			glm::uvec1 Result(glm::uaddCarry(x, y, Carry));

	lea	r9, QWORD PTR Carry$27[rsp]
	lea	r8, QWORD PTR y$26[rsp]
	lea	rdx, QWORD PTR x$25[rsp]
	lea	rcx, QWORD PTR Result$28[rsp]
	call	??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::uaddCarry<0,glm::tvec1>

; 1153 : 
; 1154 : 			Error += glm::all(glm::equal(Carry, glm::uvec1(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Carry$27[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv141[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1155 : 			Error += glm::all(glm::equal(Result, glm::uvec1(std::numeric_limits<glm::uint>::max()))) ? 0 : 1;

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	edx, eax
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$28[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv155[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv155[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv155[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1156 : 		}
; 1157 : 
; 1158 : 		{
; 1159 : 			glm::uvec1 x(std::numeric_limits<glm::uint>::max());

	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	edx, eax
	lea	rcx, QWORD PTR x$29[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1160 : 			glm::uvec1 y(1);

	mov	edx, 1
	lea	rcx, QWORD PTR y$30[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1161 : 			glm::uvec1 Carry(0);

	xor	edx, edx
	lea	rcx, QWORD PTR Carry$31[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>

; 1162 : 			glm::uvec1 Result(glm::uaddCarry(x, y, Carry));

	lea	r9, QWORD PTR Carry$31[rsp]
	lea	r8, QWORD PTR y$30[rsp]
	lea	rdx, QWORD PTR x$29[rsp]
	lea	rcx, QWORD PTR Result$32[rsp]
	call	??$uaddCarry@$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0AEAU10@@Z ; glm::uaddCarry<0,glm::tvec1>

; 1163 : 
; 1164 : 			Error += glm::all(glm::equal(Carry, glm::uvec1(1))) ? 0 : 1;

	mov	edx, 1
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Carry$31[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv179[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv179[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv179[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1165 : 			Error += glm::all(glm::equal(Result, glm::uvec1(0))) ? 0 : 1;

	xor	edx, edx
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR Result$32[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$equal@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@I$0A@@0@0@Z ; glm::equal<unsigned int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv192[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv192[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv192[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1166 : 		}
; 1167 : 
; 1168 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1169 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@uaddCarry@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 560				; 00000230H
	pop	rdi
	ret	0
?test@uaddCarry@@YAHXZ ENDP				; uaddCarry::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Samples$ = 64
?perf@findLSB@@YAH_K@Z PROC				; findLSB::perf

; 1113 : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1114 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1115 : 
; 1116 : 		Error += perf_int(Samples);

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf_int@findLSB@@YAH_K@Z		; findLSB::perf_int
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1117 : 
; 1118 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1119 : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?perf@findLSB@@YAH_K@Z ENDP				; findLSB::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Timestamps0$ = 36
k$1 = 40
i$2 = 48
Result$3 = 56
Timestamps1$ = 60
k$4 = 64
i$5 = 72
Result$6 = 80
Timestamps2$ = 84
k$7 = 88
i$8 = 96
Result$9 = 104
Timestamps3$ = 108
k$10 = 112
i$11 = 120
Result$12 = 128
Timestamps4$ = 132
k$13 = 136
i$14 = 144
Result$15 = 152
Timestamps5$ = 156
tv78 = 160
tv94 = 164
tv142 = 168
tv158 = 172
tv174 = 176
Count$ = 208
?perf_int@findLSB@@YAH_K@Z PROC				; findLSB::perf_int

; 1047 : 	{

$LN43:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H

; 1048 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1049 : 
; 1050 : 		std::clock_t Timestamps0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps0$[rsp], eax

; 1051 : 
; 1052 : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$1[rsp], 0
	jmp	SHORT $LN4@perf_int
$LN2@perf_int:
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
$LN4@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$1[rsp], rax
	jae	$LN3@perf_int

; 1053 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@perf_int
$LN5@perf_int:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN7@perf_int:
	cmp	QWORD PTR i$2[rsp], 8
	jae	SHORT $LN6@perf_int

; 1054 : 		{
; 1055 : 			int Result = glm::findLSB(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB@H@glm@@YAHH@Z		; glm::findLSB<int>
	mov	DWORD PTR Result$3[rsp], eax

; 1056 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$2[rsp]
	mov	edx, DWORD PTR Result$3[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN33@perf_int
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN34@perf_int
$LN33@perf_int:
	mov	DWORD PTR tv78[rsp], 1
$LN34@perf_int:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1057 : 		}

	jmp	SHORT $LN5@perf_int
$LN6@perf_int:
	jmp	$LN2@perf_int
$LN3@perf_int:

; 1058 : 
; 1059 : 		std::clock_t Timestamps1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps1$[rsp], eax

; 1060 : 
; 1061 : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$4[rsp], 0
	jmp	SHORT $LN10@perf_int
$LN8@perf_int:
	mov	rax, QWORD PTR k$4[rsp]
	inc	rax
	mov	QWORD PTR k$4[rsp], rax
$LN10@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$4[rsp], rax
	jae	$LN9@perf_int

; 1062 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN13@perf_int
$LN11@perf_int:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN13@perf_int:
	cmp	QWORD PTR i$5[rsp], 8
	jae	SHORT $LN12@perf_int

; 1063 : 		{
; 1064 : 			int Result = findLSB_095(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$5[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_095@H@findLSB@@YAHH@Z	; findLSB::findLSB_095<int>
	mov	DWORD PTR Result$6[rsp], eax

; 1065 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$5[rsp]
	mov	edx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN35@perf_int
	mov	DWORD PTR tv94[rsp], 0
	jmp	SHORT $LN36@perf_int
$LN35@perf_int:
	mov	DWORD PTR tv94[rsp], 1
$LN36@perf_int:
	mov	eax, DWORD PTR tv94[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1066 : 		}

	jmp	SHORT $LN11@perf_int
$LN12@perf_int:
	jmp	$LN8@perf_int
$LN9@perf_int:

; 1067 : 
; 1068 : 		std::clock_t Timestamps2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps2$[rsp], eax

; 1069 : 
; 1070 : #		if GLM_HAS_BITSCAN_WINDOWS
; 1071 : 			for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@perf_int
$LN14@perf_int:
	mov	rax, QWORD PTR k$7[rsp]
	inc	rax
	mov	QWORD PTR k$7[rsp], rax
$LN16@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$7[rsp], rax
	jae	$LN15@perf_int

; 1072 : 			for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN19@perf_int
$LN17@perf_int:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN19@perf_int:
	cmp	QWORD PTR i$8[rsp], 8
	jae	SHORT $LN18@perf_int

; 1073 : 			{
; 1074 : 				int Result = findLSB_intrinsic(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_intrinsic@H@findLSB@@YAHH@Z	; findLSB::findLSB_intrinsic<int>
	mov	DWORD PTR Result$9[rsp], eax

; 1075 : 				Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$8[rsp]
	mov	edx, DWORD PTR Result$9[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN37@perf_int
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN38@perf_int
$LN37@perf_int:
	mov	DWORD PTR tv142[rsp], 1
$LN38@perf_int:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1076 : 			}

	jmp	SHORT $LN17@perf_int
$LN18@perf_int:
	jmp	$LN14@perf_int
$LN15@perf_int:

; 1077 : #		endif
; 1078 : 
; 1079 : 		std::clock_t Timestamps3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps3$[rsp], eax

; 1080 : 
; 1081 : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$10[rsp], 0
	jmp	SHORT $LN22@perf_int
$LN20@perf_int:
	mov	rax, QWORD PTR k$10[rsp]
	inc	rax
	mov	QWORD PTR k$10[rsp], rax
$LN22@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$10[rsp], rax
	jae	$LN21@perf_int

; 1082 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$11[rsp], 0
	jmp	SHORT $LN25@perf_int
$LN23@perf_int:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN25@perf_int:
	cmp	QWORD PTR i$11[rsp], 8
	jae	SHORT $LN24@perf_int

; 1083 : 		{
; 1084 : 			int Result = findLSB_ntz2(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$11[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_ntz2@H@findLSB@@YAHH@Z	; findLSB::findLSB_ntz2<int>
	mov	DWORD PTR Result$12[rsp], eax

; 1085 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$11[rsp]
	mov	edx, DWORD PTR Result$12[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN39@perf_int
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN40@perf_int
$LN39@perf_int:
	mov	DWORD PTR tv158[rsp], 1
$LN40@perf_int:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1086 : 		}

	jmp	SHORT $LN23@perf_int
$LN24@perf_int:
	jmp	$LN20@perf_int
$LN21@perf_int:

; 1087 : 
; 1088 : 		std::clock_t Timestamps4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps4$[rsp], eax

; 1089 : 
; 1090 : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$13[rsp], 0
	jmp	SHORT $LN28@perf_int
$LN26@perf_int:
	mov	rax, QWORD PTR k$13[rsp]
	inc	rax
	mov	QWORD PTR k$13[rsp], rax
$LN28@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$13[rsp], rax
	jae	$LN27@perf_int

; 1091 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$14[rsp], 0
	jmp	SHORT $LN31@perf_int
$LN29@perf_int:
	mov	rax, QWORD PTR i$14[rsp]
	inc	rax
	mov	QWORD PTR i$14[rsp], rax
$LN31@perf_int:
	cmp	QWORD PTR i$14[rsp], 8
	jae	SHORT $LN30@perf_int

; 1092 : 		{
; 1093 : 			int Result = findLSB_branchfree(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_branchfree@H@findLSB@@YAHH@Z	; findLSB::findLSB_branchfree<int>
	mov	DWORD PTR Result$15[rsp], eax

; 1094 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$14[rsp]
	mov	edx, DWORD PTR Result$15[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN41@perf_int
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN42@perf_int
$LN41@perf_int:
	mov	DWORD PTR tv174[rsp], 1
$LN42@perf_int:
	mov	eax, DWORD PTR tv174[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1095 : 		}

	jmp	$LN29@perf_int
$LN30@perf_int:
	jmp	$LN26@perf_int
$LN27@perf_int:

; 1096 : 
; 1097 : 		std::clock_t Timestamps5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps5$[rsp], eax

; 1098 : 
; 1099 : 		std::printf("glm::findLSB: %d clocks\n", static_cast<unsigned int>(Timestamps1 - Timestamps0));

	mov	eax, DWORD PTR Timestamps0$[rsp]
	mov	ecx, DWORD PTR Timestamps1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG58056
	call	printf

; 1100 : 		std::printf("findLSB - 0.9.5: %d clocks\n", static_cast<unsigned int>(Timestamps2 - Timestamps1));

	mov	eax, DWORD PTR Timestamps1$[rsp]
	mov	ecx, DWORD PTR Timestamps2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG58057
	call	printf

; 1101 : 
; 1102 : #		if GLM_HAS_BITSCAN_WINDOWS
; 1103 : 			std::printf("findLSB - intrinsics: %d clocks\n", static_cast<unsigned int>(Timestamps3 - Timestamps2));

	mov	eax, DWORD PTR Timestamps2$[rsp]
	mov	ecx, DWORD PTR Timestamps3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG58058
	call	printf

; 1104 : #		endif
; 1105 : 
; 1106 : 		std::printf("findLSB - ntz2: %d clocks\n", static_cast<unsigned int>(Timestamps4 - Timestamps3));

	mov	eax, DWORD PTR Timestamps3$[rsp]
	mov	ecx, DWORD PTR Timestamps4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG58059
	call	printf

; 1107 : 		std::printf("findLSB - branchfree: %d clocks\n", static_cast<unsigned int>(Timestamps5 - Timestamps4));

	mov	eax, DWORD PTR Timestamps4$[rsp]
	mov	ecx, DWORD PTR Timestamps5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG58060
	call	printf

; 1108 : 
; 1109 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1110 : 	}

	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?perf_int@findLSB@@YAH_K@Z ENDP				; findLSB::perf_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
?test@findLSB@@YAHXZ PROC				; findLSB::test

; 1038 : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 1039 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1040 : 
; 1041 : 		Error += test_int();

	call	?test_int@findLSB@@YAHXZ		; findLSB::test_int
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1042 : 
; 1043 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1044 : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@findLSB@@YAHXZ ENDP				; findLSB::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findLSB_branchfree@H@findLSB@@YAHH@Z
_TEXT	SEGMENT
IsNull$ = 32
Keep$ = 36
Discard$ = 40
tv65 = 44
tv69 = 48
x$ = 80
??$findLSB_branchfree@H@findLSB@@YAHH@Z PROC		; findLSB::findLSB_branchfree<int>, COMDAT

; 990  : 	{

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H

; 991  : 		bool IsNull(x == 0);

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN3@findLSB_br
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@findLSB_br
$LN3@findLSB_br:
	mov	DWORD PTR tv65[rsp], 0
$LN4@findLSB_br:
	movzx	eax, BYTE PTR tv65[rsp]
	mov	BYTE PTR IsNull$[rsp], al

; 992  : 		int const Keep(!IsNull);

	movzx	eax, BYTE PTR IsNull$[rsp]
	test	eax, eax
	jne	SHORT $LN5@findLSB_br
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN6@findLSB_br
$LN5@findLSB_br:
	mov	DWORD PTR tv69[rsp], 0
$LN6@findLSB_br:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR Keep$[rsp], eax

; 993  : 		int const Discard(IsNull);

	movzx	eax, BYTE PTR IsNull$[rsp]
	mov	DWORD PTR Discard$[rsp], eax

; 994  : 
; 995  : 		return static_cast<int>(glm::bitCount(~x & (x - static_cast<genIUType>(1)))) * Keep + Discard * -1;

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	dec	ecx
	and	eax, ecx
	mov	ecx, eax
	call	??$bitCount@H@glm@@YAHH@Z		; glm::bitCount<int>
	imul	eax, DWORD PTR Keep$[rsp]
	imul	ecx, DWORD PTR Discard$[rsp], -1
	add	eax, ecx

; 996  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findLSB_branchfree@H@findLSB@@YAHH@Z ENDP		; findLSB::findLSB_branchfree<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findLSB_ntz2@H@findLSB@@YAHH@Z
_TEXT	SEGMENT
x$ = 48
??$findLSB_ntz2@H@findLSB@@YAHH@Z PROC			; findLSB::findLSB_ntz2<int>, COMDAT

; 981  : 	{

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 982  : 		if(x == 0)

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@findLSB_nt

; 983  : 			return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findLSB_nt
$LN2@findLSB_nt:

; 984  : 
; 985  : 		return glm::bitCount(~x & (x - static_cast<genIUType>(1)));

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	dec	ecx
	and	eax, ecx
	mov	ecx, eax
	call	??$bitCount@H@glm@@YAHH@Z		; glm::bitCount<int>
$LN1@findLSB_nt:

; 986  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findLSB_ntz2@H@findLSB@@YAHH@Z ENDP			; findLSB::findLSB_ntz2<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findLSB_intrinsic@H@findLSB@@YAHH@Z
_TEXT	SEGMENT
Result$ = 36
Value$ = 80
??$findLSB_intrinsic@H@findLSB@@YAHH@Z PROC		; findLSB::findLSB_intrinsic<int>, COMDAT

; 955  : 		{

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 956  : 			GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findLSB' only accept integer values");
; 957  : 
; 958  : 			if(Value == 0)

	cmp	DWORD PTR Value$[rsp], 0
	jne	SHORT $LN2@findLSB_in

; 959  : 				return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findLSB_in
$LN2@findLSB_in:

; 960  : 
; 961  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 962  : 			_BitScanForward(&Result, Value);

	mov	eax, DWORD PTR Value$[rsp]
	bsf	eax, eax
	mov	DWORD PTR Result$[rsp], eax

; 963  : 			return int(Result);

	mov	eax, DWORD PTR Result$[rsp]
$LN1@findLSB_in:

; 964  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$findLSB_intrinsic@H@findLSB@@YAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findLSB_intrinsic@H@findLSB@@YAHH@Z ENDP		; findLSB::findLSB_intrinsic<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findLSB_095@H@findLSB@@YAHH@Z
_TEXT	SEGMENT
Bit$ = 0
tv72 = 4
Value$ = 32
??$findLSB_095@H@findLSB@@YAHH@Z PROC			; findLSB::findLSB_095<int>, COMDAT

; 969  : 	{

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 970  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findLSB' only accept integer values");
; 971  : 		if(Value == 0)

	cmp	DWORD PTR Value$[rsp], 0
	jne	SHORT $LN5@findLSB_09

; 972  : 			return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findLSB_09
$LN5@findLSB_09:

; 973  : 
; 974  : 		genIUType Bit;
; 975  : 		for(Bit = genIUType(0); !(Value & (1 << Bit)); ++Bit){}

	mov	DWORD PTR Bit$[rsp], 0
	jmp	SHORT $LN4@findLSB_09
$LN2@findLSB_09:
	mov	eax, DWORD PTR Bit$[rsp]
	inc	eax
	mov	DWORD PTR Bit$[rsp], eax
$LN4@findLSB_09:
	mov	eax, DWORD PTR Bit$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv72[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv72[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR Value$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@findLSB_09
	jmp	SHORT $LN2@findLSB_09
$LN3@findLSB_09:

; 976  : 		return Bit;

	mov	eax, DWORD PTR Bit$[rsp]
$LN1@findLSB_09:

; 977  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$findLSB_095@H@findLSB@@YAHH@Z ENDP			; findLSB::findLSB_095<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findLSB@H@glm@@YAHH@Z
_TEXT	SEGMENT
Value$ = 48
??$findLSB@H@glm@@YAHH@Z PROC				; glm::findLSB<int>, COMDAT

; 333  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 334  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findLSB' only accept integer values");
; 335  : 
; 336  : 		return detail::compute_findLSB<genIUType, sizeof(genIUType) * 8>::call(Value);

	mov	ecx, DWORD PTR Value$[rsp]
	call	?call@?$compute_findLSB@H$0CA@@detail@glm@@SAHH@Z ; glm::detail::compute_findLSB<int,32>::call

; 337  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findLSB@H@glm@@YAHH@Z ENDP				; glm::findLSB<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
i$1 = 40
Result$2 = 48
i$3 = 56
Result$4 = 64
i$5 = 72
Result$6 = 80
i$7 = 88
Result$8 = 96
i$9 = 104
Result$10 = 112
tv75 = 116
tv88 = 120
tv133 = 124
tv146 = 128
tv159 = 132
?test_int@findLSB@@YAHXZ PROC				; findLSB::test_int

; 999  : 	{

$LN28:
	push	rdi
	sub	rsp, 144				; 00000090H

; 1000 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1001 : 
; 1002 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test_int
$LN2@test_int:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test_int:
	cmp	QWORD PTR i$1[rsp], 8
	jae	SHORT $LN3@test_int

; 1003 : 		{
; 1004 : 			int Result = glm::findLSB(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB@H@glm@@YAHH@Z		; glm::findLSB<int>
	mov	DWORD PTR Result$2[rsp], eax

; 1005 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$1[rsp]
	mov	edx, DWORD PTR Result$2[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN18@test_int
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN19@test_int
$LN18@test_int:
	mov	DWORD PTR tv75[rsp], 1
$LN19@test_int:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1006 : 		}

	jmp	SHORT $LN2@test_int
$LN3@test_int:

; 1007 : 
; 1008 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@test_int
$LN5@test_int:
	mov	rax, QWORD PTR i$3[rsp]
	inc	rax
	mov	QWORD PTR i$3[rsp], rax
$LN7@test_int:
	cmp	QWORD PTR i$3[rsp], 8
	jae	SHORT $LN6@test_int

; 1009 : 		{
; 1010 : 			int Result = findLSB_095(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$3[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_095@H@findLSB@@YAHH@Z	; findLSB::findLSB_095<int>
	mov	DWORD PTR Result$4[rsp], eax

; 1011 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$3[rsp]
	mov	edx, DWORD PTR Result$4[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN20@test_int
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN21@test_int
$LN20@test_int:
	mov	DWORD PTR tv88[rsp], 1
$LN21@test_int:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1012 : 		}

	jmp	SHORT $LN5@test_int
$LN6@test_int:

; 1013 : 
; 1014 : #		if GLM_HAS_BITSCAN_WINDOWS
; 1015 : 			for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN10@test_int
$LN8@test_int:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN10@test_int:
	cmp	QWORD PTR i$5[rsp], 8
	jae	SHORT $LN9@test_int

; 1016 : 			{
; 1017 : 				int Result = findLSB_intrinsic(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$5[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_intrinsic@H@findLSB@@YAHH@Z	; findLSB::findLSB_intrinsic<int>
	mov	DWORD PTR Result$6[rsp], eax

; 1018 : 				Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$5[rsp]
	mov	edx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN22@test_int
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN23@test_int
$LN22@test_int:
	mov	DWORD PTR tv133[rsp], 1
$LN23@test_int:
	mov	eax, DWORD PTR tv133[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1019 : 			}

	jmp	SHORT $LN8@test_int
$LN9@test_int:

; 1020 : #		endif
; 1021 : 
; 1022 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN13@test_int
$LN11@test_int:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN13@test_int:
	cmp	QWORD PTR i$7[rsp], 8
	jae	SHORT $LN12@test_int

; 1023 : 		{
; 1024 : 			int Result = findLSB_ntz2(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$7[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_ntz2@H@findLSB@@YAHH@Z	; findLSB::findLSB_ntz2<int>
	mov	DWORD PTR Result$8[rsp], eax

; 1025 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$7[rsp]
	mov	edx, DWORD PTR Result$8[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN24@test_int
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN25@test_int
$LN24@test_int:
	mov	DWORD PTR tv146[rsp], 1
$LN25@test_int:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1026 : 		}

	jmp	SHORT $LN11@test_int
$LN12@test_int:

; 1027 : 
; 1028 : 		for(std::size_t i = 0; i < sizeof(DataI32) / sizeof(entry); ++i)

	mov	QWORD PTR i$9[rsp], 0
	jmp	SHORT $LN16@test_int
$LN14@test_int:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN16@test_int:
	cmp	QWORD PTR i$9[rsp], 8
	jae	SHORT $LN15@test_int

; 1029 : 		{
; 1030 : 			int Result = findLSB_branchfree(DataI32[i].Value);

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR [rax+rcx*8]
	call	??$findLSB_branchfree@H@findLSB@@YAHH@Z	; findLSB::findLSB_branchfree<int>
	mov	DWORD PTR Result$10[rsp], eax

; 1031 : 			Error += DataI32[i].Return == Result ? 0 : 1;

	lea	rax, OFFSET FLAT:?DataI32@findLSB@@3QBU?$type@HH@1@B
	mov	rcx, QWORD PTR i$9[rsp]
	mov	edx, DWORD PTR Result$10[rsp]
	cmp	DWORD PTR [rax+rcx*8+4], edx
	jne	SHORT $LN26@test_int
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN27@test_int
$LN26@test_int:
	mov	DWORD PTR tv159[rsp], 1
$LN27@test_int:
	mov	eax, DWORD PTR tv159[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1032 : 		}

	jmp	SHORT $LN14@test_int
$LN15@test_int:

; 1033 : 
; 1034 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1035 : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?test_int@findLSB@@YAHXZ ENDP				; findLSB::test_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Samples$ = 64
?perf@findMSB@@YAH_K@Z PROC				; findMSB::perf

; 919  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 920  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 921  : 
; 922  : 		Error += perf_int(Samples);

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf_int@findMSB@@YAH_K@Z		; findMSB::perf_int
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 923  : 
; 924  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 925  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?perf@findMSB@@YAH_K@Z ENDP				; findMSB::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
?test@findMSB@@YAHXZ PROC				; findMSB::test

; 909  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 910  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 911  : 
; 912  : 		Error += test_ivec4();

	call	?test_ivec4@findMSB@@YAHXZ		; findMSB::test_ivec4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 913  : 		Error += test_int();

	call	?test_int@findMSB@@YAHXZ		; findMSB::test_int
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 914  : 
; 915  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 916  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@findMSB@@YAHXZ ENDP				; findMSB::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_intrinsic@I@findMSB@@YAHI@Z
_TEXT	SEGMENT
Result$ = 36
Value$ = 80
??$findMSB_intrinsic@I@findMSB@@YAHI@Z PROC		; findMSB::findMSB_intrinsic<unsigned int>, COMDAT

; 551  : 		{

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 552  : 			GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 553  : 
; 554  : 			if(Value == 0)

	cmp	DWORD PTR Value$[rsp], 0
	jne	SHORT $LN2@findMSB_in

; 555  : 				return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findMSB_in
$LN2@findMSB_in:

; 556  : 
; 557  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 558  : 			_BitScanReverse(&Result, Value);

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax

; 559  : 			return int(Result);

	mov	eax, DWORD PTR Result$[rsp]
$LN1@findMSB_in:

; 560  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$findMSB_intrinsic@I@findMSB@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findMSB_intrinsic@I@findMSB@@YAHI@Z ENDP		; findMSB::findMSB_intrinsic<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_095@I@findMSB@@YAHI@Z
_TEXT	SEGMENT
Bit$1 = 32
tmp$2 = 36
BitCount$3 = 40
MostSignificantBit$4 = 44
BitIndex$5 = 48
tv87 = 52
tv75 = 56
Value$ = 80
??$findMSB_095@I@findMSB@@YAHI@Z PROC			; findMSB::findMSB_095<unsigned int>, COMDAT

; 578  : 	{

$LN17:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H

; 579  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 580  : 		
; 581  : 		if(Value == genIUType(0) || Value == genIUType(-1))

	cmp	DWORD PTR Value$[rsp], 0
	je	SHORT $LN10@findMSB_09
	cmp	DWORD PTR Value$[rsp], -1		; ffffffffH
	jne	SHORT $LN8@findMSB_09
$LN10@findMSB_09:

; 582  : 			return -1;

	mov	eax, -1
	jmp	$LN1@findMSB_09
	jmp	$LN9@findMSB_09
$LN8@findMSB_09:

; 583  : 		else if(Value > 0)

	cmp	DWORD PTR Value$[rsp], 0
	jbe	SHORT $LN11@findMSB_09

; 584  : 		{
; 585  : 			genIUType Bit = genIUType(-1);

	mov	DWORD PTR Bit$1[rsp], -1		; ffffffffH

; 586  : 			for(genIUType tmp = Value; tmp > 0; tmp >>= 1, ++Bit){}

	mov	eax, DWORD PTR Value$[rsp]
	mov	DWORD PTR tmp$2[rsp], eax
	jmp	SHORT $LN4@findMSB_09
$LN2@findMSB_09:
	mov	eax, DWORD PTR tmp$2[rsp]
	shr	eax, 1
	mov	DWORD PTR tmp$2[rsp], eax
	mov	eax, DWORD PTR Bit$1[rsp]
	inc	eax
	mov	DWORD PTR Bit$1[rsp], eax
$LN4@findMSB_09:
	cmp	DWORD PTR tmp$2[rsp], 0
	jbe	SHORT $LN3@findMSB_09
	jmp	SHORT $LN2@findMSB_09
$LN3@findMSB_09:

; 587  : 			return Bit;

	mov	eax, DWORD PTR Bit$1[rsp]
	jmp	$LN1@findMSB_09

; 588  : 		}

	jmp	$LN12@findMSB_09
$LN11@findMSB_09:

; 589  : 		else //if(Value < 0)
; 590  : 		{
; 591  : 			int const BitCount(sizeof(genIUType) * 8);

	mov	DWORD PTR BitCount$3[rsp], 32		; 00000020H

; 592  : 			int MostSignificantBit(-1);

	mov	DWORD PTR MostSignificantBit$4[rsp], -1

; 593  : 			for(int BitIndex(0); BitIndex < BitCount; ++BitIndex)

	mov	DWORD PTR BitIndex$5[rsp], 0
	jmp	SHORT $LN7@findMSB_09
$LN5@findMSB_09:
	mov	eax, DWORD PTR BitIndex$5[rsp]
	inc	eax
	mov	DWORD PTR BitIndex$5[rsp], eax
$LN7@findMSB_09:
	cmp	DWORD PTR BitIndex$5[rsp], 32		; 00000020H
	jge	SHORT $LN6@findMSB_09

; 594  : 				MostSignificantBit = (Value & (1 << BitIndex)) ? MostSignificantBit : BitIndex;

	mov	eax, DWORD PTR BitIndex$5[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv87[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv87[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR Value$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN14@findMSB_09
	mov	eax, DWORD PTR MostSignificantBit$4[rsp]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN15@findMSB_09
$LN14@findMSB_09:
	mov	eax, DWORD PTR BitIndex$5[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN15@findMSB_09:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR MostSignificantBit$4[rsp], eax
	jmp	SHORT $LN5@findMSB_09
$LN6@findMSB_09:

; 595  : 			assert(MostSignificantBit >= 0);

	cmp	DWORD PTR MostSignificantBit$4[rsp], 0
	jge	SHORT $LN16@findMSB_09
	mov	r8d, 595				; 00000253H
	lea	rdx, OFFSET FLAT:??_C@_1ME@EGLCKJKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DA@PHCGLBFJ@?$AAM?$AAo?$AAs?$AAt?$AAS?$AAi?$AAg?$AAn?$AAi?$AAf?$AAi?$AAc?$AAa?$AAn?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@findMSB_09:

; 596  : 			return MostSignificantBit;

	mov	eax, DWORD PTR MostSignificantBit$4[rsp]
$LN12@findMSB_09:
$LN9@findMSB_09:
$LN1@findMSB_09:

; 597  : 		}
; 598  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findMSB_095@I@findMSB@@YAHI@Z ENDP			; findMSB::findMSB_095<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_nlz1@I@findMSB@@YAHI@Z
_TEXT	SEGMENT
n$ = 0
x$ = 32
??$findMSB_nlz1@I@findMSB@@YAHI@Z PROC			; findMSB::findMSB_nlz1<unsigned int>, COMDAT

; 602  : 	{

$LN9:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 603  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 604  : 
; 605  : 		if (x == 0)

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@findMSB_nl

; 606  : 			return -1;

	mov	eax, -1
	jmp	$LN1@findMSB_nl
$LN2@findMSB_nl:

; 607  : 
; 608  : 		int n = 0;

	mov	DWORD PTR n$[rsp], 0

; 609  : 		if (x <= 0x0000FFFF) {n = n +16; x = x <<16;}

	cmp	DWORD PTR x$[rsp], 65535		; 0000ffffH
	ja	SHORT $LN3@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR x$[rsp], eax
$LN3@findMSB_nl:

; 610  : 		if (x <= 0x00FFFFFF) {n = n + 8; x = x << 8;}

	cmp	DWORD PTR x$[rsp], 16777215		; 00ffffffH
	ja	SHORT $LN4@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR x$[rsp], eax
$LN4@findMSB_nl:

; 611  : 		if (x <= 0x0FFFFFFF) {n = n + 4; x = x << 4;}

	cmp	DWORD PTR x$[rsp], 268435455		; 0fffffffH
	ja	SHORT $LN5@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR x$[rsp], eax
$LN5@findMSB_nl:

; 612  : 		if (x <= 0x3FFFFFFF) {n = n + 2; x = x << 2;}

	cmp	DWORD PTR x$[rsp], 1073741823		; 3fffffffH
	ja	SHORT $LN6@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR x$[rsp], eax
$LN6@findMSB_nl:

; 613  : 		if (x <= 0x7FFFFFFF) {n = n + 1;}

	cmp	DWORD PTR x$[rsp], 2147483647		; 7fffffffH
	ja	SHORT $LN7@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@findMSB_nl:

; 614  : 		return 31 - n;

	mov	eax, 31
	sub	eax, DWORD PTR n$[rsp]
$LN1@findMSB_nl:

; 615  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$findMSB_nlz1@I@findMSB@@YAHI@Z ENDP			; findMSB::findMSB_nlz1<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@I@glm@@YAHI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$findMSB@I@glm@@YAHI@Z PROC				; glm::findMSB<unsigned int>, COMDAT

; 350  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 351  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 352  : 
; 353  : 		return findMSB(tvec1<genIUType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$findMSB@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::findMSB<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 354  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$findMSB@I@glm@@YAHI@Z ENDP				; glm::findMSB<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 340
i$4 = 344
Result0$5 = 352
i$6 = 360
Result0$7 = 368
i$8 = 376
Result0$9 = 384
i$10 = 392
Result0$11 = 400
i$12 = 408
Result0$13 = 416
tv75 = 432
tv88 = 436
tv261 = 440
tv274 = 444
tv287 = 448
__$ArrayPad$ = 456
?test_int@findMSB@@YAHXZ PROC				; findMSB::test_int

; 823  : 	{

$LN28:
	push	rdi
	sub	rsp, 464				; 000001d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 824  : 		typedef type<glm::uint, int> entry;
; 825  : 
; 826  : 		entry const Data[] =
; 827  : 		{
; 828  : 			{0x00000000, -1},

	mov	DWORD PTR Data$[rsp], 0
	mov	DWORD PTR Data$[rsp+4], -1

; 829  : 			{0x00000001,  0},

	mov	DWORD PTR Data$[rsp+8], 1
	mov	DWORD PTR Data$[rsp+12], 0

; 830  : 			{0x00000002,  1},

	mov	DWORD PTR Data$[rsp+16], 2
	mov	DWORD PTR Data$[rsp+20], 1

; 831  : 			{0x00000003,  1},

	mov	DWORD PTR Data$[rsp+24], 3
	mov	DWORD PTR Data$[rsp+28], 1

; 832  : 			{0x00000004,  2},

	mov	DWORD PTR Data$[rsp+32], 4
	mov	DWORD PTR Data$[rsp+36], 2

; 833  : 			{0x00000005,  2},

	mov	DWORD PTR Data$[rsp+40], 5
	mov	DWORD PTR Data$[rsp+44], 2

; 834  : 			{0x00000007,  2},

	mov	DWORD PTR Data$[rsp+48], 7
	mov	DWORD PTR Data$[rsp+52], 2

; 835  : 			{0x00000008,  3},

	mov	DWORD PTR Data$[rsp+56], 8
	mov	DWORD PTR Data$[rsp+60], 3

; 836  : 			{0x00000010,  4},

	mov	DWORD PTR Data$[rsp+64], 16
	mov	DWORD PTR Data$[rsp+68], 4

; 837  : 			{0x00000020,  5},

	mov	DWORD PTR Data$[rsp+72], 32		; 00000020H
	mov	DWORD PTR Data$[rsp+76], 5

; 838  : 			{0x00000040,  6},

	mov	DWORD PTR Data$[rsp+80], 64		; 00000040H
	mov	DWORD PTR Data$[rsp+84], 6

; 839  : 			{0x00000080,  7},

	mov	DWORD PTR Data$[rsp+88], 128		; 00000080H
	mov	DWORD PTR Data$[rsp+92], 7

; 840  : 			{0x00000100,  8},

	mov	DWORD PTR Data$[rsp+96], 256		; 00000100H
	mov	DWORD PTR Data$[rsp+100], 8

; 841  : 			{0x00000200,  9},

	mov	DWORD PTR Data$[rsp+104], 512		; 00000200H
	mov	DWORD PTR Data$[rsp+108], 9

; 842  : 			{0x00000400, 10},

	mov	DWORD PTR Data$[rsp+112], 1024		; 00000400H
	mov	DWORD PTR Data$[rsp+116], 10

; 843  : 			{0x00000800, 11},

	mov	DWORD PTR Data$[rsp+120], 2048		; 00000800H
	mov	DWORD PTR Data$[rsp+124], 11

; 844  : 			{0x00001000, 12},

	mov	DWORD PTR Data$[rsp+128], 4096		; 00001000H
	mov	DWORD PTR Data$[rsp+132], 12

; 845  : 			{0x00002000, 13},

	mov	DWORD PTR Data$[rsp+136], 8192		; 00002000H
	mov	DWORD PTR Data$[rsp+140], 13

; 846  : 			{0x00004000, 14},

	mov	DWORD PTR Data$[rsp+144], 16384		; 00004000H
	mov	DWORD PTR Data$[rsp+148], 14

; 847  : 			{0x00008000, 15},

	mov	DWORD PTR Data$[rsp+152], 32768		; 00008000H
	mov	DWORD PTR Data$[rsp+156], 15

; 848  : 			{0x00010000, 16},

	mov	DWORD PTR Data$[rsp+160], 65536		; 00010000H
	mov	DWORD PTR Data$[rsp+164], 16

; 849  : 			{0x00020000, 17},

	mov	DWORD PTR Data$[rsp+168], 131072	; 00020000H
	mov	DWORD PTR Data$[rsp+172], 17

; 850  : 			{0x00040000, 18},

	mov	DWORD PTR Data$[rsp+176], 262144	; 00040000H
	mov	DWORD PTR Data$[rsp+180], 18

; 851  : 			{0x00080000, 19},

	mov	DWORD PTR Data$[rsp+184], 524288	; 00080000H
	mov	DWORD PTR Data$[rsp+188], 19

; 852  : 			{0x00100000, 20},

	mov	DWORD PTR Data$[rsp+192], 1048576	; 00100000H
	mov	DWORD PTR Data$[rsp+196], 20

; 853  : 			{0x00200000, 21},

	mov	DWORD PTR Data$[rsp+200], 2097152	; 00200000H
	mov	DWORD PTR Data$[rsp+204], 21

; 854  : 			{0x00400000, 22},

	mov	DWORD PTR Data$[rsp+208], 4194304	; 00400000H
	mov	DWORD PTR Data$[rsp+212], 22

; 855  : 			{0x00800000, 23},

	mov	DWORD PTR Data$[rsp+216], 8388608	; 00800000H
	mov	DWORD PTR Data$[rsp+220], 23

; 856  : 			{0x01000000, 24},

	mov	DWORD PTR Data$[rsp+224], 16777216	; 01000000H
	mov	DWORD PTR Data$[rsp+228], 24

; 857  : 			{0x02000000, 25},

	mov	DWORD PTR Data$[rsp+232], 33554432	; 02000000H
	mov	DWORD PTR Data$[rsp+236], 25

; 858  : 			{0x04000000, 26},

	mov	DWORD PTR Data$[rsp+240], 67108864	; 04000000H
	mov	DWORD PTR Data$[rsp+244], 26

; 859  : 			{0x08000000, 27},

	mov	DWORD PTR Data$[rsp+248], 134217728	; 08000000H
	mov	DWORD PTR Data$[rsp+252], 27

; 860  : 			{0x10000000, 28},

	mov	DWORD PTR Data$[rsp+256], 268435456	; 10000000H
	mov	DWORD PTR Data$[rsp+260], 28

; 861  : 			{0x20000000, 29},

	mov	DWORD PTR Data$[rsp+264], 536870912	; 20000000H
	mov	DWORD PTR Data$[rsp+268], 29

; 862  : 			{0x40000000, 30}

	mov	DWORD PTR Data$[rsp+272], 1073741824	; 40000000H
	mov	DWORD PTR Data$[rsp+276], 30

; 863  : 		};
; 864  : 
; 865  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 866  : 
; 867  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@test_int
$LN2@test_int:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_int:
	cmp	QWORD PTR i$4[rsp], 35			; 00000023H
	jae	SHORT $LN3@test_int

; 868  : 		{
; 869  : 			int Result0 = glm::findMSB(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB@I@glm@@YAHI@Z		; glm::findMSB<unsigned int>
	mov	DWORD PTR Result0$5[rsp], eax

; 870  : 			Error += Data[i].Return == Result0 ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Result0$5[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN18@test_int
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN19@test_int
$LN18@test_int:
	mov	DWORD PTR tv75[rsp], 1
$LN19@test_int:
	mov	eax, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 871  : 		}

	jmp	SHORT $LN2@test_int
$LN3@test_int:

; 872  : 
; 873  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@test_int
$LN5@test_int:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN7@test_int:
	cmp	QWORD PTR i$6[rsp], 35			; 00000023H
	jae	SHORT $LN6@test_int

; 874  : 		{
; 875  : 			int Result0 = findMSB_nlz1(Data[i].Value);

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_nlz1@I@findMSB@@YAHI@Z	; findMSB::findMSB_nlz1<unsigned int>
	mov	DWORD PTR Result0$7[rsp], eax

; 876  : 			Error += Data[i].Return == Result0 ? 0 : 1;

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Result0$7[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN20@test_int
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN21@test_int
$LN20@test_int:
	mov	DWORD PTR tv88[rsp], 1
$LN21@test_int:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 877  : 		}

	jmp	SHORT $LN5@test_int
$LN6@test_int:

; 878  : /*
; 879  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)
; 880  : 		{
; 881  : 			int Result0 = findMSB_nlz2(Data[i].Value);
; 882  : 			Error += Data[i].Return == Result0 ? 0 : 1;
; 883  : 		}
; 884  : */
; 885  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN10@test_int
$LN8@test_int:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN10@test_int:
	cmp	QWORD PTR i$8[rsp], 35			; 00000023H
	jae	SHORT $LN9@test_int

; 886  : 		{
; 887  : 			int Result0 = findMSB_095(Data[i].Value);

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_095@I@findMSB@@YAHI@Z	; findMSB::findMSB_095<unsigned int>
	mov	DWORD PTR Result0$9[rsp], eax

; 888  : 			Error += Data[i].Return == Result0 ? 0 : 1;

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Result0$9[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN22@test_int
	mov	DWORD PTR tv261[rsp], 0
	jmp	SHORT $LN23@test_int
$LN22@test_int:
	mov	DWORD PTR tv261[rsp], 1
$LN23@test_int:
	mov	eax, DWORD PTR tv261[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 889  : 		}

	jmp	SHORT $LN8@test_int
$LN9@test_int:

; 890  : 
; 891  : #		if GLM_HAS_BITSCAN_WINDOWS
; 892  : 			for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)

	mov	QWORD PTR i$10[rsp], 0
	jmp	SHORT $LN13@test_int
$LN11@test_int:
	mov	rax, QWORD PTR i$10[rsp]
	inc	rax
	mov	QWORD PTR i$10[rsp], rax
$LN13@test_int:
	cmp	QWORD PTR i$10[rsp], 35			; 00000023H
	jae	SHORT $LN12@test_int

; 893  : 			{
; 894  : 				int Result0 = findMSB_intrinsic(Data[i].Value);

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_intrinsic@I@findMSB@@YAHI@Z	; findMSB::findMSB_intrinsic<unsigned int>
	mov	DWORD PTR Result0$11[rsp], eax

; 895  : 				Error += Data[i].Return == Result0 ? 0 : 1;

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Result0$11[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN24@test_int
	mov	DWORD PTR tv274[rsp], 0
	jmp	SHORT $LN25@test_int
$LN24@test_int:
	mov	DWORD PTR tv274[rsp], 1
$LN25@test_int:
	mov	eax, DWORD PTR tv274[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 896  : 			}

	jmp	SHORT $LN11@test_int
$LN12@test_int:

; 897  : #		endif//GLM_HAS_BITSCAN_WINDOWS
; 898  : 
; 899  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(entry); ++i)

	mov	QWORD PTR i$12[rsp], 0
	jmp	SHORT $LN16@test_int
$LN14@test_int:
	mov	rax, QWORD PTR i$12[rsp]
	inc	rax
	mov	QWORD PTR i$12[rsp], rax
$LN16@test_int:
	cmp	QWORD PTR i$12[rsp], 35			; 00000023H
	jae	SHORT $LN15@test_int

; 900  : 		{
; 901  : 			int Result0 = findMSB_pop(Data[i].Value);

	mov	rax, QWORD PTR i$12[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?findMSB_pop@findMSB@@YAHI@Z		; findMSB::findMSB_pop
	mov	DWORD PTR Result0$13[rsp], eax

; 902  : 			Error += Data[i].Return == Result0 ? 0 : 1;

	mov	rax, QWORD PTR i$12[rsp]
	mov	ecx, DWORD PTR Result0$13[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN26@test_int
	mov	DWORD PTR tv287[rsp], 0
	jmp	SHORT $LN27@test_int
$LN26@test_int:
	mov	DWORD PTR tv287[rsp], 1
$LN27@test_int:
	mov	eax, DWORD PTR tv287[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 903  : 		}

	jmp	SHORT $LN14@test_int
$LN15@test_int:

; 904  : 
; 905  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 906  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int@findMSB@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 464				; 000001d0H
	pop	rdi
	ret	0
?test_int@findMSB@@YAHXZ ENDP				; findMSB::test_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC ; glm::findMSB<int,0,glm::tvec4>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 359  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");
; 360  : 
; 361  : 		return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_findMSB_vec@H$0A@Utvec4@glm@@$0CA@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_findMSB_vec<int,0,glm::tvec4,32>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 362  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP ; glm::findMSB<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 1172
i$5 = 1176
Result0$6 = 1192
$T7 = 1232
tv318 = 1236
__$ArrayPad$ = 1240
?test_ivec4@findMSB@@YAHXZ PROC				; findMSB::test_ivec4

; 771  : 	{

$LN8:
	push	rdi
	sub	rsp, 1248				; 000004e0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 304				; 00000130H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 772  : 		type<glm::ivec4, glm::ivec4> const Data[] =
; 773  : 		{
; 774  : 			{glm::ivec4(0x00000000), glm::ivec4(-1)},

	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+16]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 775  : 			{glm::ivec4(0x00000001), glm::ivec4( 0)},

	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+32]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp+48]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 776  : 			{glm::ivec4(0x00000002), glm::ivec4( 1)},

	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+64]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+80]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 777  : 			{glm::ivec4(0x00000003), glm::ivec4( 1)},

	mov	edx, 3
	lea	rcx, QWORD PTR Data$[rsp+96]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+112]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 778  : 			{glm::ivec4(0x00000004), glm::ivec4( 2)},

	mov	edx, 4
	lea	rcx, QWORD PTR Data$[rsp+128]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+144]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 779  : 			{glm::ivec4(0x00000005), glm::ivec4( 2)},

	mov	edx, 5
	lea	rcx, QWORD PTR Data$[rsp+160]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+176]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 780  : 			{glm::ivec4(0x00000007), glm::ivec4( 2)},

	mov	edx, 7
	lea	rcx, QWORD PTR Data$[rsp+192]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+208]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 781  : 			{glm::ivec4(0x00000008), glm::ivec4( 3)},

	mov	edx, 8
	lea	rcx, QWORD PTR Data$[rsp+224]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 3
	lea	rcx, QWORD PTR Data$[rsp+240]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 782  : 			{glm::ivec4(0x00000010), glm::ivec4( 4)},

	mov	edx, 16
	lea	rcx, QWORD PTR Data$[rsp+256]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 4
	lea	rcx, QWORD PTR Data$[rsp+272]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 783  : 			{glm::ivec4(0x00000020), glm::ivec4( 5)},

	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR Data$[rsp+288]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 5
	lea	rcx, QWORD PTR Data$[rsp+304]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 784  : 			{glm::ivec4(0x00000040), glm::ivec4( 6)},

	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR Data$[rsp+320]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 6
	lea	rcx, QWORD PTR Data$[rsp+336]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 785  : 			{glm::ivec4(0x00000080), glm::ivec4( 7)},

	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR Data$[rsp+352]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 7
	lea	rcx, QWORD PTR Data$[rsp+368]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 786  : 			{glm::ivec4(0x00000100), glm::ivec4( 8)},

	mov	edx, 256				; 00000100H
	lea	rcx, QWORD PTR Data$[rsp+384]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 8
	lea	rcx, QWORD PTR Data$[rsp+400]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 787  : 			{glm::ivec4(0x00000200), glm::ivec4( 9)},

	mov	edx, 512				; 00000200H
	lea	rcx, QWORD PTR Data$[rsp+416]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 9
	lea	rcx, QWORD PTR Data$[rsp+432]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 788  : 			{glm::ivec4(0x00000400), glm::ivec4(10)},

	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR Data$[rsp+448]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 10
	lea	rcx, QWORD PTR Data$[rsp+464]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 789  : 			{glm::ivec4(0x00000800), glm::ivec4(11)},

	mov	edx, 2048				; 00000800H
	lea	rcx, QWORD PTR Data$[rsp+480]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 11
	lea	rcx, QWORD PTR Data$[rsp+496]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 790  : 			{glm::ivec4(0x00001000), glm::ivec4(12)},

	mov	edx, 4096				; 00001000H
	lea	rcx, QWORD PTR Data$[rsp+512]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 12
	lea	rcx, QWORD PTR Data$[rsp+528]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 791  : 			{glm::ivec4(0x00002000), glm::ivec4(13)},

	mov	edx, 8192				; 00002000H
	lea	rcx, QWORD PTR Data$[rsp+544]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 13
	lea	rcx, QWORD PTR Data$[rsp+560]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 792  : 			{glm::ivec4(0x00004000), glm::ivec4(14)},

	mov	edx, 16384				; 00004000H
	lea	rcx, QWORD PTR Data$[rsp+576]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 14
	lea	rcx, QWORD PTR Data$[rsp+592]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 793  : 			{glm::ivec4(0x00008000), glm::ivec4(15)},

	mov	edx, 32768				; 00008000H
	lea	rcx, QWORD PTR Data$[rsp+608]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 15
	lea	rcx, QWORD PTR Data$[rsp+624]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 794  : 			{glm::ivec4(0x00010000), glm::ivec4(16)},

	mov	edx, 65536				; 00010000H
	lea	rcx, QWORD PTR Data$[rsp+640]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 16
	lea	rcx, QWORD PTR Data$[rsp+656]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 795  : 			{glm::ivec4(0x00020000), glm::ivec4(17)},

	mov	edx, 131072				; 00020000H
	lea	rcx, QWORD PTR Data$[rsp+672]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 17
	lea	rcx, QWORD PTR Data$[rsp+688]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 796  : 			{glm::ivec4(0x00040000), glm::ivec4(18)},

	mov	edx, 262144				; 00040000H
	lea	rcx, QWORD PTR Data$[rsp+704]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 18
	lea	rcx, QWORD PTR Data$[rsp+720]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 797  : 			{glm::ivec4(0x00080000), glm::ivec4(19)},

	mov	edx, 524288				; 00080000H
	lea	rcx, QWORD PTR Data$[rsp+736]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 19
	lea	rcx, QWORD PTR Data$[rsp+752]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 798  : 			{glm::ivec4(0x00100000), glm::ivec4(20)},

	mov	edx, 1048576				; 00100000H
	lea	rcx, QWORD PTR Data$[rsp+768]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 20
	lea	rcx, QWORD PTR Data$[rsp+784]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 799  : 			{glm::ivec4(0x00200000), glm::ivec4(21)},

	mov	edx, 2097152				; 00200000H
	lea	rcx, QWORD PTR Data$[rsp+800]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 21
	lea	rcx, QWORD PTR Data$[rsp+816]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 800  : 			{glm::ivec4(0x00400000), glm::ivec4(22)},

	mov	edx, 4194304				; 00400000H
	lea	rcx, QWORD PTR Data$[rsp+832]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 22
	lea	rcx, QWORD PTR Data$[rsp+848]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 801  : 			{glm::ivec4(0x00800000), glm::ivec4(23)},

	mov	edx, 8388608				; 00800000H
	lea	rcx, QWORD PTR Data$[rsp+864]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 23
	lea	rcx, QWORD PTR Data$[rsp+880]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 802  : 			{glm::ivec4(0x01000000), glm::ivec4(24)},

	mov	edx, 16777216				; 01000000H
	lea	rcx, QWORD PTR Data$[rsp+896]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 24
	lea	rcx, QWORD PTR Data$[rsp+912]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 803  : 			{glm::ivec4(0x02000000), glm::ivec4(25)},

	mov	edx, 33554432				; 02000000H
	lea	rcx, QWORD PTR Data$[rsp+928]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 25
	lea	rcx, QWORD PTR Data$[rsp+944]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 804  : 			{glm::ivec4(0x04000000), glm::ivec4(26)},

	mov	edx, 67108864				; 04000000H
	lea	rcx, QWORD PTR Data$[rsp+960]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 26
	lea	rcx, QWORD PTR Data$[rsp+976]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 805  : 			{glm::ivec4(0x08000000), glm::ivec4(27)},

	mov	edx, 134217728				; 08000000H
	lea	rcx, QWORD PTR Data$[rsp+992]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 27
	lea	rcx, QWORD PTR Data$[rsp+1008]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 806  : 			{glm::ivec4(0x10000000), glm::ivec4(28)},

	mov	edx, 268435456				; 10000000H
	lea	rcx, QWORD PTR Data$[rsp+1024]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 28
	lea	rcx, QWORD PTR Data$[rsp+1040]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 807  : 			{glm::ivec4(0x20000000), glm::ivec4(29)},

	mov	edx, 536870912				; 20000000H
	lea	rcx, QWORD PTR Data$[rsp+1056]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 29
	lea	rcx, QWORD PTR Data$[rsp+1072]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 808  : 			{glm::ivec4(0x40000000), glm::ivec4(30)}

	mov	edx, 1073741824				; 40000000H
	lea	rcx, QWORD PTR Data$[rsp+1088]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 30
	lea	rcx, QWORD PTR Data$[rsp+1104]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 809  : 		};
; 810  : 
; 811  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 812  : 
; 813  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::ivec4, glm::ivec4>); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@test_ivec4
$LN2@test_ivec4:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_ivec4:
	cmp	QWORD PTR i$5[rsp], 35			; 00000023H
	jae	$LN3@test_ivec4

; 814  : 		{
; 815  : 			glm::ivec4 Result0 = glm::findMSB(Data[i].Value);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result0$6[rsp]
	call	??$findMSB@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::findMSB<int,0,glm::tvec4>

; 816  : 			Error += glm::all(glm::equal(Data[i].Return, Result0)) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+16]
	lea	r8, QWORD PTR Result0$6[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_ivec4
	mov	DWORD PTR tv318[rsp], 0
	jmp	SHORT $LN7@test_ivec4
$LN6@test_ivec4:
	mov	DWORD PTR tv318[rsp], 1
$LN7@test_ivec4:
	mov	eax, DWORD PTR tv318[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 817  : 		}

	jmp	$LN2@test_ivec4
$LN3@test_ivec4:

; 818  : 
; 819  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 820  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ivec4@findMSB@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1248				; 000004e0H
	pop	rdi
	ret	0
?test_ivec4@findMSB@@YAHXZ ENDP				; findMSB::test_ivec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_avx@H@findMSB@@YAHH@Z
_TEXT	SEGMENT
Value$ = 16
??$findMSB_avx@H@findMSB@@YAHH@Z PROC			; findMSB::findMSB_avx<int>, COMDAT

; 566  : 		{

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 567  : 			GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 568  : 
; 569  : 			if(Value == 0)

	cmp	DWORD PTR Value$[rsp], 0
	jne	SHORT $LN2@findMSB_av

; 570  : 				return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findMSB_av
$LN2@findMSB_av:

; 571  : 
; 572  : 			return int(_tzcnt_u32(Value));

	tzcnt	eax, DWORD PTR Value$[rsp]
$LN1@findMSB_av:

; 573  : 		}

	pop	rdi
	ret	0
??$findMSB_avx@H@findMSB@@YAHH@Z ENDP			; findMSB::findMSB_avx<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_intrinsic@H@findMSB@@YAHH@Z
_TEXT	SEGMENT
Result$ = 36
Value$ = 80
??$findMSB_intrinsic@H@findMSB@@YAHH@Z PROC		; findMSB::findMSB_intrinsic<int>, COMDAT

; 551  : 		{

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 552  : 			GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 553  : 
; 554  : 			if(Value == 0)

	cmp	DWORD PTR Value$[rsp], 0
	jne	SHORT $LN2@findMSB_in

; 555  : 				return -1;

	mov	eax, -1
	jmp	SHORT $LN1@findMSB_in
$LN2@findMSB_in:

; 556  : 
; 557  : 			unsigned long Result(0);

	mov	DWORD PTR Result$[rsp], 0

; 558  : 			_BitScanReverse(&Result, Value);

	mov	eax, DWORD PTR Value$[rsp]
	bsr	eax, eax
	mov	DWORD PTR Result$[rsp], eax

; 559  : 			return int(Result);

	mov	eax, DWORD PTR Result$[rsp]
$LN1@findMSB_in:

; 560  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$findMSB_intrinsic@H@findMSB@@YAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findMSB_intrinsic@H@findMSB@@YAHH@Z ENDP		; findMSB::findMSB_intrinsic<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_095@H@findMSB@@YAHH@Z
_TEXT	SEGMENT
Bit$1 = 32
tmp$2 = 36
BitCount$3 = 40
MostSignificantBit$4 = 44
BitIndex$5 = 48
tv87 = 52
tv75 = 56
Value$ = 80
??$findMSB_095@H@findMSB@@YAHH@Z PROC			; findMSB::findMSB_095<int>, COMDAT

; 578  : 	{

$LN17:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H

; 579  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 580  : 		
; 581  : 		if(Value == genIUType(0) || Value == genIUType(-1))

	cmp	DWORD PTR Value$[rsp], 0
	je	SHORT $LN10@findMSB_09
	cmp	DWORD PTR Value$[rsp], -1
	jne	SHORT $LN8@findMSB_09
$LN10@findMSB_09:

; 582  : 			return -1;

	mov	eax, -1
	jmp	$LN1@findMSB_09
	jmp	$LN9@findMSB_09
$LN8@findMSB_09:

; 583  : 		else if(Value > 0)

	cmp	DWORD PTR Value$[rsp], 0
	jle	SHORT $LN11@findMSB_09

; 584  : 		{
; 585  : 			genIUType Bit = genIUType(-1);

	mov	DWORD PTR Bit$1[rsp], -1

; 586  : 			for(genIUType tmp = Value; tmp > 0; tmp >>= 1, ++Bit){}

	mov	eax, DWORD PTR Value$[rsp]
	mov	DWORD PTR tmp$2[rsp], eax
	jmp	SHORT $LN4@findMSB_09
$LN2@findMSB_09:
	mov	eax, DWORD PTR tmp$2[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp$2[rsp], eax
	mov	eax, DWORD PTR Bit$1[rsp]
	inc	eax
	mov	DWORD PTR Bit$1[rsp], eax
$LN4@findMSB_09:
	cmp	DWORD PTR tmp$2[rsp], 0
	jle	SHORT $LN3@findMSB_09
	jmp	SHORT $LN2@findMSB_09
$LN3@findMSB_09:

; 587  : 			return Bit;

	mov	eax, DWORD PTR Bit$1[rsp]
	jmp	$LN1@findMSB_09

; 588  : 		}

	jmp	$LN12@findMSB_09
$LN11@findMSB_09:

; 589  : 		else //if(Value < 0)
; 590  : 		{
; 591  : 			int const BitCount(sizeof(genIUType) * 8);

	mov	DWORD PTR BitCount$3[rsp], 32		; 00000020H

; 592  : 			int MostSignificantBit(-1);

	mov	DWORD PTR MostSignificantBit$4[rsp], -1

; 593  : 			for(int BitIndex(0); BitIndex < BitCount; ++BitIndex)

	mov	DWORD PTR BitIndex$5[rsp], 0
	jmp	SHORT $LN7@findMSB_09
$LN5@findMSB_09:
	mov	eax, DWORD PTR BitIndex$5[rsp]
	inc	eax
	mov	DWORD PTR BitIndex$5[rsp], eax
$LN7@findMSB_09:
	cmp	DWORD PTR BitIndex$5[rsp], 32		; 00000020H
	jge	SHORT $LN6@findMSB_09

; 594  : 				MostSignificantBit = (Value & (1 << BitIndex)) ? MostSignificantBit : BitIndex;

	mov	eax, DWORD PTR BitIndex$5[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv87[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv87[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR Value$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN14@findMSB_09
	mov	eax, DWORD PTR MostSignificantBit$4[rsp]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN15@findMSB_09
$LN14@findMSB_09:
	mov	eax, DWORD PTR BitIndex$5[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN15@findMSB_09:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR MostSignificantBit$4[rsp], eax
	jmp	SHORT $LN5@findMSB_09
$LN6@findMSB_09:

; 595  : 			assert(MostSignificantBit >= 0);

	cmp	DWORD PTR MostSignificantBit$4[rsp], 0
	jge	SHORT $LN16@findMSB_09
	mov	r8d, 595				; 00000253H
	lea	rdx, OFFSET FLAT:??_C@_1ME@EGLCKJKB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DA@PHCGLBFJ@?$AAM?$AAo?$AAs?$AAt?$AAS?$AAi?$AAg?$AAn?$AAi?$AAf?$AAi?$AAc?$AAa?$AAn?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@findMSB_09:

; 596  : 			return MostSignificantBit;

	mov	eax, DWORD PTR MostSignificantBit$4[rsp]
$LN12@findMSB_09:
$LN9@findMSB_09:
$LN1@findMSB_09:

; 597  : 		}
; 598  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$findMSB_095@H@findMSB@@YAHH@Z ENDP			; findMSB::findMSB_095<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$findMSB_nlz1@H@findMSB@@YAHH@Z
_TEXT	SEGMENT
n$ = 0
x$ = 32
??$findMSB_nlz1@H@findMSB@@YAHH@Z PROC			; findMSB::findMSB_nlz1<int>, COMDAT

; 602  : 	{

$LN9:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 603  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 604  : 
; 605  : 		if (x == 0)

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@findMSB_nl

; 606  : 			return -1;

	mov	eax, -1
	jmp	$LN1@findMSB_nl
$LN2@findMSB_nl:

; 607  : 
; 608  : 		int n = 0;

	mov	DWORD PTR n$[rsp], 0

; 609  : 		if (x <= 0x0000FFFF) {n = n +16; x = x <<16;}

	cmp	DWORD PTR x$[rsp], 65535		; 0000ffffH
	jg	SHORT $LN3@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR x$[rsp], eax
$LN3@findMSB_nl:

; 610  : 		if (x <= 0x00FFFFFF) {n = n + 8; x = x << 8;}

	cmp	DWORD PTR x$[rsp], 16777215		; 00ffffffH
	jg	SHORT $LN4@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR x$[rsp], eax
$LN4@findMSB_nl:

; 611  : 		if (x <= 0x0FFFFFFF) {n = n + 4; x = x << 4;}

	cmp	DWORD PTR x$[rsp], 268435455		; 0fffffffH
	jg	SHORT $LN5@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR x$[rsp], eax
$LN5@findMSB_nl:

; 612  : 		if (x <= 0x3FFFFFFF) {n = n + 2; x = x << 2;}

	cmp	DWORD PTR x$[rsp], 1073741823		; 3fffffffH
	jg	SHORT $LN6@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR x$[rsp], eax
$LN6@findMSB_nl:

; 613  : 		if (x <= 0x7FFFFFFF) {n = n + 1;}

	cmp	DWORD PTR x$[rsp], 2147483647		; 7fffffffH
	jg	SHORT $LN7@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@findMSB_nl:

; 614  : 		return 31 - n;

	mov	eax, 31
	sub	eax, DWORD PTR n$[rsp]
$LN1@findMSB_nl:

; 615  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$findMSB_nlz1@H@findMSB@@YAHH@Z ENDP			; findMSB::findMSB_nlz1<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$findMSB@H@glm@@YAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$findMSB@H@glm@@YAHH@Z PROC				; glm::findMSB<int>, COMDAT

; 350  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 351  : 		GLM_STATIC_ASSERT(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");
; 352  : 
; 353  : 		return findMSB(tvec1<genIUType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$findMSB@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@@Z ; glm::findMSB<int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 354  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$findMSB@H@glm@@YAHH@Z ENDP				; glm::findMSB<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 340
Timestamps0$ = 344
k$4 = 352
i$5 = 360
Result$6 = 368
Timestamps1$ = 372
k$7 = 376
i$8 = 384
Result$9 = 392
Timestamps2$ = 396
k$10 = 400
i$11 = 408
Result$12 = 416
Timestamps3$ = 420
k$13 = 424
i$14 = 432
Result$15 = 440
Timestamps4$ = 444
k$16 = 448
i$17 = 456
Result$18 = 464
Timestamps5$ = 468
k$19 = 472
i$20 = 480
Result$21 = 488
Timestamps6$ = 492
k$22 = 496
i$23 = 504
Result$24 = 512
Timestamps7$ = 516
tv78 = 528
tv94 = 532
tv270 = 536
tv286 = 540
tv334 = 544
tv350 = 548
tv366 = 552
__$ArrayPad$ = 560
Count$ = 592
?perf_int@findMSB@@YAH_K@Z PROC				; findMSB::perf_int

; 642  : 	{

$LN59:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 576				; 00000240H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 643  : 		type<int, int> const Data[] =
; 644  : 		{
; 645  : 			{0x00000000, -1},

	mov	DWORD PTR Data$[rsp], 0
	mov	DWORD PTR Data$[rsp+4], -1

; 646  : 			{0x00000001,  0},

	mov	DWORD PTR Data$[rsp+8], 1
	mov	DWORD PTR Data$[rsp+12], 0

; 647  : 			{0x00000002,  1},

	mov	DWORD PTR Data$[rsp+16], 2
	mov	DWORD PTR Data$[rsp+20], 1

; 648  : 			{0x00000003,  1},

	mov	DWORD PTR Data$[rsp+24], 3
	mov	DWORD PTR Data$[rsp+28], 1

; 649  : 			{0x00000004,  2},

	mov	DWORD PTR Data$[rsp+32], 4
	mov	DWORD PTR Data$[rsp+36], 2

; 650  : 			{0x00000005,  2},

	mov	DWORD PTR Data$[rsp+40], 5
	mov	DWORD PTR Data$[rsp+44], 2

; 651  : 			{0x00000007,  2},

	mov	DWORD PTR Data$[rsp+48], 7
	mov	DWORD PTR Data$[rsp+52], 2

; 652  : 			{0x00000008,  3},

	mov	DWORD PTR Data$[rsp+56], 8
	mov	DWORD PTR Data$[rsp+60], 3

; 653  : 			{0x00000010,  4},

	mov	DWORD PTR Data$[rsp+64], 16
	mov	DWORD PTR Data$[rsp+68], 4

; 654  : 			{0x00000020,  5},

	mov	DWORD PTR Data$[rsp+72], 32		; 00000020H
	mov	DWORD PTR Data$[rsp+76], 5

; 655  : 			{0x00000040,  6},

	mov	DWORD PTR Data$[rsp+80], 64		; 00000040H
	mov	DWORD PTR Data$[rsp+84], 6

; 656  : 			{0x00000080,  7},

	mov	DWORD PTR Data$[rsp+88], 128		; 00000080H
	mov	DWORD PTR Data$[rsp+92], 7

; 657  : 			{0x00000100,  8},

	mov	DWORD PTR Data$[rsp+96], 256		; 00000100H
	mov	DWORD PTR Data$[rsp+100], 8

; 658  : 			{0x00000200,  9},

	mov	DWORD PTR Data$[rsp+104], 512		; 00000200H
	mov	DWORD PTR Data$[rsp+108], 9

; 659  : 			{0x00000400, 10},

	mov	DWORD PTR Data$[rsp+112], 1024		; 00000400H
	mov	DWORD PTR Data$[rsp+116], 10

; 660  : 			{0x00000800, 11},

	mov	DWORD PTR Data$[rsp+120], 2048		; 00000800H
	mov	DWORD PTR Data$[rsp+124], 11

; 661  : 			{0x00001000, 12},

	mov	DWORD PTR Data$[rsp+128], 4096		; 00001000H
	mov	DWORD PTR Data$[rsp+132], 12

; 662  : 			{0x00002000, 13},

	mov	DWORD PTR Data$[rsp+136], 8192		; 00002000H
	mov	DWORD PTR Data$[rsp+140], 13

; 663  : 			{0x00004000, 14},

	mov	DWORD PTR Data$[rsp+144], 16384		; 00004000H
	mov	DWORD PTR Data$[rsp+148], 14

; 664  : 			{0x00008000, 15},

	mov	DWORD PTR Data$[rsp+152], 32768		; 00008000H
	mov	DWORD PTR Data$[rsp+156], 15

; 665  : 			{0x00010000, 16},

	mov	DWORD PTR Data$[rsp+160], 65536		; 00010000H
	mov	DWORD PTR Data$[rsp+164], 16

; 666  : 			{0x00020000, 17},

	mov	DWORD PTR Data$[rsp+168], 131072	; 00020000H
	mov	DWORD PTR Data$[rsp+172], 17

; 667  : 			{0x00040000, 18},

	mov	DWORD PTR Data$[rsp+176], 262144	; 00040000H
	mov	DWORD PTR Data$[rsp+180], 18

; 668  : 			{0x00080000, 19},

	mov	DWORD PTR Data$[rsp+184], 524288	; 00080000H
	mov	DWORD PTR Data$[rsp+188], 19

; 669  : 			{0x00100000, 20},

	mov	DWORD PTR Data$[rsp+192], 1048576	; 00100000H
	mov	DWORD PTR Data$[rsp+196], 20

; 670  : 			{0x00200000, 21},

	mov	DWORD PTR Data$[rsp+200], 2097152	; 00200000H
	mov	DWORD PTR Data$[rsp+204], 21

; 671  : 			{0x00400000, 22},

	mov	DWORD PTR Data$[rsp+208], 4194304	; 00400000H
	mov	DWORD PTR Data$[rsp+212], 22

; 672  : 			{0x00800000, 23},

	mov	DWORD PTR Data$[rsp+216], 8388608	; 00800000H
	mov	DWORD PTR Data$[rsp+220], 23

; 673  : 			{0x01000000, 24},

	mov	DWORD PTR Data$[rsp+224], 16777216	; 01000000H
	mov	DWORD PTR Data$[rsp+228], 24

; 674  : 			{0x02000000, 25},

	mov	DWORD PTR Data$[rsp+232], 33554432	; 02000000H
	mov	DWORD PTR Data$[rsp+236], 25

; 675  : 			{0x04000000, 26},

	mov	DWORD PTR Data$[rsp+240], 67108864	; 04000000H
	mov	DWORD PTR Data$[rsp+244], 26

; 676  : 			{0x08000000, 27},

	mov	DWORD PTR Data$[rsp+248], 134217728	; 08000000H
	mov	DWORD PTR Data$[rsp+252], 27

; 677  : 			{0x10000000, 28},

	mov	DWORD PTR Data$[rsp+256], 268435456	; 10000000H
	mov	DWORD PTR Data$[rsp+260], 28

; 678  : 			{0x20000000, 29},

	mov	DWORD PTR Data$[rsp+264], 536870912	; 20000000H
	mov	DWORD PTR Data$[rsp+268], 29

; 679  : 			{0x40000000, 30}

	mov	DWORD PTR Data$[rsp+272], 1073741824	; 40000000H
	mov	DWORD PTR Data$[rsp+276], 30

; 680  : 		};
; 681  : 
; 682  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 683  : 
; 684  : 		std::clock_t Timestamps0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps0$[rsp], eax

; 685  : 
; 686  : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$4[rsp], 0
	jmp	SHORT $LN4@perf_int
$LN2@perf_int:
	mov	rax, QWORD PTR k$4[rsp]
	inc	rax
	mov	QWORD PTR k$4[rsp], rax
$LN4@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$4[rsp], rax
	jae	$LN3@perf_int

; 687  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN7@perf_int
$LN5@perf_int:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN7@perf_int:
	cmp	QWORD PTR i$5[rsp], 35			; 00000023H
	jae	SHORT $LN6@perf_int

; 688  : 		{
; 689  : 			int Result = glm::findMSB(Data[i].Value);

	mov	rax, QWORD PTR i$5[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB@H@glm@@YAHH@Z		; glm::findMSB<int>
	mov	DWORD PTR Result$6[rsp], eax

; 690  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$5[rsp]
	mov	ecx, DWORD PTR Result$6[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN45@perf_int
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN46@perf_int
$LN45@perf_int:
	mov	DWORD PTR tv78[rsp], 1
$LN46@perf_int:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 691  : 		}

	jmp	SHORT $LN5@perf_int
$LN6@perf_int:
	jmp	$LN2@perf_int
$LN3@perf_int:

; 692  : 
; 693  : 		std::clock_t Timestamps1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps1$[rsp], eax

; 694  : 
; 695  : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$7[rsp], 0
	jmp	SHORT $LN10@perf_int
$LN8@perf_int:
	mov	rax, QWORD PTR k$7[rsp]
	inc	rax
	mov	QWORD PTR k$7[rsp], rax
$LN10@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$7[rsp], rax
	jae	$LN9@perf_int

; 696  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@perf_int
$LN11@perf_int:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN13@perf_int:
	cmp	QWORD PTR i$8[rsp], 35			; 00000023H
	jae	SHORT $LN12@perf_int

; 697  : 		{
; 698  : 			int Result = findMSB_nlz1(Data[i].Value);

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_nlz1@H@findMSB@@YAHH@Z	; findMSB::findMSB_nlz1<int>
	mov	DWORD PTR Result$9[rsp], eax

; 699  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Result$9[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN47@perf_int
	mov	DWORD PTR tv94[rsp], 0
	jmp	SHORT $LN48@perf_int
$LN47@perf_int:
	mov	DWORD PTR tv94[rsp], 1
$LN48@perf_int:
	mov	eax, DWORD PTR tv94[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 700  : 		}

	jmp	SHORT $LN11@perf_int
$LN12@perf_int:
	jmp	$LN8@perf_int
$LN9@perf_int:

; 701  : 
; 702  : 		std::clock_t Timestamps2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps2$[rsp], eax

; 703  : 
; 704  : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$10[rsp], 0
	jmp	SHORT $LN16@perf_int
$LN14@perf_int:
	mov	rax, QWORD PTR k$10[rsp]
	inc	rax
	mov	QWORD PTR k$10[rsp], rax
$LN16@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$10[rsp], rax
	jae	$LN15@perf_int

; 705  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$11[rsp], 0
	jmp	SHORT $LN19@perf_int
$LN17@perf_int:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN19@perf_int:
	cmp	QWORD PTR i$11[rsp], 35			; 00000023H
	jae	SHORT $LN18@perf_int

; 706  : 		{
; 707  : 			int Result = findMSB_nlz2(Data[i].Value);

	mov	rax, QWORD PTR i$11[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?findMSB_nlz2@findMSB@@YAHI@Z		; findMSB::findMSB_nlz2
	mov	DWORD PTR Result$12[rsp], eax

; 708  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$11[rsp]
	mov	ecx, DWORD PTR Result$12[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN49@perf_int
	mov	DWORD PTR tv270[rsp], 0
	jmp	SHORT $LN50@perf_int
$LN49@perf_int:
	mov	DWORD PTR tv270[rsp], 1
$LN50@perf_int:
	mov	eax, DWORD PTR tv270[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 709  : 		}

	jmp	SHORT $LN17@perf_int
$LN18@perf_int:
	jmp	$LN14@perf_int
$LN15@perf_int:

; 710  : 
; 711  : 		std::clock_t Timestamps3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps3$[rsp], eax

; 712  : 
; 713  : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$13[rsp], 0
	jmp	SHORT $LN22@perf_int
$LN20@perf_int:
	mov	rax, QWORD PTR k$13[rsp]
	inc	rax
	mov	QWORD PTR k$13[rsp], rax
$LN22@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$13[rsp], rax
	jae	$LN21@perf_int

; 714  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$14[rsp], 0
	jmp	SHORT $LN25@perf_int
$LN23@perf_int:
	mov	rax, QWORD PTR i$14[rsp]
	inc	rax
	mov	QWORD PTR i$14[rsp], rax
$LN25@perf_int:
	cmp	QWORD PTR i$14[rsp], 35			; 00000023H
	jae	SHORT $LN24@perf_int

; 715  : 		{
; 716  : 			int Result = findMSB_095(Data[i].Value);

	mov	rax, QWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_095@H@findMSB@@YAHH@Z	; findMSB::findMSB_095<int>
	mov	DWORD PTR Result$15[rsp], eax

; 717  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR Result$15[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN51@perf_int
	mov	DWORD PTR tv286[rsp], 0
	jmp	SHORT $LN52@perf_int
$LN51@perf_int:
	mov	DWORD PTR tv286[rsp], 1
$LN52@perf_int:
	mov	eax, DWORD PTR tv286[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 718  : 		}

	jmp	SHORT $LN23@perf_int
$LN24@perf_int:
	jmp	$LN20@perf_int
$LN21@perf_int:

; 719  : 
; 720  : 		std::clock_t Timestamps4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps4$[rsp], eax

; 721  : 
; 722  : #		if GLM_HAS_BITSCAN_WINDOWS
; 723  : 			for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$16[rsp], 0
	jmp	SHORT $LN28@perf_int
$LN26@perf_int:
	mov	rax, QWORD PTR k$16[rsp]
	inc	rax
	mov	QWORD PTR k$16[rsp], rax
$LN28@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$16[rsp], rax
	jae	$LN27@perf_int

; 724  : 			for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$17[rsp], 0
	jmp	SHORT $LN31@perf_int
$LN29@perf_int:
	mov	rax, QWORD PTR i$17[rsp]
	inc	rax
	mov	QWORD PTR i$17[rsp], rax
$LN31@perf_int:
	cmp	QWORD PTR i$17[rsp], 35			; 00000023H
	jae	SHORT $LN30@perf_int

; 725  : 			{
; 726  : 				int Result = findMSB_intrinsic(Data[i].Value);

	mov	rax, QWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_intrinsic@H@findMSB@@YAHH@Z	; findMSB::findMSB_intrinsic<int>
	mov	DWORD PTR Result$18[rsp], eax

; 727  : 				Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR Result$18[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN53@perf_int
	mov	DWORD PTR tv334[rsp], 0
	jmp	SHORT $LN54@perf_int
$LN53@perf_int:
	mov	DWORD PTR tv334[rsp], 1
$LN54@perf_int:
	mov	eax, DWORD PTR tv334[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 728  : 			}

	jmp	SHORT $LN29@perf_int
$LN30@perf_int:
	jmp	$LN26@perf_int
$LN27@perf_int:

; 729  : #		endif//GLM_HAS_BITSCAN_WINDOWS
; 730  : 
; 731  : 		std::clock_t Timestamps5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps5$[rsp], eax

; 732  : 
; 733  : 		for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$19[rsp], 0
	jmp	SHORT $LN34@perf_int
$LN32@perf_int:
	mov	rax, QWORD PTR k$19[rsp]
	inc	rax
	mov	QWORD PTR k$19[rsp], rax
$LN34@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$19[rsp], rax
	jae	$LN33@perf_int

; 734  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$20[rsp], 0
	jmp	SHORT $LN37@perf_int
$LN35@perf_int:
	mov	rax, QWORD PTR i$20[rsp]
	inc	rax
	mov	QWORD PTR i$20[rsp], rax
$LN37@perf_int:
	cmp	QWORD PTR i$20[rsp], 35			; 00000023H
	jae	SHORT $LN36@perf_int

; 735  : 		{
; 736  : 			int Result = findMSB_pop(Data[i].Value);

	mov	rax, QWORD PTR i$20[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	?findMSB_pop@findMSB@@YAHI@Z		; findMSB::findMSB_pop
	mov	DWORD PTR Result$21[rsp], eax

; 737  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$20[rsp]
	mov	ecx, DWORD PTR Result$21[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN55@perf_int
	mov	DWORD PTR tv350[rsp], 0
	jmp	SHORT $LN56@perf_int
$LN55@perf_int:
	mov	DWORD PTR tv350[rsp], 1
$LN56@perf_int:
	mov	eax, DWORD PTR tv350[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 738  : 		}

	jmp	SHORT $LN35@perf_int
$LN36@perf_int:
	jmp	$LN32@perf_int
$LN33@perf_int:

; 739  : 
; 740  : 		std::clock_t Timestamps6 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps6$[rsp], eax

; 741  : 
; 742  : #		if GLM_ARCH & GLM_ARCH_AVX && GLM_COMPILER & GLM_COMPILER_VC
; 743  : 			for(std::size_t k = 0; k < Count; ++k)

	mov	QWORD PTR k$22[rsp], 0
	jmp	SHORT $LN40@perf_int
$LN38@perf_int:
	mov	rax, QWORD PTR k$22[rsp]
	inc	rax
	mov	QWORD PTR k$22[rsp], rax
$LN40@perf_int:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$22[rsp], rax
	jae	$LN39@perf_int

; 744  : 			for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<int, int>); ++i)

	mov	QWORD PTR i$23[rsp], 0
	jmp	SHORT $LN43@perf_int
$LN41@perf_int:
	mov	rax, QWORD PTR i$23[rsp]
	inc	rax
	mov	QWORD PTR i$23[rsp], rax
$LN43@perf_int:
	cmp	QWORD PTR i$23[rsp], 35			; 00000023H
	jae	SHORT $LN42@perf_int

; 745  : 			{
; 746  : 				int Result = findMSB_avx(Data[i].Value);

	mov	rax, QWORD PTR i$23[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$findMSB_avx@H@findMSB@@YAHH@Z	; findMSB::findMSB_avx<int>
	mov	DWORD PTR Result$24[rsp], eax

; 747  : 				Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$23[rsp]
	mov	ecx, DWORD PTR Result$24[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN57@perf_int
	mov	DWORD PTR tv366[rsp], 0
	jmp	SHORT $LN58@perf_int
$LN57@perf_int:
	mov	DWORD PTR tv366[rsp], 1
$LN58@perf_int:
	mov	eax, DWORD PTR tv366[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 748  : 			}

	jmp	SHORT $LN41@perf_int
$LN42@perf_int:
	jmp	$LN38@perf_int
$LN39@perf_int:

; 749  : #		endif
; 750  : 
; 751  : 		std::clock_t Timestamps7 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps7$[rsp], eax

; 752  : 
; 753  : 		std::printf("glm::findMSB: %d clocks\n", static_cast<unsigned int>(Timestamps1 - Timestamps0));

	mov	eax, DWORD PTR Timestamps0$[rsp]
	mov	ecx, DWORD PTR Timestamps1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57268
	call	printf

; 754  : 		std::printf("findMSB - nlz1: %d clocks\n", static_cast<unsigned int>(Timestamps2 - Timestamps1));

	mov	eax, DWORD PTR Timestamps1$[rsp]
	mov	ecx, DWORD PTR Timestamps2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57269
	call	printf

; 755  : 		std::printf("findMSB - nlz2: %d clocks\n", static_cast<unsigned int>(Timestamps3 - Timestamps2));

	mov	eax, DWORD PTR Timestamps2$[rsp]
	mov	ecx, DWORD PTR Timestamps3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57270
	call	printf

; 756  : 		std::printf("findMSB - 0.9.5: %d clocks\n", static_cast<unsigned int>(Timestamps4 - Timestamps3));

	mov	eax, DWORD PTR Timestamps3$[rsp]
	mov	ecx, DWORD PTR Timestamps4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57271
	call	printf

; 757  : 
; 758  : #		if GLM_HAS_BITSCAN_WINDOWS
; 759  : 			std::printf("findMSB - intrinsics: %d clocks\n", static_cast<unsigned int>(Timestamps5 - Timestamps4));

	mov	eax, DWORD PTR Timestamps4$[rsp]
	mov	ecx, DWORD PTR Timestamps5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57272
	call	printf

; 760  : #		endif//GLM_HAS_BITSCAN_WINDOWS
; 761  : 		std::printf("findMSB - pop: %d clocks\n", static_cast<unsigned int>(Timestamps6 - Timestamps5));

	mov	eax, DWORD PTR Timestamps5$[rsp]
	mov	ecx, DWORD PTR Timestamps6$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57273
	call	printf

; 762  : 
; 763  : #		if GLM_ARCH & GLM_ARCH_AVX && GLM_COMPILER & GLM_COMPILER_VC
; 764  : 			std::printf("findMSB - avx tzcnt: %d clocks\n", static_cast<unsigned int>(Timestamps7 - Timestamps6));

	mov	eax, DWORD PTR Timestamps6$[rsp]
	mov	ecx, DWORD PTR Timestamps7$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57274
	call	printf

; 765  : #		endif//GLM_ARCH & GLM_ARCH_AVX && GLM_PLATFORM & GLM_PLATFORM_WINDOWS
; 766  : 
; 767  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 768  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_int@findMSB@@YAH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 576				; 00000240H
	pop	rdi
	ret	0
?perf_int@findMSB@@YAH_K@Z ENDP				; findMSB::perf_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitCount@I@glm@@YAHI@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$bitCount@I@glm@@YAHI@Z PROC				; glm::bitCount<unsigned int>, COMDAT

; 313  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 314  : 		return bitCount(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitCount@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU?$tvec1@I$0A@@0@@Z ; glm::bitCount<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 315  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitCount@I@glm@@YAHI@Z ENDP				; glm::bitCount<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
x$ = 48
?findMSB_pop@findMSB@@YAHI@Z PROC			; findMSB::findMSB_pop

; 632  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 633  : 		x = x | (x >> 1);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 634  : 		x = x | (x >> 2);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 635  : 		x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 636  : 		x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 637  : 		x = x | (x >>16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 638  : 		return 31 - glm::bitCount(~x);

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, eax
	call	??$bitCount@I@glm@@YAHI@Z		; glm::bitCount<unsigned int>
	mov	ecx, 31
	sub	ecx, eax
	mov	eax, ecx

; 639  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?findMSB_pop@findMSB@@YAHI@Z ENDP			; findMSB::findMSB_pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
x$ = 32
?findMSB_nlz2@findMSB@@YAHI@Z PROC			; findMSB::findMSB_nlz2

; 618  : 	{

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 619  : 		unsigned y;
; 620  : 		int n;
; 621  : 
; 622  : 		n = 32;

	mov	DWORD PTR n$[rsp], 32			; 00000020H

; 623  : 		y = x >>16;  if (y != 0) {n = n -16;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN2@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN2@findMSB_nl:

; 624  : 		y = x >> 8;  if (y != 0) {n = n - 8;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN3@findMSB_nl:

; 625  : 		y = x >> 4;  if (y != 0) {n = n - 4;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN4@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN4@findMSB_nl:

; 626  : 		y = x >> 2;  if (y != 0) {n = n - 2;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN5@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN5@findMSB_nl:

; 627  : 		y = x >> 1;  if (y != 0) return n - 2;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN6@findMSB_nl
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	jmp	SHORT $LN1@findMSB_nl
$LN6@findMSB_nl:

; 628  : 		return 32 - (n - x);

	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
$LN1@findMSB_nl:

; 629  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?findMSB_nlz2@findMSB@@YAHI@Z ENDP			; findMSB::findMSB_nlz2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Samples$ = 64
?perf@bitfieldReverse@@YAH_K@Z PROC			; bitfieldReverse::perf

; 529  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 530  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 531  : 
; 532  : 		Error += perf32(static_cast<glm::uint32>(Samples));

	mov	ecx, DWORD PTR Samples$[rsp]
	call	?perf32@bitfieldReverse@@YAHI@Z		; bitfieldReverse::perf32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 533  : 		Error += perf64(static_cast<glm::uint64>(Samples));

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf64@bitfieldReverse@@YAH_K@Z	; bitfieldReverse::perf64
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 534  : 
; 535  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 536  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?perf@bitfieldReverse@@YAH_K@Z ENDP			; bitfieldReverse::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@_K@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned __int64> >::_Vector_val<std::_Simple_types<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEBAAEBV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAAAEAV?$allocator@_K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA PROC ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z@4HA ENDP ; `std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@_KV?$allocator@_K@std@@@std@@AEBAXPEA_K0@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@_KV?$allocator@_K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ; std::allocator<unsigned __int64>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@_K@std@@@std@@YAXPEA_KQEA_KAEAV?$allocator@_K@0@@Z ; std::_Destroy_range<std::allocator<unsigned __int64> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ; std::allocator<unsigned __int64>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXQEA_K_K1@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@_KV?$allocator@_K@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 3

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEBAAEBV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@_KV?$allocator@_K@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z PROC ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@_KV?$allocator@_K@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z ENDP ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S3$ = 52
$T4 = 68
this$ = 96
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@_KV?$allocator@_K@std@@@std@@AEAAXXZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S3$[rsp]
	call	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
	lea	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@_K@std@@V?$_Vector_val@U?$_Simple_types@_K@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1>::_Compressed_pair<std::allocator<unsigned __int64>,std::_Vector_val<std::_Simple_types<unsigned __int64> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@_KV?$allocator@_K@std@@@std@@AEAAAEAV?$allocator@_K@2@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0_K@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@_K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned __int64>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@_K@std@@@std@@SA_KAEBV?$allocator@_K@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned __int64> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z PROC	; std::allocator<unsigned __int64>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@_K@std@@QEAAPEA_K_K@Z ENDP	; std::allocator<unsigned __int64>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z PROC	; std::allocator<unsigned __int64>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@_K@std@@QEAAXQEA_K_K@Z ENDP	; std::allocator<unsigned __int64>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@_K@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@_K@std@@QEAA@XZ PROC			; std::allocator<unsigned __int64>::allocator<unsigned __int64>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@_K@std@@QEAA@XZ ENDP			; std::allocator<unsigned __int64>::allocator<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Data$ = 56
Timestamps0$ = 100
k$4 = 104
Timestamps1$ = 108
k$5 = 112
Timestamps2$ = 120
k$6 = 128
Timestamps3$ = 136
k$7 = 144
Timestamps4$ = 152
$T8 = 156
tv79 = 160
tv86 = 168
tv94 = 176
tv134 = 184
Count$ = 208
?perf64@bitfieldReverse@@YAH_K@Z PROC			; bitfieldReverse::perf64

; 492  : 	{

$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]

; 493  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 494  : 
; 495  : 		std::vector<glm::uint64> Data;

	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::vector<unsigned __int64,std::allocator<unsigned __int64> >
	npad	1

; 496  : 		Data.resize(static_cast<std::size_t>(Count));

	mov	rdx, QWORD PTR Count$[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	?resize@?$vector@_KV?$allocator@_K@std@@@std@@QEAAX_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::resize

; 497  : 
; 498  : 		std::clock_t Timestamps0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps0$[rsp], eax

; 499  : 
; 500  : 		for(glm::uint32 k = 0; k < Count; ++k)

	mov	DWORD PTR k$4[rsp], 0
	jmp	SHORT $LN4@perf64
$LN2@perf64:
	mov	eax, DWORD PTR k$4[rsp]
	inc	eax
	mov	DWORD PTR k$4[rsp], eax
$LN4@perf64:
	mov	eax, DWORD PTR k$4[rsp]
	cmp	rax, QWORD PTR Count$[rsp]
	jae	SHORT $LN3@perf64

; 501  : 			Data[k] = glm::bitfieldReverse(k);

	mov	ecx, DWORD PTR k$4[rsp]
	call	??$bitfieldReverse@I@glm@@YAII@Z	; glm::bitfieldReverse<unsigned int>
	mov	eax, eax
	mov	QWORD PTR tv79[rsp], rax
	mov	ecx, DWORD PTR k$4[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv79[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@perf64
$LN3@perf64:

; 502  : 
; 503  : 		std::clock_t Timestamps1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps1$[rsp], eax

; 504  : 
; 505  : 		for(glm::uint64 k = 0; k < Count; ++k)

	mov	QWORD PTR k$5[rsp], 0
	jmp	SHORT $LN7@perf64
$LN5@perf64:
	mov	rax, QWORD PTR k$5[rsp]
	inc	rax
	mov	QWORD PTR k$5[rsp], rax
$LN7@perf64:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$5[rsp], rax
	jae	SHORT $LN6@perf64

; 506  : 			Data[k] = bitfieldReverseLoop(k);

	mov	rcx, QWORD PTR k$5[rsp]
	call	??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64>
	mov	QWORD PTR tv86[rsp], rax
	mov	rdx, QWORD PTR k$5[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv86[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN5@perf64
$LN6@perf64:

; 507  : 
; 508  : 		std::clock_t Timestamps2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps2$[rsp], eax

; 509  : 
; 510  : 		for(glm::uint64 k = 0; k < Count; ++k)

	mov	QWORD PTR k$6[rsp], 0
	jmp	SHORT $LN10@perf64
$LN8@perf64:
	mov	rax, QWORD PTR k$6[rsp]
	inc	rax
	mov	QWORD PTR k$6[rsp], rax
$LN10@perf64:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$6[rsp], rax
	jae	SHORT $LN9@perf64

; 511  : 			Data[k] = bitfieldReverseUint64(k);

	mov	rcx, QWORD PTR k$6[rsp]
	call	?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseUint64
	mov	QWORD PTR tv94[rsp], rax
	mov	rdx, QWORD PTR k$6[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv94[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN8@perf64
$LN9@perf64:

; 512  : 
; 513  : 		std::clock_t Timestamps3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps3$[rsp], eax

; 514  : 
; 515  : 		for(glm::uint64 k = 0; k < Count; ++k)

	mov	QWORD PTR k$7[rsp], 0
	jmp	SHORT $LN13@perf64
$LN11@perf64:
	mov	rax, QWORD PTR k$7[rsp]
	inc	rax
	mov	QWORD PTR k$7[rsp], rax
$LN13@perf64:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR k$7[rsp], rax
	jae	SHORT $LN12@perf64

; 516  : 			Data[k] = bitfieldReverseOps(k);

	mov	rcx, QWORD PTR k$7[rsp]
	call	??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseOps<unsigned __int64>
	mov	QWORD PTR tv134[rsp], rax
	mov	rdx, QWORD PTR k$7[rsp]
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@_KV?$allocator@_K@std@@@std@@QEAAAEA_K_K@Z ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::operator[]
	mov	rcx, QWORD PTR tv134[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN11@perf64
$LN12@perf64:

; 517  : 
; 518  : 		std::clock_t Timestamps4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps4$[rsp], eax

; 519  : 
; 520  : 		std::printf("glm::bitfieldReverse - 64: %d clocks\n", static_cast<unsigned int>(Timestamps1 - Timestamps0));

	mov	eax, DWORD PTR Timestamps0$[rsp]
	mov	ecx, DWORD PTR Timestamps1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57102
	call	printf

; 521  : 		std::printf("bitfieldReverseLoop - 64: %d clocks\n", static_cast<unsigned int>(Timestamps2 - Timestamps1));

	mov	eax, DWORD PTR Timestamps1$[rsp]
	mov	ecx, DWORD PTR Timestamps2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57103
	call	printf

; 522  : 		std::printf("bitfieldReverseUint - 64: %d clocks\n", static_cast<unsigned int>(Timestamps3 - Timestamps2));

	mov	eax, DWORD PTR Timestamps2$[rsp]
	mov	ecx, DWORD PTR Timestamps3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57104
	call	printf

; 523  : 		std::printf("bitfieldReverseOps - 64: %d clocks\n", static_cast<unsigned int>(Timestamps4 - Timestamps3));

	mov	eax, DWORD PTR Timestamps3$[rsp]
	mov	ecx, DWORD PTR Timestamps4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG57105
	call	printf

; 524  : 
; 525  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T8[rsp], eax
	lea	rcx, QWORD PTR Data$[rsp]
	call	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	mov	eax, DWORD PTR $T8[rsp]

; 526  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf64@bitfieldReverse@@YAH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?perf64@bitfieldReverse@@YAH_K@Z ENDP			; bitfieldReverse::perf64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Data$ = 56
Timestamps0$ = 100
k$4 = 104
Timestamps1$ = 108
k$5 = 112
Timestamps2$ = 120
k$6 = 128
Timestamps3$ = 136
k$7 = 144
Timestamps4$ = 152
$T8 = 156
tv79 = 160
tv86 = 168
tv94 = 176
tv134 = 184
Count$ = 208
?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA PROC	; `bitfieldReverse::perf64'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Data$[rbp]
	call	??1?$vector@_KV?$allocator@_K@std@@@std@@QEAA@XZ ; std::vector<unsigned __int64,std::allocator<unsigned __int64> >::~vector<unsigned __int64,std::allocator<unsigned __int64> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf64@bitfieldReverse@@YAH_K@Z@4HA ENDP	; `bitfieldReverse::perf64'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$allocator@I@2@XZ ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@IV?$allocator@I@std@@@std@@AEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@IV?$allocator@I@std@@@std@@CAXXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@I@std@@@std@@YAXPEAIQEAIAEAV?$allocator@I@0@@Z ; std::_Destroy_range<std::allocator<unsigned int> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ; std::allocator<unsigned int>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@IV?$allocator@I@std@@@std@@AEAAXQEAI_K1@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@IV?$allocator@I@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEBAAEBV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@IV?$allocator@I@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S4$ = 52
$T4 = 68
this$ = 96
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@AEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S4$[rsp]
	call	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
	lea	rax, QWORD PTR $S4$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@I@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::allocator<unsigned int>,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@IV?$allocator@I@std@@@std@@AEAAAEAV?$allocator@I@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@I@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned int>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z PROC		; std::allocator<unsigned int>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ENDP		; std::allocator<unsigned int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z PROC	; std::allocator<unsigned int>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@I@std@@QEAAXQEAI_K@Z ENDP	; std::allocator<unsigned int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@I@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@I@std@@QEAA@XZ PROC			; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@I@std@@QEAA@XZ ENDP			; std::allocator<unsigned int>::allocator<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Data$ = 56
Timestamps0$ = 100
k$4 = 104
Timestamps1$ = 108
k$5 = 112
Timestamps2$ = 116
k$6 = 120
Timestamps3$ = 124
k$7 = 128
Timestamps4$ = 132
$T8 = 136
tv77 = 140
tv86 = 144
tv95 = 148
tv136 = 152
Count$ = 176
?perf32@bitfieldReverse@@YAHI@Z PROC			; bitfieldReverse::perf32

; 455  : 	{

$LN16:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+176]

; 456  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 457  : 
; 458  : 		std::vector<glm::uint32> Data;

	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
	npad	1

; 459  : 		Data.resize(static_cast<std::size_t>(Count));

	mov	eax, DWORD PTR Count$[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR Data$[rsp]
	call	?resize@?$vector@IV?$allocator@I@std@@@std@@QEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::resize

; 460  : 
; 461  : 		std::clock_t Timestamps0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps0$[rsp], eax

; 462  : 
; 463  : 		for(glm::uint32 k = 0; k < Count; ++k)

	mov	DWORD PTR k$4[rsp], 0
	jmp	SHORT $LN4@perf32
$LN2@perf32:
	mov	eax, DWORD PTR k$4[rsp]
	inc	eax
	mov	DWORD PTR k$4[rsp], eax
$LN4@perf32:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR k$4[rsp], eax
	jae	SHORT $LN3@perf32

; 464  : 			Data[k] = glm::bitfieldReverse(k);

	mov	ecx, DWORD PTR k$4[rsp]
	call	??$bitfieldReverse@I@glm@@YAII@Z	; glm::bitfieldReverse<unsigned int>
	mov	DWORD PTR tv77[rsp], eax
	mov	ecx, DWORD PTR k$4[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf32
$LN3@perf32:

; 465  : 
; 466  : 		std::clock_t Timestamps1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps1$[rsp], eax

; 467  : 
; 468  : 		for(glm::uint32 k = 0; k < Count; ++k)

	mov	DWORD PTR k$5[rsp], 0
	jmp	SHORT $LN7@perf32
$LN5@perf32:
	mov	eax, DWORD PTR k$5[rsp]
	inc	eax
	mov	DWORD PTR k$5[rsp], eax
$LN7@perf32:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR k$5[rsp], eax
	jae	SHORT $LN6@perf32

; 469  : 			Data[k] = bitfieldReverseLoop(k);

	mov	ecx, DWORD PTR k$5[rsp]
	call	??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned int>
	mov	DWORD PTR tv86[rsp], eax
	mov	ecx, DWORD PTR k$5[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv86[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf32
$LN6@perf32:

; 470  : 
; 471  : 		std::clock_t Timestamps2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps2$[rsp], eax

; 472  : 
; 473  : 		for(glm::uint32 k = 0; k < Count; ++k)

	mov	DWORD PTR k$6[rsp], 0
	jmp	SHORT $LN10@perf32
$LN8@perf32:
	mov	eax, DWORD PTR k$6[rsp]
	inc	eax
	mov	DWORD PTR k$6[rsp], eax
$LN10@perf32:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR k$6[rsp], eax
	jae	SHORT $LN9@perf32

; 474  : 			Data[k] = bitfieldReverseUint32(k);

	mov	ecx, DWORD PTR k$6[rsp]
	call	?bitfieldReverseUint32@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseUint32
	mov	DWORD PTR tv95[rsp], eax
	mov	ecx, DWORD PTR k$6[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv95[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN8@perf32
$LN9@perf32:

; 475  : 
; 476  : 		std::clock_t Timestamps3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps3$[rsp], eax

; 477  : 
; 478  : 		for(glm::uint32 k = 0; k < Count; ++k)

	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN13@perf32
$LN11@perf32:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN13@perf32:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR k$7[rsp], eax
	jae	SHORT $LN12@perf32

; 479  : 			Data[k] = bitfieldReverseOps(k);

	mov	ecx, DWORD PTR k$7[rsp]
	call	??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseOps<unsigned int>
	mov	DWORD PTR tv136[rsp], eax
	mov	ecx, DWORD PTR k$7[rsp]
	mov	edx, ecx
	lea	rcx, QWORD PTR Data$[rsp]
	call	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
	mov	ecx, DWORD PTR tv136[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN11@perf32
$LN12@perf32:

; 480  : 
; 481  : 		std::clock_t Timestamps4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamps4$[rsp], eax

; 482  : 
; 483  : 		std::printf("glm::bitfieldReverse: %d clocks\n", static_cast<unsigned int>(Timestamps1 - Timestamps0));

	mov	eax, DWORD PTR Timestamps0$[rsp]
	mov	ecx, DWORD PTR Timestamps1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG56548
	call	printf

; 484  : 		std::printf("bitfieldReverseLoop: %d clocks\n", static_cast<unsigned int>(Timestamps2 - Timestamps1));

	mov	eax, DWORD PTR Timestamps1$[rsp]
	mov	ecx, DWORD PTR Timestamps2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG56549
	call	printf

; 485  : 		std::printf("bitfieldReverseUint32: %d clocks\n", static_cast<unsigned int>(Timestamps3 - Timestamps2));

	mov	eax, DWORD PTR Timestamps2$[rsp]
	mov	ecx, DWORD PTR Timestamps3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG56550
	call	printf

; 486  : 		std::printf("bitfieldReverseOps: %d clocks\n", static_cast<unsigned int>(Timestamps4 - Timestamps3));

	mov	eax, DWORD PTR Timestamps3$[rsp]
	mov	ecx, DWORD PTR Timestamps4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG56551
	call	printf

; 487  : 
; 488  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T8[rsp], eax
	lea	rcx, QWORD PTR Data$[rsp]
	call	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	mov	eax, DWORD PTR $T8[rsp]

; 489  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf32@bitfieldReverse@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?perf32@bitfieldReverse@@YAHI@Z ENDP			; bitfieldReverse::perf32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Data$ = 56
Timestamps0$ = 100
k$4 = 104
Timestamps1$ = 108
k$5 = 112
Timestamps2$ = 116
k$6 = 120
Timestamps3$ = 124
k$7 = 128
Timestamps4$ = 132
$T8 = 136
tv77 = 140
tv86 = 144
tv95 = 148
tv136 = 152
Count$ = 176
?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA PROC	; `bitfieldReverse::perf32'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Data$[rbp]
	call	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf32@bitfieldReverse@@YAHI@Z@4HA ENDP	; `bitfieldReverse::perf32'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
?test@bitfieldReverse@@YAHXZ PROC			; bitfieldReverse::test

; 438  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 439  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 440  : 
; 441  : 		Error += test32_bitfieldReverse();

	call	?test32_bitfieldReverse@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 442  : 		Error += test32_bitfieldReverseLoop();

	call	?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseLoop
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 443  : 		Error += test32_bitfieldReverseUint32();

	call	?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseUint32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 444  : 		Error += test32_bitfieldReverseOps();

	call	?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ ; bitfieldReverse::test32_bitfieldReverseOps
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 445  : 
; 446  : 		Error += test64_bitfieldReverse();

	call	?test64_bitfieldReverse@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 447  : 		Error += test64_bitfieldReverseLoop();

	call	?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseLoop
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 448  : 		Error += test64_bitfieldReverseUint64();

	call	?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseUint64
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 449  : 		Error += test64_bitfieldReverseOps();

	call	?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ ; bitfieldReverse::test64_bitfieldReverseOps
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 450  : 
; 451  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 452  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@bitfieldReverse@@YAHXZ ENDP			; bitfieldReverse::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
x$ = 64
??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z PROC	; bitfieldReverse::bitfieldReverseOps<unsigned __int64>, COMDAT

; 232  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 233  : 		return bitfieldReverseOps(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverseOps@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseOps<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]

; 234  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z ENDP	; bitfieldReverse::bitfieldReverseOps<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 64
tv75 = 68
tv83 = 72
tv87 = 76
?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test64_bitfieldReverseOps

; 418  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 419  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 420  : 		std::size_t const Count = sizeof(Data64) / sizeof(typeU64);

	mov	QWORD PTR Count$[rsp], 5

; 421  : 		
; 422  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test64_bit
$LN2@test64_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test64_bit:
	cmp	QWORD PTR i$1[rsp], 5
	jae	$LN3@test64_bit

; 423  : 		{
; 424  : 			glm::uint64 Return = bitfieldReverseOps(Data64[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rcx, QWORD PTR [rcx+rax]
	call	??$bitfieldReverseOps@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseOps<unsigned __int64>
	mov	QWORD PTR Return$2[rsp], rax

; 425  : 			
; 426  : 			bool Compare = Data64[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rdx, QWORD PTR Return$2[rsp]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN8@test64_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test64_bit
$LN8@test64_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test64_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 427  : 			
; 428  : 			if(Data64[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	cmp	DWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN5@test64_bit

; 429  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test64_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test64_bit
$LN10@test64_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test64_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test64_bit
$LN5@test64_bit:

; 430  : 			else
; 431  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test64_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test64_bit
$LN12@test64_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test64_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test64_bit:

; 432  : 		}

	jmp	$LN2@test64_bit
$LN3@test64_bit:

; 433  : 		
; 434  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 435  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test64_bitfieldReverseOps@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test64_bitfieldReverseOps
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 64
tv75 = 68
tv83 = 72
tv87 = 76
?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ PROC ; bitfieldReverse::test64_bitfieldReverseUint64

; 398  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 399  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 400  : 		std::size_t const Count = sizeof(Data64) / sizeof(typeU64);

	mov	QWORD PTR Count$[rsp], 5

; 401  : 		
; 402  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test64_bit
$LN2@test64_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test64_bit:
	cmp	QWORD PTR i$1[rsp], 5
	jae	$LN3@test64_bit

; 403  : 		{
; 404  : 			glm::uint64 Return = bitfieldReverseUint64(Data64[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rcx, QWORD PTR [rcx+rax]
	call	?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseUint64
	mov	QWORD PTR Return$2[rsp], rax

; 405  : 			
; 406  : 			bool Compare = Data64[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rdx, QWORD PTR Return$2[rsp]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN8@test64_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test64_bit
$LN8@test64_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test64_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 407  : 			
; 408  : 			if(Data64[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	cmp	DWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN5@test64_bit

; 409  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test64_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test64_bit
$LN10@test64_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test64_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test64_bit
$LN5@test64_bit:

; 410  : 			else
; 411  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test64_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test64_bit
$LN12@test64_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test64_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test64_bit:

; 412  : 		}

	jmp	$LN2@test64_bit
$LN3@test64_bit:

; 413  : 		
; 414  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 415  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test64_bitfieldReverseUint64@bitfieldReverse@@YAHXZ ENDP ; bitfieldReverse::test64_bitfieldReverseUint64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
v$ = 64
??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z PROC ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		return bitfieldReverseLoop(glm::tvec1<T>(v)).x;

	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverseLoop@_K$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@_K$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]

; 174  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z ENDP ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 64
tv75 = 68
tv83 = 72
tv87 = 76
?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test64_bitfieldReverseLoop

; 378  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 379  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 380  : 		std::size_t const Count = sizeof(Data64) / sizeof(typeU64);

	mov	QWORD PTR Count$[rsp], 5

; 381  : 		
; 382  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test64_bit
$LN2@test64_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test64_bit:
	cmp	QWORD PTR i$1[rsp], 5
	jae	$LN3@test64_bit

; 383  : 		{
; 384  : 			glm::uint64 Return = bitfieldReverseLoop(Data64[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rcx, QWORD PTR [rcx+rax]
	call	??$bitfieldReverseLoop@_K@bitfieldReverse@@YA_K_K@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned __int64>
	mov	QWORD PTR Return$2[rsp], rax

; 385  : 			
; 386  : 			bool Compare = Data64[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rdx, QWORD PTR Return$2[rsp]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN8@test64_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test64_bit
$LN8@test64_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test64_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 387  : 			
; 388  : 			if(Data32[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN5@test64_bit

; 389  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test64_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test64_bit
$LN10@test64_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test64_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test64_bit
$LN5@test64_bit:

; 390  : 			else
; 391  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test64_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test64_bit
$LN12@test64_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test64_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test64_bit:

; 392  : 		}

	jmp	$LN2@test64_bit
$LN3@test64_bit:

; 393  : 		
; 394  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 395  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test64_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test64_bitfieldReverseLoop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldReverse@_K@glm@@YA_K_K@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
x$ = 64
??$bitfieldReverse@_K@glm@@YA_K_K@Z PROC		; glm::bitfieldReverse<unsigned __int64>, COMDAT

; 293  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 294  : 		return bitfieldReverse(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@_K$0A@@glm@@QEAA@_K@Z	; glm::tvec1<unsigned __int64,0>::tvec1<unsigned __int64,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverse@_K$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_K$0A@@0@AEBU10@@Z ; glm::bitfieldReverse<unsigned __int64,0,glm::tvec1>
	mov	rax, QWORD PTR [rax]

; 295  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverse@_K@glm@@YA_K_K@Z ENDP		; glm::bitfieldReverse<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 64
tv75 = 68
tv83 = 72
tv87 = 76
?test64_bitfieldReverse@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test64_bitfieldReverse

; 358  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 359  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 360  : 		std::size_t const Count = sizeof(Data64) / sizeof(typeU64);

	mov	QWORD PTR Count$[rsp], 5

; 361  : 		
; 362  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test64_bit
$LN2@test64_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test64_bit:
	cmp	QWORD PTR i$1[rsp], 5
	jae	$LN3@test64_bit

; 363  : 		{
; 364  : 			glm::uint64 Return = glm::bitfieldReverse(Data64[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rcx, QWORD PTR [rcx+rax]
	call	??$bitfieldReverse@_K@glm@@YA_K_K@Z	; glm::bitfieldReverse<unsigned __int64>
	mov	QWORD PTR Return$2[rsp], rax

; 365  : 			
; 366  : 			bool Compare = Data64[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	mov	rdx, QWORD PTR Return$2[rsp]
	cmp	QWORD PTR [rcx+rax+8], rdx
	jne	SHORT $LN8@test64_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test64_bit
$LN8@test64_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test64_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 367  : 			
; 368  : 			if(Data64[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 24
	lea	rcx, OFFSET FLAT:?Data64@bitfieldReverse@@3QBU?$type@_K@1@B
	cmp	DWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN5@test64_bit

; 369  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test64_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test64_bit
$LN10@test64_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test64_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test64_bit
$LN5@test64_bit:

; 370  : 			else
; 371  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test64_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test64_bit
$LN12@test64_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test64_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test64_bit:

; 372  : 		}

	jmp	$LN2@test64_bit
$LN3@test64_bit:

; 373  : 		
; 374  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 375  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test64_bitfieldReverse@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test64_bitfieldReverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z PROC	; bitfieldReverse::bitfieldReverseOps<unsigned int>, COMDAT

; 232  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 233  : 		return bitfieldReverseOps(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverseOps@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseOps<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 234  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z ENDP	; bitfieldReverse::bitfieldReverseOps<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 60
tv75 = 64
tv83 = 68
tv87 = 72
?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test32_bitfieldReverseOps

; 338  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 339  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 340  : 		std::size_t const Count = sizeof(Data32) / sizeof(typeU32);

	mov	QWORD PTR Count$[rsp], 7

; 341  : 		
; 342  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test32_bit
$LN2@test32_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test32_bit:
	cmp	QWORD PTR i$1[rsp], 7
	jae	$LN3@test32_bit

; 343  : 		{
; 344  : 			glm::uint Return = bitfieldReverseOps(Data32[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	ecx, DWORD PTR [rcx+rax]
	call	??$bitfieldReverseOps@I@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseOps<unsigned int>
	mov	DWORD PTR Return$2[rsp], eax

; 345  : 			
; 346  : 			bool Compare = Data32[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+4], edx
	jne	SHORT $LN8@test32_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test32_bit
$LN8@test32_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test32_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 347  : 			
; 348  : 			if(Data32[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN5@test32_bit

; 349  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test32_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test32_bit
$LN10@test32_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test32_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test32_bit
$LN5@test32_bit:

; 350  : 			else
; 351  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test32_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test32_bit
$LN12@test32_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test32_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test32_bit:

; 352  : 		}

	jmp	$LN2@test32_bit
$LN3@test32_bit:

; 353  : 		
; 354  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 355  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test32_bitfieldReverseOps@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test32_bitfieldReverseOps
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 60
tv75 = 64
tv83 = 68
tv87 = 72
?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ PROC ; bitfieldReverse::test32_bitfieldReverseUint32

; 318  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 319  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 320  : 		std::size_t const Count = sizeof(Data32) / sizeof(typeU32);

	mov	QWORD PTR Count$[rsp], 7

; 321  : 		
; 322  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test32_bit
$LN2@test32_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test32_bit:
	cmp	QWORD PTR i$1[rsp], 7
	jae	$LN3@test32_bit

; 323  : 		{
; 324  : 			glm::uint Return = bitfieldReverseUint32(Data32[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	ecx, DWORD PTR [rcx+rax]
	call	?bitfieldReverseUint32@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseUint32
	mov	DWORD PTR Return$2[rsp], eax

; 325  : 			
; 326  : 			bool Compare = Data32[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+4], edx
	jne	SHORT $LN8@test32_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test32_bit
$LN8@test32_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test32_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 327  : 			
; 328  : 			if(Data32[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN5@test32_bit

; 329  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test32_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test32_bit
$LN10@test32_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test32_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test32_bit
$LN5@test32_bit:

; 330  : 			else
; 331  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test32_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test32_bit
$LN12@test32_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test32_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test32_bit:

; 332  : 		}

	jmp	$LN2@test32_bit
$LN3@test32_bit:

; 333  : 		
; 334  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 335  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test32_bitfieldReverseUint32@bitfieldReverse@@YAHXZ ENDP ; bitfieldReverse::test32_bitfieldReverseUint32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
v$ = 64
??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z PROC	; bitfieldReverse::bitfieldReverseLoop<unsigned int>, COMDAT

; 172  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		return bitfieldReverseLoop(glm::tvec1<T>(v)).x;

	mov	edx, DWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverseLoop@I$0A@Utvec1@glm@@@bitfieldReverse@@YA?AU?$tvec1@I$0A@@glm@@AEBU12@@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 174  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z ENDP	; bitfieldReverse::bitfieldReverseLoop<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 60
tv75 = 64
tv83 = 68
tv87 = 72
?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test32_bitfieldReverseLoop

; 298  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 299  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 300  : 		std::size_t const Count = sizeof(Data32) / sizeof(typeU32);

	mov	QWORD PTR Count$[rsp], 7

; 301  : 		
; 302  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test32_bit
$LN2@test32_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test32_bit:
	cmp	QWORD PTR i$1[rsp], 7
	jae	$LN3@test32_bit

; 303  : 		{
; 304  : 			glm::uint Return = bitfieldReverseLoop(Data32[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	ecx, DWORD PTR [rcx+rax]
	call	??$bitfieldReverseLoop@I@bitfieldReverse@@YAII@Z ; bitfieldReverse::bitfieldReverseLoop<unsigned int>
	mov	DWORD PTR Return$2[rsp], eax

; 305  : 			
; 306  : 			bool Compare = Data32[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+4], edx
	jne	SHORT $LN8@test32_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test32_bit
$LN8@test32_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test32_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 307  : 			
; 308  : 			if(Data32[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN5@test32_bit

; 309  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test32_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test32_bit
$LN10@test32_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test32_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test32_bit
$LN5@test32_bit:

; 310  : 			else
; 311  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test32_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test32_bit
$LN12@test32_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test32_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test32_bit:

; 312  : 		}

	jmp	$LN2@test32_bit
$LN3@test32_bit:

; 313  : 		
; 314  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 315  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test32_bitfieldReverseLoop@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test32_bitfieldReverseLoop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldReverse@I@glm@@YAII@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$bitfieldReverse@I@glm@@YAII@Z PROC			; glm::bitfieldReverse<unsigned int>, COMDAT

; 293  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 294  : 		return bitfieldReverse(glm::tvec1<genType, glm::defaultp>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldReverse@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@@Z ; glm::bitfieldReverse<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 295  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldReverse@I@glm@@YAII@Z ENDP			; glm::bitfieldReverse<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
i$1 = 48
Return$2 = 56
Compare$3 = 60
tv75 = 64
tv83 = 68
tv87 = 72
?test32_bitfieldReverse@bitfieldReverse@@YAHXZ PROC	; bitfieldReverse::test32_bitfieldReverse

; 278  : 	{

$LN14:
	push	rdi
	sub	rsp, 80					; 00000050H

; 279  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 280  : 		std::size_t const Count = sizeof(Data32) / sizeof(typeU32);

	mov	QWORD PTR Count$[rsp], 7

; 281  : 		
; 282  : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test32_bit
$LN2@test32_bit:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN4@test32_bit:
	cmp	QWORD PTR i$1[rsp], 7
	jae	$LN3@test32_bit

; 283  : 		{
; 284  : 			glm::uint Return = glm::bitfieldReverse(Data32[i].Value);

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	ecx, DWORD PTR [rcx+rax]
	call	??$bitfieldReverse@I@glm@@YAII@Z	; glm::bitfieldReverse<unsigned int>
	mov	DWORD PTR Return$2[rsp], eax

; 285  : 			
; 286  : 			bool Compare = Data32[i].Return == Return;

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+4], edx
	jne	SHORT $LN8@test32_bit
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN9@test32_bit
$LN8@test32_bit:
	mov	DWORD PTR tv75[rsp], 0
$LN9@test32_bit:
	movzx	eax, BYTE PTR tv75[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 287  : 			
; 288  : 			if(Data32[i].Result == SUCCESS)

	imul	rax, QWORD PTR i$1[rsp], 12
	lea	rcx, OFFSET FLAT:?Data32@bitfieldReverse@@3QBU?$type@I@1@B
	cmp	DWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN5@test32_bit

; 289  : 				Error += Compare ? 0 : 1;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN10@test32_bit
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN11@test32_bit
$LN10@test32_bit:
	mov	DWORD PTR tv83[rsp], 1
$LN11@test32_bit:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	SHORT $LN6@test32_bit
$LN5@test32_bit:

; 290  : 			else
; 291  : 				Error += Compare ? 1 : 0;

	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN12@test32_bit
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN13@test32_bit
$LN12@test32_bit:
	mov	DWORD PTR tv87[rsp], 0
$LN13@test32_bit:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
$LN6@test32_bit:

; 292  : 		}

	jmp	$LN2@test32_bit
$LN3@test32_bit:

; 293  : 		
; 294  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 295  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test32_bitfieldReverse@bitfieldReverse@@YAHXZ ENDP	; bitfieldReverse::test32_bitfieldReverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z
_TEXT	SEGMENT
x$ = 16
?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z PROC	; bitfieldReverse::bitfieldReverseUint64, COMDAT

; 187  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 188  : 		x = (x & 0x5555555555555555) <<  1 | (x & 0xAAAAAAAAAAAAAAAA) >>  1;

	mov	rax, 6148914691236517205		; 5555555555555555H
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 1
	mov	rcx, -6148914691236517206		; aaaaaaaaaaaaaaaaH
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 1
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 189  : 		x = (x & 0x3333333333333333) <<  2 | (x & 0xCCCCCCCCCCCCCCCC) >>  2;

	mov	rax, 3689348814741910323		; 3333333333333333H
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 2
	mov	rcx, -3689348814741910324		; ccccccccccccccccH
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 2
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 190  : 		x = (x & 0x0F0F0F0F0F0F0F0F) <<  4 | (x & 0xF0F0F0F0F0F0F0F0) >>  4;

	mov	rax, 1085102592571150095		; 0f0f0f0f0f0f0f0fH
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 4
	mov	rcx, -1085102592571150096		; f0f0f0f0f0f0f0f0H
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 4
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 191  : 		x = (x & 0x00FF00FF00FF00FF) <<  8 | (x & 0xFF00FF00FF00FF00) >>  8;

	mov	rax, 71777214294589695			; 00ff00ff00ff00ffH
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 8
	mov	rcx, -71777214294589696			; ff00ff00ff00ff00H
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 8
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 192  : 		x = (x & 0x0000FFFF0000FFFF) << 16 | (x & 0xFFFF0000FFFF0000) >> 16;

	mov	rax, 281470681808895			; 0000ffff0000ffffH
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 16
	mov	rcx, -281470681808896			; ffff0000ffff0000H
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 16
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 193  : 		x = (x & 0x00000000FFFFFFFF) << 32 | (x & 0xFFFFFFFF00000000) >> 32;

	mov	eax, -1					; ffffffffH
	mov	rcx, QWORD PTR x$[rsp]
	and	rcx, rax
	mov	rax, rcx
	shl	rax, 32					; 00000020H
	mov	rcx, -4294967296			; ffffffff00000000H
	mov	rdx, QWORD PTR x$[rsp]
	and	rdx, rcx
	mov	rcx, rdx
	shr	rcx, 32					; 00000020H
	or	rax, rcx
	mov	QWORD PTR x$[rsp], rax

; 194  : 		return x;

	mov	rax, QWORD PTR x$[rsp]

; 195  : 	}

	pop	rdi
	ret	0
?bitfieldReverseUint64@bitfieldReverse@@YA_K_K@Z ENDP	; bitfieldReverse::bitfieldReverseUint64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
;	COMDAT ?bitfieldReverseUint32@bitfieldReverse@@YAII@Z
_TEXT	SEGMENT
x$ = 16
?bitfieldReverseUint32@bitfieldReverse@@YAII@Z PROC	; bitfieldReverse::bitfieldReverseUint32, COMDAT

; 177  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 178  : 		x = (x & 0x55555555) <<  1 | (x & 0xAAAAAAAA) >>  1;

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 1431655765				; 55555555H
	shl	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, -1431655766			; aaaaaaaaH
	shr	ecx, 1
	or	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 179  : 		x = (x & 0x33333333) <<  2 | (x & 0xCCCCCCCC) >>  2;

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 858993459				; 33333333H
	shl	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, -858993460				; ccccccccH
	shr	ecx, 2
	or	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 180  : 		x = (x & 0x0F0F0F0F) <<  4 | (x & 0xF0F0F0F0) >>  4;

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 252645135				; 0f0f0f0fH
	shl	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, -252645136				; f0f0f0f0H
	shr	ecx, 4
	or	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 181  : 		x = (x & 0x00FF00FF) <<  8 | (x & 0xFF00FF00) >>  8;

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 16711935				; 00ff00ffH
	shl	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, -16711936				; ff00ff00H
	shr	ecx, 8
	or	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 182  : 		x = (x & 0x0000FFFF) << 16 | (x & 0xFFFF0000) >> 16;

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 65535				; 0000ffffH
	shl	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, -65536				; ffff0000H
	shr	ecx, 16
	or	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 183  : 		return x;

	mov	eax, DWORD PTR x$[rsp]

; 184  : 	}

	pop	rdi
	ret	0
?bitfieldReverseUint32@bitfieldReverse@@YAII@Z ENDP	; bitfieldReverse::bitfieldReverseUint32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldExtract@I@glm@@YAIIHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
Value$ = 64
Offset$ = 72
Bits$ = 80
??$bitfieldExtract@I@glm@@YAIIHH@Z PROC			; glm::bitfieldExtract<unsigned int>, COMDAT

; 262  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 263  : 		return bitfieldExtract(tvec1<genIUType>(Value), Offset, Bits).x;

	mov	edx, DWORD PTR Value$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	r9d, DWORD PTR Bits$[rsp]
	mov	r8d, DWORD PTR Offset$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$bitfieldExtract@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@HH@Z ; glm::bitfieldExtract<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 264  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$bitfieldExtract@I@glm@@YAIIHH@Z ENDP			; glm::bitfieldExtract<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
count$ = 36
i$1 = 40
Return$2 = 44
Compare$3 = 48
tv137 = 56
tv87 = 64
?test@bitfieldExtract@@YAHXZ PROC			; bitfieldExtract::test

; 99   : 	{

$LN11:
	push	rdi
	sub	rsp, 80					; 00000050H

; 100  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 101  : 
; 102  : 		glm::uint count = sizeof(Data32) / sizeof(typeU32);

	mov	DWORD PTR count$[rsp], 17

; 103  : 
; 104  : 		for(glm::uint i = 0; i < count; ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test
$LN2@test:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@test:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN3@test

; 105  : 		{
; 106  : 			glm::uint Return = glm::bitfieldExtract(

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	mov	edx, DWORD PTR i$1[rsp]
	imul	rdx, rdx, 20
	lea	r8, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	mov	QWORD PTR tv137[rsp], r8
	mov	r9d, DWORD PTR i$1[rsp]
	imul	r9, r9, 20
	lea	r10, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	mov	r8d, DWORD PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv137[rsp]
	mov	edx, DWORD PTR [rax+rdx+4]
	mov	ecx, DWORD PTR [r10+r9]
	call	??$bitfieldExtract@I@glm@@YAIIHH@Z	; glm::bitfieldExtract<unsigned int>
	mov	DWORD PTR Return$2[rsp], eax

; 107  : 				Data32[i].Value, 
; 108  : 				Data32[i].Offset, 
; 109  : 				Data32[i].Bits);
; 110  : 			
; 111  : 			bool Compare = Data32[i].Return == Return;

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+12], edx
	jne	SHORT $LN9@test
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv87[rsp], 0
$LN10@test:
	movzx	eax, BYTE PTR tv87[rsp]
	mov	BYTE PTR Compare$3[rsp], al

; 112  : 
; 113  : 			if(Data32[i].Result == SUCCESS && Compare)

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	cmp	DWORD PTR [rcx+rax+16], 0
	jne	SHORT $LN5@test
	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	je	SHORT $LN5@test

; 114  : 				continue;

	jmp	$LN2@test
	jmp	SHORT $LN6@test
$LN5@test:

; 115  : 			else if(Data32[i].Result == FAIL && !Compare)

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldExtract@@3QBU?$type@II@1@B
	cmp	DWORD PTR [rcx+rax+16], 1
	jne	SHORT $LN7@test
	movzx	eax, BYTE PTR Compare$3[rsp]
	test	eax, eax
	jne	SHORT $LN7@test

; 116  : 				continue;

	jmp	$LN2@test
$LN7@test:
$LN6@test:

; 117  : 
; 118  : 			Error += 1;

	mov	eax, DWORD PTR Error$[rsp]
	inc	eax
	mov	DWORD PTR Error$[rsp], eax

; 119  : 		}

	jmp	$LN2@test
$LN3@test:

; 120  : 
; 121  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 122  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?test@bitfieldExtract@@YAHXZ ENDP			; bitfieldExtract::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
tv68 = 64
Base$ = 96
Insert$ = 104
Offset$ = 112
Bits$ = 120
??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z PROC		; glm::bitfieldInsert<unsigned int>, COMDAT

; 277  : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 278  : 		return bitfieldInsert(tvec1<genIUType>(Base), tvec1<genIUType>(Insert), Offset, Bits).x;

	mov	rax, QWORD PTR Insert$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR Base$[rsp]
	mov	edx, DWORD PTR [rcx]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	ecx, DWORD PTR Bits$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR Offset$[rsp]
	mov	rcx, QWORD PTR tv68[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$bitfieldInsert@I$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0HH@Z ; glm::bitfieldInsert<unsigned int,0,glm::tvec1>
	mov	eax, DWORD PTR [rax]

; 279  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z ENDP		; glm::bitfieldInsert<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer.cpp
_TEXT	SEGMENT
Error$ = 32
count$ = 36
i$1 = 40
Return$2 = 44
tv80 = 48
tv92 = 56
?test@bitfieldInsert@@YAHXZ PROC			; bitfieldInsert::test

; 41   : 	{

$LN8:
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 43   : 		glm::uint count = sizeof(Data32) / sizeof(typeU32);

	mov	DWORD PTR count$[rsp], 6

; 44   : 		
; 45   : 		for(glm::uint i = 0; i < count; ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@test
$LN2@test:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@test:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN3@test

; 46   : 		{
; 47   : 			glm::uint Return = glm::bitfieldInsert(

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldInsert@@3QBU?$type@II@1@B
	mov	edx, DWORD PTR i$1[rsp]
	imul	rdx, rdx, 20
	lea	r8, OFFSET FLAT:?Data32@bitfieldInsert@@3QBU?$type@II@1@B
	mov	r9d, DWORD PTR i$1[rsp]
	imul	r9, r9, 20
	lea	r10, OFFSET FLAT:?Data32@bitfieldInsert@@3QBU?$type@II@1@B
	lea	r9, QWORD PTR [r10+r9+4]
	mov	QWORD PTR tv80[rsp], r9
	mov	r10d, DWORD PTR i$1[rsp]
	imul	r10, r10, 20
	lea	r11, OFFSET FLAT:?Data32@bitfieldInsert@@3QBU?$type@II@1@B
	add	r11, r10
	mov	r10, r11
	mov	r9d, DWORD PTR [rcx+rax+12]
	mov	r8d, DWORD PTR [r8+rdx+8]
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	??$bitfieldInsert@I@glm@@YAIAEBI0HH@Z	; glm::bitfieldInsert<unsigned int>
	mov	DWORD PTR Return$2[rsp], eax

; 48   : 				Data32[i].Base,
; 49   : 				Data32[i].Insert,
; 50   : 				Data32[i].Offset,
; 51   : 				Data32[i].Bits);
; 52   : 
; 53   : 			Error += Data32[i].Return == Return ? 0 : 1;

	mov	eax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, OFFSET FLAT:?Data32@bitfieldInsert@@3QBU?$type@II@1@B
	mov	edx, DWORD PTR Return$2[rsp]
	cmp	DWORD PTR [rcx+rax+16], edx
	jne	SHORT $LN6@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN7@test
$LN6@test:
	mov	DWORD PTR tv92[rsp], 1
$LN7@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 		}

	jmp	$LN2@test
$LN3@test:

; 55   : 		
; 56   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 57   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?test@bitfieldInsert@@YAHXZ ENDP			; bitfieldInsert::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEAAAEAIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?imulExtended@glm@@YAXHHAEAH0@Z
_TEXT	SEGMENT
Value64$ = 0
x$ = 32
y$ = 40
msb$ = 48
lsb$ = 56
?imulExtended@glm@@YAXHHAEAH0@Z PROC			; glm::imulExtended, COMDAT

; 241  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 242  : 		GLM_STATIC_ASSERT(sizeof(int) == sizeof(int32), "int and int32 size mismatch");
; 243  : 
; 244  : 		int64 Value64 = static_cast<int64>(x) * static_cast<int64>(y);

	movsxd	rax, DWORD PTR x$[rsp]
	movsxd	rcx, DWORD PTR y$[rsp]
	imul	rax, rcx
	mov	QWORD PTR Value64$[rsp], rax

; 245  : 		msb = static_cast<int>(Value64 >> static_cast<int64>(32));

	mov	rax, QWORD PTR Value64$[rsp]
	sar	rax, 32					; 00000020H
	mov	rcx, QWORD PTR msb$[rsp]
	mov	DWORD PTR [rcx], eax

; 246  : 		lsb = static_cast<int>(Value64);

	mov	rax, QWORD PTR lsb$[rsp]
	mov	ecx, DWORD PTR Value64$[rsp]
	mov	DWORD PTR [rax], ecx

; 247  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?imulExtended@glm@@YAXHHAEAH0@Z ENDP			; glm::imulExtended
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?umulExtended@glm@@YAXAEBI0AEAI1@Z
_TEXT	SEGMENT
Value64$ = 0
x$ = 32
y$ = 40
msb$ = 48
lsb$ = 56
?umulExtended@glm@@YAXAEBI0AEAI1@Z PROC			; glm::umulExtended, COMDAT

; 221  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 222  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 223  : 
; 224  : 		uint64 Value64 = static_cast<uint64>(x) * static_cast<uint64>(y);

	mov	rax, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	rax, rcx
	mov	QWORD PTR Value64$[rsp], rax

; 225  : 		msb = static_cast<uint>(Value64 >> static_cast<uint64>(32));

	mov	rax, QWORD PTR Value64$[rsp]
	shr	rax, 32					; 00000020H
	mov	rcx, QWORD PTR msb$[rsp]
	mov	DWORD PTR [rcx], eax

; 226  : 		lsb = static_cast<uint>(Value64);

	mov	rax, QWORD PTR lsb$[rsp]
	mov	ecx, DWORD PTR Value64$[rsp]
	mov	DWORD PTR [rax], ecx

; 227  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?umulExtended@glm@@YAXAEBI0AEAI1@Z ENDP			; glm::umulExtended
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?usubBorrow@glm@@YAIAEBI0AEAI@Z
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
Borrow$ = 48
?usubBorrow@glm@@YAIAEBI0AEAI@Z PROC			; glm::usubBorrow, COMDAT

; 200  : 	{

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 201  : 		GLM_STATIC_ASSERT(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");
; 202  : 
; 203  : 		Borrow = x >= y ? static_cast<uint32>(0) : static_cast<uint32>(1);

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jb	SHORT $LN5@usubBorrow
	mov	DWORD PTR tv65[rsp], 0
	jmp	SHORT $LN6@usubBorrow
$LN5@usubBorrow:
	mov	DWORD PTR tv65[rsp], 1
$LN6@usubBorrow:
	mov	rax, QWORD PTR Borrow$[rsp]
	mov	ecx, DWORD PTR tv65[rsp]
	mov	DWORD PTR [rax], ecx

; 204  : 		if(y >= x)

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jb	SHORT $LN2@usubBorrow

; 205  : 			return y - x;

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	jmp	SHORT $LN1@usubBorrow
	jmp	SHORT $LN3@usubBorrow
$LN2@usubBorrow:

; 206  : 		else
; 207  : 			return static_cast<uint32>((static_cast<int64>(1) << static_cast<int64>(32)) + (static_cast<int64>(y) - static_cast<int64>(x)));

	mov	rax, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR [rcx]
	sub	rax, rcx
	mov	rcx, 4294967296				; 0000000100000000H
	add	rax, rcx
$LN3@usubBorrow:
$LN1@usubBorrow:

; 208  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?usubBorrow@glm@@YAIAEBI0AEAI@Z ENDP			; glm::usubBorrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_integer.inl
;	COMDAT ?uaddCarry@glm@@YAIAEBI0AEAI@Z
_TEXT	SEGMENT
Value64$ = 0
Max32$ = 8
tv68 = 16
x$ = 48
y$ = 56
Carry$ = 64
?uaddCarry@glm@@YAIAEBI0AEAI@Z PROC			; glm::uaddCarry, COMDAT

; 182  : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 183  : 		uint64 const Value64(static_cast<uint64>(x) + static_cast<uint64>(y));

	mov	rax, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	rax, rcx
	mov	QWORD PTR Value64$[rsp], rax

; 184  : 		uint64 const Max32((static_cast<uint64>(1) << static_cast<uint64>(32)) - static_cast<uint64>(1));

	mov	eax, -1					; ffffffffH
	mov	QWORD PTR Max32$[rsp], rax

; 185  : 		Carry = Value64 > Max32 ? 1u : 0u;

	mov	eax, -1					; ffffffffH
	cmp	QWORD PTR Value64$[rsp], rax
	jbe	SHORT $LN3@uaddCarry
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@uaddCarry
$LN3@uaddCarry:
	mov	DWORD PTR tv68[rsp], 0
$LN4@uaddCarry:
	mov	rax, QWORD PTR Carry$[rsp]
	mov	ecx, DWORD PTR tv68[rsp]
	mov	DWORD PTR [rax], ecx

; 186  : 		return static_cast<uint32>(Value64 % (Max32 + static_cast<uint64>(1)));

	xor	edx, edx
	mov	rax, QWORD PTR Value64$[rsp]
	mov	rcx, 4294967296				; 0000000100000000H
	div	rcx
	mov	rax, rdx

; 187  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?uaddCarry@glm@@YAIAEBI0AEAI@Z ENDP			; glm::uaddCarry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?max@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::max, COMDAT

; 731  :     _NODISCARD static constexpr unsigned int(max)() noexcept {

$LN3:
	push	rdi

; 732  :         return UINT_MAX;

	mov	eax, -1					; ffffffffH

; 733  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
END
