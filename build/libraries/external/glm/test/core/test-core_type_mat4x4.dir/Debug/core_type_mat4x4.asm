; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG33770 DB	'mat4(', 0aH, 00H
	ORG $+1
$SG33771 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+1
$SG38884 DB	'%s', 00H
	ORG $+1
$SG33772 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+1
$SG38887 DB	00H, 00H
	ORG $+2
$SG33773 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG33774 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f))', 0aH, 0aH, 00H
	ORG $+3
$SG35016 DB	'mat4(', 0aH, 00H
	ORG $+1
$SG35017 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG35018 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG35019 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG35020 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f))', 0aH, 0aH, 00H
	ORG $+3
$SG36207 DB	'mat4(', 0aH, 00H
	ORG $+1
$SG36208 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG36209 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG36210 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG36211 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f))', 0aH, 0aH, 00H
	ORG $+3
$SG38883 DB	'invalid argument', 00H
	ORG $+3
$SG32628 DB	'mat4(', 0aH, 00H
	ORG $+5
$SG38888 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG38885 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+6
$SG31150 DB	'highp_mat4 inverse', 0aH, 00H
	ORG $+4
$SG38886 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+4
$SG31151 DB	'mediump_mat4 inverse', 0aH, 00H
	ORG $+2
$SG31152 DB	'lowp_mat4 inverse', 0aH, 00H
	ORG $+5
$SG32629 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG32630 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG32631 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f)', 0aH, 00H
	ORG $+5
$SG32632 DB	09H, 'vec4(%2.9f, %2.9f, %2.9f, %2.9f))', 0aH, 0aH, 00H
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?test_inverse_mat4x4@@YAHXZ			; test_inverse_mat4x4
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >
PUBLIC	?test_inverse_dmat4x4@@YAHXZ			; test_inverse_dmat4x4
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ			; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	?length@?$tmat4x4@N$0A@@glm@@SAHXZ		; glm::tmat4x4<double,0>::length
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
PUBLIC	??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z ; glm::inverse<double,0,glm::tmat4x4>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
PUBLIC	??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z ; print<glm::tmat4x4<double,0> >
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ; glm::operator/<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_inverse@@YAHXZ				; test_inverse
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?length@?$tvec4@M$00@glm@@SAHXZ			; glm::tvec4<float,1>::length
PUBLIC	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z		; glm::tvec4<float,1>::operator[]
PUBLIC	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z		; glm::tvec4<float,1>::operator[]
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@XZ			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@M@Z			; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z		; glm::tvec4<float,1>::tvec4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
PUBLIC	?length@?$tmat4x4@M$00@glm@@SAHXZ		; glm::tmat4x4<float,1>::length
PUBLIC	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
PUBLIC	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
PUBLIC	??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z ; glm::inverse<float,1,glm::tmat4x4>
PUBLIC	??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z	; glm::operator*<float,1>
PUBLIC	??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z ; print<glm::tmat4x4<float,1> >
PUBLIC	??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ; glm::epsilonEqual<float,1,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$00@glm@@SAHXZ		; glm::tvec4<bool,1>::length
PUBLIC	??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,1>::operator[]
PUBLIC	??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,1>::operator[]
PUBLIC	??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,1>::tvec4<bool,1>
PUBLIC	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
PUBLIC	?length@?$tvec4@M$01@glm@@SAHXZ			; glm::tvec4<float,2>::length
PUBLIC	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z		; glm::tvec4<float,2>::operator[]
PUBLIC	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z		; glm::tvec4<float,2>::operator[]
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@XZ			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@M@Z			; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z		; glm::tvec4<float,2>::tvec4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z		; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
PUBLIC	?length@?$tmat4x4@M$01@glm@@SAHXZ		; glm::tmat4x4<float,2>::length
PUBLIC	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
PUBLIC	??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z ; glm::inverse<float,2,glm::tmat4x4>
PUBLIC	??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z	; glm::operator*<float,2>
PUBLIC	??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z ; print<glm::tmat4x4<float,2> >
PUBLIC	??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ; glm::epsilonEqual<float,2,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$01@glm@@SAHXZ		; glm::tvec4<bool,2>::length
PUBLIC	??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,2>::operator[]
PUBLIC	??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,2>::operator[]
PUBLIC	??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,2>::tvec4<bool,2>
PUBLIC	??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ; glm::all<2,glm::tvec4>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
PUBLIC	?test_ctr@@YAHXZ				; test_ctr
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
PUBLIC	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
PUBLIC	??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat4x4<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat4x4<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::max_size
PUBLIC	?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_raw
PUBLIC	?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_nonzero
PUBLIC	?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Xlength
PUBLIC	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first
PUBLIC	??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >
PUBLIC	?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat4x4<float,0> >::begin
PUBLIC	?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat4x4<float,0> >::end
PUBLIC	?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ ; std::initializer_list<glm::tmat4x4<float,0> >::size
PUBLIC	?perf_mul@@YAHXZ				; perf_mul
PUBLIC	?test@cast@@YAHXZ				; cast::test
PUBLIC	??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x2<float,0> >
PUBLIC	??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x3<float,0> >
PUBLIC	??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat2x4<float,0> >
PUBLIC	??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x2<float,0> >
PUBLIC	??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x3<float,0> >
PUBLIC	??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat3x4<float,0> >
PUBLIC	??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x2<float,0> >
PUBLIC	??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x3<float,0> >
PUBLIC	??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ	; cast::entry<glm::tmat4x4<float,0> >
PUBLIC	??0repro@@QEAA@XZ				; repro::repro
PUBLIC	??1repro@@QEAA@XZ				; repro::~repro
PUBLIC	?test_size@@YAHXZ				; test_size
PUBLIC	main
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat4x4<float,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1><std::allocator<glm::tmat4x4<float,0> > const &>
PUBLIC	??$_Convert_size@_K@std@@YA_K_K@Z		; std::_Convert_size<unsigned __int64>
PUBLIC	??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z	; glm::operator*<double,0>
PUBLIC	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z	; glm::operator+<double,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z	; glm::operator/<float,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
PUBLIC	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z	; glm::operator*<float,1>
PUBLIC	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z	; glm::operator+<float,1>
PUBLIC	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z	; glm::operator-<float,1>
PUBLIC	??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z ; glm::abs<float,1,glm::tvec4>
PUBLIC	??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ; glm::lessThan<float,1,glm::tvec4>
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z	; glm::operator*<float,2>
PUBLIC	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z	; glm::operator+<float,2>
PUBLIC	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z	; glm::operator-<float,2>
PUBLIC	??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z ; glm::abs<float,2,glm::tvec4>
PUBLIC	??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z ; glm::lessThan<float,2,glm::tvec4>
PUBLIC	??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat4x4<float,0>::operator/=<float>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tmat4x4<float,0> > const &>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >
PUBLIC	??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const *>
PUBLIC	??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z	; glm::operator*<float,2>
PUBLIC	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
PUBLIC	??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z ; glm::operator*<float,2>
PUBLIC	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z	; glm::operator*<float,1>
PUBLIC	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
PUBLIC	??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z ; glm::operator*<float,1>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z	; glm::operator*<double,0>
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z ; glm::operator*<double,0>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z		; std::_Get_size_of_n<64>
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
PUBLIC	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z	; glm::tvec4<double,0>::operator*=<double>
PUBLIC	??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<double,0>::operator+=<double>
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call
PUBLIC	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z		; glm::tvec4<float,1>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,1>::operator+=<float>
PUBLIC	??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,1>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,1,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z		; glm::tvec4<float,2>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,2>::operator+=<float>
PUBLIC	??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,2>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,2,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat4x4<float,0>::operator*=<float>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat4x4<float,0> const * const &>
PUBLIC	??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat4x4<float,0> >
PUBLIC	??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z ; std::_Copy_memmove<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Release
PUBLIC	??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Emplace_back<glm::tmat4x4<float,0> const &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,2>::operator*=<float>
PUBLIC	??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,1>::operator*=<float>
PUBLIC	??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<double,0>::operator*=<double>
PUBLIC	??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<double,0>::operator-=<double>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<double,0,0>::call
PUBLIC	?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<double,0,0>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,1,0>::call
PUBLIC	?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,1,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,1,0>::call
PUBLIC	?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,2,0>::call
PUBLIC	?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,2,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,2,0>::call
PUBLIC	??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_To_address<glm::tmat4x4<float,0> const *>
PUBLIC	??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z ; std::_To_address<glm::tmat4x4<float,0> *>
PUBLIC	??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const &>
PUBLIC	??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::construct<glm::tmat4x4<float,0>,glm::tmat4x4<float,0> const &>
PUBLIC	?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<double,0,0>::call
PUBLIC	??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tmat4x4<float,0> *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f19999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3ff0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse_mat4x4@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+446
	DD	imagerel $unwind$?test_inverse_mat4x4@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+315
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+314
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+309
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+326
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+253
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+315
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+239
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+325
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+491
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+1494
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+894
	DD	imagerel $unwind$??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse_dmat4x4@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+446
	DD	imagerel $unwind$?test_inverse_dmat4x4@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+306
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+834
	DD	imagerel $unwind$??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_operators@@YA_NXZ DD imagerel ?test_operators@@YA_NXZ
	DD	imagerel ?test_operators@@YA_NXZ+503
	DD	imagerel $unwind$?test_operators@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+256
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+274
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+274
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse@@YAHXZ DD imagerel $LN43
	DD	imagerel $LN43+5629
	DD	imagerel $unwind$?test_inverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$00@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$00@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$00@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$00@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$00@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$00@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$00@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$00@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$00@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$00@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$00@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$00@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+894
	DD	imagerel $unwind$??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$00@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$00@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$01@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$01@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$01@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$01@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$01@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$01@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$01@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$01@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+894
	DD	imagerel $unwind$??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$01@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$01@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ctr@@YAHXZ DD imagerel $LN16
	DD	imagerel $LN16+4419
	DD	imagerel $unwind$?test_ctr@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_ctr@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$0@?0??test_ctr@@YAHXZ@4HA
$pdata$?dtor$1@?0??test_ctr@@YAHXZ@4HA DD imagerel ?dtor$1@?0??test_ctr@@YAHXZ@4HA
	DD	imagerel ?dtor$1@?0??test_ctr@@YAHXZ@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??test_ctr@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+533
	DD	imagerel $unwind$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_mul@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$?perf_mul@@YAHXZ
$pdata$?test@cast@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$?test@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+367
	DD	imagerel $unwind$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+367
	DD	imagerel $unwind$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+367
	DD	imagerel $unwind$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+373
	DD	imagerel $unwind$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+390
	DD	imagerel $unwind$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+400
	DD	imagerel $unwind$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0repro@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+93
	DD	imagerel $unwind$??0repro@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0repro@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0repro@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0repro@@QEAA@XZ@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0repro@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1repro@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1repro@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_size@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+312
	DD	imagerel $unwind$?test_size@@YAHXZ
$pdata$main DD	imagerel $LN4
	DD	imagerel $LN4+228
	DD	imagerel $unwind$main
pdata	ENDS
pdata	SEGMENT
$pdata$main$dtor$0 DD imagerel main$dtor$0
	DD	imagerel main$dtor$0+35
	DD	imagerel $unwind$main$dtor$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Convert_size@_K@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Convert_size@_K@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z DD imagerel $LN6
	DD	imagerel $LN6+328
	DD	imagerel $unwind$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA DD imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA DD imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
	DD	imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+6037
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+40
	DD	imagerel $unwind$??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+292
	DD	imagerel $unwind$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+287
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01aH
	DB	053H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031f19H
	DD	0700ce210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z DD 031701H
	DD	01a0117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	019H
	DB	040H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 021e19H
	DD	0700bd20fH
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,2,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,2,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,2,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,1,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,1,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,1,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z DD 031601H
	DD	070128216H
	DD	06011H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	0177cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z DD 033d19H
	DD	01620112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcVarDesc DD 05e8H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$19
	DD	05a8H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$18
	DD	0568H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$17
	DD	04d0H
	DD	080H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$16
	DD	0488H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$15
	DD	0448H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$14
	DD	0408H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$13
	DD	03c8H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$12
	DD	0388H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$11
	DD	0348H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$10
	DD	0308H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$9
	DD	02c8H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$8
	DD	0288H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$7
	DD	0248H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$6
	DD	0208H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$5
	DD	01c8H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$4
	DD	0188H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$3
	DD	0148H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$2
	DD	0108H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$1
	DD	0c8H
	DD	020H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z DB 0aH
	DB	00H
	DB	00H
	DB	09H, 02H
	DB	02H
	DB	'h'
	DB	04H
	DB	0b0H
	DB	02H
	DB	'0'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z
	DD	imagerel $ip2state$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z DD 033511H
	DD	014011cH
	DD	07015H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$0 DB 024H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
	DB	053H
	DB	032H
	DB	00H
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$1 DB 05fH ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$2 DB 05fH ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
	DB	047H
	DB	075H
	DB	061H
	DB	072H
	DB	064H
	DB	00H
	ORG $+13
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcVarDesc DD 088H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
	DD	08H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$1
	DD	034H
	DD	01H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcName$0
	ORG $+144
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcFrameData DD 03H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
	DD	00H
	DQ	FLAT:??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Convert_size@_K@std@@YA_K_K@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD 021301H
	DD	0700f3213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1repro@@QEAA@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0repro@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0repro@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'2'
	DB	02H
	DB	'X'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0repro@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0repro@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0repro@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0repro@@QEAA@XZ
	DD	imagerel $ip2state$??0repro@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0repro@@QEAA@XZ DD 020a11H
	DD	07006720aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0repro@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	025H
	DW	0176H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ DD 042d19H
	DD	031010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0100H ; cast::entry<glm::tmat4x4<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	0a0H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	040H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	016dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0f0H ; cast::entry<glm::tmat4x3<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	090H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	030H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat4x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat4x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat4x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0e0H ; cast::entry<glm::tmat4x2<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	080H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat4x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0f0H ; cast::entry<glm::tmat3x4<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	090H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	030H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0e0H ; cast::entry<glm::tmat3x3<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	080H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	024H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0156H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat3x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat3x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat3x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0d0H ; cast::entry<glm::tmat3x2<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	070H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat3x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x4<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x4<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0e0H ; cast::entry<glm::tmat2x4<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	080H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x4<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0156H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x3<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x3<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0d0H ; cast::entry<glm::tmat2x3<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	070H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x3<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0156H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ DD 032c19H
	DD	02a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0 DB 041H ; cast::entry<glm::tmat2x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1 DB 042H ; cast::entry<glm::tmat2x2<float,0> >
	DB	00H
	ORG $+2
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2 DB 049H ; cast::entry<glm::tmat2x2<float,0> >
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+15
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc DD 0d0H ; cast::entry<glm::tmat2x2<float,0> >
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$2
	DD	070H
	DD	040H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcName$0
	ORG $+144
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData DD 03H ; cast::entry<glm::tmat2x2<float,0> >
	DD	00H
	DQ	FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z DD 041d01H
	DD	011011dH
	DD	060157016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main$dtor$0
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??test_ctr@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_ctr@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	09bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 06dH ; glm::operator/<float,0>
	DB	031H
	DB	05fH
	DB	063H
	DB	06fH
	DB	070H
	DB	079H
	DB	00H
	ORG $+8
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 030H ; glm::operator/<float,0>
	DD	040H
	DQ	FLAT:??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::operator/<float,0>
	DD	00H
	DQ	FLAT:??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$01@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z DD 030d01H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,2>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,2>
	DD	00H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,2>
	DD	040H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$01@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$01@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$01@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$01@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$01@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$00@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z DD 030d01H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,1>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,1>
	DD	00H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,1>
	DD	040H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$00@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$00@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$00@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$00@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$00@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$00@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$00@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700da211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c7210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700dc211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z DD 030d01H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z DD 044319H
	DD	0db0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<double,0>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<double,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<double,0>
	DD	00H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcVarDesc DD 0230H ; glm::operator*<double,0>
	DD	080H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$8
	DD	01e8H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$7
	DD	01a8H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$6
	DD	0168H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$5
	DD	0128H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$4
	DD	0e8H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$3
	DD	0a8H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$2
	DD	068H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	020H
	DQ	FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD 040e01H
	DD	017010eH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z DD 030d01H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,0>
	DD	040H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z DD 031701H
	DD	0260117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 043101H
	DD	0470118H
	DD	060107011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	030H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6 DB 04dH ; glm::operator*<float,0>
	DB	06fH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8 DB 04dH ; glm::operator*<float,0>
	DB	075H
	DB	06cH
	DB	033H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	031H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10 DB 041H ; glm::operator*<float,0>
	DB	064H
	DB	064H
	DB	032H
	DB	00H
	ORG $+3
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData DD 0bH ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcVarDesc DD 0208H ; glm::operator*<float,0>
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$10
	DD	01d8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$9
	DD	01a8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_size@@YAHXZ
	DD	013H
	DD	011fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_ctr@@YAHXZ
	DD	028H
	DD	01129H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse@@YAHXZ
	DD	024H
	DD	015e4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_operators@@YA_NXZ
	DD	024H
	DD	01deH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse_dmat4x4@@YAHXZ
	DD	024H
	DD	01a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse_mat4x4@@YAHXZ
	DD	024H
	DD	01a5H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_inverse_mat4x4@@YAHXZ DD 032c19H
	DD	0360109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01a8H
$unwind$?test_inverse_dmat4x4@@YAHXZ DD 032c19H
	DD	0560109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	02a8H
$unwind$?test_operators@@YA_NXZ DD 032c19H
	DD	06c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0350H
$unwind$?test_inverse@@YAHXZ DD 032c19H
	DD	017e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0be8H
$unwind$?test_ctr@@YAHXZ DD 043019H
	DD	0113010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?test_ctr@@YAHXZ
	DD	0882H
$cppxdata$?test_ctr@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_ctr@@YAHXZ
	DD	imagerel $ip2state$?test_ctr@@YAHXZ
$stateUnwindMap$?test_ctr@@YAHXZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_ctr@@YAHXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??test_ctr@@YAHXZ@4HA
$ip2state$?test_ctr@@YAHXZ DB 0aH
	DB	00H
	DB	00H
	DB	0cdH, '-'
	DB	02H
	DB	0b5H, 0dH
	DB	04H
	DB	'Q', 08H
	DB	02H
	DB	01cH
	DB	00H
$cppxdata$main DB 028H
	DD	imagerel $stateUnwindMap$main
	DD	imagerel $ip2state$main
	ORG $+1
$unwind$?dtor$0@?0??test_ctr@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??test_ctr@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_mul@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test@cast@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?test_size@@YAHXZ DD 031b19H
	DD	0220109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0108H
$unwind$main DD	021711H
	DD	070029206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$main
$stateUnwindMap$main DB 02H
	DB	0eH
	DD	imagerel main$dtor$0
$ip2state$main DB 06H
	DB	00H
	DB	00H
	DB	'T'
	DB	02H
	DB	'M', 02H
	DB	00H
	ORG $+2
$unwind$main$dtor$0 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?test_inverse_mat4x4@@YAHXZ$rtcName$0 DB 04dH		; test_inverse_mat4x4
	DB	061H
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_mat4x4@@YAHXZ$rtcName$1 DB 049H		; test_inverse_mat4x4
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_mat4x4@@YAHXZ$rtcName$2 DB 052H		; test_inverse_mat4x4
	DB	065H
	DB	073H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_mat4x4@@YAHXZ$rtcVarDesc DD 0100H		; test_inverse_mat4x4
	DD	040H
	DQ	FLAT:?test_inverse_mat4x4@@YAHXZ$rtcName$2
	DD	0a0H
	DD	040H
	DQ	FLAT:?test_inverse_mat4x4@@YAHXZ$rtcName$1
	DD	040H
	DD	040H
	DQ	FLAT:?test_inverse_mat4x4@@YAHXZ$rtcName$0
	ORG $+144
?test_inverse_mat4x4@@YAHXZ$rtcFrameData DD 03H		; test_inverse_mat4x4
	DD	00H
	DQ	FLAT:?test_inverse_mat4x4@@YAHXZ$rtcVarDesc
?test_inverse_dmat4x4@@YAHXZ$rtcName$0 DB 04dH		; test_inverse_dmat4x4
	DB	061H
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_dmat4x4@@YAHXZ$rtcName$1 DB 049H		; test_inverse_dmat4x4
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_dmat4x4@@YAHXZ$rtcName$2 DB 052H		; test_inverse_dmat4x4
	DB	065H
	DB	073H
	DB	030H
	DB	00H
	ORG $+3
?test_inverse_dmat4x4@@YAHXZ$rtcFrameData DD 03H	; test_inverse_dmat4x4
	DD	00H
	DQ	FLAT:?test_inverse_dmat4x4@@YAHXZ$rtcVarDesc
?test_operators@@YA_NXZ$rtcName$0 DB 06cH		; test_operators
	DB	00H
	ORG $+6
?test_inverse_dmat4x4@@YAHXZ$rtcVarDesc DD 0180H	; test_inverse_dmat4x4
	DD	080H
	DQ	FLAT:?test_inverse_dmat4x4@@YAHXZ$rtcName$2
	DD	0e0H
	DD	080H
	DQ	FLAT:?test_inverse_dmat4x4@@YAHXZ$rtcName$1
	DD	040H
	DD	080H
	DQ	FLAT:?test_inverse_dmat4x4@@YAHXZ$rtcName$0
	ORG $+144
?test_operators@@YA_NXZ$rtcName$1 DB 06dH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$2 DB 075H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$3 DB 076H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$4 DB 078H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$5 DB 061H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$6 DB 062H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$7 DB 06eH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$8 DB 06fH		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$9 DB 070H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcName$10 DB 071H		; test_operators
	DB	00H
	ORG $+2
?test_operators@@YA_NXZ$rtcFrameData DD 0bH		; test_operators
	DD	00H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcVarDesc
?test_inverse@@YAHXZ$rtcName$0 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_operators@@YA_NXZ$rtcVarDesc DD 02f0H		; test_operators
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$10
	DD	0290H
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$9
	DD	0230H
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$8
	DD	01d0H
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$7
	DD	0198H
	DD	010H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$6
	DD	0168H
	DD	010H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$5
	DD	0144H
	DD	04H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$2
	DD	090H
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$1
	DD	030H
	DD	040H
	DQ	FLAT:?test_operators@@YA_NXZ$rtcName$0
	ORG $+528
?test_inverse@@YAHXZ$rtcName$1 DB 049H			; test_inverse
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?test_inverse@@YAHXZ$rtcName$2 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$3 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$0 DB 06dH			; test_ctr
	DB	030H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$4 DB 049H			; test_inverse
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?test_inverse@@YAHXZ$rtcName$5 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$6 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$1 DB 056H			; test_ctr
	DB	00H
	ORG $+2
?test_inverse@@YAHXZ$rtcName$7 DB 049H			; test_inverse
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?test_inverse@@YAHXZ$rtcName$8 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$9 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$2 DB 06dH			; test_ctr
	DB	031H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$10 DB 049H			; test_inverse
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?test_inverse@@YAHXZ$rtcName$11 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$12 DB 04dH			; test_inverse
	DB	061H
	DB	074H
	DB	072H
	DB	069H
	DB	078H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$3 DB 06dH			; test_ctr
	DB	032H
	DB	00H
	ORG $+1
?test_inverse@@YAHXZ$rtcName$13 DB 049H			; test_inverse
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+7
?test_inverse@@YAHXZ$rtcVarDesc DD 0530H		; test_inverse
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$13
	DD	04d0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$12
	DD	0470H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$11
	DD	0410H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$10
	DD	03b0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$9
	DD	0350H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$8
	DD	02f0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$7
	DD	0290H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$6
	DD	0230H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$5
	DD	01d0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$4
	DD	0170H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$3
	DD	0110H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$2
	DD	0b0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$0
	ORG $+672
?test_inverse@@YAHXZ$rtcFrameData DD 0eH		; test_inverse
	DD	00H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcVarDesc
?test_ctr@@YAHXZ$rtcName$4 DB 06dH			; test_ctr
	DB	033H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$5 DB 076H			; test_ctr
	DB	031H
	DB	00H
	ORG $+1
?test_ctr@@YAHXZ$rtcName$6 DB 076H			; test_ctr
	DB	032H
	DB	00H
	ORG $+5
?test_ctr@@YAHXZ$rtcVarDesc DD 0418H			; test_ctr
	DD	020H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$6
	DD	0348H
	DD	020H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$5
	DD	01f8H
	DD	020H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$4
	DD	01a0H
	DD	040H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$3
	DD	0140H
	DD	040H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$2
	DD	0108H
	DD	010H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$1
	DD	0b0H
	DD	040H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcName$0
	ORG $+336
?test_ctr@@YAHXZ$rtcFrameData DD 07H			; test_ctr
	DD	00H
	DQ	FLAT:?test_ctr@@YAHXZ$rtcVarDesc
main$rtcName$0 DB 052H
	DB	065H
	DB	070H
	DB	072H
	DB	06fH
	DB	00H
	ORG $+2
main$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
	ORG $+8
main$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:main$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tmat4x4<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tmat4x4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<double,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	subsd	xmm0, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	subsd	xmm1, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm2, QWORD PTR [rax+8]
	subsd	xmm2, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm3, QWORD PTR [rax]
	subsd	xmm3, QWORD PTR [rcx]
	movsd	QWORD PTR tv80[rsp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movsd	xmm0, QWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::construct<glm::tmat4x4<float,0>,glm::tmat4x4<float,0> const &>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tmat4x4@M$0A@@glm@@@std@@YAPEAXPEAU?$tmat4x4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tmat4x4<float,0> *>
	mov	rdx, rax
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const &>
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::construct<glm::tmat4x4<float,0>,glm::tmat4x4<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z PROC ; std::forward<glm::tmat4x4<float,0> const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z ENDP ; std::forward<glm::tmat4x4<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tmat4x4<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tmat4x4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tmat4x4<float,0> const *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tmat4x4<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,2,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,2,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,2,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,1,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,1,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,1,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<double,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	addsd	xmm0, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	addsd	xmm1, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm2, QWORD PTR [rax+8]
	addsd	xmm2, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm3, QWORD PTR [rax]
	addsd	xmm3, QWORD PTR [rcx]
	movsd	QWORD PTR tv80[rsp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movsd	xmm0, QWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<double,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	mulsd	xmm0, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	mulsd	xmm1, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm2, QWORD PTR [rax+8]
	mulsd	xmm2, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm3, QWORD PTR [rax]
	mulsd	xmm3, QWORD PTR [rcx]
	movsd	QWORD PTR tv80[rsp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movsd	xmm0, QWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,1,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,1,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,2,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,2,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG38883
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG38884
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG38885
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG38886
	lea	rdx, OFFSET FLAT:$SG38887
	lea	rcx, OFFSET FLAT:$SG38888
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<double,0>::operator-=<double>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<double,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<double,0>::operator-=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<double,0>::operator*=<double>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<double,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<double,0>::operator*=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,1>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,1,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,1>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,2>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,2>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Emplace_back<glm::tmat4x4<float,0> const &>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@AEBU?$tmat4x4@M$0A@@glm@@@std@@YAAEBU?$tmat4x4@M$0A@@glm@@AEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const &>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat4x4<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tmat4x4@M$0A@@glm@@AEBU12@@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@QEAU?$tmat4x4@M$0A@@glm@@AEBU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::construct<glm::tmat4x4<float,0>,glm::tmat4x4<float,0> const &>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 64					; 00000040H
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Emplace_back<glm::tmat4x4<float,0> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat4x4<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z PROC ; std::_Copy_memmove<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_To_address<glm::tmat4x4<float,0> const *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_To_address<glm::tmat4x4<float,0> const *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tmat4x4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tmat4x4@M$0A@@glm@@@Z ; std::_To_address<glm::tmat4x4<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z ENDP ; std::_Copy_memmove<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tmat4x4<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tmat4x4<float,0> const * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tmat4x4<float,0> const * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 104
this$ = 144
m$ = 152
??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tmat4x4<float,0>::operator*=<float>, COMDAT

; 340  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 341  : 		return (*this = *this * m);

	mov	r8, QWORD PTR m$[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 342  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tmat4x4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,2,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$01Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$01@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,2,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,2,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,2>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,2>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,2>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,2>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,2>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$01$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,2,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,2>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,1,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$00Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$00@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,1,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,1,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,1>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,1,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,1>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,1>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,1,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,1>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,1>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@M@Z		; glm::tvec4<float,1>::tvec4<float,1>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$00$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,1,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,1>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call, COMDAT

; 140  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 141  : 			return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z) || (v1.w != v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 1
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 142  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 432  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 433  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 434  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 446  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 447  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 448  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<double,0>::operator+=<double>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<double,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<double,0>::operator+=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
scalar$ = 136
??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z PROC		; glm::tvec4<double,0>::operator*=<double>, COMDAT

; 411  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movsd	xmm1, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<double,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z ENDP		; glm::tvec4<double,0>::operator*=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>, COMDAT

; 224  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 220  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 221  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 222  : 		z(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 223  : 		w(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 224  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>, COMDAT

; 278  : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 274  : 		x(static_cast<T>(a.x)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 275  : 		y(static_cast<T>(a.y)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0

; 276  : 		z(static_cast<T>(a.z)),

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0

; 277  : 		w(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 278  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT

; 80   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT

; 66   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<64>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 288230376151711743			; 03ffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 288230376151711743			; 03ffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 64		; 00000040H
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
$T4 = 144
tv66 = 176
tv74 = 184
tv82 = 192
__$ReturnUdt$ = 224
m$ = 232
s$ = 240
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z PROC ; glm::operator*<double,0>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 208				; 000000d0H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z ENDP ; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<double,0>::operator-=<double>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<double,0>::operator*=<double>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z PROC	; glm::operator*<float,1>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z PROC	; glm::operator*<float,1>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,1>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z PROC	; glm::operator*<float,2>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,2>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 1673 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1674 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1675 :     // note: only called internally from elsewhere in the STL
; 1676 :     using _Ptrval = typename _Alloc::value_type*;
; 1677 : 
; 1678 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat4x4<float,0> const * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1679 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEBU?$tmat4x4@M$0A@@glm@@@std@@YA?A_TAEBQEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tmat4x4<float,0> const * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1680 : 
; 1681 :     if constexpr (conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1682 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>) {
; 1683 : #if _HAS_CXX20
; 1684 :         if (!_STD is_constant_evaluated())
; 1685 : #endif // _HAS_CXX20
; 1686 :         {
; 1687 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tmat4x4@M$0A@@glm@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tmat4x4<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEBU?$tmat4x4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@PEBU12@0PEAU12@@Z ; std::_Copy_memmove<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> *>

; 1688 :             _Dest += _ULast - _UFirst;

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 6
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Dest$[rsp], rax

; 1689 :             return _Dest;

	mov	rax, QWORD PTR _Dest$[rsp]
	jmp	SHORT $LN1@Uninitiali

; 1690 :         }
; 1691 :     }
; 1692 : 
; 1693 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tmat4x4@M$0A@@glm@@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >

; 1694 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1695 :         _Backout._Emplace_back(*_UFirst);

	mov	rdx, QWORD PTR _UFirst$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@AEBU?$tmat4x4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Emplace_back<glm::tmat4x4<float,0> const &>

; 1696 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1697 : 
; 1698 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1699 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tmat4x4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z PROC ; std::forward<glm::tmat4x4<float,0> const *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z ENDP ; std::forward<glm::tmat4x4<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >, COMDAT

; 33   :     _CONSTEXPR20 ~_Tidy_guard() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 34   :         if (_Target) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy_guard

; 35   :             _Target->_Tidy();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Tidy
$LN2@Tidy_guard:

; 36   :         }
; 37   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1334 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1335 :         if (_Ptr) {

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Container_

; 1336 :             _Delete_plain_internal(_Al, _Ptr);

	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1337 :         }
; 1338 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al_$ = 72
_Mycont$ = 80
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1320 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 1321 :         // create a new _Container_proxy pointing at _Mycont
; 1322 :         _Ptr = _Unfancy(_Al_.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al_$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx], rax

; 1323 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	rcx, QWORD PTR _Mycont$[rsp]
	call	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1324 :         _Mycont._Myproxy = _Ptr;

	mov	rax, QWORD PTR _Mycont$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1325 :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z PROC ; std::forward<std::allocator<glm::tmat4x4<float,0> > const &>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z ENDP ; std::forward<std::allocator<glm::tmat4x4<float,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 104
this$ = 128
m$ = 136
??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tmat4x4<float,0>::operator/=<float>, COMDAT

; 358  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 359  : 		return *this *= inverse(m);

	mov	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$?XM@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat4x4<float,0>::operator*=<float>

; 360  : 	}

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tmat4x4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z PROC ; glm::lessThan<float,2,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$01@glm@@SAHXZ		; glm::tvec4<float,2>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$01@glm@@SAHXZ		; glm::tvec4<float,2>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,2>::tvec4<bool,2>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$01@glm@@SAHXZ		; glm::tvec4<float,2>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,2>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z ENDP ; glm::lessThan<float,2,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z PROC ; glm::abs<float,2,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$01Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$01@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,2,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z ENDP ; glm::abs<float,2,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z PROC	; glm::operator-<float,2>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,2>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ENDP	; glm::operator-<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z PROC	; glm::operator+<float,2>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$01@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,2>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ENDP	; glm::operator+<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z PROC	; glm::operator*<float,2>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$01@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,2>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator-<float,2>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator-<float,2>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator-<float,2>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator-<float,2>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$01@glm@@QEAA@HHHH@Z	; glm::tvec4<float,2>::tvec4<float,2><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z	; glm::tvec4<float,2>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEAAAEAMH@Z	; glm::tvec4<float,2>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@AEBM@Z ; glm::operator*<float,2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z PROC ; glm::lessThan<float,1,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,1>::tvec4<bool,1>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,1>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ENDP ; glm::lessThan<float,1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z PROC ; glm::abs<float,1,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$00Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$00@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,1,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z ENDP ; glm::abs<float,1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z PROC	; glm::operator-<float,1>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,1>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ENDP	; glm::operator-<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z PROC	; glm::operator+<float,1>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$00@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,1>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ENDP	; glm::operator+<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z PROC	; glm::operator*<float,1>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$00@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,1>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator-<float,1>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator-<float,1>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator-<float,1>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator-<float,1>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$00@glm@@QEAA@HHHH@Z	; glm::tvec4<float,1>::tvec4<float,1><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z	; glm::tvec4<float,1>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEAAAEAMH@Z	; glm::tvec4<float,1>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@AEBM@Z ; glm::operator*<float,1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 950  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 951  : 		return detail::compute_vec4_nequal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call

; 952  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 724  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 725  : 		return tvec4<T, P>(v) /= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 726  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
scalar$ = 88
v$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC	; glm::operator/<float,0>, COMDAT

; 736  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 737  : 		return tvec4<T, P>(scalar) /= v;

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, rax
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 738  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z PROC	; glm::operator+<double,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<double,0>::operator+=<double>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v$ = 104
scalar$ = 112
??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 694  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	movsd	xmm1, QWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XN@?$tvec4@N$0A@@glm@@QEAAAEAU01@N@Z ; glm::tvec4<double,0>::operator*=<double>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 56
Coef03$ = 64
Coef04$ = 72
Coef06$ = 80
Coef07$ = 88
Coef08$ = 96
Coef10$ = 104
Coef11$ = 112
Coef12$ = 120
Coef14$ = 128
Coef15$ = 136
Coef16$ = 144
Coef18$ = 152
Coef19$ = 160
Coef20$ = 168
Coef22$ = 176
Coef23$ = 184
Fac0$ = 200
Fac1$ = 264
Fac2$ = 328
Fac3$ = 392
Fac4$ = 456
Fac5$ = 520
Vec0$ = 584
Vec1$ = 648
Vec2$ = 712
Vec3$ = 776
Inv0$ = 840
Inv1$ = 904
Inv2$ = 968
Inv3$ = 1032
SignA$ = 1096
SignB$ = 1160
Inverse$ = 1232
Row0$ = 1384
Dot0$ = 1448
Dot1$ = 1496
OneOverDeterminant$ = 1512
$T23 = 1536
$T24 = 1568
$T25 = 1600
$T26 = 1632
$T27 = 1664
$T28 = 1696
$T29 = 1728
$T30 = 1760
$T31 = 1792
$T32 = 1824
$T33 = 1856
$T34 = 1888
$T35 = 1920
$T36 = 1952
$T37 = 1984
$T38 = 2016
$T39 = 2048
$T40 = 2080
$T41 = 2112
$T42 = 2144
tv68 = 2176
tv76 = 2184
tv81 = 2192
tv95 = 2200
tv135 = 2208
tv140 = 2216
tv154 = 2224
tv162 = 2232
tv167 = 2240
tv181 = 2248
tv189 = 2256
tv194 = 2264
tv208 = 2272
tv216 = 2280
tv221 = 2288
tv235 = 2296
tv243 = 2304
tv248 = 2312
tv262 = 2320
tv270 = 2328
tv275 = 2336
tv289 = 2344
tv297 = 2352
tv302 = 2360
tv316 = 2368
tv324 = 2376
tv329 = 2384
tv343 = 2392
tv351 = 2400
tv356 = 2408
tv370 = 2416
tv378 = 2424
tv383 = 2432
tv397 = 2440
tv405 = 2448
tv410 = 2456
tv424 = 2464
tv432 = 2472
tv437 = 2480
tv451 = 2488
tv459 = 2496
tv464 = 2504
tv478 = 2512
tv486 = 2520
tv491 = 2528
tv505 = 2536
tv513 = 2544
tv518 = 2552
tv532 = 2560
tv540 = 2568
tv545 = 2576
tv559 = 2584
tv567 = 2592
tv572 = 2600
tv618 = 2608
tv625 = 2616
tv632 = 2624
tv647 = 2632
tv654 = 2640
tv661 = 2648
tv676 = 2656
tv683 = 2664
tv690 = 2672
tv705 = 2680
tv712 = 2688
tv719 = 2696
tv729 = 2704
tv735 = 2712
tv780 = 2720
tv786 = 2728
tv799 = 2736
tv805 = 2744
tv818 = 2752
tv824 = 2760
tv848 = 2768
tv853 = 2776
tv858 = 2784
tv873 = 2792
tv880 = 2800
tv887 = 2808
__$ArrayPad$ = 2816
__$ReturnUdt$ = 2848
m$ = 2856
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2832				; 00000b10H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 696				; 000002b8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2848]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv76[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv135[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv162[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv189[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv216[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv243[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv270[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv297[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv324[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv351[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv378[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv405[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv432[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv459[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv486[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv513[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv540[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	mulsd	xmm0, QWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv567[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movsd	xmm0, QWORD PTR Coef03$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef02$[rsp]
	movsd	xmm2, QWORD PTR Coef00$[rsp]
	movsd	xmm1, QWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movsd	xmm0, QWORD PTR Coef07$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef06$[rsp]
	movsd	xmm2, QWORD PTR Coef04$[rsp]
	movsd	xmm1, QWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movsd	xmm0, QWORD PTR Coef11$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef10$[rsp]
	movsd	xmm2, QWORD PTR Coef08$[rsp]
	movsd	xmm1, QWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movsd	xmm0, QWORD PTR Coef15$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef14$[rsp]
	movsd	xmm2, QWORD PTR Coef12$[rsp]
	movsd	xmm1, QWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movsd	xmm0, QWORD PTR Coef19$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef18$[rsp]
	movsd	xmm2, QWORD PTR Coef16$[rsp]
	movsd	xmm1, QWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movsd	xmm0, QWORD PTR Coef23$[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR Coef22$[rsp]
	movsd	xmm2, QWORD PTR Coef20$[rsp]
	movsd	xmm1, QWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movsd	xmm0, QWORD PTR Dot0$[rsp]
	addsd	xmm0, QWORD PTR Dot0$[rsp+8]
	movsd	xmm1, QWORD PTR Dot0$[rsp+16]
	addsd	xmm1, QWORD PTR Dot0$[rsp+24]
	addsd	xmm0, xmm1
	movsd	QWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR Dot1$[rsp]
	movsd	QWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@AEBN@Z ; glm::operator*<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2832				; 00000b10H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2sd xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z
_TEXT	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>, COMDAT

; 1902 :     _CONSTEXPR20 void _Construct_n(_CRT_GUARDOVERFLOW const size_type _Count, _Valty&&... _Val) {

$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]

; 1903 :         // Dispatches between the three sized constructions.
; 1904 :         // 1-arg -> value-construction, e.g. vector(5)
; 1905 :         // 2-arg -> fill, e.g. vector(5, "meow")
; 1906 :         // 3-arg -> sized range construction, e.g. vector{"Hello", "Fluffy", "World"}
; 1907 :         auto& _Al       = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1908 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	rdx, QWORD PTR _Al$[rsp]
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat4x4<float,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 1909 :         auto& _My_data  = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1910 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	r8, QWORD PTR _My_data$[rsp]
	mov	rdx, QWORD PTR _Alproxy$[rsp]
	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1

; 1911 :         if (_Count != 0) {

	cmp	QWORD PTR _Count$[rsp], 0
	je	$LN2@Construct_

; 1912 :             _Buy_nonzero(_Count);

	mov	rdx, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_nonzero

; 1913 :             _Tidy_guard<vector> _Guard{this};

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _Guard$6[rsp], rax

; 1914 :             if constexpr (sizeof...(_Val) == 0) {
; 1915 :                 _My_data._Mylast = _Uninitialized_value_construct_n(_My_data._Myfirst, _Count, _Al);
; 1916 :             } else if constexpr (sizeof...(_Val) == 1) {
; 1917 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Valty..., const _Ty&>);
; 1918 :                 _My_data._Mylast = _Uninitialized_fill_n(_My_data._Myfirst, _Count, _Val..., _Al);
; 1919 :             } else if constexpr (sizeof...(_Val) == 2) {
; 1920 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

	mov	rcx, QWORD PTR <_Val_1>$[rsp]
	call	??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const *>
	mov	QWORD PTR tv88[rsp], rax
	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@PEBU?$tmat4x4@M$0A@@glm@@@std@@YA$$QEAPEBU?$tmat4x4@M$0A@@glm@@AEAPEBU12@@Z ; std::forward<glm::tmat4x4<float,0> const *>
	mov	r9, QWORD PTR _Al$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	r8, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_copy@PEBU?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAPEAU?$tmat4x4@M$0A@@glm@@QEBU12@0PEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_copy<glm::tmat4x4<float,0> const *,std::allocator<glm::tmat4x4<float,0> > >
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 1921 :             } else {
; 1922 :                 static_assert(_Always_false<_Ty>, "Should be unreachable");
; 1923 :             }
; 1924 :             _ASAN_VECTOR_CREATE;
; 1925 :             _Guard._Target = nullptr;

	mov	QWORD PTR _Guard$6[rsp], 0

; 1926 :         }

	lea	rcx, QWORD PTR _Guard$6[rsp]
	call	??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >
$LN2@Construct_:

; 1927 : 
; 1928 :         _Proxy._Release();

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1929 :     }

	lea	rcx, QWORD PTR _Proxy$[rsp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA PROC ; `std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Proxy$[rbp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA ENDP ; `std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_Alproxy$ = 40
$S2$ = 52
_My_data$ = 72
_Proxy$ = 88
_Guard$6 = 136
tv88 = 152
this$ = 176
_Count$ = 184
<_Val_0>$ = 192
<_Val_1>$ = 200
?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA PROC ; `std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Guard$6[rbp]
	call	??1?$_Tidy_guard@V?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@@std@@QEAA@XZ ; std::_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >::~_Tidy_guard<std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z@4HA ENDP ; `std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Convert_size@_K@std@@YA_K_K@Z
_TEXT	SEGMENT
_Len$ = 16
??$_Convert_size@_K@std@@YA_K_K@Z PROC			; std::_Convert_size<unsigned __int64>, COMDAT

; 960  : _NODISCARD constexpr _Size_type _Convert_size(const size_t _Len) noexcept(is_same_v<_Size_type, size_t>) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 961  :     // convert size_t to _Size_type, avoiding truncation
; 962  :     if constexpr (!is_same_v<_Size_type, size_t>) {
; 963  :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 964  :             _Xlength_error("size_t too long for _Size_type");
; 965  :         }
; 966  :     }
; 967  : 
; 968  :     return static_cast<_Size_type>(_Len);

	mov	rax, QWORD PTR _Len$[rsp]

; 969  : }

	pop	rdi
	ret	0
??$_Convert_size@_K@std@@YA_K_K@Z ENDP			; std::_Convert_size<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1><std::allocator<glm::tmat4x4<float,0> > const &>, COMDAT

; 1375 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR _Val1$[rsp]
	call	??$forward@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@AEBV10@@Z ; std::forward<std::allocator<glm::tmat4x4<float,0> > const &>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1><std::allocator<glm::tmat4x4<float,0> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat4x4<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 32
Repro$ = 56
$T4 = 68
main	PROC

; 312  : {

$LN4:
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 313  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 314  : 
; 315  : 	repro Repro;

	lea	rcx, QWORD PTR Repro$[rsp]
	call	??0repro@@QEAA@XZ			; repro::repro
	npad	1

; 316  : 
; 317  : 	Error += cast::test();

	call	?test@cast@@YAHXZ			; cast::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 318  : 	Error += test_ctr();

	call	?test_ctr@@YAHXZ			; test_ctr
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 319  : 	Error += test_inverse_dmat4x4();

	call	?test_inverse_dmat4x4@@YAHXZ		; test_inverse_dmat4x4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 320  : 	Error += test_inverse_mat4x4();

	call	?test_inverse_mat4x4@@YAHXZ		; test_inverse_mat4x4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 321  : 	Error += test_operators();

	call	?test_operators@@YA_NXZ			; test_operators
	movzx	eax, al
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 322  : 	Error += test_inverse();

	call	?test_inverse@@YAHXZ			; test_inverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 323  : 	Error += test_size();

	call	?test_size@@YAHXZ			; test_size
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 324  : 
; 325  : 	Error += perf_mul();

	call	?perf_mul@@YAHXZ			; perf_mul
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 326  : 
; 327  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T4[rsp], eax
	lea	rcx, QWORD PTR Repro$[rsp]
	call	??1repro@@QEAA@XZ			; repro::~repro
	mov	eax, DWORD PTR $T4[rsp]

; 328  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Repro$ = 56
$T4 = 68
main$dtor$0 PROC
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Repro$[rbp]
	call	??1repro@@QEAA@XZ			; repro::~repro
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
main$dtor$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 48
$T2 = 112
tv67 = 248
tv72 = 252
tv76 = 256
tv80 = 260
__$ArrayPad$ = 264
?test_size@@YAHXZ PROC					; test_size

; 298  : {

$LN11:
	push	rdi
	sub	rsp, 272				; 00000110H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 299  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 300  : 
; 301  : 	Error += 64 == sizeof(glm::mat4) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 302  : 	Error += 128 == sizeof(glm::dmat4) ? 0 : 1;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 303  : 	Error += glm::mat4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN3@test_size
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_size
$LN3@test_size:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_size:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 304  : 	Error += glm::dmat4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ		; glm::tmat4x4<double,0>::tmat4x4<double,0>
	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN5@test_size
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_size
$LN5@test_size:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_size:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 305  : 	Error += glm::mat4::length() == 4 ? 0 : 1;

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN7@test_size
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN8@test_size
$LN7@test_size:
	mov	DWORD PTR tv76[rsp], 1
$LN8@test_size:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 306  : 	Error += glm::dmat4::length() == 4 ? 0 : 1;

	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN9@test_size
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN10@test_size
$LN9@test_size:
	mov	DWORD PTR tv80[rsp], 1
$LN10@test_size:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 307  : 
; 308  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 309  : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
?test_size@@YAHXZ ENDP					; test_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??1repro@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1repro@@QEAA@XZ PROC					; repro::~repro, COMDAT

; 292  : 	~repro(){delete this->matrix;}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T1[rsp], rax
	mov	edx, 64					; 00000040H
	mov	rcx, QWORD PTR $T1[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??1repro@@QEAA@XZ ENDP					; repro::~repro
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??0repro@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv76 = 48
this$ = 80
??0repro@@QEAA@XZ PROC					; repro::repro, COMDAT

; 291  : 	repro(){ this->matrix = new glm::mat4(); }

$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	ecx, 64					; 00000040H
	call	??2@YAPEAX_K@Z				; operator new
	mov	QWORD PTR $T2[rsp], rax
	cmp	QWORD PTR $T2[rsp], 0
	je	SHORT $LN3@repro
	mov	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	QWORD PTR tv76[rsp], rax
	jmp	SHORT $LN4@repro
$LN3@repro:
	mov	QWORD PTR tv76[rsp], 0
$LN4@repro:
	mov	rax, QWORD PTR tv76[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0repro@@QEAA@XZ ENDP					; repro::repro
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv76 = 48
this$ = 80
?dtor$0@?0???0repro@@QEAA@XZ@4HA PROC			; `repro::repro'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	mov	edx, 64					; 00000040H
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0repro@@QEAA@XZ@4HA ENDP			; `repro::repro'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 64
B$ = 160
Identity$ = 256
i$6 = 324
length$7 = 328
$T8 = 344
$T9 = 348
$T10 = 352
tv74 = 360
tv85 = 368
__$ArrayPad$ = 376
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x4<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rax, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv85[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 144
Identity$ = 240
i$6 = 308
length$7 = 312
$T8 = 328
$T9 = 332
$T10 = 336
tv76 = 344
tv87 = 352
__$ArrayPad$ = 360
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x3<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 368				; 00000170H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T9[rsp], xmm0
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 368				; 00000170H
	pop	rdi
	ret	0
??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 128
Identity$ = 224
i$6 = 292
length$7 = 296
$T8 = 312
$T9 = 316
tv76 = 320
tv87 = 328
__$ArrayPad$ = 336
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat4x2<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat4x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 144
Identity$ = 240
i$6 = 308
length$7 = 312
$T8 = 328
$T9 = 332
tv76 = 336
tv87 = 344
__$ArrayPad$ = 352
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x4<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 368				; 00000170H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 368				; 00000170H
	pop	rdi
	ret	0
??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 128
Identity$ = 224
i$6 = 292
length$7 = 296
$T8 = 312
$T9 = 316
tv76 = 320
tv87 = 328
__$ArrayPad$ = 336
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x3<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 112
Identity$ = 208
i$6 = 276
length$7 = 280
$T8 = 296
$T9 = 300
tv76 = 304
tv87 = 312
__$ArrayPad$ = 320
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat3x2<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat3x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 128
Identity$ = 224
i$6 = 292
length$7 = 296
$T8 = 312
$T9 = 316
tv76 = 320
tv87 = 328
__$ArrayPad$ = 336
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x4<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 112
Identity$ = 208
i$6 = 276
length$7 = 280
$T8 = 296
$T9 = 300
tv76 = 304
tv87 = 312
__$ArrayPad$ = 320
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x3<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x3<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 112
Identity$ = 208
i$6 = 276
length$7 = 280
$T8 = 296
$T9 = 300
tv76 = 304
tv87 = 312
__$ArrayPad$ = 320
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ PROC	; cast::entry<glm::tmat2x2<float,0> >, COMDAT

; 258  : 	{

$LN8:
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 259  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 260  : 
; 261  : 		genType A(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 262  : 		glm::mat4x4 B(A);

	lea	rdx, QWORD PTR A$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 263  : 		glm::mat4x4 Identity(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T8[rsp], xmm0
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 264  : 
; 265  : 		for(glm::length_t i = 0, length = B.length(); i < length; ++i)

	mov	DWORD PTR i$6[rsp], 0
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	mov	DWORD PTR length$7[rsp], eax
	jmp	SHORT $LN4@entry
$LN2@entry:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN4@entry:
	mov	eax, DWORD PTR length$7[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN3@entry

; 266  : 			Error += glm::all(glm::equal(B[i], Identity[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	mov	edx, DWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@entry
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN7@entry
$LN6@entry:
	mov	DWORD PTR tv87[rsp], 1
$LN7@entry:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@entry
$LN3@entry:

; 267  : 
; 268  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 269  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 336				; 00000150H
	pop	rdi
	ret	0
??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ ENDP	; cast::entry<glm::tmat2x2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 32
?test@cast@@YAHXZ PROC					; cast::test

; 272  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 273  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 274  : 		
; 275  : 		Error += entry<glm::mat2x2>();

	call	??$entry@U?$tmat2x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 276  : 		Error += entry<glm::mat2x3>();

	call	??$entry@U?$tmat2x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 277  : 		Error += entry<glm::mat2x4>();

	call	??$entry@U?$tmat2x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat2x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 278  : 		Error += entry<glm::mat3x2>();

	call	??$entry@U?$tmat3x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 279  : 		Error += entry<glm::mat3x3>();

	call	??$entry@U?$tmat3x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 280  : 		Error += entry<glm::mat3x4>();

	call	??$entry@U?$tmat3x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat3x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 281  : 		Error += entry<glm::mat4x2>();

	call	??$entry@U?$tmat4x2@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x2<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 282  : 		Error += entry<glm::mat4x3>();

	call	??$entry@U?$tmat4x3@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x3<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 283  : 		Error += entry<glm::mat4x4>();

	call	??$entry@U?$tmat4x4@M$0A@@glm@@@cast@@YAHXZ ; cast::entry<glm::tmat4x4<float,0> >
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 284  : 
; 285  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 286  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@cast@@YAHXZ ENDP					; cast::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 0
?perf_mul@@YAHXZ PROC					; perf_mul

; 246  : {

$LN3:
	push	rdi
	sub	rsp, 16

; 247  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 248  : 
; 249  : 
; 250  : 
; 251  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 252  : }

	add	rsp, 16
	pop	rdi
	ret	0
?perf_mul@@YAHXZ ENDP					; perf_mul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 16
?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ PROC ; std::initializer_list<glm::tmat4x4<float,0> >::size, COMDAT

; 45   :     _NODISCARD constexpr size_t size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   :         return static_cast<size_t>(_Last - _First);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	sar	rax, 6

; 47   :     }

	pop	rdi
	ret	0
?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ ENDP ; std::initializer_list<glm::tmat4x4<float,0> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ PROC ; std::initializer_list<glm::tmat4x4<float,0> >::end, COMDAT

; 41   :     _NODISCARD constexpr const _Elem* end() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 42   :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 43   :     }

	pop	rdi
	ret	0
?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ENDP ; std::initializer_list<glm::tmat4x4<float,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ PROC ; std::initializer_list<glm::tmat4x4<float,0> >::begin, COMDAT

; 37   :     _NODISCARD constexpr const _Elem* begin() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   :         return _First;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]

; 39   :     }

	pop	rdi
	ret	0
?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ENDP ; std::initializer_list<glm::tmat4x4<float,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\initializer_list
;	COMDAT ??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 16
_First_arg$ = 24
_Last_arg$ = 32
??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z PROC ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >, COMDAT

; 35   :         : _First(_First_arg), _Last(_Last_arg) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _First_arg$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Last_arg$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z ENDP ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tmat4x4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tmat4x4<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 6
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat4x4<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newcapacity$ = 56
?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_nonzero, COMDAT

; 1841 :     _CONSTEXPR20 void _Buy_nonzero(const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1842 :         // allocate array with _Newcapacity elements
; 1843 : #ifdef _ENABLE_STL_INTERNAL_CHECK
; 1844 :         auto& _My_data    = _Mypair._Myval2;
; 1845 :         pointer& _Myfirst = _My_data._Myfirst;
; 1846 :         pointer& _Mylast  = _My_data._Mylast;
; 1847 :         pointer& _Myend   = _My_data._Myend;
; 1848 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1849 :         _STL_INTERNAL_CHECK(0 < _Newcapacity);
; 1850 : #endif // _ENABLE_STL_INTERNAL_CHECK
; 1851 : 
; 1852 :         if (_Newcapacity > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::max_size
	cmp	QWORD PTR _Newcapacity$[rsp], rax
	jbe	SHORT $LN2@Buy_nonzer

; 1853 :             _Xlength();

	call	?_Xlength@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Xlength
$LN2@Buy_nonzer:

; 1854 :         }
; 1855 : 
; 1856 :         _Buy_raw(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_raw
$LN3@Buy_nonzer:

; 1857 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Buy_nonzero@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_nonzero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z
_TEXT	SEGMENT
_My_data$ = 32
_Myfirst$ = 40
_Mylast$ = 48
_Myend$ = 56
_Newvec$ = 64
this$ = 96
_Newcapacity$ = 104
?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_raw, COMDAT

; 1825 :     _CONSTEXPR20 void _Buy_raw(const size_type _Newcapacity) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1826 :         // allocate array with _Newcapacity elements
; 1827 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1828 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1829 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1830 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1831 : 
; 1832 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1833 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1834 : 
; 1835 :         const auto _Newvec = _Getal().allocate(_Newcapacity);

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, rax
	call	?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z ; std::allocator<glm::tmat4x4<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1836 :         _Myfirst           = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1837 :         _Mylast            = _Newvec;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1838 :         _Myend             = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 64	; 00000040H
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1839 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Buy_raw@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K@Z ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tmat4x4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tmat4x4<float,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
_Ilist$ = 88
_Al$ = 96
??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z PROC ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >, COMDAT

; 702  :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR _Al$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tmat4x4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tmat4x4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tmat4x4<float,0> > >,1><std::allocator<glm::tmat4x4<float,0> > const &>

; 703  :         _Construct_n(_Convert_size<size_type>(_Ilist.size()), _Ilist.begin(), _Ilist.end());

	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?end@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat4x4<float,0> >::end
	mov	QWORD PTR $T2[rsp], rax
	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?begin@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBAPEBU?$tmat4x4@M$0A@@glm@@XZ ; std::initializer_list<glm::tmat4x4<float,0> >::begin
	mov	QWORD PTR $T3[rsp], rax
	mov	rcx, QWORD PTR _Ilist$[rsp]
	call	?size@?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEBA_KXZ ; std::initializer_list<glm::tmat4x4<float,0> >::size
	mov	rcx, rax
	call	??$_Convert_size@_K@std@@YA_K_K@Z	; std::_Convert_size<unsigned __int64>
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Construct_n@PEBU?$tmat4x4@M$0A@@glm@@PEBU12@@?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@AEAAX_K$$QEAPEBU?$tmat4x4@M$0A@@glm@@1@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::_Construct_n<glm::tmat4x4<float,0> const *,glm::tmat4x4<float,0> const *>

; 704  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ENDP ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 288230376151711743			; 03ffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tmat4x4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tmat4x4<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0EA@@std@@YA_K_K@Z	; std::_Get_size_of_n<64>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAPEAU?$tmat4x4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tmat4x4<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tmat4x4<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 64		; 00000040H
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAAXQEAU?$tmat4x4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tmat4x4<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv80 = 112
tv94 = 116
tv140 = 120
tv154 = 124
this$ = 160
x1$ = 168
y1$ = 176
z1$ = 184
w1$ = 192
x2$ = 200
y2$ = 208
z2$ = 216
w2$ = 224
x3$ = 232
y3$ = 240
z3$ = 248
w3$ = 256
x4$ = 264
y4$ = 272
z4$ = 280
w4$ = 288
??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 116  : 		GLM_STATIC_ASSERT(std::numeric_limits<X1>::is_iec559 || std::numeric_limits<X1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
; 117  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y1>::is_iec559 || std::numeric_limits<Y1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
; 118  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z1>::is_iec559 || std::numeric_limits<Z1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
; 119  : 		GLM_STATIC_ASSERT(std::numeric_limits<W1>::is_iec559 || std::numeric_limits<W1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");
; 120  : 
; 121  : 		GLM_STATIC_ASSERT(std::numeric_limits<X2>::is_iec559 || std::numeric_limits<X2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 5th parameter type invalid.");
; 122  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y2>::is_iec559 || std::numeric_limits<Y2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 6th parameter type invalid.");
; 123  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z2>::is_iec559 || std::numeric_limits<Z2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 7th parameter type invalid.");
; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<W2>::is_iec559 || std::numeric_limits<W2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 8th parameter type invalid.");
; 125  : 
; 126  : 		GLM_STATIC_ASSERT(std::numeric_limits<X3>::is_iec559 || std::numeric_limits<X3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 9th parameter type invalid.");
; 127  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y3>::is_iec559 || std::numeric_limits<Y3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 10th parameter type invalid.");
; 128  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z3>::is_iec559 || std::numeric_limits<Z3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 11th parameter type invalid.");
; 129  : 		GLM_STATIC_ASSERT(std::numeric_limits<W3>::is_iec559 || std::numeric_limits<W3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 12th parameter type invalid.");
; 130  : 
; 131  : 		GLM_STATIC_ASSERT(std::numeric_limits<X4>::is_iec559 || std::numeric_limits<X4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 13th parameter type invalid.");
; 132  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y4>::is_iec559 || std::numeric_limits<Y4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 14th parameter type invalid.");
; 133  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z4>::is_iec559 || std::numeric_limits<Z4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 15th parameter type invalid.");
; 134  : 		GLM_STATIC_ASSERT(std::numeric_limits<W4>::is_iec559 || std::numeric_limits<W4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 16th parameter type invalid.");
; 135  : 
; 136  : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));

	mov	rax, QWORD PTR w1$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 137  : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));

	mov	rax, QWORD PTR w2$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv94[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv94[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 138  : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));

	mov	rax, QWORD PTR w3$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z3$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv140[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv140[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 139  : 		this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4), value_type(w4));

	mov	rax, QWORD PTR w4$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z4$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y4$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x4$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv154[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv154[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 140  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 144
m0$ = 176
V$ = 264
m1$ = 320
m2$ = 416
i$10 = 484
i$11 = 488
m3$ = 504
$T12 = 560
v1$ = 840
$T13 = 896
v2$ = 1048
$T14 = 1104
$T15 = 1256
$T16 = 1272
$T17 = 1288
$T18 = 1304
$T19 = 1320
$T20 = 1324
$T21 = 1328
$T22 = 1332
$T23 = 1336
$T24 = 1340
$T25 = 1344
$T26 = 1348
$T27 = 1352
$T28 = 1356
$T29 = 1360
$T30 = 1364
$T31 = 1368
$T32 = 1372
$T33 = 1376
$T34 = 1380
$T35 = 1384
$T36 = 1400
$T37 = 1416
$T38 = 1432
$T39 = 1448
$T40 = 1452
$T41 = 1456
$T42 = 1460
$T43 = 1464
$T44 = 1468
$T45 = 1472
$T46 = 1476
$T47 = 1480
$T48 = 1484
$T49 = 1488
$T50 = 1492
$T51 = 1496
$T52 = 1500
$T53 = 1504
$T54 = 1508
$T55 = 1512
$T56 = 1516
$T57 = 1520
$T58 = 1524
$T59 = 1528
$T60 = 1532
$T61 = 1536
$T62 = 1540
$T63 = 1544
$T64 = 1548
$T65 = 1552
$T66 = 1556
$T67 = 1560
$T68 = 1564
$T69 = 1568
$T70 = 1572
$T71 = 1576
$T72 = 1580
$T73 = 1584
$T74 = 1588
$T75 = 1592
$T76 = 1596
$T77 = 1600
$T78 = 1604
$T79 = 1608
$T80 = 1612
$T81 = 1616
$T82 = 1620
$T83 = 1624
$T84 = 1628
$T85 = 1632
$T86 = 1636
$T87 = 1640
$T88 = 1644
$T89 = 1648
$T90 = 1652
$T91 = 1656
$T92 = 1660
$T93 = 1664
$T94 = 1668
$T95 = 1672
$T96 = 1676
$T97 = 1680
$T98 = 1684
$T99 = 1688
$T100 = 1692
$T101 = 1696
$T102 = 1700
$T103 = 1704
$T104 = 1708
$T105 = 1712
$T106 = 1720
$T107 = 1736
$T108 = 1740
$T109 = 1744
$T110 = 1748
$T111 = 1752
$T112 = 1756
$T113 = 1760
$T114 = 1764
$T115 = 1768
$T116 = 1772
$T117 = 1776
$T118 = 1780
$T119 = 1784
$T120 = 1788
$T121 = 1792
$T122 = 1796
$T123 = 1800
$T124 = 1804
$T125 = 1808
$T126 = 1812
$T127 = 1816
$T128 = 1820
$T129 = 1824
$T130 = 1828
$T131 = 1832
$T132 = 1836
$T133 = 1840
$T134 = 1844
$T135 = 1848
$T136 = 1852
$T137 = 1856
$T138 = 1860
$T139 = 1864
$T140 = 1872
$T141 = 1888
$T142 = 1892
$T143 = 1908
$T144 = 1924
$T145 = 1940
$T146 = 1956
$T147 = 1972
$T148 = 1988
$T149 = 2004
$T150 = 2024
$T151 = 2040
$T152 = 2048
$T153 = 2064
$T154 = 2080
tv67 = 2096
tv74 = 2104
tv81 = 2112
tv178 = 2120
tv189 = 2128
tv229 = 2136
tv240 = 2144
tv245 = 2152
tv389 = 2160
tv467 = 2168
__$ArrayPad$ = 2176
?test_ctr@@YAHXZ PROC					; test_ctr

; 180  : {

$LN16:
	push	rsi
	push	rdi
	sub	rsp, 2200				; 00000898H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 514				; 00000202H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 181  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 182  : 
; 183  : #if GLM_HAS_TRIVIAL_QUERIES
; 184  : 	//Error += std::is_trivially_default_constructible<glm::mat4>::value ? 0 : 1;
; 185  : 	//Error += std::is_trivially_copy_assignable<glm::mat4>::value ? 0 : 1;
; 186  : 	Error += std::is_trivially_copyable<glm::mat4>::value ? 0 : 1;
; 187  : 	//Error += std::is_copy_constructible<glm::mat4>::value ? 0 : 1;
; 188  : 	//Error += std::has_trivial_copy_constructor<glm::mat4>::value ? 0 : 1;
; 189  : #endif
; 190  : 
; 191  : #if(GLM_HAS_INITIALIZER_LISTS)
; 192  : 	glm::mat4 m0(

	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv67[rsp], rax
	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv74[rsp], rax
	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv81[rsp], rax
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m0$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 193  : 		glm::vec4(0, 1, 2, 3), 
; 194  : 		glm::vec4(4, 5, 6, 7),
; 195  : 		glm::vec4(8, 9, 10, 11),
; 196  : 		glm::vec4(12, 13, 14, 15));
; 197  : 
; 198  : 	assert(sizeof(m0) == 4 * 4 * 4);
; 199  : 
; 200  : 	glm::vec4 V{0, 1, 2, 3};

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR V$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 201  : 
; 202  : 	glm::mat4 m1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};

	mov	DWORD PTR $T34[rsp], 0
	mov	DWORD PTR $T33[rsp], 1
	mov	DWORD PTR $T32[rsp], 2
	mov	DWORD PTR $T31[rsp], 3
	mov	DWORD PTR $T30[rsp], 4
	mov	DWORD PTR $T29[rsp], 5
	mov	DWORD PTR $T28[rsp], 6
	mov	DWORD PTR $T27[rsp], 7
	mov	DWORD PTR $T26[rsp], 8
	mov	DWORD PTR $T25[rsp], 9
	mov	DWORD PTR $T24[rsp], 10
	mov	DWORD PTR $T23[rsp], 11
	mov	DWORD PTR $T22[rsp], 12
	mov	DWORD PTR $T21[rsp], 13
	mov	DWORD PTR $T20[rsp], 14
	mov	DWORD PTR $T19[rsp], 15
	lea	rax, QWORD PTR $T19[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T20[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T21[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T22[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T23[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T24[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T25[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T26[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T27[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T28[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T29[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T30[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T31[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T32[rsp]
	lea	r8, QWORD PTR $T33[rsp]
	lea	rdx, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR m1$[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>

; 203  : 
; 204  : 	glm::mat4 m2{

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	rax, QWORD PTR $T35[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T36[rsp]
	lea	r8, QWORD PTR $T37[rsp]
	lea	rdx, QWORD PTR $T38[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 205  : 		{0, 1, 2, 3},
; 206  : 		{4, 5, 6, 7},
; 207  : 		{8, 9, 10, 11},
; 208  : 		{12, 13, 14, 15}};
; 209  : 
; 210  : 	for(glm::length_t i = 0; i < m0.length(); ++i)

	mov	DWORD PTR i$10[rsp], 0
	jmp	SHORT $LN4@test_ctr
$LN2@test_ctr:
	mov	eax, DWORD PTR i$10[rsp]
	inc	eax
	mov	DWORD PTR i$10[rsp], eax
$LN4@test_ctr:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$10[rsp], eax
	jge	$LN3@test_ctr

; 211  : 		Error += glm::all(glm::equal(m0[i], m2[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, DWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR m0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_ctr
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN10@test_ctr
$LN9@test_ctr:
	mov	DWORD PTR tv189[rsp], 1
$LN10@test_ctr:
	mov	eax, DWORD PTR tv189[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN2@test_ctr
$LN3@test_ctr:

; 212  : 
; 213  : 	for(glm::length_t i = 0; i < m1.length(); ++i)

	mov	DWORD PTR i$11[rsp], 0
	jmp	SHORT $LN7@test_ctr
$LN5@test_ctr:
	mov	eax, DWORD PTR i$11[rsp]
	inc	eax
	mov	DWORD PTR i$11[rsp], eax
$LN7@test_ctr:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$11[rsp], eax
	jge	$LN6@test_ctr

; 214  : 		Error += glm::all(glm::equal(m1[i], m2[i])) ? 0 : 1;

	mov	edx, DWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv229[rsp], rax
	mov	edx, DWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv229[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_ctr
	mov	DWORD PTR tv240[rsp], 0
	jmp	SHORT $LN12@test_ctr
$LN11@test_ctr:
	mov	DWORD PTR tv240[rsp], 1
$LN12@test_ctr:
	mov	eax, DWORD PTR tv240[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax
	jmp	$LN5@test_ctr
$LN6@test_ctr:

; 215  : 
; 216  : 	std::vector<glm::mat4> m3{

	mov	DWORD PTR $T57[rsp], 0
	mov	DWORD PTR $T56[rsp], 1
	mov	DWORD PTR $T55[rsp], 2
	mov	DWORD PTR $T54[rsp], 3
	mov	DWORD PTR $T53[rsp], 4
	mov	DWORD PTR $T52[rsp], 5
	mov	DWORD PTR $T51[rsp], 6
	mov	DWORD PTR $T50[rsp], 7
	mov	DWORD PTR $T49[rsp], 8
	mov	DWORD PTR $T48[rsp], 9
	mov	DWORD PTR $T47[rsp], 10
	mov	DWORD PTR $T46[rsp], 11
	mov	DWORD PTR $T45[rsp], 12
	mov	DWORD PTR $T44[rsp], 13
	mov	DWORD PTR $T43[rsp], 14
	mov	DWORD PTR $T42[rsp], 15
	lea	rax, QWORD PTR $T42[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T43[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T44[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T45[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T46[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T47[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T48[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T49[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T50[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T51[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T52[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T53[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T54[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T55[rsp]
	lea	r8, QWORD PTR $T56[rsp]
	lea	rdx, QWORD PTR $T57[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	DWORD PTR $T73[rsp], 0
	mov	DWORD PTR $T72[rsp], 1
	mov	DWORD PTR $T71[rsp], 2
	mov	DWORD PTR $T70[rsp], 3
	mov	DWORD PTR $T69[rsp], 4
	mov	DWORD PTR $T68[rsp], 5
	mov	DWORD PTR $T67[rsp], 6
	mov	DWORD PTR $T66[rsp], 7
	mov	DWORD PTR $T65[rsp], 8
	mov	DWORD PTR $T64[rsp], 9
	mov	DWORD PTR $T63[rsp], 10
	mov	DWORD PTR $T62[rsp], 11
	mov	DWORD PTR $T61[rsp], 12
	mov	DWORD PTR $T60[rsp], 13
	mov	DWORD PTR $T59[rsp], 14
	mov	DWORD PTR $T58[rsp], 15
	lea	rax, QWORD PTR $T58[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T59[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T60[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T61[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T62[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T63[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T64[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T65[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T66[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T67[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T68[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T69[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T70[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T71[rsp]
	lea	r8, QWORD PTR $T72[rsp]
	lea	rdx, QWORD PTR $T73[rsp]
	lea	rcx, QWORD PTR $T12[rsp+64]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	DWORD PTR $T89[rsp], 0
	mov	DWORD PTR $T88[rsp], 1
	mov	DWORD PTR $T87[rsp], 2
	mov	DWORD PTR $T86[rsp], 3
	mov	DWORD PTR $T85[rsp], 4
	mov	DWORD PTR $T84[rsp], 5
	mov	DWORD PTR $T83[rsp], 6
	mov	DWORD PTR $T82[rsp], 7
	mov	DWORD PTR $T81[rsp], 8
	mov	DWORD PTR $T80[rsp], 9
	mov	DWORD PTR $T79[rsp], 10
	mov	DWORD PTR $T78[rsp], 11
	mov	DWORD PTR $T77[rsp], 12
	mov	DWORD PTR $T76[rsp], 13
	mov	DWORD PTR $T75[rsp], 14
	mov	DWORD PTR $T74[rsp], 15
	lea	rax, QWORD PTR $T74[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T75[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T76[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T77[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T78[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T79[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T80[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T81[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T82[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T83[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T84[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T85[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T86[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T87[rsp]
	lea	r8, QWORD PTR $T88[rsp]
	lea	rdx, QWORD PTR $T89[rsp]
	lea	rcx, QWORD PTR $T12[rsp+128]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	DWORD PTR $T105[rsp], 0
	mov	DWORD PTR $T104[rsp], 1
	mov	DWORD PTR $T103[rsp], 2
	mov	DWORD PTR $T102[rsp], 3
	mov	DWORD PTR $T101[rsp], 4
	mov	DWORD PTR $T100[rsp], 5
	mov	DWORD PTR $T99[rsp], 6
	mov	DWORD PTR $T98[rsp], 7
	mov	DWORD PTR $T97[rsp], 8
	mov	DWORD PTR $T96[rsp], 9
	mov	DWORD PTR $T95[rsp], 10
	mov	DWORD PTR $T94[rsp], 11
	mov	DWORD PTR $T93[rsp], 12
	mov	DWORD PTR $T92[rsp], 13
	mov	DWORD PTR $T91[rsp], 14
	mov	DWORD PTR $T90[rsp], 15
	lea	rax, QWORD PTR $T90[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T91[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T92[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T93[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T94[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T95[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T96[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T97[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T98[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T99[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T100[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T101[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T102[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T103[rsp]
	lea	r8, QWORD PTR $T104[rsp]
	lea	rdx, QWORD PTR $T105[rsp]
	lea	rcx, QWORD PTR $T12[rsp+192]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >
	mov	QWORD PTR tv245[rsp], rax
	lea	rcx, QWORD PTR $T12[rsp+256]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR $T152[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR tv245[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR $T152[rsp]
	lea	rcx, QWORD PTR m3$[rsp]
	call	??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	npad	1

; 217  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
; 218  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
; 219  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
; 220  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}};
; 221  : 
; 222  : 	std::vector<glm::mat4> v1{

	mov	DWORD PTR $T123[rsp], 0
	mov	DWORD PTR $T122[rsp], 1
	mov	DWORD PTR $T121[rsp], 2
	mov	DWORD PTR $T120[rsp], 3
	mov	DWORD PTR $T119[rsp], 4
	mov	DWORD PTR $T118[rsp], 5
	mov	DWORD PTR $T117[rsp], 6
	mov	DWORD PTR $T116[rsp], 7
	mov	DWORD PTR $T115[rsp], 8
	mov	DWORD PTR $T114[rsp], 9
	mov	DWORD PTR $T113[rsp], 10
	mov	DWORD PTR $T112[rsp], 11
	mov	DWORD PTR $T111[rsp], 12
	mov	DWORD PTR $T110[rsp], 13
	mov	DWORD PTR $T109[rsp], 14
	mov	DWORD PTR $T108[rsp], 15
	lea	rax, QWORD PTR $T108[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T109[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T110[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T111[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T112[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T113[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T114[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T115[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T116[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T117[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T118[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T119[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T120[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T121[rsp]
	lea	r8, QWORD PTR $T122[rsp]
	lea	rdx, QWORD PTR $T123[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	DWORD PTR $T139[rsp], 0
	mov	DWORD PTR $T138[rsp], 1
	mov	DWORD PTR $T137[rsp], 2
	mov	DWORD PTR $T136[rsp], 3
	mov	DWORD PTR $T135[rsp], 4
	mov	DWORD PTR $T134[rsp], 5
	mov	DWORD PTR $T133[rsp], 6
	mov	DWORD PTR $T132[rsp], 7
	mov	DWORD PTR $T131[rsp], 8
	mov	DWORD PTR $T130[rsp], 9
	mov	DWORD PTR $T129[rsp], 10
	mov	DWORD PTR $T128[rsp], 11
	mov	DWORD PTR $T127[rsp], 12
	mov	DWORD PTR $T126[rsp], 13
	mov	DWORD PTR $T125[rsp], 14
	mov	DWORD PTR $T124[rsp], 15
	lea	rax, QWORD PTR $T124[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T125[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T126[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T127[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T128[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T129[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T130[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T131[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T132[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T133[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T134[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T135[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T136[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T137[rsp]
	lea	r8, QWORD PTR $T138[rsp]
	lea	rdx, QWORD PTR $T139[rsp]
	lea	rcx, QWORD PTR $T13[rsp+64]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	lea	rcx, QWORD PTR $T107[rsp]
	call	??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >
	mov	QWORD PTR tv389[rsp], rax
	lea	rcx, QWORD PTR $T13[rsp+128]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T140[rsp]
	call	??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR $T153[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR tv389[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR $T153[rsp]
	lea	rcx, QWORD PTR v1$[rsp]
	call	??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	npad	1

; 223  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
; 224  : 		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}};
; 225  : 
; 226  : 	std::vector<glm::mat4> v2{

	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T145[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T144[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T143[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T142[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	rax, QWORD PTR $T142[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T143[rsp]
	lea	r8, QWORD PTR $T144[rsp]
	lea	rdx, QWORD PTR $T145[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T149[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 7
	mov	r9d, 6
	mov	r8d, 5
	mov	edx, 4
	lea	rcx, QWORD PTR $T148[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 11
	mov	r9d, 10
	mov	r8d, 9
	mov	edx, 8
	lea	rcx, QWORD PTR $T147[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	DWORD PTR [rsp+32], 15
	mov	r9d, 14
	mov	r8d, 13
	mov	edx, 12
	lea	rcx, QWORD PTR $T146[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	lea	rax, QWORD PTR $T146[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T147[rsp]
	lea	r8, QWORD PTR $T148[rsp]
	lea	rdx, QWORD PTR $T149[rsp]
	lea	rcx, QWORD PTR $T14[rsp+64]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	lea	rcx, QWORD PTR $T141[rsp]
	call	??0?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tmat4x4<float,0> >::allocator<glm::tmat4x4<float,0> >
	mov	QWORD PTR tv467[rsp], rax
	lea	rcx, QWORD PTR $T14[rsp+128]
	mov	r8, rcx
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T150[rsp]
	call	??0?$initializer_list@U?$tmat4x4@M$0A@@glm@@@std@@QEAA@PEBU?$tmat4x4@M$0A@@glm@@0@Z ; std::initializer_list<glm::tmat4x4<float,0> >::initializer_list<glm::tmat4x4<float,0> >
	lea	rcx, QWORD PTR $T154[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR tv467[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR $T154[rsp]
	lea	rcx, QWORD PTR v2$[rsp]
	call	??0?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@V?$initializer_list@U?$tmat4x4@M$0A@@glm@@@1@AEBV?$allocator@U?$tmat4x4@M$0A@@glm@@@1@@Z ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >

; 227  : 		{
; 228  : 			{ 0, 1, 2, 3 },
; 229  : 			{ 4, 5, 6, 7 },
; 230  : 			{ 8, 9, 10, 11 },
; 231  : 			{ 12, 13, 14, 15 }
; 232  : 		},
; 233  : 		{
; 234  : 			{ 0, 1, 2, 3 },
; 235  : 			{ 4, 5, 6, 7 },
; 236  : 			{ 8, 9, 10, 11 },
; 237  : 			{ 12, 13, 14, 15 }
; 238  : 		}};
; 239  : 
; 240  : #endif//GLM_HAS_INITIALIZER_LISTS
; 241  : 
; 242  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T151[rsp], eax
	lea	rcx, QWORD PTR v2$[rsp]
	call	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	npad	1
	lea	rcx, QWORD PTR v1$[rsp]
	call	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	npad	1
	lea	rcx, QWORD PTR m3$[rsp]
	call	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	mov	eax, DWORD PTR $T151[rsp]

; 243  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ctr@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2200				; 00000898H
	pop	rdi
	pop	rsi
	ret	0
?test_ctr@@YAHXZ ENDP					; test_ctr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 144
m0$ = 176
V$ = 264
m1$ = 320
m2$ = 416
i$10 = 484
i$11 = 488
m3$ = 504
$T12 = 560
v1$ = 840
$T13 = 896
v2$ = 1048
$T14 = 1104
$T15 = 1256
$T16 = 1272
$T17 = 1288
$T18 = 1304
$T19 = 1320
$T20 = 1324
$T21 = 1328
$T22 = 1332
$T23 = 1336
$T24 = 1340
$T25 = 1344
$T26 = 1348
$T27 = 1352
$T28 = 1356
$T29 = 1360
$T30 = 1364
$T31 = 1368
$T32 = 1372
$T33 = 1376
$T34 = 1380
$T35 = 1384
$T36 = 1400
$T37 = 1416
$T38 = 1432
$T39 = 1448
$T40 = 1452
$T41 = 1456
$T42 = 1460
$T43 = 1464
$T44 = 1468
$T45 = 1472
$T46 = 1476
$T47 = 1480
$T48 = 1484
$T49 = 1488
$T50 = 1492
$T51 = 1496
$T52 = 1500
$T53 = 1504
$T54 = 1508
$T55 = 1512
$T56 = 1516
$T57 = 1520
$T58 = 1524
$T59 = 1528
$T60 = 1532
$T61 = 1536
$T62 = 1540
$T63 = 1544
$T64 = 1548
$T65 = 1552
$T66 = 1556
$T67 = 1560
$T68 = 1564
$T69 = 1568
$T70 = 1572
$T71 = 1576
$T72 = 1580
$T73 = 1584
$T74 = 1588
$T75 = 1592
$T76 = 1596
$T77 = 1600
$T78 = 1604
$T79 = 1608
$T80 = 1612
$T81 = 1616
$T82 = 1620
$T83 = 1624
$T84 = 1628
$T85 = 1632
$T86 = 1636
$T87 = 1640
$T88 = 1644
$T89 = 1648
$T90 = 1652
$T91 = 1656
$T92 = 1660
$T93 = 1664
$T94 = 1668
$T95 = 1672
$T96 = 1676
$T97 = 1680
$T98 = 1684
$T99 = 1688
$T100 = 1692
$T101 = 1696
$T102 = 1700
$T103 = 1704
$T104 = 1708
$T105 = 1712
$T106 = 1720
$T107 = 1736
$T108 = 1740
$T109 = 1744
$T110 = 1748
$T111 = 1752
$T112 = 1756
$T113 = 1760
$T114 = 1764
$T115 = 1768
$T116 = 1772
$T117 = 1776
$T118 = 1780
$T119 = 1784
$T120 = 1788
$T121 = 1792
$T122 = 1796
$T123 = 1800
$T124 = 1804
$T125 = 1808
$T126 = 1812
$T127 = 1816
$T128 = 1820
$T129 = 1824
$T130 = 1828
$T131 = 1832
$T132 = 1836
$T133 = 1840
$T134 = 1844
$T135 = 1848
$T136 = 1852
$T137 = 1856
$T138 = 1860
$T139 = 1864
$T140 = 1872
$T141 = 1888
$T142 = 1892
$T143 = 1908
$T144 = 1924
$T145 = 1940
$T146 = 1956
$T147 = 1972
$T148 = 1988
$T149 = 2004
$T150 = 2024
$T151 = 2040
$T152 = 2048
$T153 = 2064
$T154 = 2080
tv67 = 2096
tv74 = 2104
tv81 = 2112
tv178 = 2120
tv189 = 2128
tv229 = 2136
tv240 = 2144
tv245 = 2152
tv389 = 2160
tv467 = 2168
__$ArrayPad$ = 2176
?dtor$0@?0??test_ctr@@YAHXZ@4HA PROC			; `test_ctr'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR m3$[rbp]
	call	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_ctr@@YAHXZ@4HA ENDP			; `test_ctr'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 144
m0$ = 176
V$ = 264
m1$ = 320
m2$ = 416
i$10 = 484
i$11 = 488
m3$ = 504
$T12 = 560
v1$ = 840
$T13 = 896
v2$ = 1048
$T14 = 1104
$T15 = 1256
$T16 = 1272
$T17 = 1288
$T18 = 1304
$T19 = 1320
$T20 = 1324
$T21 = 1328
$T22 = 1332
$T23 = 1336
$T24 = 1340
$T25 = 1344
$T26 = 1348
$T27 = 1352
$T28 = 1356
$T29 = 1360
$T30 = 1364
$T31 = 1368
$T32 = 1372
$T33 = 1376
$T34 = 1380
$T35 = 1384
$T36 = 1400
$T37 = 1416
$T38 = 1432
$T39 = 1448
$T40 = 1452
$T41 = 1456
$T42 = 1460
$T43 = 1464
$T44 = 1468
$T45 = 1472
$T46 = 1476
$T47 = 1480
$T48 = 1484
$T49 = 1488
$T50 = 1492
$T51 = 1496
$T52 = 1500
$T53 = 1504
$T54 = 1508
$T55 = 1512
$T56 = 1516
$T57 = 1520
$T58 = 1524
$T59 = 1528
$T60 = 1532
$T61 = 1536
$T62 = 1540
$T63 = 1544
$T64 = 1548
$T65 = 1552
$T66 = 1556
$T67 = 1560
$T68 = 1564
$T69 = 1568
$T70 = 1572
$T71 = 1576
$T72 = 1580
$T73 = 1584
$T74 = 1588
$T75 = 1592
$T76 = 1596
$T77 = 1600
$T78 = 1604
$T79 = 1608
$T80 = 1612
$T81 = 1616
$T82 = 1620
$T83 = 1624
$T84 = 1628
$T85 = 1632
$T86 = 1636
$T87 = 1640
$T88 = 1644
$T89 = 1648
$T90 = 1652
$T91 = 1656
$T92 = 1660
$T93 = 1664
$T94 = 1668
$T95 = 1672
$T96 = 1676
$T97 = 1680
$T98 = 1684
$T99 = 1688
$T100 = 1692
$T101 = 1696
$T102 = 1700
$T103 = 1704
$T104 = 1708
$T105 = 1712
$T106 = 1720
$T107 = 1736
$T108 = 1740
$T109 = 1744
$T110 = 1748
$T111 = 1752
$T112 = 1756
$T113 = 1760
$T114 = 1764
$T115 = 1768
$T116 = 1772
$T117 = 1776
$T118 = 1780
$T119 = 1784
$T120 = 1788
$T121 = 1792
$T122 = 1796
$T123 = 1800
$T124 = 1804
$T125 = 1808
$T126 = 1812
$T127 = 1816
$T128 = 1820
$T129 = 1824
$T130 = 1828
$T131 = 1832
$T132 = 1836
$T133 = 1840
$T134 = 1844
$T135 = 1848
$T136 = 1852
$T137 = 1856
$T138 = 1860
$T139 = 1864
$T140 = 1872
$T141 = 1888
$T142 = 1892
$T143 = 1908
$T144 = 1924
$T145 = 1940
$T146 = 1956
$T147 = 1972
$T148 = 1988
$T149 = 2004
$T150 = 2024
$T151 = 2040
$T152 = 2048
$T153 = 2064
$T154 = 2080
tv67 = 2096
tv74 = 2104
tv81 = 2112
tv178 = 2120
tv189 = 2128
tv229 = 2136
tv240 = 2144
tv245 = 2152
tv389 = 2160
tv467 = 2168
__$ArrayPad$ = 2176
?dtor$1@?0??test_ctr@@YAHXZ@4HA PROC			; `test_ctr'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR v1$[rbp]
	call	??1?$vector@U?$tmat4x4@M$0A@@glm@@V?$allocator@U?$tmat4x4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >::~vector<glm::tmat4x4<float,0>,std::allocator<glm::tmat4x4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??test_ctr@@YAHXZ@4HA ENDP			; `test_ctr'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
m1_copy$ = 48
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
m1$ = 184
m2$ = 192
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 649  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 650  : 		tmat4x4<T, P> m1_copy(m1);

	lea	rax, QWORD PTR m1_copy$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR m1$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb

; 651  : 		return m1_copy /= m2;

	mov	rdx, QWORD PTR m2$[rsp]
	lea	rcx, QWORD PTR m1_copy$[rsp]
	call	??$?_0M@?$tmat4x4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tmat4x4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 652  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z PROC ; glm::all<2,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$01@glm@@SAHXZ	; glm::tvec4<bool,2>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,2>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ENDP ; glm::all<2,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,2>::tvec4<bool,2>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,2>::tvec4<bool,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z PROC			; glm::tvec4<bool,2>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$01@glm@@SAHXZ	; glm::tvec4<bool,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$01@glm@@QEBAAEB_NH@Z ENDP			; glm::tvec4<bool,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z PROC			; glm::tvec4<bool,2>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$01@glm@@SAHXZ	; glm::tvec4<bool,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$01@glm@@QEAAAEA_NH@Z ENDP			; glm::tvec4<bool,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$01@glm@@SAHXZ PROC			; glm::tvec4<bool,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$01@glm@@SAHXZ ENDP			; glm::tvec4<bool,2>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z PROC ; glm::epsilonEqual<float,2,glm::tvec4>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator-<float,2>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@M$01@0@AEBU10@@Z ; glm::abs<float,2,glm::tvec4>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@0@Z ; glm::lessThan<float,2,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ENDP ; glm::epsilonEqual<float,2,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z
_TEXT	SEGMENT
tv72 = 48
tv80 = 56
tv88 = 64
tv137 = 72
tv145 = 80
tv153 = 88
tv170 = 96
tv178 = 104
tv186 = 112
tv203 = 120
tv211 = 128
tv219 = 136
Mat0$ = 160
??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z PROC ; print<glm::tmat4x4<float,2> >, COMDAT

; 18   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 19   : 	printf("mat4(\n");

	lea	rcx, OFFSET FLAT:$SG36207
	call	printf

; 20   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv72[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv80[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv88[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv72[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv80[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv88[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG36208
	call	printf

; 21   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv137[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv145[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv137[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv145[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv153[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG36209
	call	printf

; 22   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv170[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv178[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv186[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv170[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv178[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv186[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG36210
	call	printf

; 23   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", Mat0[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv203[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv211[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv219[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv203[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv211[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv219[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG36211
	call	printf

; 24   : }

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z ENDP ; print<glm::tmat4x4<float,2> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z PROC	; glm::operator*<float,2>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$01@glm@@QEBAAEBMH@Z	; glm::tvec4<float,2>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@M@Z ; glm::operator*<float,2>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$01@glm@@YA?AU?$tvec4@M$01@0@AEBU10@0@Z ; glm::operator+<float,2>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z ENDP	; glm::operator*<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z PROC ; glm::inverse<float,2,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$01$0A@@detail@glm@@SA?AU?$tmat4x4@M$01@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z ENDP ; glm::inverse<float,2,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$01@glm@@SAHXZ	; glm::tmat4x4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z PROC	; glm::tmat4x4<float,2>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$01@glm@@SAHXZ	; glm::tmat4x4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$01@glm@@QEAAAEAU?$tvec4@M$01@1@H@Z ENDP	; glm::tmat4x4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$01@glm@@SAHXZ PROC			; glm::tmat4x4<float,2>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$01@glm@@SAHXZ ENDP			; glm::tmat4x4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z PROC ; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$01@glm@@QEAA@XZ ; glm::tvec4<float,2>::tvec4<float,2>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ENDP ; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,2>::tmat4x4<float,2>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$01@glm@@QEAA@XZ ; glm::tvec4<float,2>::tvec4<float,2>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$01@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,2>::tmat4x4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$01@glm@@QEAA@M@Z PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$01@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$01@glm@@QEAA@XZ PROC			; glm::tvec4<float,2>::tvec4<float,2>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$01@glm@@QEAA@XZ ENDP			; glm::tvec4<float,2>::tvec4<float,2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$01@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$01@glm@@SAHXZ		; glm::tvec4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$01@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$01@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$01@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,2>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$01@glm@@SAHXZ		; glm::tvec4<float,2>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$01@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$01@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$01@glm@@SAHXZ PROC			; glm::tvec4<float,2>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$01@glm@@SAHXZ ENDP			; glm::tvec4<float,2>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z PROC ; glm::all<1,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,1>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ENDP ; glm::all<1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,1>::tvec4<bool,1>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,1>::tvec4<bool,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z PROC			; glm::tvec4<bool,1>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$00@glm@@QEBAAEB_NH@Z ENDP			; glm::tvec4<bool,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z PROC			; glm::tvec4<bool,1>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$00@glm@@SAHXZ	; glm::tvec4<bool,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$00@glm@@QEAAAEA_NH@Z ENDP			; glm::tvec4<bool,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$00@glm@@SAHXZ PROC			; glm::tvec4<bool,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$00@glm@@SAHXZ ENDP			; glm::tvec4<bool,1>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z PROC ; glm::epsilonEqual<float,1,glm::tvec4>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator-<float,1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@M$00@0@AEBU10@@Z ; glm::abs<float,1,glm::tvec4>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@0@Z ; glm::lessThan<float,1,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ENDP ; glm::epsilonEqual<float,1,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z
_TEXT	SEGMENT
tv72 = 48
tv80 = 56
tv88 = 64
tv137 = 72
tv145 = 80
tv153 = 88
tv170 = 96
tv178 = 104
tv186 = 112
tv203 = 120
tv211 = 128
tv219 = 136
Mat0$ = 160
??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z PROC ; print<glm::tmat4x4<float,1> >, COMDAT

; 18   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 19   : 	printf("mat4(\n");

	lea	rcx, OFFSET FLAT:$SG35016
	call	printf

; 20   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv72[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv80[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv88[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv72[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv80[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv88[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG35017
	call	printf

; 21   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv137[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv145[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv137[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv145[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv153[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG35018
	call	printf

; 22   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv170[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv178[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv186[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv170[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv178[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv186[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG35019
	call	printf

; 23   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", Mat0[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv203[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv211[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv219[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv203[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv211[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv219[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG35020
	call	printf

; 24   : }

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z ENDP ; print<glm::tmat4x4<float,1> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z PROC	; glm::operator*<float,1>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$00@glm@@QEBAAEBMH@Z	; glm::tvec4<float,1>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@M@Z ; glm::operator*<float,1>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$00@glm@@YA?AU?$tvec4@M$00@0@AEBU10@0@Z ; glm::operator+<float,1>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z ENDP	; glm::operator*<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z PROC ; glm::inverse<float,1,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$00$0A@@detail@glm@@SA?AU?$tmat4x4@M$00@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z ENDP ; glm::inverse<float,1,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$00@glm@@SAHXZ	; glm::tmat4x4<float,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z PROC	; glm::tmat4x4<float,1>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$00@glm@@SAHXZ	; glm::tmat4x4<float,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$00@glm@@QEAAAEAU?$tvec4@M$00@1@H@Z ENDP	; glm::tmat4x4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$00@glm@@SAHXZ PROC			; glm::tmat4x4<float,1>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$00@glm@@SAHXZ ENDP			; glm::tmat4x4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z PROC ; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$00@glm@@QEAA@XZ ; glm::tvec4<float,1>::tvec4<float,1>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ENDP ; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,1>::tmat4x4<float,1>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$00@glm@@QEAA@XZ ; glm::tvec4<float,1>::tvec4<float,1>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$00@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,1>::tmat4x4<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$00@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$00@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$00@glm@@QEAA@M@Z PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$00@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$00@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$00@glm@@QEAA@XZ PROC			; glm::tvec4<float,1>::tvec4<float,1>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$00@glm@@QEAA@XZ ENDP			; glm::tvec4<float,1>::tvec4<float,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$00@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$00@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$00@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,1>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$00@glm@@SAHXZ		; glm::tvec4<float,1>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$00@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,1>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$00@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$00@glm@@SAHXZ PROC			; glm::tvec4<float,1>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$00@glm@@SAHXZ ENDP			; glm::tvec4<float,1>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 77   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR epsilon$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 78   : 	}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Error$ = 48
Matrix$17 = 80
Inverse$18 = 176
Identity$19 = 272
Matrix$20 = 368
Inverse$21 = 464
Identity$22 = 560
Matrix$23 = 656
Inverse$24 = 752
Identity$25 = 848
Matrix$26 = 944
Inverse$27 = 1040
Identity$28 = 1136
Matrix$29 = 1232
Identity$30 = 1328
$T31 = 1408
$T32 = 1424
$T33 = 1440
$T34 = 1456
$T35 = 1472
$T36 = 1488
$T37 = 1504
$T38 = 1508
$T39 = 1524
$T40 = 1540
$T41 = 1544
$T42 = 1560
$T43 = 1576
$T44 = 1580
$T45 = 1596
$T46 = 1612
$T47 = 1616
$T48 = 1632
$T49 = 1648
$T50 = 1664
$T51 = 1680
$T52 = 1696
$T53 = 1712
$T54 = 1716
$T55 = 1732
$T56 = 1748
$T57 = 1752
$T58 = 1768
$T59 = 1784
$T60 = 1788
$T61 = 1804
$T62 = 1820
$T63 = 1824
$T64 = 1840
$T65 = 1856
$T66 = 1872
$T67 = 1888
$T68 = 1904
$T69 = 1920
$T70 = 1924
$T71 = 1940
$T72 = 1956
$T73 = 1960
$T74 = 1976
$T75 = 1992
$T76 = 1996
$T77 = 2012
$T78 = 2028
$T79 = 2032
$T80 = 2048
$T81 = 2064
$T82 = 2080
$T83 = 2096
$T84 = 2112
$T85 = 2128
$T86 = 2132
$T87 = 2148
$T88 = 2164
$T89 = 2168
$T90 = 2184
$T91 = 2200
$T92 = 2204
$T93 = 2220
$T94 = 2236
$T95 = 2240
$T96 = 2256
$T97 = 2272
$T98 = 2288
$T99 = 2304
$T100 = 2320
$T101 = 2336
$T102 = 2340
$T103 = 2356
$T104 = 2372
$T105 = 2376
$T106 = 2392
$T107 = 2408
$T108 = 2412
$T109 = 2428
$T110 = 2444
tv67 = 2448
tv74 = 2456
tv81 = 2464
tv136 = 2472
tv140 = 2480
tv154 = 2488
tv159 = 2496
tv163 = 2504
tv177 = 2512
tv182 = 2520
tv186 = 2528
tv200 = 2536
tv205 = 2544
tv209 = 2552
tv223 = 2560
tv228 = 2568
tv235 = 2576
tv242 = 2584
tv266 = 2592
tv270 = 2600
tv284 = 2608
tv321 = 2616
tv325 = 2624
tv339 = 2632
tv344 = 2640
tv348 = 2648
tv362 = 2656
tv367 = 2664
tv371 = 2672
tv385 = 2680
tv390 = 2688
tv397 = 2696
tv404 = 2704
tv428 = 2712
tv432 = 2720
tv446 = 2728
tv451 = 2736
tv455 = 2744
tv469 = 2752
tv474 = 2760
tv478 = 2768
tv492 = 2776
tv497 = 2784
tv501 = 2792
tv515 = 2800
tv520 = 2808
tv527 = 2816
tv534 = 2824
tv590 = 2832
tv594 = 2840
tv608 = 2848
tv613 = 2856
tv617 = 2864
tv631 = 2872
tv636 = 2880
tv640 = 2888
tv654 = 2896
tv659 = 2904
tv663 = 2912
tv677 = 2920
tv682 = 2928
tv689 = 2936
tv696 = 2944
tv714 = 2952
tv718 = 2960
tv732 = 2968
tv737 = 2976
tv741 = 2984
tv755 = 2992
tv760 = 3000
tv764 = 3008
tv778 = 3016
tv783 = 3024
tv787 = 3032
tv833 = 3040
__$ArrayPad$ = 3048
?test_inverse@@YAHXZ PROC				; test_inverse

; 80   : {

$LN43:
	push	rdi
	sub	rsp, 3056				; 00000bf0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 752				; 000002f0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 81   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 82   : 
; 83   : 	{
; 84   : 		glm::mat4 const Matrix(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv74[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv81[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$17[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 85   : 			glm::vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 86   : 			glm::vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 87   : 			glm::vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 88   : 			glm::vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 89   : 		glm::mat4 const Inverse = glm::inverse(Matrix);

	lea	rdx, QWORD PTR Matrix$17[rsp]
	lea	rcx, QWORD PTR Inverse$18[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 90   : 		glm::mat4 const Identity = Matrix * Inverse;

	lea	r8, QWORD PTR Inverse$18[rsp]
	lea	rdx, QWORD PTR Matrix$17[rsp]
	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 91   : 
; 92   : 		print(Matrix);

	lea	rcx, QWORD PTR Matrix$17[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 93   : 		print(Inverse);

	lea	rcx, QWORD PTR Inverse$18[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 94   : 		print(Identity);

	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 95   : 
; 96   : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::vec4(1.0f, 0.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv136[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv140[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv136[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv140[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_inver
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN4@test_inver
$LN3@test_inver:
	mov	DWORD PTR tv154[rsp], 1
$LN4@test_inver:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 97   : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::vec4(0.0f, 1.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv159[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T39[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv163[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv159[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv163[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_inver
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN6@test_inver
$LN5@test_inver:
	mov	DWORD PTR tv177[rsp], 1
$LN6@test_inver:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::vec4(0.0f, 0.0f, 1.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T41[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv182[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T42[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv186[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv182[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv186[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_inver
	mov	DWORD PTR tv200[rsp], 0
	jmp	SHORT $LN8@test_inver
$LN7@test_inver:
	mov	DWORD PTR tv200[rsp], 1
$LN8@test_inver:
	mov	eax, DWORD PTR tv200[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 99   : 		Error += glm::all(glm::epsilonEqual(Identity[3], glm::vec4(0.0f, 0.0f, 0.0f, 1.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T44[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv205[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv209[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$19[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv205[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv209[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_inver
	mov	DWORD PTR tv223[rsp], 0
	jmp	SHORT $LN10@test_inver
$LN9@test_inver:
	mov	DWORD PTR tv223[rsp], 1
$LN10@test_inver:
	mov	eax, DWORD PTR tv223[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 	}
; 101  : 
; 102  : 	{
; 103  : 		glm::highp_mat4 const Matrix(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T47[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv228[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T48[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv235[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv242[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T50[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv228[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv235[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv242[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$20[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 104  : 			glm::highp_vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 105  : 			glm::highp_vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 106  : 			glm::highp_vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 107  : 			glm::highp_vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 108  : 		glm::highp_mat4 const Inverse = glm::inverse(Matrix);

	lea	rdx, QWORD PTR Matrix$20[rsp]
	lea	rcx, QWORD PTR Inverse$21[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 109  : 		glm::highp_mat4 const Identity = Matrix * Inverse;

	lea	r8, QWORD PTR Inverse$21[rsp]
	lea	rdx, QWORD PTR Matrix$20[rsp]
	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 110  : 
; 111  : 		printf("highp_mat4 inverse\n");

	lea	rcx, OFFSET FLAT:$SG31150
	call	printf

; 112  : 		print(Matrix);

	lea	rcx, QWORD PTR Matrix$20[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 113  : 		print(Inverse);

	lea	rcx, QWORD PTR Inverse$21[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 114  : 		print(Identity);

	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 115  : 
; 116  : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::highp_vec4(1.0f, 0.0f, 0.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T51[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv266[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T52[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv270[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv266[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv270[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_inver
	mov	DWORD PTR tv284[rsp], 0
	jmp	SHORT $LN12@test_inver
$LN11@test_inver:
	mov	DWORD PTR tv284[rsp], 1
$LN12@test_inver:
	mov	eax, DWORD PTR tv284[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 117  : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::highp_vec4(0.0f, 1.0f, 0.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T54[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv321[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv325[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv321[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv325[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_inver
	mov	DWORD PTR tv339[rsp], 0
	jmp	SHORT $LN14@test_inver
$LN13@test_inver:
	mov	DWORD PTR tv339[rsp], 1
$LN14@test_inver:
	mov	eax, DWORD PTR tv339[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 118  : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::highp_vec4(0.0f, 0.0f, 1.0f, 0.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T57[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv344[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T58[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv348[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv344[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv348[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_inver
	mov	DWORD PTR tv362[rsp], 0
	jmp	SHORT $LN16@test_inver
$LN15@test_inver:
	mov	DWORD PTR tv362[rsp], 1
$LN16@test_inver:
	mov	eax, DWORD PTR tv362[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 119  : 		Error += glm::all(glm::epsilonEqual(Identity[3], glm::highp_vec4(0.0f, 0.0f, 0.0f, 1.0f), glm::highp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T60[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv367[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T61[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv371[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$22[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv367[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv371[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_inver
	mov	DWORD PTR tv385[rsp], 0
	jmp	SHORT $LN18@test_inver
$LN17@test_inver:
	mov	DWORD PTR tv385[rsp], 1
$LN18@test_inver:
	mov	eax, DWORD PTR tv385[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 120  : 	}
; 121  : 
; 122  : 	{
; 123  : 		glm::mediump_mat4 const Matrix(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T63[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv390[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T64[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv397[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T65[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv404[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T66[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	rcx, QWORD PTR tv390[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv397[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv404[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$23[rsp]
	call	??0?$tmat4x4@M$00@glm@@QEAA@AEBU?$tvec4@M$00@1@000@Z ; glm::tmat4x4<float,1>::tmat4x4<float,1>

; 124  : 			glm::mediump_vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 125  : 			glm::mediump_vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 126  : 			glm::mediump_vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 127  : 			glm::mediump_vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 128  : 		glm::mediump_mat4 const Inverse = glm::inverse(Matrix);

	lea	rdx, QWORD PTR Matrix$23[rsp]
	lea	rcx, QWORD PTR Inverse$24[rsp]
	call	??$inverse@M$00Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@@Z ; glm::inverse<float,1,glm::tmat4x4>

; 129  : 		glm::mediump_mat4 const Identity = Matrix * Inverse;

	lea	r8, QWORD PTR Inverse$24[rsp]
	lea	rdx, QWORD PTR Matrix$23[rsp]
	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??$?DM$00@glm@@YA?AU?$tmat4x4@M$00@0@AEBU10@0@Z ; glm::operator*<float,1>

; 130  : 
; 131  : 		printf("mediump_mat4 inverse\n");

	lea	rcx, OFFSET FLAT:$SG31151
	call	printf

; 132  : 		print(Matrix);

	lea	rcx, QWORD PTR Matrix$23[rsp]
	call	??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z ; print<glm::tmat4x4<float,1> >

; 133  : 		print(Inverse);

	lea	rcx, QWORD PTR Inverse$24[rsp]
	call	??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z ; print<glm::tmat4x4<float,1> >

; 134  : 		print(Identity);

	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??$print@U?$tmat4x4@M$00@glm@@@@YAXAEBU?$tmat4x4@M$00@glm@@@Z ; print<glm::tmat4x4<float,1> >

; 135  : 
; 136  : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::mediump_vec4(1.0f, 0.0f, 0.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T67[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@M@Z		; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv428[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T68[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv432[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR tv428[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv432[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T69[rsp]
	call	??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ; glm::epsilonEqual<float,1,glm::tvec4>
	mov	rcx, rax
	call	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_inver
	mov	DWORD PTR tv446[rsp], 0
	jmp	SHORT $LN20@test_inver
$LN19@test_inver:
	mov	DWORD PTR tv446[rsp], 1
$LN20@test_inver:
	mov	eax, DWORD PTR tv446[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 137  : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::mediump_vec4(0.0f, 1.0f, 0.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T70[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@M@Z		; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv451[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T71[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv455[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv455[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T72[rsp]
	call	??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ; glm::epsilonEqual<float,1,glm::tvec4>
	mov	rcx, rax
	call	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test_inver
	mov	DWORD PTR tv469[rsp], 0
	jmp	SHORT $LN22@test_inver
$LN21@test_inver:
	mov	DWORD PTR tv469[rsp], 1
$LN22@test_inver:
	mov	eax, DWORD PTR tv469[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 138  : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::mediump_vec4(0.0f, 0.0f, 1.0f, 0.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T73[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@M@Z		; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv474[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T74[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR tv474[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv478[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T75[rsp]
	call	??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ; glm::epsilonEqual<float,1,glm::tvec4>
	mov	rcx, rax
	call	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test_inver
	mov	DWORD PTR tv492[rsp], 0
	jmp	SHORT $LN24@test_inver
$LN23@test_inver:
	mov	DWORD PTR tv492[rsp], 1
$LN24@test_inver:
	mov	eax, DWORD PTR tv492[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 139  : 		Error += glm::all(glm::epsilonEqual(Identity[3], glm::mediump_vec4(0.0f, 0.0f, 0.0f, 1.0f), glm::mediump_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T76[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@M@Z		; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv497[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T77[rsp]
	call	??0?$tvec4@M$00@glm@@QEAA@MMMM@Z	; glm::tvec4<float,1>::tvec4<float,1>
	mov	QWORD PTR tv501[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$25[rsp]
	call	??A?$tmat4x4@M$00@glm@@QEBAAEBU?$tvec4@M$00@1@H@Z ; glm::tmat4x4<float,1>::operator[]
	mov	rcx, QWORD PTR tv497[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv501[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T78[rsp]
	call	??$epsilonEqual@M$00Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$00@0@AEBU?$tvec4@M$00@0@00@Z ; glm::epsilonEqual<float,1,glm::tvec4>
	mov	rcx, rax
	call	??$all@$00Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$00@0@@Z ; glm::all<1,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test_inver
	mov	DWORD PTR tv515[rsp], 0
	jmp	SHORT $LN26@test_inver
$LN25@test_inver:
	mov	DWORD PTR tv515[rsp], 1
$LN26@test_inver:
	mov	eax, DWORD PTR tv515[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 140  : 	}
; 141  : 
; 142  : 	{
; 143  : 		glm::lowp_mat4 const Matrix(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T79[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv520[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T80[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv527[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T81[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv534[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T82[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	rcx, QWORD PTR tv520[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv527[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv534[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$26[rsp]
	call	??0?$tmat4x4@M$01@glm@@QEAA@AEBU?$tvec4@M$01@1@000@Z ; glm::tmat4x4<float,2>::tmat4x4<float,2>

; 144  : 			glm::lowp_vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 145  : 			glm::lowp_vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 146  : 			glm::lowp_vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 147  : 			glm::lowp_vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 148  : 		glm::lowp_mat4 const Inverse = glm::inverse(Matrix);

	lea	rdx, QWORD PTR Matrix$26[rsp]
	lea	rcx, QWORD PTR Inverse$27[rsp]
	call	??$inverse@M$01Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@@Z ; glm::inverse<float,2,glm::tmat4x4>

; 149  : 		glm::lowp_mat4 const Identity = Matrix * Inverse;

	lea	r8, QWORD PTR Inverse$27[rsp]
	lea	rdx, QWORD PTR Matrix$26[rsp]
	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??$?DM$01@glm@@YA?AU?$tmat4x4@M$01@0@AEBU10@0@Z ; glm::operator*<float,2>

; 150  : 
; 151  : 		printf("lowp_mat4 inverse\n");

	lea	rcx, OFFSET FLAT:$SG31152
	call	printf

; 152  : 		print(Matrix);

	lea	rcx, QWORD PTR Matrix$26[rsp]
	call	??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z ; print<glm::tmat4x4<float,2> >

; 153  : 		print(Inverse);

	lea	rcx, QWORD PTR Inverse$27[rsp]
	call	??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z ; print<glm::tmat4x4<float,2> >

; 154  : 		print(Identity);

	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??$print@U?$tmat4x4@M$01@glm@@@@YAXAEBU?$tmat4x4@M$01@glm@@@Z ; print<glm::tmat4x4<float,2> >

; 155  : 
; 156  : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::lowp_vec4(1.0f, 0.0f, 0.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T83[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv590[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T84[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv594[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv590[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv594[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T85[rsp]
	call	??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ; glm::epsilonEqual<float,2,glm::tvec4>
	mov	rcx, rax
	call	??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ; glm::all<2,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test_inver
	mov	DWORD PTR tv608[rsp], 0
	jmp	SHORT $LN28@test_inver
$LN27@test_inver:
	mov	DWORD PTR tv608[rsp], 1
$LN28@test_inver:
	mov	eax, DWORD PTR tv608[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 157  : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::lowp_vec4(0.0f, 1.0f, 0.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T86[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv613[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T87[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv617[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv613[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv617[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T88[rsp]
	call	??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ; glm::epsilonEqual<float,2,glm::tvec4>
	mov	rcx, rax
	call	??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ; glm::all<2,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test_inver
	mov	DWORD PTR tv631[rsp], 0
	jmp	SHORT $LN30@test_inver
$LN29@test_inver:
	mov	DWORD PTR tv631[rsp], 1
$LN30@test_inver:
	mov	eax, DWORD PTR tv631[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 158  : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::lowp_vec4(0.0f, 0.0f, 1.0f, 0.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T89[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv636[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T90[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv640[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv636[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv640[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T91[rsp]
	call	??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ; glm::epsilonEqual<float,2,glm::tvec4>
	mov	rcx, rax
	call	??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ; glm::all<2,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@test_inver
	mov	DWORD PTR tv654[rsp], 0
	jmp	SHORT $LN32@test_inver
$LN31@test_inver:
	mov	DWORD PTR tv654[rsp], 1
$LN32@test_inver:
	mov	eax, DWORD PTR tv654[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 159  : 		Error += glm::all(glm::epsilonEqual(Identity[3], glm::lowp_vec4(0.0f, 0.0f, 0.0f, 1.0f), glm::lowp_vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T92[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@M@Z		; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv659[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T93[rsp]
	call	??0?$tvec4@M$01@glm@@QEAA@MMMM@Z	; glm::tvec4<float,2>::tvec4<float,2>
	mov	QWORD PTR tv663[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$28[rsp]
	call	??A?$tmat4x4@M$01@glm@@QEBAAEBU?$tvec4@M$01@1@H@Z ; glm::tmat4x4<float,2>::operator[]
	mov	rcx, QWORD PTR tv659[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv663[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T94[rsp]
	call	??$epsilonEqual@M$01Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$01@0@AEBU?$tvec4@M$01@0@00@Z ; glm::epsilonEqual<float,2,glm::tvec4>
	mov	rcx, rax
	call	??$all@$01Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$01@0@@Z ; glm::all<2,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@test_inver
	mov	DWORD PTR tv677[rsp], 0
	jmp	SHORT $LN34@test_inver
$LN33@test_inver:
	mov	DWORD PTR tv677[rsp], 1
$LN34@test_inver:
	mov	eax, DWORD PTR tv677[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 160  : 	}
; 161  : 
; 162  : 	{
; 163  : 		glm::mat4 const Matrix(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T95[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv682[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T96[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv689[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T97[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv696[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T98[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv682[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv689[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv696[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Matrix$29[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 164  : 			glm::vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 165  : 			glm::vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 166  : 			glm::vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 167  : 			glm::vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 168  : 		glm::mat4 const Identity = Matrix / Matrix;

	lea	r8, QWORD PTR Matrix$29[rsp]
	lea	rdx, QWORD PTR Matrix$29[rsp]
	lea	rcx, QWORD PTR Identity$30[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>

; 169  : 
; 170  : 		Error += glm::all(glm::epsilonEqual(Identity[0], glm::vec4(1.0f, 0.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T99[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv714[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T100[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv718[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$30[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv714[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv718[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T101[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@test_inver
	mov	DWORD PTR tv732[rsp], 0
	jmp	SHORT $LN36@test_inver
$LN35@test_inver:
	mov	DWORD PTR tv732[rsp], 1
$LN36@test_inver:
	mov	eax, DWORD PTR tv732[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 171  : 		Error += glm::all(glm::epsilonEqual(Identity[1], glm::vec4(0.0f, 1.0f, 0.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T102[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv737[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T103[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv741[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$30[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv737[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv741[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T104[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@test_inver
	mov	DWORD PTR tv755[rsp], 0
	jmp	SHORT $LN38@test_inver
$LN37@test_inver:
	mov	DWORD PTR tv755[rsp], 1
$LN38@test_inver:
	mov	eax, DWORD PTR tv755[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 172  : 		Error += glm::all(glm::epsilonEqual(Identity[2], glm::vec4(0.0f, 0.0f, 1.0f, 0.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T105[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv760[rsp], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T106[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv764[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$30[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv760[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv764[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T107[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@test_inver
	mov	DWORD PTR tv778[rsp], 0
	jmp	SHORT $LN40@test_inver
$LN39@test_inver:
	mov	DWORD PTR tv778[rsp], 1
$LN40@test_inver:
	mov	eax, DWORD PTR tv778[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 173  : 		Error += glm::all(glm::epsilonEqual(Identity[3], glm::vec4(0.0f, 0.0f, 0.0f, 1.0f), glm::vec4(0.01f))) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3c23d70a
	lea	rcx, QWORD PTR $T108[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv783[rsp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T109[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv787[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$30[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv783[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv787[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T110[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@00@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@test_inver
	mov	DWORD PTR tv833[rsp], 0
	jmp	SHORT $LN42@test_inver
$LN41@test_inver:
	mov	DWORD PTR tv833[rsp], 1
$LN42@test_inver:
	mov	eax, DWORD PTR tv833[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 174  : 	}
; 175  : 
; 176  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 177  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 3056				; 00000bf0H
	pop	rdi
	ret	0
?test_inverse@@YAHXZ ENDP				; test_inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv131 = 56
tv140 = 64
m1$ = 96
m2$ = 104
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 658  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 659  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv140[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv140[rsp]

; 660  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv131 = 56
tv140 = 64
m1$ = 96
m2$ = 104
??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 664  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 665  : 		return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	$LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv140[rsp], 1
$LN4@operator:
	movzx	eax, BYTE PTR tv140[rsp]

; 666  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator*<float,0>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
s$ = 168
m$ = 176
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 492  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 493  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 494  : 			m[0] * s,
; 495  : 			m[1] * s,
; 496  : 			m[2] * s,
; 497  : 			m[3] * s);
; 498  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator/<float,0>, COMDAT

; 617  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 618  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 619  : 			m[0] / s,
; 620  : 			m[1] / s,
; 621  : 			m[2] / s,
; 622  : 			m[3] / s);
; 623  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
s$ = 168
m$ = 176
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z PROC ; glm::operator/<float,0>, COMDAT

; 627  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 628  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 629  : 			s / m[0],
; 630  : 			s / m[1],
; 631  : 			s / m[2],
; 632  : 			s / m[3]);
; 633  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ENDP ; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
this$ = 112
s$ = 120
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 48   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 49   : 		this->value[0] = col_type(s, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[1] = col_type(0, s, 0);

	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 		this->value[2] = col_type(0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 52   : 		this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 53   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 44   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 46   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
scalar$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 47   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
this$ = 96
scalar$ = 104
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 44   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 45   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
scalar$ = 88
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 48   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 167  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 168  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 168				; 000000a8H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 169  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 170  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
Zero$ = 48
$T1 = 52
$T2 = 68
this$ = 128
scalar$ = 136
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 42   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 43   : 		value_type const Zero(0);

	xorps	xmm0, xmm0
	movss	DWORD PTR Zero$[rsp], xmm0

; 44   : 		this->value[0] = col_type(scalar, Zero, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 45   : 		this->value[1] = col_type(Zero, scalar, Zero, Zero);

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR scalar$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 46   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 225  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 226  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 226				; 000000e2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 227  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
this$ = 80
scalar$ = 88
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 55   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 56   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 57   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 58   : 		this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 59   : 		this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 60   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 128
scalar$ = 136
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 45   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 46   : 		this->value[0] = col_type(scalar, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 47   : 		this->value[1] = col_type(0, scalar, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 48   : 		this->value[2] = col_type(0, 0, scalar, 0);

	mov	DWORD PTR [rsp+32], 0
	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 49   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
l$ = 48
m$ = 144
u$ = 232
v$ = 280
x$ = 324
a$ = 360
b$ = 408
n$ = 464
o$ = 560
p$ = 656
q$ = 752
R$ = 820
S$ = 821
$T14 = 832
$T15 = 836
tv132 = 840
__$ArrayPad$ = 848
?test_operators@@YA_NXZ PROC				; test_operators

; 61   : {

	push	rdi
	sub	rsp, 864				; 00000360H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 208				; 000000d0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 62   : 	glm::mat4x4 l(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T14[rsp], xmm0
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR l$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 63   : 	glm::mat4x4 m(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T15[rsp], xmm0
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 64   : 	glm::vec4 u(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR u$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 65   : 	glm::vec4 v(1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR v$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 66   : 	float x = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR x$[rsp], xmm0

; 67   : 	glm::vec4 a = m * u;

	lea	r8, QWORD PTR u$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::operator*<float,0>

; 68   : 	glm::vec4 b = v * m;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z ; glm::operator*<float,0>

; 69   : 	glm::mat4x4 n = x / m;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR n$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ; glm::operator/<float,0>

; 70   : 	glm::mat4x4 o = m / x;

	lea	r8, QWORD PTR x$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator/<float,0>

; 71   : 	glm::mat4x4 p = x * m;

	lea	r8, QWORD PTR m$[rsp]
	lea	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBMAEBU10@@Z ; glm::operator*<float,0>

; 72   : 	glm::mat4x4 q = m * x;

	lea	r8, QWORD PTR x$[rsp]
	lea	rdx, QWORD PTR m$[rsp]
	lea	rcx, QWORD PTR q$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>

; 73   : 	bool R = m != q;

	lea	rdx, QWORD PTR q$[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?9M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	mov	BYTE PTR R$[rsp], al

; 74   : 	bool S = m == l;

	lea	rdx, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	mov	BYTE PTR S$[rsp], al

; 75   : 
; 76   : 	return (S && !R) ? 0 : 1;

	movzx	eax, BYTE PTR S$[rsp]
	test	eax, eax
	je	SHORT $LN3@test_opera
	movzx	eax, BYTE PTR R$[rsp]
	test	eax, eax
	jne	SHORT $LN3@test_opera
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN4@test_opera
$LN3@test_opera:
	mov	DWORD PTR tv132[rsp], 1
$LN4@test_opera:
	movzx	eax, BYTE PTR tv132[rsp]

; 77   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_operators@@YA_NXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 864				; 00000360H
	pop	rdi
	ret	0
?test_operators@@YA_NXZ ENDP				; test_operators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z
_TEXT	SEGMENT
tv70 = 48
tv77 = 56
tv84 = 64
tv131 = 72
tv138 = 80
tv145 = 88
tv160 = 96
tv167 = 104
tv174 = 112
tv189 = 120
tv196 = 128
tv203 = 136
Mat0$ = 160
??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z PROC ; print<glm::tmat4x4<double,0> >, COMDAT

; 18   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 19   : 	printf("mat4(\n");

	lea	rcx, OFFSET FLAT:$SG33770
	call	printf

; 20   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv77[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv84[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv70[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv77[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv84[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG33771
	call	printf

; 21   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv138[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv145[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv138[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv145[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG33772
	call	printf

; 22   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv160[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv174[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv160[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv167[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv174[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG33773
	call	printf

; 23   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", Mat0[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv189[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv196[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv203[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	rcx, QWORD PTR tv189[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv196[rsp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	rcx, QWORD PTR tv203[rsp]
	movsd	xmm2, QWORD PTR [rcx]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR [rax]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG33774
	call	printf

; 24   : }

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z ENDP ; print<glm::tmat4x4<double,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 104
SrcA2$ = 168
SrcA3$ = 232
SrcB0$ = 296
SrcB1$ = 360
SrcB2$ = 424
SrcB3$ = 488
Result$ = 560
$T12 = 704
$T13 = 736
$T14 = 768
$T15 = 800
$T16 = 832
$T17 = 864
$T18 = 896
$T19 = 928
$T20 = 960
$T21 = 992
$T22 = 1024
$T23 = 1056
$T24 = 1088
$T25 = 1120
$T26 = 1152
$T27 = 1184
$T28 = 1216
$T29 = 1248
$T30 = 1280
$T31 = 1312
$T32 = 1344
$T33 = 1376
$T34 = 1408
$T35 = 1440
$T36 = 1472
$T37 = 1504
$T38 = 1536
$T39 = 1568
tv134 = 1600
tv143 = 1608
tv152 = 1616
tv133 = 1624
tv178 = 1632
tv187 = 1640
tv196 = 1648
tv177 = 1656
tv222 = 1664
tv231 = 1672
tv240 = 1680
tv221 = 1688
tv298 = 1696
tv307 = 1704
tv316 = 1712
tv297 = 1720
__$ArrayPad$ = 1728
__$ReturnUdt$ = 1776
m1$ = 1784
m2$ = 1792
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1752				; 000006d8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 430				; 000001aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1776]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm2, QWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator+<double,0>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ; glm::tmat4x4<double,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 128				; 00000080H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1752				; 000006d8H
	pop	rdi
	pop	rsi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z PROC ; glm::inverse<double,0,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@N$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,double,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z ENDP ; glm::inverse<double,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat4x4<double,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@N$0A@@glm@@QEBAAEBU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z PROC ; glm::tmat4x4<double,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@N$0A@@glm@@QEAAAEAU?$tvec4@N$0A@@1@H@Z ENDP ; glm::tmat4x4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<double,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z PROC ; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 4
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 32					; 00000020H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 32					; 00000020H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 32					; 00000020H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ENDP ; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 4
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
$T4 = 144
this$ = 208
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 4
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtss2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtss2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtss2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtss2sd xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 193  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR a$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR b$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR c$[rsp]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 188  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+24], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@N$0A@@glm@@QEAAAEANH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Mat0$ = 64
Inv0$ = 224
Res0$ = 384
$T6 = 528
$T7 = 560
$T8 = 592
$T9 = 624
tv67 = 656
tv74 = 664
tv81 = 672
__$ArrayPad$ = 680
?test_inverse_dmat4x4@@YAHXZ PROC			; test_inverse_dmat4x4

; 44   : {

$LN3:
	push	rdi
	sub	rsp, 688				; 000002b0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 45   : 	glm::dmat4 Mat0(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z ; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z ; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
	mov	QWORD PTR tv74[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z ; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
	mov	QWORD PTR tv81[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0MMMM@?$tvec4@N$0A@@glm@@QEAA@MMMM@Z ; glm::tvec4<double,0>::tvec4<double,0><float,float,float,float>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Mat0$[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@AEBU?$tvec4@N$0A@@1@000@Z ; glm::tmat4x4<double,0>::tmat4x4<double,0>

; 46   : 		glm::dvec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 47   : 		glm::dvec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 48   : 		glm::dvec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 49   : 		glm::dvec4(0.4f, 0.3f, 0.2f, 0.6f));
; 50   : 	glm::dmat4 Inv0 = glm::inverse(Mat0);

	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$inverse@N$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@@Z ; glm::inverse<double,0,glm::tmat4x4>

; 51   : 	glm::dmat4 Res0 = Mat0 * Inv0;

	lea	r8, QWORD PTR Inv0$[rsp]
	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Res0$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tmat4x4@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 52   : 
; 53   : 	print(Mat0);

	lea	rcx, QWORD PTR Mat0$[rsp]
	call	??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z ; print<glm::tmat4x4<double,0> >

; 54   : 	print(Inv0);

	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z ; print<glm::tmat4x4<double,0> >

; 55   : 	print(Res0);

	lea	rcx, QWORD PTR Res0$[rsp]
	call	??$print@U?$tmat4x4@N$0A@@glm@@@@YAXAEBU?$tmat4x4@N$0A@@glm@@@Z ; print<glm::tmat4x4<double,0> >

; 56   : 
; 57   : 	return 0;

	xor	eax, eax

; 58   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse_dmat4x4@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 688				; 000002b0H
	pop	rdi
	ret	0
?test_inverse_dmat4x4@@YAHXZ ENDP			; test_inverse_dmat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
;	COMDAT ??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv72 = 48
tv80 = 56
tv88 = 64
tv137 = 72
tv145 = 80
tv153 = 88
tv170 = 96
tv178 = 104
tv186 = 112
tv203 = 120
tv211 = 128
tv219 = 136
Mat0$ = 160
??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z PROC ; print<glm::tmat4x4<float,0> >, COMDAT

; 18   : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 19   : 	printf("mat4(\n");

	lea	rcx, OFFSET FLAT:$SG32628
	call	printf

; 20   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[0][0], Mat0[0][1], Mat0[0][2], Mat0[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv72[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv80[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv88[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv72[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv80[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv88[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG32629
	call	printf

; 21   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[1][0], Mat0[1][1], Mat0[1][2], Mat0[1][3]);

	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv137[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv145[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv153[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv137[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv145[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv153[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG32630
	call	printf

; 22   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f)\n", Mat0[2][0], Mat0[2][1], Mat0[2][2], Mat0[2][3]);

	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv170[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv178[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv186[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv170[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv178[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv186[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG32631
	call	printf

; 23   : 	printf("\tvec4(%2.9f, %2.9f, %2.9f, %2.9f))\n\n", Mat0[3][0], Mat0[3][1], Mat0[3][2], Mat0[3][3]);

	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv203[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv211[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv219[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR Mat0$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	xmm1, QWORD PTR tv203[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv211[rsp]
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movsd	xmm1, QWORD PTR tv219[rsp]
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG32632
	call	printf

; 24   : }

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ENDP ; print<glm::tmat4x4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z
_TEXT	SEGMENT
tv70 = 48
tv75 = 56
tv80 = 64
tv86 = 72
tv91 = 80
tv129 = 88
tv134 = 96
tv140 = 104
tv146 = 112
tv151 = 120
tv156 = 128
tv162 = 136
tv167 = 144
tv173 = 152
tv178 = 160
tv184 = 168
tv190 = 176
tv195 = 184
tv200 = 192
tv206 = 200
tv211 = 208
tv217 = 216
tv222 = 224
tv228 = 232
tv234 = 240
tv239 = 248
tv244 = 256
tv250 = 264
tv255 = 272
tv261 = 280
tv266 = 288
__$ReturnUdt$ = 320
v$ = 328
m$ = 336
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z PROC ; glm::operator*<float,0>, COMDAT

; 554  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 304				; 00000130H

; 555  : 		return typename tmat4x4<T, P>::row_type(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv70[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv75[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv75[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv86[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv91[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv91[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv86[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv129[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv134[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv129[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv140[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv146[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv146[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv151[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv151[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv173[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv178[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv173[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv184[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv190[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv190[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv195[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv200[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv200[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv195[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv206[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv211[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv211[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv206[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv217[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv222[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv217[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv228[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv234[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv234[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv239[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv244[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv244[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv239[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv250[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv255[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv255[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv250[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv261[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv266[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv266[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv261[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv140[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv184[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv228[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 556  : 			m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2] + m[0][3] * v[3],
; 557  : 			m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2] + m[1][3] * v[3],
; 558  : 			m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2] + m[2][3] * v[3],
; 559  : 			m[3][0] * v[0] + m[3][1] * v[1] + m[3][2] * v[2] + m[3][3] * v[3]);
; 560  : 	}

	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tmat4x4@M$0A@@0@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
Mov0$ = 40
Mov1$ = 88
Mul0$ = 136
Mul1$ = 184
Add0$ = 232
Mov2$ = 280
Mov3$ = 328
Mul2$ = 376
Mul3$ = 424
Add1$ = 472
Add2$ = 520
__$ReturnUdt$ = 592
m$ = 600
v$ = 608
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::operator*<float,0>, COMDAT

; 506  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+592]

; 507  : /*
; 508  : 		__m128 v0 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(0, 0, 0, 0));
; 509  : 		__m128 v1 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(1, 1, 1, 1));
; 510  : 		__m128 v2 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(2, 2, 2, 2));
; 511  : 		__m128 v3 = _mm_shuffle_ps(v.data, v.data, _MM_SHUFFLE(3, 3, 3, 3));
; 512  : 
; 513  : 		__m128 m0 = _mm_mul_ps(m[0].data, v0);
; 514  : 		__m128 m1 = _mm_mul_ps(m[1].data, v1);
; 515  : 		__m128 a0 = _mm_add_ps(m0, m1);
; 516  : 
; 517  : 		__m128 m2 = _mm_mul_ps(m[2].data, v2);
; 518  : 		__m128 m3 = _mm_mul_ps(m[3].data, v3);
; 519  : 		__m128 a1 = _mm_add_ps(m2, m3);
; 520  : 
; 521  : 		__m128 a2 = _mm_add_ps(a0, a1);
; 522  : 
; 523  : 		return typename tmat4x4<T, P>::col_type(a2);
; 524  : */
; 525  : 
; 526  : 		typename tmat4x4<T, P>::col_type const Mov0(v[0]);

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 527  : 		typename tmat4x4<T, P>::col_type const Mov1(v[1]);

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 529  : 		typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov1$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul1$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 530  : 		typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;

	lea	r8, QWORD PTR Mul1$[rsp]
	lea	rdx, QWORD PTR Mul0$[rsp]
	lea	rcx, QWORD PTR Add0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 531  : 		typename tmat4x4<T, P>::col_type const Mov2(v[2]);

	mov	edx, 2
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 532  : 		typename tmat4x4<T, P>::col_type const Mov3(v[3]);

	mov	edx, 3
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Mov3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 533  : 		typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov2$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 534  : 		typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Mov3$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Mul3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 535  : 		typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;

	lea	r8, QWORD PTR Mul3$[rsp]
	lea	rdx, QWORD PTR Mul2$[rsp]
	lea	rcx, QWORD PTR Add1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 536  : 		typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;

	lea	r8, QWORD PTR Add1$[rsp]
	lea	rdx, QWORD PTR Add0$[rsp]
	lea	rcx, QWORD PTR Add2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 537  : 		return Add2;

	lea	rax, QWORD PTR Add2$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 538  : 
; 539  : /*
; 540  : 		return typename tmat4x4<T, P>::col_type(
; 541  : 			m[0][0] * v[0] + m[1][0] * v[1] + m[2][0] * v[2] + m[3][0] * v[3],
; 542  : 			m[0][1] * v[0] + m[1][1] * v[1] + m[2][1] * v[2] + m[3][1] * v[3],
; 543  : 			m[0][2] * v[0] + m[1][2] * v[1] + m[2][2] * v[2] + m[3][2] * v[3],
; 544  : 			m[0][3] * v[0] + m[1][3] * v[1] + m[2][3] * v[2] + m[3][3] * v[3]);
; 545  : */
; 546  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
this$ = 128
m$ = 136
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 230  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 231  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 232  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 233  : 		this->value[2] = col_type(m[2], 0);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 234  : 		this->value[3] = col_type(m[3], 1);

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	r8d, 1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 235  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
m$ = 104
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 221  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 222  : 		this->value[0] = m[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 223  : 		this->value[1] = m[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 224  : 		this->value[2] = m[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 225  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 226  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
m$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 212  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 213  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 214  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 215  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 216  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 217  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat4x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
this$ = 112
m$ = 120
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 203  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 204  : 		this->value[0] = m[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 205  : 		this->value[1] = m[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 206  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 207  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 208  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x4@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
m$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 194  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 195  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 196  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 197  : 		this->value[2] = col_type(m[2], 1, 0);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	r9d, r9d
	mov	r8d, 1
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 198  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 199  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
m$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 185  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 186  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 187  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 188  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 189  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 190  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
m$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 176  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 177  : 		this->value[0] = col_type(m[0], 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 178  : 		this->value[1] = col_type(m[1], 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 179  : 		this->value[2] = col_type(m[2], 0);

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0MH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@H@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 180  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 181  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat3x3@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
m$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 167  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 168  : 		this->value[0] = col_type(m[0], 0, 0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 169  : 		this->value[1] = col_type(m[1], 0, 0);

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0MHH$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@HH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 170  : 		this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 171  : 		this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 172  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tmat2x2@M$0A@@1@@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_mat4x4.cpp
_TEXT	SEGMENT
Mat0$ = 64
Inv0$ = 160
Res0$ = 256
$T6 = 336
$T7 = 352
$T8 = 368
$T9 = 384
tv67 = 400
tv74 = 408
tv81 = 416
__$ArrayPad$ = 424
?test_inverse_mat4x4@@YAHXZ PROC			; test_inverse_mat4x4

; 27   : {

$LN3:
	push	rdi
	sub	rsp, 432				; 000001b0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 28   : 	glm::mat4 Mat0(

	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv67[rsp], rax
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv74[rsp], rax
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv81[rsp], rax
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Mat0$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 29   : 		glm::vec4(0.6f, 0.2f, 0.3f, 0.4f), 
; 30   : 		glm::vec4(0.2f, 0.7f, 0.5f, 0.3f), 
; 31   : 		glm::vec4(0.3f, 0.5f, 0.7f, 0.2f), 
; 32   : 		glm::vec4(0.4f, 0.3f, 0.2f, 0.6f));
; 33   : 	glm::mat4 Inv0 = glm::inverse(Mat0);

	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 34   : 	glm::mat4 Res0 = Mat0 * Inv0;

	lea	r8, QWORD PTR Inv0$[rsp]
	lea	rdx, QWORD PTR Mat0$[rsp]
	lea	rcx, QWORD PTR Res0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 35   : 
; 36   : 	print(Mat0);

	lea	rcx, QWORD PTR Mat0$[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 37   : 	print(Inv0);

	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 38   : 	print(Res0);

	lea	rcx, QWORD PTR Res0$[rsp]
	call	??$print@U?$tmat4x4@M$0A@@glm@@@@YAXAEBU?$tmat4x4@M$0A@@glm@@@Z ; print<glm::tmat4x4<float,0> >

; 39   : 
; 40   : 	return 0;

	xor	eax, eax

; 41   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse_mat4x4@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 432				; 000001b0H
	pop	rdi
	ret	0
?test_inverse_mat4x4@@YAHXZ ENDP			; test_inverse_mat4x4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1297 :     _Container_proxy* _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1304 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 16
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1299 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1300 :         _Ptr = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1301 :     }

	pop	rdi
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
