; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?test_matrixCompMult@@YAHXZ			; test_matrixCompMult
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z		; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
PUBLIC	??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x2>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
PUBLIC	??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z	; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x3>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
PUBLIC	??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x4>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z		; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
PUBLIC	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x3>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
PUBLIC	??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z	; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x2>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
PUBLIC	??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x4>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x4>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
PUBLIC	??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x2>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
PUBLIC	??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
PUBLIC	??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x3>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?test_outerProduct@@YAHXZ			; test_outerProduct
PUBLIC	??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>
PUBLIC	??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>
PUBLIC	??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>
PUBLIC	??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>
PUBLIC	??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>
PUBLIC	??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>
PUBLIC	??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>
PUBLIC	??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>
PUBLIC	??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>
PUBLIC	?test_transpose@@YAHXZ				; test_transpose
PUBLIC	??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat2x2>
PUBLIC	??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat2x3>
PUBLIC	??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat2x4>
PUBLIC	??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat3x3>
PUBLIC	??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat3x2>
PUBLIC	??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat3x4>
PUBLIC	??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat4x4>
PUBLIC	??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat4x2>
PUBLIC	??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat4x3>
PUBLIC	?test_determinant@@YAHXZ			; test_determinant
PUBLIC	?test_inverse@@YAHXZ				; test_inverse
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat3x3>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat2x2>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	?test_inverse_simd@@YAHXZ			; test_inverse_simd
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	main
PUBLIC	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z		; glm::tvec2<float,0>::tvec2<float,0><float,int>
PUBLIC	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z		; glm::tvec2<float,0>::tvec2<float,0><int,float>
PUBLIC	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
PUBLIC	?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
PUBLIC	?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
PUBLIC	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
PUBLIC	?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator+=<float>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ ; `string'
PUBLIC	??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3a83126f
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_matrixCompMult@@YAHXZ DD imagerel $LN21
	DD	imagerel $LN21+3368
	DD	imagerel $unwind$?test_matrixCompMult@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+276
	DD	imagerel $unwind$??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+208
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+323
	DD	imagerel $unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+377
	DD	imagerel $unwind$??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+212
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+331
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+533
	DD	imagerel $unwind$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+274
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+259
	DD	imagerel $unwind$??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+274
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z DD imagerel $LN3
	DD	imagerel $LN3+467
	DD	imagerel $unwind$??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+274
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_outerProduct@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+777
	DD	imagerel $unwind$?test_outerProduct@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN6
	DD	imagerel $LN6+247
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN6
	DD	imagerel $LN6+260
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN6
	DD	imagerel $LN6+275
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+254
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+260
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+247
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+272
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+253
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+272
	DD	imagerel $unwind$??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_transpose@@YAHXZ DD imagerel $LN21
	DD	imagerel $LN21+3296
	DD	imagerel $unwind$?test_transpose@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_determinant@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?test_determinant@@YAHXZ
$pdata$?test_inverse@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+931
	DD	imagerel $unwind$?test_inverse@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1720
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+1687
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+794
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_inverse_simd@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+986
	DD	imagerel $unwind$?test_inverse_simd@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+268
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+281
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+287
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+287
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+268
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+302
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+305
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+274
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z DD imagerel $LN6
	DD	imagerel $LN6+302
	DD	imagerel $unwind$?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+430
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+584
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+756
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+839
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+584
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+1094
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+1432
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+756
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+1094
	DD	imagerel $unwind$?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+5983
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+3167
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+571
	DD	imagerel $unwind$?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'3', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'2', 00H, 'x', 00H, '2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	'4', 00H, 'x', 00H, '4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z DD 031701H
	DD	0120117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0221H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0150113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	098H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcName$0 DB 049H ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
	ORG $+8
?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 048H ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0c45H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0430113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0 DB 049H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
	ORG $+8
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 038H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DD	024H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	01746H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 033d19H
	DD	01060112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0820H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	034H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5 DB 046H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	061H
	DB	063H
	DB	035H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9 DB 056H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	063H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	031H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	032H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	033H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	041H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15 DB 053H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	069H
	DB	067H
	DB	06eH
	DB	042H
	DB	00H
	ORG $+2
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16 DB 049H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	076H
	DB	065H
	DB	072H
	DB	073H
	DB	065H
	DB	00H
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17 DB 052H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	077H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18 DB 044H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06fH
	DB	074H
	DB	030H
	DB	00H
	ORG $+3
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19 DB 04fH ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DB	06eH
	DB	065H
	DB	04fH
	DB	076H
	DB	065H
	DB	072H
	DB	044H
	DB	065H
	DB	074H
	DB	065H
	DB	072H
	DB	06dH
	DB	069H
	DB	06eH
	DB	061H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+5
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 0444H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	04H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$19
	DD	0418H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$18
	DD	03e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$17
	DD	0390H
	DD	040H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$16
	DD	0358H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$15
	DD	0328H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$14
	DD	02f8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$13
	DD	02c8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$12
	DD	0298H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$11
	DD	0268H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$10
	DD	0238H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$9
	DD	0208H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$8
	DD	01d8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$7
	DD	01a8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$6
	DD	0178H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$2
	DD	0b8H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+960
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 014H ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	042cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z DD 043e19H
	DD	01d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
	DD	030H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	02daH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z DD 043e19H
	DD	0170113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
	DD	020H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	057eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0230113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 030H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DD	040H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	042cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z DD 043e19H
	DD	01d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
	DD	030H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	022eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z DD 043e19H
	DD	0130113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
	DD	018H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	032dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z DD 043e19H
	DD	0170113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
	DD	024H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	02daH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z DD 043e19H
	DD	0170113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
	DD	020H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	022eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z DD 043e19H
	DD	0130113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
	DD	018H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0197H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z DD 043b19H
	DD	0110113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcName$0 DB 072H ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcVarDesc DD 028H ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcName$0
	ORG $+48
?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcFrameData DD 01H ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0114H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z DD 044319H
	DD	0150118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
	DD	030H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0fbH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z DD 044019H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
	DD	020H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0117H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z DD 044319H
	DD	0170118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 030H ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
	DD	040H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0114H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z DD 044319H
	DD	0150118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
	DD	030H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0f8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
	DD	018H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0105H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z DD 044319H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
	DD	024H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0105H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z DD 044319H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
	DD	020H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0102H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z DD 044019H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
	DD	018H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0f8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcName$0 DB 072H ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc DD 028H ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcName$0
	ORG $+48
?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcFrameData DD 01H ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z DD 011601H
	DD	07016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z DD 031701H
	DD	0140117H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	067dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	01d0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 078H ; glm::operator*<float,0>
	DD	024H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcName$0
	ORG $+48
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 01H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	069eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 044319H
	DD	08b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	041H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	030H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	031H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	032H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7 DB 053H ; glm::operator*<float,0>
	DB	072H
	DB	063H
	DB	042H
	DB	033H
	DB	00H
	ORG $+2
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8 DB 052H ; glm::operator*<float,0>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData DD 09H ; glm::operator*<float,0>
	DD	00H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc
	ORG $+8
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcVarDesc DD 01b0H ; glm::operator*<float,0>
	DD	040H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$8
	DD	0178H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$7
	DD	0148H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$6
	DD	0118H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$5
	DD	0e8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$4
	DD	0b8H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$3
	DD	088H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$2
	DD	058H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 044319H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	088H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>
	DD	030H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0e6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 044019H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	070H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>
	DD	020H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 044319H
	DD	0130118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	088H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>
	DD	030H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0e3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>
	DD	018H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0edH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 044019H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>
	DD	020H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0eaH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	068H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>
	DD	018H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0f9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 044319H
	DD	0150118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	098H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 030H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>
	DD	040H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0edH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 044019H
	DD	0110118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	078H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>
	DD	024H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	038H
	DB	0e3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 033d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 06dH ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>
	DB	00H
	ORG $+14
??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 028H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>
	DD	010H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>
	DD	00H
	DQ	FLAT:??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z DD 031a01H
	DD	07016c21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z DD 021801H
	DD	070147218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z DD 041d01H
	DD	011011dH
	DD	060157016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z DD 031001H
	DD	0700ce210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z DD 031901H
	DD	07015e219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z DD 021801H
	DD	070147218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z DD 031101H
	DD	0700da211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z DD 031901H
	DD	07015c219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z DD 031901H
	DD	070158219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse_simd@@YAHXZ
	DD	024H
	DD	03c1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_inverse@@YAHXZ
	DD	024H
	DD	038aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_transpose@@YAHXZ
	DD	027H
	DD	0cc7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_outerProduct@@YAHXZ
	DD	024H
	DD	02f0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_matrixCompMult@@YAHXZ
	DD	027H
	DD	0d0fH
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_matrixCompMult@@YAHXZ DD 032f19H
	DD	0f40109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0798H
$unwind$?test_outerProduct@@YAHXZ DD 032c19H
	DD	0740109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0390H
$unwind$?test_transpose@@YAHXZ DD 032f19H
	DD	0f40109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0798H
$unwind$?test_determinant@@YAHXZ DD 010201H
	DD	07002H
$unwind$?test_inverse@@YAHXZ DD 032c19H
	DD	07e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	03e0H
$unwind$?test_inverse_simd@@YAHXZ DD 032c19H
	DD	0520109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0280H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_matrixCompMult@@YAHXZ$rtcName$0 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$1 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$2 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$3 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$4 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$5 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$6 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$7 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$8 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$9 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$10 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$11 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$12 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$13 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$14 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$15 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$16 DB 06dH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcName$17 DB 06eH		; test_matrixCompMult
	DB	00H
	ORG $+2
?test_matrixCompMult@@YAHXZ$rtcFrameData DD 012H	; test_matrixCompMult
	DD	00H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcVarDesc
?test_outerProduct@@YAHXZ$rtcName$0 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+6
?test_matrixCompMult@@YAHXZ$rtcVarDesc DD 05f8H		; test_matrixCompMult
	DD	030H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$17
	DD	05a8H
	DD	030H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$16
	DD	0548H
	DD	020H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$15
	DD	0508H
	DD	020H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$14
	DD	0470H
	DD	040H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$13
	DD	0410H
	DD	040H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$12
	DD	0388H
	DD	030H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$11
	DD	0338H
	DD	030H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$10
	DD	02f8H
	DD	018H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$9
	DD	02c8H
	DD	018H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$8
	DD	0268H
	DD	024H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$7
	DD	0228H
	DD	024H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$6
	DD	01c8H
	DD	020H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$5
	DD	0188H
	DD	020H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$4
	DD	0148H
	DD	018H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$3
	DD	0118H
	DD	018H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$2
	DD	0d8H
	DD	010H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$1
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_matrixCompMult@@YAHXZ$rtcName$0
	ORG $+864
?test_outerProduct@@YAHXZ$rtcName$1 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$2 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$3 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$4 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$5 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$6 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$7 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcName$8 DB 06dH		; test_outerProduct
	DB	00H
	ORG $+2
?test_outerProduct@@YAHXZ$rtcVarDesc DD 0228H		; test_outerProduct
	DD	030H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$8
	DD	01e8H
	DD	020H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$7
	DD	0198H
	DD	030H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$6
	DD	0168H
	DD	018H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$5
	DD	0128H
	DD	020H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$4
	DD	0f8H
	DD	018H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$3
	DD	0a0H
	DD	040H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$2
	DD	058H
	DD	024H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$1
	DD	028H
	DD	010H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcName$0
	ORG $+432
?test_outerProduct@@YAHXZ$rtcFrameData DD 09H		; test_outerProduct
	DD	00H
	DQ	FLAT:?test_outerProduct@@YAHXZ$rtcVarDesc
?test_transpose@@YAHXZ$rtcName$0 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$1 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$2 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$3 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$4 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$5 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$6 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$7 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$8 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$9 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$10 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$11 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$12 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$13 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$14 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$15 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$16 DB 06dH		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcName$17 DB 074H		; test_transpose
	DB	00H
	ORG $+2
?test_transpose@@YAHXZ$rtcFrameData DD 012H		; test_transpose
	DD	00H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcVarDesc
?test_inverse@@YAHXZ$rtcName$0 DB 041H			; test_inverse
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+3
?test_transpose@@YAHXZ$rtcVarDesc DD 05f8H		; test_transpose
	DD	030H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$17
	DD	05a8H
	DD	030H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$16
	DD	0548H
	DD	020H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$15
	DD	0508H
	DD	020H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$14
	DD	0470H
	DD	040H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$13
	DD	0410H
	DD	040H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$12
	DD	0388H
	DD	030H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$11
	DD	0338H
	DD	030H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$10
	DD	02f8H
	DD	018H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$9
	DD	02c8H
	DD	018H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$8
	DD	0268H
	DD	024H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$7
	DD	0228H
	DD	024H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$6
	DD	01c8H
	DD	020H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$5
	DD	0188H
	DD	020H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$4
	DD	0148H
	DD	018H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$3
	DD	0118H
	DD	018H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$2
	DD	0d8H
	DD	010H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$1
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_transpose@@YAHXZ$rtcName$0
	ORG $+864
?test_inverse@@YAHXZ$rtcName$1 DB 042H			; test_inverse
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$2 DB 049H			; test_inverse
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$3 DB 041H			; test_inverse
	DB	033H
	DB	078H
	DB	033H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$4 DB 042H			; test_inverse
	DB	033H
	DB	078H
	DB	033H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$5 DB 049H			; test_inverse
	DB	033H
	DB	078H
	DB	033H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$6 DB 041H			; test_inverse
	DB	032H
	DB	078H
	DB	032H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$7 DB 042H			; test_inverse
	DB	032H
	DB	078H
	DB	032H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcName$8 DB 049H			; test_inverse
	DB	032H
	DB	078H
	DB	032H
	DB	00H
	ORG $+3
?test_inverse@@YAHXZ$rtcVarDesc DD 02e8H		; test_inverse
	DD	010H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$8
	DD	02b8H
	DD	010H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$7
	DD	0288H
	DD	010H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$6
	DD	0228H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$5
	DD	01e8H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$4
	DD	01a8H
	DD	024H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$3
	DD	0110H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$2
	DD	0b0H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcName$0
	ORG $+432
?test_inverse@@YAHXZ$rtcFrameData DD 09H		; test_inverse
	DD	00H
	DQ	FLAT:?test_inverse@@YAHXZ$rtcVarDesc
?test_inverse_simd@@YAHXZ$rtcName$0 DB 049H		; test_inverse_simd
	DB	064H
	DB	065H
	DB	06eH
	DB	074H
	DB	069H
	DB	074H
	DB	079H
	DB	00H
	ORG $+3
?test_inverse_simd@@YAHXZ$rtcName$1 DB 041H		; test_inverse_simd
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+3
?test_inverse_simd@@YAHXZ$rtcName$2 DB 042H		; test_inverse_simd
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+3
?test_inverse_simd@@YAHXZ$rtcName$3 DB 049H		; test_inverse_simd
	DB	034H
	DB	078H
	DB	034H
	DB	00H
	ORG $+7
?test_inverse_simd@@YAHXZ$rtcFrameData DD 04H		; test_inverse_simd
	DD	00H
	DQ	FLAT:?test_inverse_simd@@YAHXZ$rtcVarDesc
	ORG $+8
?test_inverse_simd@@YAHXZ$rtcVarDesc DD 0170H		; test_inverse_simd
	DD	040H
	DQ	FLAT:?test_inverse_simd@@YAHXZ$rtcName$3
	DD	0110H
	DD	040H
	DQ	FLAT:?test_inverse_simd@@YAHXZ$rtcName$2
	DD	0b0H
	DD	040H
	DQ	FLAT:?test_inverse_simd@@YAHXZ$rtcName$1
	DD	050H
	DD	040H
	DQ	FLAT:?test_inverse_simd@@YAHXZ$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_add<float,0,0>::call, COMDAT

; 41   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 42   : 			return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 43   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_add<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator+=<float>, COMDAT

; 383  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 384  : 		return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_add@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_add<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 385  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv66 = 112
tv74 = 120
tv82 = 128
__$ReturnUdt$ = 160
m$ = 168
s$ = 176
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z PROC ; glm::operator*<float,0>, COMDAT

; 482  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 483  : 		return tmat4x4<T, P>(

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv82[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rcx]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv82[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 484  : 			m[0] * s,
; 485  : 			m[1] * s,
; 486  : 			m[2] * s,
; 487  : 			m[3] * s);
; 488  : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ENDP ; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
OneOverDeterminant$ = 48
Inverse$ = 72
$T4 = 112
$T5 = 116
$T6 = 120
$T7 = 124
tv68 = 128
tv76 = 136
tv81 = 144
__$ArrayPad$ = 152
__$ReturnUdt$ = 192
m$ = 200
?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call, COMDAT

; 256  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 257  : 			T OneOverDeterminant = static_cast<T>(1) / (

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 258  : 				+ m[0][0] * m[1][1]
; 259  : 				- m[1][0] * m[0][1]);
; 260  : 
; 261  : 			tmat2x2<T, P> Inverse(

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR $T4[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR $T5[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR $T6[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR $T7[rsp], xmm0
	lea	rax, QWORD PTR $T4[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T5[rsp]
	lea	r8, QWORD PTR $T6[rsp]
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 262  : 				+ m[1][1] * OneOverDeterminant,
; 263  : 				- m[0][1] * OneOverDeterminant,
; 264  : 				- m[1][0] * OneOverDeterminant,
; 265  : 				+ m[0][0] * OneOverDeterminant);
; 266  : 
; 267  : 			return Inverse;

	lea	rax, QWORD PTR Inverse$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 268  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
OneOverDeterminant$ = 32
Inverse$ = 56
tv68 = 112
tv74 = 120
tv82 = 128
tv87 = 136
tv129 = 144
tv134 = 152
tv140 = 160
tv148 = 168
tv153 = 176
tv164 = 184
tv169 = 192
tv175 = 200
tv183 = 208
tv188 = 216
tv213 = 224
tv221 = 232
tv226 = 240
tv237 = 248
tv248 = 256
tv256 = 264
tv261 = 272
tv273 = 280
tv284 = 288
tv292 = 296
tv297 = 304
tv308 = 312
tv319 = 320
tv327 = 328
tv332 = 336
tv344 = 344
tv355 = 352
tv363 = 360
tv368 = 368
tv379 = 376
tv390 = 384
tv398 = 392
tv403 = 400
tv415 = 408
tv426 = 416
tv434 = 424
tv439 = 432
tv450 = 440
tv461 = 448
tv469 = 456
tv474 = 464
tv486 = 472
tv497 = 480
tv505 = 488
tv510 = 496
tv521 = 504
__$ArrayPad$ = 512
__$ReturnUdt$ = 560
m$ = 568
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call, COMDAT

; 275  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+560]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 276  : 			T OneOverDeterminant = static_cast<T>(1) / (

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv82[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv87[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv87[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv82[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv68[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv129[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv134[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv148[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv153[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv153[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv148[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv134[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv129[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv164[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv169[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv175[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv175[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv183[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv188[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv188[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv183[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tv169[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv164[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 277  : 				+ m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
; 278  : 				- m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
; 279  : 				+ m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]));
; 280  : 
; 281  : 			tmat3x3<T, P> Inverse(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 282  : 			Inverse[0][0] = + (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv213[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv213[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv221[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv226[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv226[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv221[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv237[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv237[rsp]
	movss	DWORD PTR [rax], xmm0

; 283  : 			Inverse[1][0] = - (m[1][0] * m[2][2] - m[2][0] * m[1][2]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv256[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv261[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv261[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv256[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv273[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv273[rsp]
	movss	DWORD PTR [rax], xmm0

; 284  : 			Inverse[2][0] = + (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * OneOverDeterminant;

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv284[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv284[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv292[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv297[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv292[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv308[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv308[rsp]
	movss	DWORD PTR [rax], xmm0

; 285  : 			Inverse[0][1] = - (m[0][1] * m[2][2] - m[2][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv319[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv319[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv327[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv332[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv332[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv327[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv344[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv344[rsp]
	movss	DWORD PTR [rax], xmm0

; 286  : 			Inverse[1][1] = + (m[0][0] * m[2][2] - m[2][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv355[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv355[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv363[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv368[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv368[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv363[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv379[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv379[rsp]
	movss	DWORD PTR [rax], xmm0

; 287  : 			Inverse[2][1] = - (m[0][0] * m[2][1] - m[2][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv390[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv390[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv398[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv403[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv403[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv398[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv415[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv415[rsp]
	movss	DWORD PTR [rax], xmm0

; 288  : 			Inverse[0][2] = + (m[0][1] * m[1][2] - m[1][1] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv426[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv426[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv434[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv439[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv439[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv434[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv450[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv450[rsp]
	movss	DWORD PTR [rax], xmm0

; 289  : 			Inverse[1][2] = - (m[0][0] * m[1][2] - m[1][0] * m[0][2]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv461[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv461[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv469[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv474[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv474[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv469[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv486[rsp]
	movss	DWORD PTR [rax], xmm0

; 290  : 			Inverse[2][2] = + (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * OneOverDeterminant;

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv497[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv497[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv505[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv510[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv510[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv505[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR OneOverDeterminant$[rsp]
	movss	DWORD PTR tv521[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv521[rsp]
	movss	DWORD PTR [rax], xmm0

; 291  : 
; 292  : 			return Inverse;

	lea	rax, QWORD PTR Inverse$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 658  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 659  : 		return tvec4<T, P>(v1) += v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?YM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator+=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 660  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
Coef00$ = 48
Coef02$ = 52
Coef03$ = 56
Coef04$ = 60
Coef06$ = 64
Coef07$ = 68
Coef08$ = 72
Coef10$ = 76
Coef11$ = 80
Coef12$ = 84
Coef14$ = 88
Coef15$ = 92
Coef16$ = 96
Coef18$ = 100
Coef19$ = 104
Coef20$ = 108
Coef22$ = 112
Coef23$ = 116
Fac0$ = 136
Fac1$ = 184
Fac2$ = 232
Fac3$ = 280
Fac4$ = 328
Fac5$ = 376
Vec0$ = 424
Vec1$ = 472
Vec2$ = 520
Vec3$ = 568
Inv0$ = 616
Inv1$ = 664
Inv2$ = 712
Inv3$ = 760
SignA$ = 808
SignB$ = 856
Inverse$ = 912
Row0$ = 1000
Dot0$ = 1048
Dot1$ = 1076
OneOverDeterminant$ = 1092
$T23 = 1120
$T24 = 1136
$T25 = 1152
$T26 = 1168
$T27 = 1184
$T28 = 1200
$T29 = 1216
$T30 = 1232
$T31 = 1248
$T32 = 1264
$T33 = 1280
$T34 = 1296
$T35 = 1312
$T36 = 1328
$T37 = 1344
$T38 = 1360
$T39 = 1376
$T40 = 1392
$T41 = 1408
$T42 = 1424
tv68 = 1440
tv76 = 1448
tv81 = 1456
tv95 = 1464
tv135 = 1472
tv140 = 1480
tv154 = 1488
tv162 = 1496
tv167 = 1504
tv181 = 1512
tv189 = 1520
tv194 = 1528
tv208 = 1536
tv216 = 1544
tv221 = 1552
tv235 = 1560
tv243 = 1568
tv248 = 1576
tv262 = 1584
tv270 = 1592
tv275 = 1600
tv289 = 1608
tv297 = 1616
tv302 = 1624
tv316 = 1632
tv324 = 1640
tv329 = 1648
tv343 = 1656
tv351 = 1664
tv356 = 1672
tv370 = 1680
tv378 = 1688
tv383 = 1696
tv397 = 1704
tv405 = 1712
tv410 = 1720
tv424 = 1728
tv432 = 1736
tv437 = 1744
tv451 = 1752
tv459 = 1760
tv464 = 1768
tv478 = 1776
tv486 = 1784
tv491 = 1792
tv505 = 1800
tv513 = 1808
tv518 = 1816
tv532 = 1824
tv540 = 1832
tv545 = 1840
tv559 = 1848
tv567 = 1856
tv572 = 1864
tv618 = 1872
tv625 = 1880
tv632 = 1888
tv647 = 1896
tv654 = 1904
tv661 = 1912
tv676 = 1920
tv683 = 1928
tv690 = 1936
tv705 = 1944
tv712 = 1952
tv719 = 1960
tv729 = 1968
tv735 = 1976
tv780 = 1984
tv786 = 1992
tv799 = 2000
tv805 = 2008
tv818 = 2016
tv824 = 2024
tv848 = 2032
tv853 = 2040
tv858 = 2048
tv873 = 2056
tv880 = 2064
tv887 = 2072
__$ArrayPad$ = 2080
__$ReturnUdt$ = 2112
m$ = 2120
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call, COMDAT

; 300  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 512				; 00000200H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 301  : 			T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv68[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv68[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv81[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv81[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv76[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef00$[rsp], xmm0

; 302  : 			T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv95[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv95[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv135[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv140[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv140[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv135[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef02$[rsp], xmm0

; 303  : 			T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv154[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv154[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv162[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv167[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv167[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv162[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef03$[rsp], xmm0

; 304  : 
; 305  : 			T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv181[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv181[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv189[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv194[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv194[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv189[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef04$[rsp], xmm0

; 306  : 			T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv208[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv208[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv216[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv221[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv216[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef06$[rsp], xmm0

; 307  : 			T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv235[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv235[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv243[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv248[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv248[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv243[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef07$[rsp], xmm0

; 308  : 
; 309  : 			T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv262[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv262[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv270[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv275[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv275[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv270[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef08$[rsp], xmm0

; 310  : 			T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv289[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv289[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv297[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv302[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv302[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv297[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef10$[rsp], xmm0

; 311  : 			T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv316[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv316[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv324[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv329[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv329[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv324[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef11$[rsp], xmm0

; 312  : 
; 313  : 			T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv343[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv343[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv351[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv356[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv356[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv351[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef12$[rsp], xmm0

; 314  : 			T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv370[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv370[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv378[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv383[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv383[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv378[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef14$[rsp], xmm0

; 315  : 			T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv397[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv397[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv405[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv410[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv410[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv405[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef15$[rsp], xmm0

; 316  : 
; 317  : 			T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv424[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv424[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv432[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv437[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv437[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv432[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef16$[rsp], xmm0

; 318  : 			T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv451[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv451[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv459[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv464[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv464[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv459[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef18$[rsp], xmm0

; 319  : 			T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv478[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv478[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv486[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv491[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv491[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv486[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef19$[rsp], xmm0

; 320  : 
; 321  : 			T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv505[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv505[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv513[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv518[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv518[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv513[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef20$[rsp], xmm0

; 322  : 			T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv532[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv532[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv540[rsp], xmm0
	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv545[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv545[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv540[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef22$[rsp], xmm0

; 323  : 			T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv559[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv559[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv567[rsp], xmm0
	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv572[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv572[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv567[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR Coef23$[rsp], xmm0

; 324  : 
; 325  : 			tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);

	movss	xmm0, DWORD PTR Coef03$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef02$[rsp]
	movss	xmm2, DWORD PTR Coef00$[rsp]
	movss	xmm1, DWORD PTR Coef00$[rsp]
	lea	rcx, QWORD PTR Fac0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 326  : 			tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);

	movss	xmm0, DWORD PTR Coef07$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef06$[rsp]
	movss	xmm2, DWORD PTR Coef04$[rsp]
	movss	xmm1, DWORD PTR Coef04$[rsp]
	lea	rcx, QWORD PTR Fac1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 327  : 			tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);

	movss	xmm0, DWORD PTR Coef11$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef10$[rsp]
	movss	xmm2, DWORD PTR Coef08$[rsp]
	movss	xmm1, DWORD PTR Coef08$[rsp]
	lea	rcx, QWORD PTR Fac2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 328  : 			tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);

	movss	xmm0, DWORD PTR Coef15$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef14$[rsp]
	movss	xmm2, DWORD PTR Coef12$[rsp]
	movss	xmm1, DWORD PTR Coef12$[rsp]
	lea	rcx, QWORD PTR Fac3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 329  : 			tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);

	movss	xmm0, DWORD PTR Coef19$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef18$[rsp]
	movss	xmm2, DWORD PTR Coef16$[rsp]
	movss	xmm1, DWORD PTR Coef16$[rsp]
	lea	rcx, QWORD PTR Fac4$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 330  : 			tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

	movss	xmm0, DWORD PTR Coef23$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR Coef22$[rsp]
	movss	xmm2, DWORD PTR Coef20$[rsp]
	movss	xmm1, DWORD PTR Coef20$[rsp]
	lea	rcx, QWORD PTR Fac5$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 331  : 
; 332  : 			tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv618[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv625[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv632[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv618[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv625[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv632[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 333  : 			tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv647[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv654[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv661[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv647[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv654[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv661[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec1$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 334  : 			tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv676[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv683[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv690[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv676[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv683[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv690[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec2$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 335  : 			tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv705[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv712[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv719[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv705[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv712[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv719[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Vec3$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 336  : 
; 337  : 			tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);

	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv729[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv735[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv735[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv729[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv0$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 338  : 			tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);

	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv780[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv786[rsp], rax
	lea	r8, QWORD PTR Fac0$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv786[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv780[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv1$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 339  : 			tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec3$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv799[rsp], rax
	lea	r8, QWORD PTR Fac3$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv805[rsp], rax
	lea	r8, QWORD PTR Fac1$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv805[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv799[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv2$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 340  : 			tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

	lea	r8, QWORD PTR Fac5$[rsp]
	lea	rdx, QWORD PTR Vec2$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv818[rsp], rax
	lea	r8, QWORD PTR Fac4$[rsp]
	lea	rdx, QWORD PTR Vec1$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv824[rsp], rax
	lea	r8, QWORD PTR Fac2$[rsp]
	lea	rdx, QWORD PTR Vec0$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv824[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR tv818[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inv3$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>

; 341  : 
; 342  : 			tvec4<T, P> SignA(+1, -1, +1, -1);

	mov	DWORD PTR [rsp+32], -1
	mov	r9d, 1
	mov	r8d, -1
	mov	edx, 1
	lea	rcx, QWORD PTR SignA$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 343  : 			tvec4<T, P> SignB(-1, +1, -1, +1);

	mov	DWORD PTR [rsp+32], 1
	mov	r9d, -1
	mov	r8d, 1
	mov	edx, -1
	lea	rcx, QWORD PTR SignB$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 344  : 			tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv3$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv848[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv2$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv853[rsp], rax
	lea	r8, QWORD PTR SignB$[rsp]
	lea	rdx, QWORD PTR Inv1$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv858[rsp], rax
	lea	r8, QWORD PTR SignA$[rsp]
	lea	rdx, QWORD PTR Inv0$[rsp]
	lea	rcx, QWORD PTR $T42[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv848[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv853[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv858[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 345  : 
; 346  : 			tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

	mov	edx, 3
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv873[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv880[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv887[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Inverse$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv873[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rcx, QWORD PTR tv880[rsp]
	movss	xmm3, DWORD PTR [rcx]
	mov	rcx, QWORD PTR tv887[rsp]
	movss	xmm2, DWORD PTR [rcx]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR Row0$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 347  : 
; 348  : 			tvec4<T, P> Dot0(m[0] * Row0);

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r8, QWORD PTR Row0$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Dot0$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 349  : 			T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

	movss	xmm0, DWORD PTR Dot0$[rsp]
	addss	xmm0, DWORD PTR Dot0$[rsp+4]
	movss	xmm1, DWORD PTR Dot0$[rsp+8]
	addss	xmm1, DWORD PTR Dot0$[rsp+12]
	addss	xmm0, xmm1
	movss	DWORD PTR Dot1$[rsp], xmm0

; 350  : 
; 351  : 			T OneOverDeterminant = static_cast<T>(1) / Dot1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Dot1$[rsp]
	movss	DWORD PTR OneOverDeterminant$[rsp], xmm0

; 352  : 
; 353  : 			return Inverse * OneOverDeterminant;

	lea	r8, QWORD PTR OneOverDeterminant$[rsp]
	lea	rdx, QWORD PTR Inverse$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@AEBM@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 354  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2096				; 00000830H
	pop	rdi
	ret	0
?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 112
tv88 = 120
tv132 = 128
tv144 = 136
tv156 = 144
tv168 = 152
tv180 = 160
tv192 = 168
tv204 = 176
tv216 = 184
tv228 = 192
tv240 = 200
__$ArrayPad$ = 208
__$ReturnUdt$ = 256
m$ = 264
?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call, COMDAT

; 154  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 155  : 			tmat3x4<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 156  : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 157  : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 158  : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 159  : 			result[0][3] = m[3][0];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 160  : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 161  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 162  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 163  : 			result[1][3] = m[3][1];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 164  : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv204[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv204[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 165  : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 166  : 			result[2][2] = m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv228[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 167  : 			result[2][3] = m[3][2];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv240[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv240[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 168  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 169  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 96
tv88 = 104
tv132 = 112
tv144 = 120
tv156 = 128
tv168 = 136
tv180 = 144
tv192 = 152
__$ArrayPad$ = 160
__$ReturnUdt$ = 208
m$ = 216
?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call, COMDAT

; 136  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 137  : 			tmat2x4<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 138  : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 139  : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 140  : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 141  : 			result[0][3] = m[3][0];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 142  : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 143  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 144  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 145  : 			result[1][3] = m[3][1];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 146  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 147  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
result$ = 48
tv76 = 128
tv88 = 136
tv132 = 144
tv144 = 152
tv156 = 160
tv168 = 168
tv180 = 176
tv192 = 184
tv204 = 192
tv216 = 200
tv228 = 208
tv240 = 216
tv252 = 224
tv264 = 232
tv276 = 240
tv288 = 248
__$ArrayPad$ = 256
__$ReturnUdt$ = 304
m$ = 312
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call, COMDAT

; 176  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 177  : 			tmat4x4<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 178  : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 179  : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 180  : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 181  : 			result[0][3] = m[3][0];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 182  : 
; 183  : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 184  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 185  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 186  : 			result[1][3] = m[3][1];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 187  : 
; 188  : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv204[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv204[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 189  : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 190  : 			result[2][2] = m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv228[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 191  : 			result[2][3] = m[3][2];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv240[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv240[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 192  : 
; 193  : 			result[3][0] = m[0][3];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv252[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv252[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 194  : 			result[3][1] = m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv264[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv264[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 195  : 			result[3][2] = m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv276[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv276[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 196  : 			result[3][3] = m[3][3];

	mov	edx, 3
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv288[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv288[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 197  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 198  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 112
tv88 = 120
tv132 = 128
tv144 = 136
tv156 = 144
tv168 = 152
tv180 = 160
tv192 = 168
tv204 = 176
tv216 = 184
tv228 = 192
tv240 = 200
__$ArrayPad$ = 208
__$ReturnUdt$ = 256
m$ = 264
?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 115  : 			tmat4x3<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 116  : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 117  : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 118  : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 119  : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 120  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 121  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 122  : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 123  : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 124  : 			result[2][2] = m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv204[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv204[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 125  : 			result[3][0] = m[0][3];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv216[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv216[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 126  : 			result[3][1] = m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv228[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv228[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 127  : 			result[3][2] = m[2][3];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv240[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv240[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 128  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 129  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 80
tv88 = 88
tv132 = 96
tv144 = 104
tv156 = 112
tv168 = 120
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
m$ = 184
?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 78   : 			tmat2x3<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 79   : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 80   : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 81   : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 82   : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 83   : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 84   : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 85   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 86   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 96
tv88 = 104
tv132 = 112
tv144 = 120
tv156 = 128
tv168 = 136
tv180 = 144
tv192 = 152
tv204 = 160
__$ArrayPad$ = 168
__$ReturnUdt$ = 208
m$ = 216
?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call, COMDAT

; 93   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 94   : 			tmat3x3<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 95   : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 96   : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 97   : 			result[0][2] = m[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 98   : 
; 99   : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 100  : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 101  : 			result[1][2] = m[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 102  : 
; 103  : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 104  : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 105  : 			result[2][2] = m[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv204[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv204[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 106  : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 107  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 96
tv88 = 104
tv132 = 112
tv144 = 120
tv156 = 128
tv168 = 136
tv180 = 144
tv192 = 152
__$ArrayPad$ = 160
__$ReturnUdt$ = 208
m$ = 216
?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 60   : 			tmat4x2<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 61   : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 62   : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 63   : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 64   : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 65   : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 66   : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 67   : 			result[3][0] = m[0][3];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv180[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv180[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 68   : 			result[3][1] = m[1][3];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	edx, 3
	mov	rcx, rax
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv192[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv192[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 69   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 80
tv88 = 88
tv132 = 96
tv144 = 104
tv156 = 112
tv168 = 120
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
m$ = 184
?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z PROC ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call, COMDAT

; 43   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 44   : 			tmat3x2<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 45   : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 46   : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 47   : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 48   : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 49   : 			result[2][0] = m[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv156[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv156[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 50   : 			result[2][1] = m[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv168[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv168[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 51   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z ENDP ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
result$ = 40
tv76 = 80
tv88 = 88
tv132 = 96
tv144 = 104
__$ArrayPad$ = 112
__$ReturnUdt$ = 160
m$ = 168
?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call, COMDAT

; 29   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 30   : 			tmat2x2<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 31   : 			result[0][0] = m[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv76[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv76[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 32   : 			result[0][1] = m[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 33   : 			result[1][0] = m[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv132[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv132[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 34   : 			result[1][1] = m[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv144[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv144[rsp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0

; 35   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 36   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 100
$T5 = 112
tv74 = 128
tv72 = 136
__$ArrayPad$ = 144
__$ReturnUdt$ = 192
x$ = 200
y$ = 208
?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	$LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 84
$T5 = 96
tv74 = 104
tv82 = 112
__$ArrayPad$ = 120
__$ReturnUdt$ = 160
x$ = 168
y$ = 176
?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv82[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 48
i$4 = 116
$T5 = 128
tv74 = 144
tv72 = 152
__$ArrayPad$ = 160
__$ReturnUdt$ = 208
x$ = 216
y$ = 224
?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 100
$T5 = 112
tv74 = 128
tv72 = 136
__$ArrayPad$ = 144
__$ReturnUdt$ = 192
x$ = 200
y$ = 208
?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 68
$T5 = 80
tv74 = 88
tv82 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
x$ = 152
y$ = 160
?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv82[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 84
$T5 = 96
tv74 = 112
tv72 = 120
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
x$ = 184
y$ = 192
?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 84
$T5 = 96
tv74 = 112
tv72 = 120
__$ArrayPad$ = 128
__$ReturnUdt$ = 176
x$ = 184
y$ = 192
?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 1001 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1002 : 		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1003 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 68
$T5 = 80
tv74 = 96
tv72 = 104
__$ArrayPad$ = 112
__$ReturnUdt$ = 160
x$ = 168
y$ = 176
?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
result$ = 40
i$4 = 68
$T5 = 80
tv74 = 88
tv82 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
x$ = 152
y$ = 160
?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call, COMDAT

; 14   : 		{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 15   : 			matType<T, P> result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 16   : 			for(length_t i = 0; i < result.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 17   : 				result[i] = x[i] * y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	QWORD PTR tv74[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv82[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@call
$LN3@call:

; 18   : 			return result;

	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 19   : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT

; 204  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>, COMDAT

; 80   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,float>, COMDAT

; 66   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><float,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 257  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 258  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 259  : 	Error += test_matrixCompMult();

	call	?test_matrixCompMult@@YAHXZ		; test_matrixCompMult
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 260  : 	Error += test_outerProduct();

	call	?test_outerProduct@@YAHXZ		; test_outerProduct
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 261  : 	Error += test_transpose();

	call	?test_transpose@@YAHXZ			; test_transpose
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 262  : 	Error += test_determinant();

	call	?test_determinant@@YAHXZ		; test_determinant
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 263  : 	Error += test_inverse();

	call	?test_inverse@@YAHXZ			; test_inverse
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 264  : 	Error += test_inverse_simd();

	call	?test_inverse_simd@@YAHXZ		; test_inverse_simd
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 265  : 
; 266  : #	ifdef NDEBUG
; 267  : 	std::size_t const Samples(1000);
; 268  : 	for(std::size_t i = 0; i < 1; ++i)
; 269  : 	{
; 270  : 		Error += test_inverse_perf<glm::vec3, glm::mat4>(Samples, i, "mat4");
; 271  : 		Error += test_inverse_perf<glm::dvec3, glm::dmat4>(Samples, i, "dmat4");
; 272  : 	}
; 273  : #	endif//NDEBUG
; 274  : 
; 275  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 276  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
Error$ = 48
Identity$ = 80
A4x4$ = 176
B4x4$ = 272
I4x4$ = 368
$T7 = 448
$T8 = 452
$T9 = 468
$T10 = 484
$T11 = 500
$T12 = 516
$T13 = 520
$T14 = 524
$T15 = 528
$T16 = 532
$T17 = 536
$T18 = 540
$T19 = 544
tv69 = 552
tv76 = 560
tv83 = 568
tv136 = 576
tv147 = 584
tv153 = 592
tv164 = 600
tv170 = 608
tv181 = 616
tv187 = 624
tv198 = 632
__$ArrayPad$ = 640
?test_inverse_simd@@YAHXZ PROC				; test_inverse_simd

; 190  : {

$LN11:
	push	rdi
	sub	rsp, 656				; 00000290H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 152				; 00000098H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 191  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 192  : 
; 193  : 	glm::mat4x4 const Identity(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T7[rsp], xmm0
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 194  : 
; 195  : 	glm::mat4x4 const A4x4(

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv69[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv76[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv83[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, QWORD PTR tv69[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv76[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv83[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A4x4$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 196  : 		glm::vec4(1, 0, 1, 0),
; 197  : 		glm::vec4(0, 1, 0, 0),
; 198  : 		glm::vec4(0, 0, 1, 0),
; 199  : 		glm::vec4(0, 0, 0, 1));
; 200  : 	glm::mat4x4 const B4x4 = glm::inverse(A4x4);

	lea	rdx, QWORD PTR A4x4$[rsp]
	lea	rcx, QWORD PTR B4x4$[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 201  : 	glm::mat4x4 const I4x4 = A4x4 * B4x4;

	lea	r8, QWORD PTR B4x4$[rsp]
	lea	rdx, QWORD PTR A4x4$[rsp]
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 202  : 
; 203  : 	Error += glm::all(glm::epsilonEqual(I4x4[0], Identity[0], 0.001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR $T12[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv136[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r9, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR tv136[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_inver
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN4@test_inver
$LN3@test_inver:
	mov	DWORD PTR tv147[rsp], 1
$LN4@test_inver:
	mov	eax, DWORD PTR tv147[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 204  : 	Error += glm::all(glm::epsilonEqual(I4x4[1], Identity[1], 0.001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR $T14[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv153[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r9, QWORD PTR $T14[rsp]
	mov	rcx, QWORD PTR tv153[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_inver
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN6@test_inver
$LN5@test_inver:
	mov	DWORD PTR tv164[rsp], 1
$LN6@test_inver:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 205  : 	Error += glm::all(glm::epsilonEqual(I4x4[2], Identity[2], 0.001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR $T16[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv170[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r9, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR tv170[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_inver
	mov	DWORD PTR tv181[rsp], 0
	jmp	SHORT $LN8@test_inver
$LN7@test_inver:
	mov	DWORD PTR tv181[rsp], 1
$LN8@test_inver:
	mov	eax, DWORD PTR tv181[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 206  : 	Error += glm::all(glm::epsilonEqual(I4x4[3], Identity[3], 0.001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3a83126f
	movss	DWORD PTR $T18[rsp], xmm0
	mov	edx, 3
	lea	rcx, QWORD PTR Identity$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	r9, QWORD PTR $T18[rsp]
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_inver
	mov	DWORD PTR tv198[rsp], 0
	jmp	SHORT $LN10@test_inver
$LN9@test_inver:
	mov	DWORD PTR tv198[rsp], 1
$LN10@test_inver:
	mov	eax, DWORD PTR tv198[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 207  : 
; 208  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 209  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse_simd@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 656				; 00000290H
	pop	rdi
	ret	0
?test_inverse_simd@@YAHXZ ENDP				; test_inverse_simd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
$T4 = 60
tv70 = 64
tv78 = 72
tv83 = 80
tv130 = 88
tv138 = 96
tv143 = 104
tv158 = 112
tv166 = 120
tv171 = 128
tv186 = 136
tv194 = 144
tv199 = 152
__$ReturnUdt$ = 176
m1$ = 184
m2$ = 192
??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 402  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H

; 403  : 		return tmat2x2<T, P>(

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv70[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv70[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv83[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv83[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv78[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T1[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv130[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv130[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv138[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv143[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv138[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T2[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv158[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv158[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv166[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv171[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv171[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv166[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T3[rsp], xmm0
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv186[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv186[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv194[rsp], xmm0
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv199[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv199[rsp]
	movss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv194[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR $T4[rsp], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T2[rsp]
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 404  : 			m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
; 405  : 			m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
; 406  : 			m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
; 407  : 			m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1]);
; 408  : 	}

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat2x2>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat2x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat2x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA00$ = 32
SrcA01$ = 36
SrcA02$ = 40
SrcA10$ = 44
SrcA11$ = 48
SrcA12$ = 52
SrcA20$ = 56
SrcA21$ = 60
SrcA22$ = 64
SrcB00$ = 68
SrcB01$ = 72
SrcB02$ = 76
SrcB10$ = 80
SrcB11$ = 84
SrcB12$ = 88
SrcB20$ = 92
SrcB21$ = 96
SrcB22$ = 100
Result$ = 120
tv216 = 176
tv227 = 180
tv238 = 184
tv249 = 188
tv260 = 192
tv271 = 196
tv282 = 200
tv293 = 204
tv304 = 208
__$ArrayPad$ = 216
__$ReturnUdt$ = 256
m1$ = 264
m2$ = 272
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 447  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 448  : 		T const SrcA00 = m1[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA00$[rsp], xmm0

; 449  : 		T const SrcA01 = m1[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA01$[rsp], xmm0

; 450  : 		T const SrcA02 = m1[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA02$[rsp], xmm0

; 451  : 		T const SrcA10 = m1[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA10$[rsp], xmm0

; 452  : 		T const SrcA11 = m1[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA11$[rsp], xmm0

; 453  : 		T const SrcA12 = m1[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA12$[rsp], xmm0

; 454  : 		T const SrcA20 = m1[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA20$[rsp], xmm0

; 455  : 		T const SrcA21 = m1[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA21$[rsp], xmm0

; 456  : 		T const SrcA22 = m1[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcA22$[rsp], xmm0

; 457  : 
; 458  : 		T const SrcB00 = m2[0][0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB00$[rsp], xmm0

; 459  : 		T const SrcB01 = m2[0][1];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB01$[rsp], xmm0

; 460  : 		T const SrcB02 = m2[0][2];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB02$[rsp], xmm0

; 461  : 		T const SrcB10 = m2[1][0];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB10$[rsp], xmm0

; 462  : 		T const SrcB11 = m2[1][1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB11$[rsp], xmm0

; 463  : 		T const SrcB12 = m2[1][2];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB12$[rsp], xmm0

; 464  : 		T const SrcB20 = m2[2][0];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB20$[rsp], xmm0

; 465  : 		T const SrcB21 = m2[2][1];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB21$[rsp], xmm0

; 466  : 		T const SrcB22 = m2[2][2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR SrcB22$[rsp], xmm0

; 467  : 
; 468  : 		tmat3x3<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 469  : 		Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv216[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv216[rsp]
	movss	DWORD PTR [rax], xmm0

; 470  : 		Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv227[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv227[rsp]
	movss	DWORD PTR [rax], xmm0

; 471  : 		Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB00$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB01$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB02$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv238[rsp], xmm0
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv238[rsp]
	movss	DWORD PTR [rax], xmm0

; 472  : 		Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv249[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv249[rsp]
	movss	DWORD PTR [rax], xmm0

; 473  : 		Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv260[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv260[rsp]
	movss	DWORD PTR [rax], xmm0

; 474  : 		Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB10$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB11$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB12$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv271[rsp], xmm0
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv271[rsp]
	movss	DWORD PTR [rax], xmm0

; 475  : 		Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;

	movss	xmm0, DWORD PTR SrcA00$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA10$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA20$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv282[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	xor	edx, edx
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv282[rsp]
	movss	DWORD PTR [rax], xmm0

; 476  : 		Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;

	movss	xmm0, DWORD PTR SrcA01$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA11$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA21$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv293[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 1
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv293[rsp]
	movss	DWORD PTR [rax], xmm0

; 477  : 		Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;

	movss	xmm0, DWORD PTR SrcA02$[rsp]
	mulss	xmm0, DWORD PTR SrcB20$[rsp]
	movss	xmm1, DWORD PTR SrcA12$[rsp]
	mulss	xmm1, DWORD PTR SrcB21$[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR SrcA22$[rsp]
	mulss	xmm1, DWORD PTR SrcB22$[rsp]
	addss	xmm0, xmm1
	movss	DWORD PTR tv304[rsp], xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	edx, 2
	mov	rcx, rax
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv304[rsp]
	movss	DWORD PTR [rax], xmm0

; 478  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 479  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat3x3>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat3x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat3x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
SrcA0$ = 40
SrcA1$ = 88
SrcA2$ = 136
SrcA3$ = 184
SrcB0$ = 232
SrcB1$ = 280
SrcB2$ = 328
SrcB3$ = 376
Result$ = 432
$T12 = 512
$T13 = 528
$T14 = 544
$T15 = 560
$T16 = 576
$T17 = 592
$T18 = 608
$T19 = 624
$T20 = 640
$T21 = 656
$T22 = 672
$T23 = 688
$T24 = 704
$T25 = 720
$T26 = 736
$T27 = 752
$T28 = 768
$T29 = 784
$T30 = 800
$T31 = 816
$T32 = 832
$T33 = 848
$T34 = 864
$T35 = 880
$T36 = 896
$T37 = 912
$T38 = 928
$T39 = 944
tv134 = 960
tv143 = 968
tv152 = 976
tv133 = 984
tv178 = 992
tv187 = 1000
tv196 = 1008
tv177 = 1016
tv222 = 1024
tv231 = 1032
tv240 = 1040
tv221 = 1048
tv298 = 1056
tv307 = 1064
tv316 = 1072
tv297 = 1080
__$ArrayPad$ = 1088
__$ReturnUdt$ = 1136
m1$ = 1144
m2$ = 1152
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1112				; 00000458H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 270				; 0000010eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 597  : 		typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 598  : 		typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 599  : 		typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 600  : 		typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcA3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 601  : 
; 602  : 		typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB0$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 603  : 		typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];

	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB1$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 604  : 		typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];

	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB2$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 605  : 		typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	lea	rcx, QWORD PTR SrcB3$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 606  : 
; 607  : 		tmat4x4<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 608  : 		Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv134[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv143[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv152[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB0$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv133[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv133[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 609  : 		Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv178[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv187[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv196[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB1$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv196[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv187[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv178[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv177[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv177[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 610  : 		Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv222[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv231[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv240[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB2$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv240[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv231[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv222[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv221[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv221[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 611  : 		Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];

	mov	edx, 3
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA3$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv298[rsp], rax
	mov	edx, 2
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA2$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv307[rsp], rax
	mov	edx, 1
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA1$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv316[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR SrcB3$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	lea	rdx, QWORD PTR SrcA0$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv316[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv307[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rcx, QWORD PTR tv298[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	QWORD PTR tv297[rsp], rax
	mov	edx, 3
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv297[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 612  : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 613  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1112				; 00000458H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::inverse<float,0,glm::tmat4x4>, COMDAT

; 392  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 393  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'inverse' only accept floating-point inputs");
; 394  : 		return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_inverse@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_inverse<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::inverse<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
Failed$ = 48
A4x4$ = 80
B4x4$ = 176
I4x4$ = 272
$T12 = 352
A3x3$ = 424
B3x3$ = 488
I3x3$ = 552
$T13 = 600
A2x2$ = 648
B2x2$ = 696
I2x2$ = 744
$T14 = 776
$T15 = 800
$T16 = 816
$T17 = 832
$T18 = 848
$T19 = 864
$T20 = 868
$T21 = 880
$T22 = 892
$T23 = 904
$T24 = 912
tv67 = 920
tv74 = 928
tv81 = 936
tv138 = 944
tv143 = 952
tv149 = 960
tv172 = 968
tv177 = 976
tv198 = 984
__$ArrayPad$ = 992
?test_inverse@@YAHXZ PROC				; test_inverse

; 159  : {

$LN9:
	push	rdi
	sub	rsp, 1008				; 000003f0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 240				; 000000f0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 160  : 	int Failed(0);

	mov	DWORD PTR Failed$[rsp], 0

; 161  : 
; 162  : 	glm::mat4x4 A4x4(

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv67[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv74[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv81[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv74[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv81[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A4x4$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 163  : 		glm::vec4(1, 0, 1, 0), 
; 164  : 		glm::vec4(0, 1, 0, 0), 
; 165  : 		glm::vec4(0, 0, 1, 0), 
; 166  : 		glm::vec4(0, 0, 0, 1));
; 167  : 	glm::mat4x4 B4x4 = inverse(A4x4);

	lea	rdx, QWORD PTR A4x4$[rsp]
	lea	rcx, QWORD PTR B4x4$[rsp]
	call	??$inverse@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat4x4>

; 168  : 	glm::mat4x4 I4x4 = A4x4 * B4x4;

	lea	r8, QWORD PTR B4x4$[rsp]
	lea	rdx, QWORD PTR A4x4$[rsp]
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 169  : 	Failed += I4x4 == glm::mat4x4(1) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T19[rsp], xmm0
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR I4x4$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_inver
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN4@test_inver
$LN3@test_inver:
	mov	DWORD PTR tv138[rsp], 1
$LN4@test_inver:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Failed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Failed$[rsp], eax

; 170  : 
; 171  : 	glm::mat3x3 A3x3(

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv143[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv149[rsp], rax
	mov	r9d, 1
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv149[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A3x3$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 172  : 		glm::vec3(1, 0, 1), 
; 173  : 		glm::vec3(0, 1, 0), 
; 174  : 		glm::vec3(0, 0, 1));
; 175  : 	glm::mat3x3 B3x3 = glm::inverse(A3x3);

	lea	rdx, QWORD PTR A3x3$[rsp]
	lea	rcx, QWORD PTR B3x3$[rsp]
	call	??$inverse@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat3x3>

; 176  : 	glm::mat3x3 I3x3 = A3x3 * B3x3;

	lea	r8, QWORD PTR B3x3$[rsp]
	lea	rdx, QWORD PTR A3x3$[rsp]
	lea	rcx, QWORD PTR I3x3$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 177  : 	Failed += I3x3 == glm::mat3x3(1) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z	; glm::tmat3x3<float,0>::tmat3x3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR I3x3$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_inver
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN6@test_inver
$LN5@test_inver:
	mov	DWORD PTR tv172[rsp], 1
$LN6@test_inver:
	mov	eax, DWORD PTR tv172[rsp]
	mov	ecx, DWORD PTR Failed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Failed$[rsp], eax

; 178  : 
; 179  : 	glm::mat2x2 A2x2(

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv177[rsp], rax
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR tv177[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A2x2$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 180  : 		glm::vec2(1, 1), 
; 181  : 		glm::vec2(0, 1));
; 182  : 	glm::mat2x2 B2x2 = glm::inverse(A2x2);

	lea	rdx, QWORD PTR A2x2$[rsp]
	lea	rcx, QWORD PTR B2x2$[rsp]
	call	??$inverse@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ; glm::inverse<float,0,glm::tmat2x2>

; 183  : 	glm::mat2x2 I2x2 = A2x2 * B2x2;

	lea	r8, QWORD PTR B2x2$[rsp]
	lea	rdx, QWORD PTR A2x2$[rsp]
	lea	rcx, QWORD PTR I2x2$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 184  : 	Failed += I2x2 == glm::mat2x2(1) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z	; glm::tmat2x2<float,0>::tmat2x2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR I2x2$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_inver
	mov	DWORD PTR tv198[rsp], 0
	jmp	SHORT $LN8@test_inver
$LN7@test_inver:
	mov	DWORD PTR tv198[rsp], 1
$LN8@test_inver:
	mov	eax, DWORD PTR tv198[rsp]
	mov	ecx, DWORD PTR Failed$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Failed$[rsp], eax

; 185  : 
; 186  : 	return Failed;

	mov	eax, DWORD PTR Failed$[rsp]

; 187  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_inverse@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1008				; 000003f0H
	pop	rdi
	ret	0
?test_inverse@@YAHXZ ENDP				; test_inverse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
?test_determinant@@YAHXZ PROC				; test_determinant

; 152  : {

$LN3:
	push	rdi

; 153  : 
; 154  : 
; 155  : 	return 0;

	xor	eax, eax

; 156  : }

	pop	rdi
	ret	0
?test_determinant@@YAHXZ ENDP				; test_determinant
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat4x3>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU?$tmat4x3@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat4x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat4x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat4x2>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU?$tmat4x2@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat4x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat4x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z PROC ; glm::transpose<float,0,glm::tmat4x4>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ENDP ; glm::transpose<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat3x4>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU?$tmat3x4@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat3x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat3x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat3x2>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU?$tmat3x2@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat3x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat3x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z PROC ; glm::transpose<float,0,glm::tmat3x3>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat3x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ENDP ; glm::transpose<float,0,glm::tmat3x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat2x4>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU?$tmat2x4@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat2x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat2x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z PROC ; glm::transpose<float,0,glm::tmat2x3>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU?$tmat2x3@M$0A@@3@@Z ; glm::detail::compute_transpose<glm::tmat2x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z ENDP ; glm::transpose<float,0,glm::tmat2x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
m$ = 56
??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z PROC ; glm::transpose<float,0,glm::tmat2x2>, COMDAT

; 378  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 379  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'transpose' only accept floating-point inputs");
; 380  : 		return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);

	mov	rdx, QWORD PTR m$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_transpose@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_transpose<glm::tmat2x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ENDP ; glm::transpose<float,0,glm::tmat2x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
Error$ = 144
m$21 = 168
t$22 = 216
$T23 = 248
m$24 = 280
t$25 = 328
$T26 = 360
m$27 = 392
t$28 = 456
$T29 = 504
m$30 = 552
t$31 = 616
$T32 = 664
m$33 = 712
t$34 = 760
$T35 = 792
m$36 = 824
t$37 = 904
$T38 = 968
m$39 = 1040
t$40 = 1136
$T41 = 1216
m$42 = 1288
t$43 = 1352
$T44 = 1400
m$45 = 1448
t$46 = 1528
$T47 = 1592
$T48 = 1648
$T49 = 1652
$T50 = 1656
$T51 = 1660
$T52 = 1664
$T53 = 1668
$T54 = 1672
$T55 = 1676
$T56 = 1680
$T57 = 1684
$T58 = 1688
$T59 = 1692
$T60 = 1696
$T61 = 1700
$T62 = 1704
$T63 = 1708
$T64 = 1712
$T65 = 1716
$T66 = 1720
$T67 = 1724
$T68 = 1728
$T69 = 1732
$T70 = 1736
$T71 = 1740
$T72 = 1744
$T73 = 1748
$T74 = 1752
$T75 = 1756
$T76 = 1760
$T77 = 1764
$T78 = 1768
$T79 = 1772
$T80 = 1776
$T81 = 1780
$T82 = 1784
$T83 = 1788
$T84 = 1792
$T85 = 1796
$T86 = 1800
$T87 = 1804
$T88 = 1808
$T89 = 1812
$T90 = 1816
$T91 = 1820
$T92 = 1824
$T93 = 1828
$T94 = 1832
$T95 = 1836
$T96 = 1840
$T97 = 1844
$T98 = 1848
$T99 = 1852
$T100 = 1856
$T101 = 1860
$T102 = 1864
$T103 = 1868
$T104 = 1872
$T105 = 1876
$T106 = 1880
$T107 = 1884
$T108 = 1888
$T109 = 1892
$T110 = 1896
$T111 = 1900
tv82 = 1904
tv138 = 1908
tv166 = 1912
tv196 = 1916
tv220 = 1920
tv288 = 1924
tv364 = 1928
tv392 = 1932
tv428 = 1936
__$ArrayPad$ = 1944
?test_transpose@@YAHXZ PROC				; test_transpose

; 91   : {

$LN21:
	push	rdi
	sub	rsp, 1952				; 000007a0H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 452				; 000001c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 92   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 93   : 
; 94   : 	{
; 95   : 		mat2 m(0, 1, 2, 3);

	mov	DWORD PTR $T48[rsp], 3
	mov	DWORD PTR $T49[rsp], 2
	mov	DWORD PTR $T50[rsp], 1
	mov	DWORD PTR $T51[rsp], 0
	lea	rax, QWORD PTR $T48[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T49[rsp]
	lea	r8, QWORD PTR $T50[rsp]
	lea	rdx, QWORD PTR $T51[rsp]
	lea	rcx, QWORD PTR m$21[rsp]
	call	??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>

; 96   : 		mat2 t = transpose(m);

	lea	rdx, QWORD PTR m$21[rsp]
	lea	rcx, QWORD PTR t$22[rsp]
	call	??$transpose@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat2x2>

; 97   : 		Error += t == mat2(0, 2, 1, 3) ? 0 : 1;

	mov	DWORD PTR $T52[rsp], 3
	mov	DWORD PTR $T53[rsp], 1
	mov	DWORD PTR $T54[rsp], 2
	mov	DWORD PTR $T55[rsp], 0
	lea	rax, QWORD PTR $T52[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T53[rsp]
	lea	r8, QWORD PTR $T54[rsp]
	lea	rdx, QWORD PTR $T55[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$22[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_trans
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN4@test_trans
$LN3@test_trans:
	mov	DWORD PTR tv82[rsp], 1
$LN4@test_trans:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 98   : 	}
; 99   : 
; 100  : 	{
; 101  : 		mat2x3 m(0, 1, 2, 3, 4, 5);

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$24[rsp]
	call	??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>

; 102  : 		mat3x2 t = transpose(m);

	lea	rdx, QWORD PTR m$24[rsp]
	lea	rcx, QWORD PTR t$25[rsp]
	call	??$transpose@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tmat2x3@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat2x3>

; 103  : 		Error += t == mat3x2(0, 3, 1, 4, 2, 5) ? 0 : 1;

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 1
	mov	r8d, 3
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$25[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_trans
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN6@test_trans
$LN5@test_trans:
	mov	DWORD PTR tv138[rsp], 1
$LN6@test_trans:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 104  : 	}
; 105  : 
; 106  : 	{
; 107  : 		mat2x4 m(0, 1, 2, 3, 4, 5, 6, 7);

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$27[rsp]
	call	??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>

; 108  : 		mat4x2 t = transpose(m);

	lea	rdx, QWORD PTR m$27[rsp]
	lea	rcx, QWORD PTR t$28[rsp]
	call	??$transpose@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tmat2x4@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat2x4>

; 109  : 		Error += t == mat4x2(0, 4, 1, 5, 2, 6, 3, 7) ? 0 : 1;

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 3
	mov	DWORD PTR [rsp+48], 6
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 5
	mov	r9d, 1
	mov	r8d, 4
	xor	edx, edx
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$28[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_trans
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN8@test_trans
$LN7@test_trans:
	mov	DWORD PTR tv166[rsp], 1
$LN8@test_trans:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 110  : 	}
; 111  : 
; 112  : 	{
; 113  : 		mat3 m(0, 1, 2, 3, 4, 5, 6, 7, 8);

	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$30[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>

; 114  : 		mat3 t = transpose(m);

	lea	rdx, QWORD PTR m$30[rsp]
	lea	rcx, QWORD PTR t$31[rsp]
	call	??$transpose@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat3x3>

; 115  : 		Error += t == mat3(0, 3, 6, 1, 4, 7, 2, 5, 8) ? 0 : 1;

	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 5
	mov	DWORD PTR [rsp+56], 2
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 6
	mov	r8d, 3
	xor	edx, edx
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$31[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_trans
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN10@test_trans
$LN9@test_trans:
	mov	DWORD PTR tv196[rsp], 1
$LN10@test_trans:
	mov	eax, DWORD PTR tv196[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 116  : 	}
; 117  : 
; 118  : 	{
; 119  : 		mat3x2 m(0, 1, 2, 3, 4, 5);

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$33[rsp]
	call	??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>

; 120  : 		mat2x3 t = transpose(m);

	lea	rdx, QWORD PTR m$33[rsp]
	lea	rcx, QWORD PTR t$34[rsp]
	call	??$transpose@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tmat3x2@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat3x2>

; 121  : 		Error += t == mat2x3(0, 2, 4, 1, 3, 5) ? 0 : 1;

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 3
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 4
	mov	r8d, 2
	xor	edx, edx
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$34[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_trans
	mov	DWORD PTR tv220[rsp], 0
	jmp	SHORT $LN12@test_trans
$LN11@test_trans:
	mov	DWORD PTR tv220[rsp], 1
$LN12@test_trans:
	mov	eax, DWORD PTR tv220[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 122  : 	}
; 123  : 
; 124  : 	{
; 125  : 		mat3x4 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

	mov	DWORD PTR [rsp+96], 11
	mov	DWORD PTR [rsp+88], 10
	mov	DWORD PTR [rsp+80], 9
	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$36[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>

; 126  : 		mat4x3 t = transpose(m);

	lea	rdx, QWORD PTR m$36[rsp]
	lea	rcx, QWORD PTR t$37[rsp]
	call	??$transpose@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tmat3x4@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat3x4>

; 127  : 		Error += t == mat4x3(0, 4, 8, 1, 5, 9, 2, 6, 10, 3, 7, 11) ? 0 : 1;

	mov	DWORD PTR $T56[rsp], 11
	mov	DWORD PTR $T57[rsp], 7
	mov	DWORD PTR $T58[rsp], 3
	mov	DWORD PTR $T59[rsp], 10
	mov	DWORD PTR $T60[rsp], 6
	mov	DWORD PTR $T61[rsp], 2
	mov	DWORD PTR $T62[rsp], 9
	mov	DWORD PTR $T63[rsp], 5
	mov	DWORD PTR $T64[rsp], 1
	mov	DWORD PTR $T65[rsp], 8
	mov	DWORD PTR $T66[rsp], 4
	mov	DWORD PTR $T67[rsp], 0
	lea	rax, QWORD PTR $T56[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T57[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T58[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T59[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T60[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T61[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T62[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T63[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T64[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T65[rsp]
	lea	r8, QWORD PTR $T66[rsp]
	lea	rdx, QWORD PTR $T67[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$37[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_trans
	mov	DWORD PTR tv288[rsp], 0
	jmp	SHORT $LN14@test_trans
$LN13@test_trans:
	mov	DWORD PTR tv288[rsp], 1
$LN14@test_trans:
	mov	eax, DWORD PTR tv288[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 128  : 	}
; 129  : 
; 130  : 	{
; 131  : 		mat4 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

	mov	DWORD PTR $T68[rsp], 15
	mov	DWORD PTR $T69[rsp], 14
	mov	DWORD PTR $T70[rsp], 13
	mov	DWORD PTR $T71[rsp], 12
	mov	DWORD PTR $T72[rsp], 11
	mov	DWORD PTR $T73[rsp], 10
	mov	DWORD PTR $T74[rsp], 9
	mov	DWORD PTR $T75[rsp], 8
	mov	DWORD PTR $T76[rsp], 7
	mov	DWORD PTR $T77[rsp], 6
	mov	DWORD PTR $T78[rsp], 5
	mov	DWORD PTR $T79[rsp], 4
	mov	DWORD PTR $T80[rsp], 3
	mov	DWORD PTR $T81[rsp], 2
	mov	DWORD PTR $T82[rsp], 1
	mov	DWORD PTR $T83[rsp], 0
	lea	rax, QWORD PTR $T68[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T69[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T70[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T71[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T72[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T73[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T74[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T75[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T76[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T77[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T78[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T79[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T80[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T81[rsp]
	lea	r8, QWORD PTR $T82[rsp]
	lea	rdx, QWORD PTR $T83[rsp]
	lea	rcx, QWORD PTR m$39[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>

; 132  : 		mat4 t = transpose(m);

	lea	rdx, QWORD PTR m$39[rsp]
	lea	rcx, QWORD PTR t$40[rsp]
	call	??$transpose@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@@Z ; glm::transpose<float,0,glm::tmat4x4>

; 133  : 		Error += t == mat4(0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15) ? 0 : 1;

	mov	DWORD PTR $T84[rsp], 15
	mov	DWORD PTR $T85[rsp], 11
	mov	DWORD PTR $T86[rsp], 7
	mov	DWORD PTR $T87[rsp], 3
	mov	DWORD PTR $T88[rsp], 14
	mov	DWORD PTR $T89[rsp], 10
	mov	DWORD PTR $T90[rsp], 6
	mov	DWORD PTR $T91[rsp], 2
	mov	DWORD PTR $T92[rsp], 13
	mov	DWORD PTR $T93[rsp], 9
	mov	DWORD PTR $T94[rsp], 5
	mov	DWORD PTR $T95[rsp], 1
	mov	DWORD PTR $T96[rsp], 12
	mov	DWORD PTR $T97[rsp], 8
	mov	DWORD PTR $T98[rsp], 4
	mov	DWORD PTR $T99[rsp], 0
	lea	rax, QWORD PTR $T84[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T85[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T86[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T87[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T88[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T89[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T90[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T91[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T92[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T93[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T94[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T95[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T96[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T97[rsp]
	lea	r8, QWORD PTR $T98[rsp]
	lea	rdx, QWORD PTR $T99[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$40[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_trans
	mov	DWORD PTR tv364[rsp], 0
	jmp	SHORT $LN16@test_trans
$LN15@test_trans:
	mov	DWORD PTR tv364[rsp], 1
$LN16@test_trans:
	mov	eax, DWORD PTR tv364[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 134  : 	}
; 135  : 
; 136  : 	{
; 137  : 		mat4x2 m(0, 1, 2, 3, 4, 5, 6, 7);

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$42[rsp]
	call	??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>

; 138  : 		mat2x4 t = transpose(m);

	lea	rdx, QWORD PTR m$42[rsp]
	lea	rcx, QWORD PTR t$43[rsp]
	call	??$transpose@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tmat4x2@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat4x2>

; 139  : 		Error += t == mat2x4(0, 2, 4, 6, 1, 3, 5, 7) ? 0 : 1;

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 5
	mov	DWORD PTR [rsp+48], 3
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 6
	mov	r9d, 4
	mov	r8d, 2
	xor	edx, edx
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$43[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_trans
	mov	DWORD PTR tv392[rsp], 0
	jmp	SHORT $LN18@test_trans
$LN17@test_trans:
	mov	DWORD PTR tv392[rsp], 1
$LN18@test_trans:
	mov	eax, DWORD PTR tv392[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 140  : 	}
; 141  : 
; 142  : 	{
; 143  : 		mat4x3 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

	mov	DWORD PTR $T100[rsp], 11
	mov	DWORD PTR $T101[rsp], 10
	mov	DWORD PTR $T102[rsp], 9
	mov	DWORD PTR $T103[rsp], 8
	mov	DWORD PTR $T104[rsp], 7
	mov	DWORD PTR $T105[rsp], 6
	mov	DWORD PTR $T106[rsp], 5
	mov	DWORD PTR $T107[rsp], 4
	mov	DWORD PTR $T108[rsp], 3
	mov	DWORD PTR $T109[rsp], 2
	mov	DWORD PTR $T110[rsp], 1
	mov	DWORD PTR $T111[rsp], 0
	lea	rax, QWORD PTR $T100[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T101[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T102[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T103[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T104[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T105[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T106[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T107[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T108[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T109[rsp]
	lea	r8, QWORD PTR $T110[rsp]
	lea	rdx, QWORD PTR $T111[rsp]
	lea	rcx, QWORD PTR m$45[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>

; 144  : 		mat3x4 t = transpose(m);

	lea	rdx, QWORD PTR m$45[rsp]
	lea	rcx, QWORD PTR t$46[rsp]
	call	??$transpose@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tmat4x3@M$0A@@0@@Z ; glm::transpose<float,0,glm::tmat4x3>

; 145  : 		Error += t == mat3x4(0, 3, 6, 9, 1, 4, 7, 10, 2, 5, 8, 11) ? 0 : 1;

	mov	DWORD PTR [rsp+96], 11
	mov	DWORD PTR [rsp+88], 8
	mov	DWORD PTR [rsp+80], 5
	mov	DWORD PTR [rsp+72], 2
	mov	DWORD PTR [rsp+64], 10
	mov	DWORD PTR [rsp+56], 7
	mov	DWORD PTR [rsp+48], 4
	mov	DWORD PTR [rsp+40], 1
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 6
	mov	r8d, 3
	xor	edx, edx
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR t$46[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_trans
	mov	DWORD PTR tv428[rsp], 0
	jmp	SHORT $LN20@test_trans
$LN19@test_trans:
	mov	DWORD PTR tv428[rsp], 1
$LN20@test_trans:
	mov	eax, DWORD PTR tv428[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 146  : 	}
; 147  : 
; 148  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 149  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_transpose@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1952				; 000007a0H
	pop	rdi
	ret	0
?test_transpose@@YAHXZ ENDP				; test_transpose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 100
$T5 = 112
tv72 = 128
__$ArrayPad$ = 136
__$ReturnUdt$ = 176
c$ = 184
r$ = 192
??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 84
$T5 = 96
tv79 = 104
__$ArrayPad$ = 112
__$ReturnUdt$ = 160
c$ = 168
r$ = 176
??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv79[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 100
$T5 = 112
tv72 = 128
__$ArrayPad$ = 136
__$ReturnUdt$ = 176
c$ = 184
r$ = 192
??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+176]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 48					; 00000030H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 68
$T5 = 80
tv79 = 88
__$ArrayPad$ = 96
__$ReturnUdt$ = 144
c$ = 152
r$ = 160
??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv79[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 84
$T5 = 96
tv72 = 112
__$ArrayPad$ = 120
__$ReturnUdt$ = 160
c$ = 168
r$ = 176
??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 68
$T5 = 80
tv72 = 96
__$ArrayPad$ = 104
__$ReturnUdt$ = 144
c$ = 152
r$ = 160
??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
m$ = 48
i$4 = 116
$T5 = 128
tv72 = 144
__$ArrayPad$ = 152
__$ReturnUdt$ = 192
c$ = 200
r$ = 208
??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 84
$T5 = 96
tv72 = 112
__$ArrayPad$ = 120
__$ReturnUdt$ = 160
c$ = 168
r$ = 176
??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv72[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rdi, rax
	mov	rax, QWORD PTR tv72[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 36					; 00000024H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
m$ = 40
i$4 = 68
$T5 = 80
tv79 = 88
__$ArrayPad$ = 96
__$ReturnUdt$ = 144
c$ = 152
r$ = 160
??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>, COMDAT

; 367  : 	{

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 368  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'outerProduct' only accept floating-point inputs");
; 369  : 
; 370  : 		typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR m$[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0>

; 371  : 		for(length_t i = 0; i < m.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@outerProdu
$LN2@outerProdu:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@outerProdu:
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@outerProdu

; 372  : 			m[i] = c * r[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR r$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm2, DWORD PTR [rax]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR m$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv79[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN2@outerProdu
$LN3@outerProdu:

; 373  : 		return m;

	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
m$12 = 40
m$13 = 88
m$14 = 160
m$15 = 248
m$16 = 296
m$17 = 360
m$18 = 408
m$19 = 488
m$20 = 552
$T21 = 624
$T22 = 632
$T23 = 640
$T24 = 652
$T25 = 664
$T26 = 680
$T27 = 696
$T28 = 704
$T29 = 716
$T30 = 724
$T31 = 740
$T32 = 752
$T33 = 760
$T34 = 772
$T35 = 788
$T36 = 804
$T37 = 812
$T38 = 828
tv66 = 840
tv75 = 848
tv84 = 856
tv93 = 864
tv134 = 872
tv143 = 880
tv152 = 888
tv161 = 896
tv170 = 904
__$ArrayPad$ = 912
?test_outerProduct@@YAHXZ PROC				; test_outerProduct

; 73   : {

$LN3:
	push	rdi
	sub	rsp, 928				; 000003a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 224				; 000000e0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 74   : 	{ glm::mat2 m = glm::outerProduct(glm::vec2(1.0f), glm::vec2(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$12[rsp]
	call	??$outerProduct@M$0A@Utvec2@glm@@U12@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec2>

; 75   : 	{ glm::mat3 m = glm::outerProduct(glm::vec3(1.0f), glm::vec3(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv75[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$13[rsp]
	call	??$outerProduct@M$0A@Utvec3@glm@@U12@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec3>

; 76   : 	{ glm::mat4 m = glm::outerProduct(glm::vec4(1.0f), glm::vec4(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T26[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$14[rsp]
	call	??$outerProduct@M$0A@Utvec4@glm@@U12@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec4>

; 77   : 
; 78   : 	{ glm::mat2x3 m = glm::outerProduct(glm::vec3(1.0f), glm::vec2(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv93[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv93[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$15[rsp]
	call	??$outerProduct@M$0A@Utvec3@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec2>

; 79   : 	{ glm::mat2x4 m = glm::outerProduct(glm::vec4(1.0f), glm::vec2(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv134[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv134[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$16[rsp]
	call	??$outerProduct@M$0A@Utvec4@glm@@Utvec2@2@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec2>

; 80   : 
; 81   : 	{ glm::mat3x2 m = glm::outerProduct(glm::vec2(1.0f), glm::vec3(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T31[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv143[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T32[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv143[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$17[rsp]
	call	??$outerProduct@M$0A@Utvec2@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec3>

; 82   : 	{ glm::mat3x4 m = glm::outerProduct(glm::vec4(1.0f), glm::vec3(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T33[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv152[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T34[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv152[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$18[rsp]
	call	??$outerProduct@M$0A@Utvec4@glm@@Utvec3@2@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU?$tvec4@M$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec4,glm::tvec3>

; 83   :   
; 84   : 	{ glm::mat4x2 m = glm::outerProduct(glm::vec2(1.0f), glm::vec4(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv161[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T36[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv161[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$19[rsp]
	call	??$outerProduct@M$0A@Utvec2@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU?$tvec2@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec2,glm::tvec4>

; 85   : 	{ glm::mat4x3 m = glm::outerProduct(glm::vec3(1.0f), glm::vec4(1.0f)); }

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T37[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv170[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T38[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv170[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR m$20[rsp]
	call	??$outerProduct@M$0A@Utvec3@glm@@Utvec4@2@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU?$tvec3@M$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::outerProduct<float,0,glm::tvec3,glm::tvec4>

; 86   : 
; 87   : 	return 0;

	xor	eax, eax

; 88   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_outerProduct@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 928				; 000003a0H
	pop	rdi
	ret	0
?test_outerProduct@@YAHXZ ENDP				; test_outerProduct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv131 = 56
tv140 = 64
m1$ = 96
m2$ = 104
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 553  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 554  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat4x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv140[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv140[rsp]

; 555  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat4x3>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat4x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat4x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
tv78 = 80
tv90 = 84
tv134 = 88
tv146 = 92
this$ = 128
x1$ = 136
y1$ = 144
z1$ = 152
x2$ = 160
y2$ = 168
z2$ = 176
x3$ = 184
y3$ = 192
z3$ = 200
x4$ = 208
y4$ = 216
z4$ = 224
??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z PROC ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>, COMDAT

; 100  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 101  : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));

	mov	rax, QWORD PTR z1$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv78[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 102  : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));

	mov	rax, QWORD PTR z2$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv90[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv90[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 103  : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));

	mov	rax, QWORD PTR z3$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv134[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 104  : 		this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4));

	mov	rax, QWORD PTR z4$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR y4$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR x4$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv146[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv146[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 105  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ENDP ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat4x3<float,0>::operator[], COMDAT

; 211  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 212  : 		assert(i < this->length());

	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 212				; 000000d4H
	lea	rdx, OFFSET FLAT:??_C@_1LK@GEGFBJDO@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 213  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 214  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat4x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 44   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv131 = 56
tv140 = 64
m1$ = 96
m2$ = 104
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 536  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 537  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat4x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv140[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv140[rsp]

; 538  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat4x2>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat4x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat4x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
this$ = 80
x1$ = 88
y1$ = 96
x2$ = 104
y2$ = 112
x3$ = 120
y3$ = 128
x4$ = 136
y4$ = 144
??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z PROC	; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>, COMDAT

; 107  : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 108  : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1));

	cvtsi2ss xmm0, DWORD PTR y1$[rsp]
	cvtsi2ss xmm1, DWORD PTR x1$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 109  : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2));

	cvtsi2ss xmm0, DWORD PTR y2$[rsp]
	cvtsi2ss xmm1, DWORD PTR x2$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 110  : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3));

	cvtsi2ss xmm0, DWORD PTR y3$[rsp]
	cvtsi2ss xmm1, DWORD PTR x3$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 111  : 		this->value[3] = col_type(static_cast<T>(x4), value_type(y4));

	cvtsi2ss xmm0, DWORD PTR y4$[rsp]
	cvtsi2ss xmm1, DWORD PTR x4$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 112  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ENDP	; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 225  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 226  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 226				; 000000e2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 227  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 228  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat4x2<float,0>::operator[], COMDAT

; 218  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 219  : 		assert(i < this->length());

	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 219				; 000000dbH
	lea	rdx, OFFSET FLAT:??_C@_1LK@PPMAFFFB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 220  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 221  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat4x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 51   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv131 = 56
tv140 = 64
m1$ = 96
m2$ = 104
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 658  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 659  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	$LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 3
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	QWORD PTR tv131[rsp], rax
	mov	edx, 3
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv140[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv140[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv140[rsp]

; 660  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat4x4>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat4x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat4x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat4x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat4x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
tv80 = 112
tv94 = 116
tv140 = 120
tv154 = 124
this$ = 160
x1$ = 168
y1$ = 176
z1$ = 184
w1$ = 192
x2$ = 200
y2$ = 208
z2$ = 216
w2$ = 224
x3$ = 232
y3$ = 240
z3$ = 248
w3$ = 256
x4$ = 264
y4$ = 272
z4$ = 280
w4$ = 288
??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>, COMDAT

; 115  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 116  : 		GLM_STATIC_ASSERT(std::numeric_limits<X1>::is_iec559 || std::numeric_limits<X1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
; 117  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y1>::is_iec559 || std::numeric_limits<Y1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
; 118  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z1>::is_iec559 || std::numeric_limits<Z1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
; 119  : 		GLM_STATIC_ASSERT(std::numeric_limits<W1>::is_iec559 || std::numeric_limits<W1>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");
; 120  : 
; 121  : 		GLM_STATIC_ASSERT(std::numeric_limits<X2>::is_iec559 || std::numeric_limits<X2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 5th parameter type invalid.");
; 122  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y2>::is_iec559 || std::numeric_limits<Y2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 6th parameter type invalid.");
; 123  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z2>::is_iec559 || std::numeric_limits<Z2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 7th parameter type invalid.");
; 124  : 		GLM_STATIC_ASSERT(std::numeric_limits<W2>::is_iec559 || std::numeric_limits<W2>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 8th parameter type invalid.");
; 125  : 
; 126  : 		GLM_STATIC_ASSERT(std::numeric_limits<X3>::is_iec559 || std::numeric_limits<X3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 9th parameter type invalid.");
; 127  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y3>::is_iec559 || std::numeric_limits<Y3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 10th parameter type invalid.");
; 128  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z3>::is_iec559 || std::numeric_limits<Z3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 11th parameter type invalid.");
; 129  : 		GLM_STATIC_ASSERT(std::numeric_limits<W3>::is_iec559 || std::numeric_limits<W3>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 12th parameter type invalid.");
; 130  : 
; 131  : 		GLM_STATIC_ASSERT(std::numeric_limits<X4>::is_iec559 || std::numeric_limits<X4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 13th parameter type invalid.");
; 132  : 		GLM_STATIC_ASSERT(std::numeric_limits<Y4>::is_iec559 || std::numeric_limits<Y4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 14th parameter type invalid.");
; 133  : 		GLM_STATIC_ASSERT(std::numeric_limits<Z4>::is_iec559 || std::numeric_limits<Z4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 15th parameter type invalid.");
; 134  : 		GLM_STATIC_ASSERT(std::numeric_limits<W4>::is_iec559 || std::numeric_limits<W4>::is_integer || GLM_UNRESTRICTED_GENTYPE, "*mat4x4 constructor only takes float and integer types, 16th parameter type invalid.");
; 135  : 
; 136  : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));

	mov	rax, QWORD PTR w1$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 137  : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));

	mov	rax, QWORD PTR w2$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv94[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv94[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 138  : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));

	mov	rax, QWORD PTR w3$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z3$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y3$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x3$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv140[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv140[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 139  : 		this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4), value_type(w4));

	mov	rax, QWORD PTR w4$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR z4$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR y4$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x4$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv154[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv154[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 140  : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 248  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 249  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 250  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 251  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat4x4<float,0>::operator[], COMDAT

; 241  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 242  : 		assert(i < this->length());

	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:??_C@_1LK@BAPNPALB@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 243  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 244  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat4x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
v3$ = 96
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z PROC ; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 80   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 81   : 		this->value[0] = v0;

	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 16
	rep movsb

; 82   : 		this->value[1] = v1;

	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb

; 83   : 		this->value[2] = v2;

	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 16
	rep movsb

; 84   : 		this->value[3] = v3;

	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v3$[rsp]
	mov	ecx, 16
	rep movsb

; 85   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@000@Z ENDP ; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
s$ = 152
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 50   : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 51   : 		this->value[0] = col_type(s, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QEAA@MHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 52   : 		this->value[1] = col_type(0, s, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QEAA@HMHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 53   : 		this->value[2] = col_type(0, 0, s, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR s$[rsp]
	movss	xmm3, DWORD PTR [rax]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QEAA@HHMH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 54   : 		this->value[3] = col_type(0, 0, 0, s);

	mov	rax, QWORD PTR s$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QEAA@HHHM@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 55   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@AEBM@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 46   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv129 = 56
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 523  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 524  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat3x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv129[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv129[rsp]

; 525  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat3x4>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat3x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat3x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
tv80 = 96
tv94 = 100
tv140 = 104
this$ = 144
x1$ = 152
y1$ = 160
z1$ = 168
w1$ = 176
x2$ = 184
y2$ = 192
z2$ = 200
w2$ = 208
x3$ = 216
y3$ = 224
z3$ = 232
w3$ = 240
??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z PROC ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>, COMDAT

; 90   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 91   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));

	cvtsi2ss xmm0, DWORD PTR w1$[rsp]
	cvtsi2ss xmm1, DWORD PTR z1$[rsp]
	cvtsi2ss xmm2, DWORD PTR y1$[rsp]
	cvtsi2ss xmm3, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 92   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));

	cvtsi2ss xmm0, DWORD PTR w2$[rsp]
	cvtsi2ss xmm1, DWORD PTR z2$[rsp]
	cvtsi2ss xmm2, DWORD PTR y2$[rsp]
	cvtsi2ss xmm3, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv94[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv94[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 93   : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));

	cvtsi2ss xmm0, DWORD PTR w3$[rsp]
	cvtsi2ss xmm1, DWORD PTR z3$[rsp]
	cvtsi2ss xmm2, DWORD PTR y3$[rsp]
	cvtsi2ss xmm3, DWORD PTR x3$[rsp]
	movss	DWORD PTR tv140[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv140[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 94   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ENDP ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat3x4<float,0>::operator[], COMDAT

; 189  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 190  : 		assert(i < this->length());

	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 190				; 000000beH
	lea	rdx, OFFSET FLAT:??_C@_1LK@ONAEAIME@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 191  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat3x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 41   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv129 = 56
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 483  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 484  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat3x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv129[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv129[rsp]

; 485  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat3x2>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat3x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat3x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
x1$ = 88
y1$ = 96
x2$ = 104
y2$ = 112
x3$ = 120
y3$ = 128
??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z PROC	; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>, COMDAT

; 90   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 91   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1));

	cvtsi2ss xmm0, DWORD PTR y1$[rsp]
	cvtsi2ss xmm1, DWORD PTR x1$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 92   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2));

	cvtsi2ss xmm0, DWORD PTR y2$[rsp]
	cvtsi2ss xmm1, DWORD PTR x2$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 93   : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3));

	cvtsi2ss xmm0, DWORD PTR y3$[rsp]
	cvtsi2ss xmm1, DWORD PTR x3$[rsp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 94   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z ENDP	; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 196  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 197  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 197				; 000000c5H
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 198  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat3x2<float,0>::operator[], COMDAT

; 189  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 190  : 		assert(i < this->length());

	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 190				; 000000beH
	lea	rdx, OFFSET FLAT:??_C@_1LK@CDJKNCE@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 191  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 192  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat3x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 41   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv88 = 48
tv129 = 56
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 552  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 553  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 2
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	QWORD PTR tv88[rsp], rax
	mov	edx, 2
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat3x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv88[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv129[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv129[rsp]

; 554  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat3x3>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat3x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat3x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat3x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat3x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv78 = 68
tv90 = 72
tv134 = 76
this$ = 112
x1$ = 120
y1$ = 128
z1$ = 136
x2$ = 144
y2$ = 152
z2$ = 160
x3$ = 168
y3$ = 176
z3$ = 184
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>, COMDAT

; 92   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 93   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));

	cvtsi2ss xmm0, DWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv78[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 94   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));

	cvtsi2ss xmm0, DWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv90[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv90[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 95   : 		this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));

	cvtsi2ss xmm0, DWORD PTR z3$[rsp]
	cvtsi2ss xmm1, DWORD PTR y3$[rsp]
	cvtsi2ss xmm2, DWORD PTR x3$[rsp]
	movss	DWORD PTR tv134[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv134[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 96   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 198  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 199  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 199				; 000000c7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 200  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 201  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat3x3<float,0>::operator[], COMDAT

; 191  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 192  : 		assert(i < this->length());

	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 192				; 000000c0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@JJJMOBEL@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 193  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 194  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat3x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat3x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z
_TEXT	SEGMENT
this$ = 64
v0$ = 72
v1$ = 80
v2$ = 88
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z PROC ; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 73   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 74   : 		this->value[0] = v0;

	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v0$[rsp]
	mov	ecx, 12
	rep movsb

; 75   : 		this->value[1] = v1;

	mov	eax, 12
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 12
	rep movsb

; 76   : 		this->value[2] = v2;

	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v2$[rsp]
	mov	ecx, 12
	rep movsb

; 77   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@AEBU?$tvec3@M$0A@@1@00@Z ENDP ; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
scalar$ = 120
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 47   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 48   : 		this->value[0] = col_type(scalar, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MHH@?$tvec3@M$0A@@glm@@QEAA@MHH@Z	; glm::tvec3<float,0>::tvec3<float,0><float,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 49   : 		this->value[1] = col_type(0, scalar, 0);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 50   : 		this->value[2] = col_type(0, 0, scalar);

	movss	xmm3, DWORD PTR scalar$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHM@?$tvec3@M$0A@@glm@@QEAA@HHM@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,float>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 51   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 43   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv86 = 48
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 458  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 459  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ; glm::tmat2x4<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv86[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv86[rsp]

; 460  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat2x4>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat2x4@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x4,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat2x4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
tv80 = 80
tv94 = 84
this$ = 128
x1$ = 136
y1$ = 144
z1$ = 152
w1$ = 160
x2$ = 168
y2$ = 176
z2$ = 184
w2$ = 192
??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z PROC	; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>, COMDAT

; 77   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 78   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));

	cvtsi2ss xmm0, DWORD PTR w1$[rsp]
	cvtsi2ss xmm1, DWORD PTR z1$[rsp]
	cvtsi2ss xmm2, DWORD PTR y1$[rsp]
	cvtsi2ss xmm3, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 79   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));

	cvtsi2ss xmm0, DWORD PTR w2$[rsp]
	cvtsi2ss xmm1, DWORD PTR z2$[rsp]
	cvtsi2ss xmm2, DWORD PTR y2$[rsp]
	cvtsi2ss xmm3, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv94[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv94[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 80   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ENDP	; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 167  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 168  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 168				; 000000a8H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 169  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 170  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEBAAEBU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z PROC ; glm::tmat2x4<float,0>::operator[], COMDAT

; 160  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 161  : 		assert(i < this->length());

	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 161				; 000000a1H
	lea	rdx, OFFSET FLAT:??_C@_1LK@EDGMJJFF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 162  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 163  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x4@M$0A@@glm@@QEAAAEAU?$tvec4@M$0A@@1@H@Z ENDP ; glm::tmat2x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 38   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv86 = 48
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 449  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 450  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ; glm::tmat2x3<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv86[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv86[rsp]

; 451  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat2x3>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat2x3@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x3,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat2x3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
tv78 = 56
tv90 = 60
this$ = 96
x1$ = 104
y1$ = 112
z1$ = 120
x2$ = 128
y2$ = 136
z2$ = 144
??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z PROC	; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>, COMDAT

; 76   : 	{

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 77   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));

	cvtsi2ss xmm0, DWORD PTR z1$[rsp]
	cvtsi2ss xmm1, DWORD PTR y1$[rsp]
	cvtsi2ss xmm2, DWORD PTR x1$[rsp]
	movss	DWORD PTR tv78[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 78   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));

	cvtsi2ss xmm0, DWORD PTR z2$[rsp]
	cvtsi2ss xmm1, DWORD PTR y2$[rsp]
	cvtsi2ss xmm2, DWORD PTR x2$[rsp]
	movss	DWORD PTR tv90[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv90[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 79   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z ENDP	; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEBAAEBU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z PROC ; glm::tmat2x3<float,0>::operator[], COMDAT

; 159  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 160  : 		assert(i < this->length());

	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 160				; 000000a0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@DHPEHANK@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 161  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 162  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x3@M$0A@@glm@@QEAAAEAU?$tvec3@M$0A@@1@H@Z ENDP ; glm::tmat2x3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 38   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv66 = 32
tv75 = 40
tv86 = 48
m1$ = 80
m2$ = 88
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 475  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 476  : 		return (m1[0] == m2[0]) && (m1[1] == m2[1]);

	xor	edx, edx
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	edx, 1
	mov	rcx, QWORD PTR m2$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	QWORD PTR tv75[rsp], rax
	mov	edx, 1
	mov	rcx, QWORD PTR m1$[rsp]
	call	??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ; glm::tmat2x2<float,0>::operator[]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv86[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv86[rsp]

; 477  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_matrix.inl
;	COMDAT ??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z PROC ; glm::matrixCompMult<float,0,glm::tmat2x2>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'matrixCompMult' only accept floating-point inputs");
; 362  : 		return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_matrixCompMult@Utmat2x2@glm@@M$0A@$0A@@detail@glm@@SA?AU?$tmat2x2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_matrixCompMult<glm::tmat2x2,float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ENDP ; glm::matrixCompMult<float,0,glm::tmat2x2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
x1$ = 72
y1$ = 80
x2$ = 88
y2$ = 96
??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z PROC	; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>, COMDAT

; 76   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 77   : 		this->value[0] = col_type(static_cast<T>(x1), value_type(y1));

	mov	rax, QWORD PTR y1$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 78   : 		this->value[1] = col_type(static_cast<T>(x2), value_type(y2));

	mov	rax, QWORD PTR y2$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR x2$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 79   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z ENDP	; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 166  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 167  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 167				; 000000a7H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 168  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 169  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEBAAEBU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z PROC ; glm::tmat2x2<float,0>::operator[], COMDAT

; 159  : 	{

$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 160  : 		assert(i < this->length());

	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN3@operator
	mov	r8d, 160				; 000000a0H
	lea	rdx, OFFSET FLAT:??_C@_1LK@KMFBDMLF@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:

; 161  : 		return this->value[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 162  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tmat2x2@M$0A@@glm@@QEAAAEAU?$tvec2@M$0A@@1@H@Z ENDP ; glm::tmat2x2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z
_TEXT	SEGMENT
this$ = 48
v0$ = 56
v1$ = 64
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z PROC ; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 62   : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 63   : 		this->value[0] = v0;

	mov	rax, QWORD PTR v0$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 64   : 		this->value[1] = v1;

	mov	rax, QWORD PTR v1$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 65   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@0@Z ENDP ; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
x0$ = 72
y0$ = 80
x1$ = 88
y1$ = 96
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 55   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 56   : 		this->value[0] = col_type(x0, y0);

	mov	rax, QWORD PTR y0$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x0$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 57   : 		this->value[1] = col_type(x1, y1);

	mov	rax, QWORD PTR y1$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mov	rax, QWORD PTR x1$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 58   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@AEBM000@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
scalar$ = 72
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 44   : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 45   : 		this->value[0] = col_type(scalar, 0);

	xor	r8d, r8d
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0MH@?$tvec2@M$0A@@glm@@QEAA@MH@Z	; glm::tvec2<float,0>::tvec2<float,0><float,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 46   : 		this->value[1] = col_type(0, scalar);

	movss	xmm2, DWORD PTR scalar$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HM@?$tvec2@M$0A@@glm@@QEAA@HM@Z	; glm::tvec2<float,0>::tvec2<float,0><int,float>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 47   : 	}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 40   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_matrix.cpp
_TEXT	SEGMENT
Error$ = 144
m$21 = 168
n$22 = 216
$T23 = 248
m$24 = 280
n$25 = 328
$T26 = 360
m$27 = 392
n$28 = 456
$T29 = 504
m$30 = 552
n$31 = 616
$T32 = 664
m$33 = 712
n$34 = 760
$T35 = 792
m$36 = 824
n$37 = 904
$T38 = 968
m$39 = 1040
n$40 = 1136
$T41 = 1216
m$42 = 1288
n$43 = 1352
$T44 = 1400
m$45 = 1448
n$46 = 1528
$T47 = 1592
$T48 = 1648
$T49 = 1652
$T50 = 1656
$T51 = 1660
$T52 = 1664
$T53 = 1668
$T54 = 1672
$T55 = 1676
$T56 = 1680
$T57 = 1684
$T58 = 1688
$T59 = 1692
$T60 = 1696
$T61 = 1700
$T62 = 1704
$T63 = 1708
$T64 = 1712
$T65 = 1716
$T66 = 1720
$T67 = 1724
$T68 = 1728
$T69 = 1732
$T70 = 1736
$T71 = 1740
$T72 = 1744
$T73 = 1748
$T74 = 1752
$T75 = 1756
$T76 = 1760
$T77 = 1764
$T78 = 1768
$T79 = 1772
$T80 = 1776
$T81 = 1780
$T82 = 1784
$T83 = 1788
$T84 = 1792
$T85 = 1796
$T86 = 1800
$T87 = 1804
$T88 = 1808
$T89 = 1812
$T90 = 1816
$T91 = 1820
$T92 = 1824
$T93 = 1828
$T94 = 1832
$T95 = 1836
$T96 = 1840
$T97 = 1844
$T98 = 1848
$T99 = 1852
$T100 = 1856
$T101 = 1860
$T102 = 1864
$T103 = 1868
$T104 = 1872
$T105 = 1876
$T106 = 1880
$T107 = 1884
$T108 = 1888
$T109 = 1892
$T110 = 1896
$T111 = 1900
tv83 = 1904
tv140 = 1908
tv169 = 1912
tv200 = 1916
tv225 = 1920
tv262 = 1924
tv339 = 1928
tv400 = 1932
tv437 = 1936
__$ArrayPad$ = 1944
?test_matrixCompMult@@YAHXZ PROC			; test_matrixCompMult

; 12   : {

$LN21:
	push	rdi
	sub	rsp, 1952				; 000007a0H
	lea	rdi, QWORD PTR [rsp+144]
	mov	ecx, 452				; 000001c4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 13   : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 14   : 
; 15   : 	{
; 16   : 		mat2 m(0, 1, 2, 3);

	mov	DWORD PTR $T48[rsp], 3
	mov	DWORD PTR $T49[rsp], 2
	mov	DWORD PTR $T50[rsp], 1
	mov	DWORD PTR $T51[rsp], 0
	lea	rax, QWORD PTR $T48[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T49[rsp]
	lea	r8, QWORD PTR $T50[rsp]
	lea	rdx, QWORD PTR $T51[rsp]
	lea	rcx, QWORD PTR m$21[rsp]
	call	??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>

; 17   : 		mat2 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$21[rsp]
	lea	rdx, QWORD PTR m$21[rsp]
	lea	rcx, QWORD PTR n$22[rsp]
	call	??$matrixCompMult@M$0A@Utmat2x2@glm@@@glm@@YA?AU?$tmat2x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x2>

; 18   : 		Error += n == mat2(0, 1, 4, 9) ? 0 : 1;

	mov	DWORD PTR $T52[rsp], 9
	mov	DWORD PTR $T53[rsp], 4
	mov	DWORD PTR $T54[rsp], 1
	mov	DWORD PTR $T55[rsp], 0
	lea	rax, QWORD PTR $T52[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T53[rsp]
	lea	r8, QWORD PTR $T54[rsp]
	lea	rdx, QWORD PTR $T55[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0HHHH@?$tmat2x2@M$0A@@glm@@QEAA@AEBH000@Z ; glm::tmat2x2<float,0>::tmat2x2<float,0><int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$22[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_matri
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN4@test_matri
$LN3@test_matri:
	mov	DWORD PTR tv83[rsp], 1
$LN4@test_matri:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	}
; 20   : 
; 21   : 	{
; 22   : 		mat2x3 m(0, 1, 2, 3, 4, 5);

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$24[rsp]
	call	??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>

; 23   : 		mat2x3 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$24[rsp]
	lea	rdx, QWORD PTR m$24[rsp]
	lea	rcx, QWORD PTR n$25[rsp]
	call	??$matrixCompMult@M$0A@Utmat2x3@glm@@@glm@@YA?AU?$tmat2x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x3>

; 24   : 		Error += n == mat2x3(0, 1, 4, 9, 16, 25) ? 0 : 1;

	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$?0HHHHHH@?$tmat2x3@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat2x3<float,0>::tmat2x3<float,0><int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$25[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_matri
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN6@test_matri
$LN5@test_matri:
	mov	DWORD PTR tv140[rsp], 1
$LN6@test_matri:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 25   : 	}
; 26   : 
; 27   : 	{
; 28   : 		mat2x4 m(0, 1, 2, 3, 4, 5, 6, 7);

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$27[rsp]
	call	??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>

; 29   : 		mat2x4 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$27[rsp]
	lea	rdx, QWORD PTR m$27[rsp]
	lea	rcx, QWORD PTR n$28[rsp]
	call	??$matrixCompMult@M$0A@Utmat2x4@glm@@@glm@@YA?AU?$tmat2x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat2x4>

; 30   : 		Error += n == mat2x4(0, 1, 4, 9, 16, 25, 36, 49) ? 0 : 1;

	mov	DWORD PTR [rsp+64], 49			; 00000031H
	mov	DWORD PTR [rsp+56], 36			; 00000024H
	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$?0HHHHHHHH@?$tmat2x4@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat2x4<float,0>::tmat2x4<float,0><int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$28[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat2x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test_matri
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN8@test_matri
$LN7@test_matri:
	mov	DWORD PTR tv169[rsp], 1
$LN8@test_matri:
	mov	eax, DWORD PTR tv169[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 	}
; 32   : 
; 33   : 	{
; 34   : 		mat3 m(0, 1, 2, 3, 4, 5, 6, 7, 8);

	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$30[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>

; 35   : 		mat3 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$30[rsp]
	lea	rdx, QWORD PTR m$30[rsp]
	lea	rcx, QWORD PTR n$31[rsp]
	call	??$matrixCompMult@M$0A@Utmat3x3@glm@@@glm@@YA?AU?$tmat3x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x3>

; 36   : 		Error += n == mat3(0, 1, 4, 9, 16, 25, 36, 49, 64) ? 0 : 1;

	mov	DWORD PTR [rsp+72], 64			; 00000040H
	mov	DWORD PTR [rsp+64], 49			; 00000031H
	mov	DWORD PTR [rsp+56], 36			; 00000024H
	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$?0HHHHHHHHH@?$tmat3x3@M$0A@@glm@@QEAA@HHHHHHHHH@Z ; glm::tmat3x3<float,0>::tmat3x3<float,0><int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$31[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test_matri
	mov	DWORD PTR tv200[rsp], 0
	jmp	SHORT $LN10@test_matri
$LN9@test_matri:
	mov	DWORD PTR tv200[rsp], 1
$LN10@test_matri:
	mov	eax, DWORD PTR tv200[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	}
; 38   : 
; 39   : 	{
; 40   : 		mat3x2 m(0, 1, 2, 3, 4, 5);

	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$33[rsp]
	call	??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>

; 41   : 		mat3x2 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$33[rsp]
	lea	rdx, QWORD PTR m$33[rsp]
	lea	rcx, QWORD PTR n$34[rsp]
	call	??$matrixCompMult@M$0A@Utmat3x2@glm@@@glm@@YA?AU?$tmat3x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x2>

; 42   : 		Error += n == mat3x2(0, 1, 4, 9, 16, 25) ? 0 : 1;

	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$?0HHHHHH@?$tmat3x2@M$0A@@glm@@QEAA@HHHHHH@Z ; glm::tmat3x2<float,0>::tmat3x2<float,0><int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$34[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test_matri
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN12@test_matri
$LN11@test_matri:
	mov	DWORD PTR tv225[rsp], 1
$LN12@test_matri:
	mov	eax, DWORD PTR tv225[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 43   : 	}
; 44   : 
; 45   : 	{
; 46   : 		mat3x4 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

	mov	DWORD PTR [rsp+96], 11
	mov	DWORD PTR [rsp+88], 10
	mov	DWORD PTR [rsp+80], 9
	mov	DWORD PTR [rsp+72], 8
	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$36[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>

; 47   : 		mat3x4 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$36[rsp]
	lea	rdx, QWORD PTR m$36[rsp]
	lea	rcx, QWORD PTR n$37[rsp]
	call	??$matrixCompMult@M$0A@Utmat3x4@glm@@@glm@@YA?AU?$tmat3x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat3x4>

; 48   : 		Error += n == mat3x4(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121) ? 0 : 1;

	mov	DWORD PTR [rsp+96], 121			; 00000079H
	mov	DWORD PTR [rsp+88], 100			; 00000064H
	mov	DWORD PTR [rsp+80], 81			; 00000051H
	mov	DWORD PTR [rsp+72], 64			; 00000040H
	mov	DWORD PTR [rsp+64], 49			; 00000031H
	mov	DWORD PTR [rsp+56], 36			; 00000024H
	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat3x4@M$0A@@glm@@QEAA@HHHHHHHHHHHH@Z ; glm::tmat3x4<float,0>::tmat3x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$37[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat3x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test_matri
	mov	DWORD PTR tv262[rsp], 0
	jmp	SHORT $LN14@test_matri
$LN13@test_matri:
	mov	DWORD PTR tv262[rsp], 1
$LN14@test_matri:
	mov	eax, DWORD PTR tv262[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 49   : 	}
; 50   : 
; 51   : 	{
; 52   : 		mat4 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);

	mov	DWORD PTR $T56[rsp], 15
	mov	DWORD PTR $T57[rsp], 14
	mov	DWORD PTR $T58[rsp], 13
	mov	DWORD PTR $T59[rsp], 12
	mov	DWORD PTR $T60[rsp], 11
	mov	DWORD PTR $T61[rsp], 10
	mov	DWORD PTR $T62[rsp], 9
	mov	DWORD PTR $T63[rsp], 8
	mov	DWORD PTR $T64[rsp], 7
	mov	DWORD PTR $T65[rsp], 6
	mov	DWORD PTR $T66[rsp], 5
	mov	DWORD PTR $T67[rsp], 4
	mov	DWORD PTR $T68[rsp], 3
	mov	DWORD PTR $T69[rsp], 2
	mov	DWORD PTR $T70[rsp], 1
	mov	DWORD PTR $T71[rsp], 0
	lea	rax, QWORD PTR $T56[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T57[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T58[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T59[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T60[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T61[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T62[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T63[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T64[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T65[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T66[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T67[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T68[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T69[rsp]
	lea	r8, QWORD PTR $T70[rsp]
	lea	rdx, QWORD PTR $T71[rsp]
	lea	rcx, QWORD PTR m$39[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>

; 53   : 		mat4 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$39[rsp]
	lea	rdx, QWORD PTR m$39[rsp]
	lea	rcx, QWORD PTR n$40[rsp]
	call	??$matrixCompMult@M$0A@Utmat4x4@glm@@@glm@@YA?AU?$tmat4x4@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x4>

; 54   : 		Error += n == mat4(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225) ? 0 : 1;

	mov	DWORD PTR $T72[rsp], 225		; 000000e1H
	mov	DWORD PTR $T73[rsp], 196		; 000000c4H
	mov	DWORD PTR $T74[rsp], 169		; 000000a9H
	mov	DWORD PTR $T75[rsp], 144		; 00000090H
	mov	DWORD PTR $T76[rsp], 121		; 00000079H
	mov	DWORD PTR $T77[rsp], 100		; 00000064H
	mov	DWORD PTR $T78[rsp], 81			; 00000051H
	mov	DWORD PTR $T79[rsp], 64			; 00000040H
	mov	DWORD PTR $T80[rsp], 49			; 00000031H
	mov	DWORD PTR $T81[rsp], 36			; 00000024H
	mov	DWORD PTR $T82[rsp], 25
	mov	DWORD PTR $T83[rsp], 16
	mov	DWORD PTR $T84[rsp], 9
	mov	DWORD PTR $T85[rsp], 4
	mov	DWORD PTR $T86[rsp], 1
	mov	DWORD PTR $T87[rsp], 0
	lea	rax, QWORD PTR $T72[rsp]
	mov	QWORD PTR [rsp+128], rax
	lea	rax, QWORD PTR $T73[rsp]
	mov	QWORD PTR [rsp+120], rax
	lea	rax, QWORD PTR $T74[rsp]
	mov	QWORD PTR [rsp+112], rax
	lea	rax, QWORD PTR $T75[rsp]
	mov	QWORD PTR [rsp+104], rax
	lea	rax, QWORD PTR $T76[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T77[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T78[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T79[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T80[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T81[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T82[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T83[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T84[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T85[rsp]
	lea	r8, QWORD PTR $T86[rsp]
	lea	rdx, QWORD PTR $T87[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$?0HHHHHHHHHHHHHHHH@?$tmat4x4@M$0A@@glm@@QEAA@AEBH000000000000000@Z ; glm::tmat4x4<float,0>::tmat4x4<float,0><int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$40[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test_matri
	mov	DWORD PTR tv339[rsp], 0
	jmp	SHORT $LN16@test_matri
$LN15@test_matri:
	mov	DWORD PTR tv339[rsp], 1
$LN16@test_matri:
	mov	eax, DWORD PTR tv339[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 	}
; 56   : 
; 57   : 	{
; 58   : 		mat4x2 m(0, 1, 2, 3, 4, 5, 6, 7);

	mov	DWORD PTR [rsp+64], 7
	mov	DWORD PTR [rsp+56], 6
	mov	DWORD PTR [rsp+48], 5
	mov	DWORD PTR [rsp+40], 4
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, 2
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR m$42[rsp]
	call	??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>

; 59   : 		mat4x2 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$42[rsp]
	lea	rdx, QWORD PTR m$42[rsp]
	lea	rcx, QWORD PTR n$43[rsp]
	call	??$matrixCompMult@M$0A@Utmat4x2@glm@@@glm@@YA?AU?$tmat4x2@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x2>

; 60   : 		Error += n == mat4x2(0, 1, 4, 9, 16, 25, 36, 49) ? 0 : 1;

	mov	DWORD PTR [rsp+64], 49			; 00000031H
	mov	DWORD PTR [rsp+56], 36			; 00000024H
	mov	DWORD PTR [rsp+48], 25
	mov	DWORD PTR [rsp+40], 16
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 4
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$?0HHHHHHHH@?$tmat4x2@M$0A@@glm@@QEAA@HHHHHHHH@Z ; glm::tmat4x2<float,0>::tmat4x2<float,0><int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$43[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test_matri
	mov	DWORD PTR tv400[rsp], 0
	jmp	SHORT $LN18@test_matri
$LN17@test_matri:
	mov	DWORD PTR tv400[rsp], 1
$LN18@test_matri:
	mov	eax, DWORD PTR tv400[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 	}
; 62   : 
; 63   : 	{
; 64   : 		mat4x3 m(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

	mov	DWORD PTR $T88[rsp], 11
	mov	DWORD PTR $T89[rsp], 10
	mov	DWORD PTR $T90[rsp], 9
	mov	DWORD PTR $T91[rsp], 8
	mov	DWORD PTR $T92[rsp], 7
	mov	DWORD PTR $T93[rsp], 6
	mov	DWORD PTR $T94[rsp], 5
	mov	DWORD PTR $T95[rsp], 4
	mov	DWORD PTR $T96[rsp], 3
	mov	DWORD PTR $T97[rsp], 2
	mov	DWORD PTR $T98[rsp], 1
	mov	DWORD PTR $T99[rsp], 0
	lea	rax, QWORD PTR $T88[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T89[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T90[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T91[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T92[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T93[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T94[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T95[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T96[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T97[rsp]
	lea	r8, QWORD PTR $T98[rsp]
	lea	rdx, QWORD PTR $T99[rsp]
	lea	rcx, QWORD PTR m$45[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>

; 65   : 		mat4x3 n = matrixCompMult(m, m);

	lea	r8, QWORD PTR m$45[rsp]
	lea	rdx, QWORD PTR m$45[rsp]
	lea	rcx, QWORD PTR n$46[rsp]
	call	??$matrixCompMult@M$0A@Utmat4x3@glm@@@glm@@YA?AU?$tmat4x3@M$0A@@0@AEBU10@0@Z ; glm::matrixCompMult<float,0,glm::tmat4x3>

; 66   : 		Error += n == mat4x3(0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121) ? 0 : 1;

	mov	DWORD PTR $T100[rsp], 121		; 00000079H
	mov	DWORD PTR $T101[rsp], 100		; 00000064H
	mov	DWORD PTR $T102[rsp], 81		; 00000051H
	mov	DWORD PTR $T103[rsp], 64		; 00000040H
	mov	DWORD PTR $T104[rsp], 49		; 00000031H
	mov	DWORD PTR $T105[rsp], 36		; 00000024H
	mov	DWORD PTR $T106[rsp], 25
	mov	DWORD PTR $T107[rsp], 16
	mov	DWORD PTR $T108[rsp], 9
	mov	DWORD PTR $T109[rsp], 4
	mov	DWORD PTR $T110[rsp], 1
	mov	DWORD PTR $T111[rsp], 0
	lea	rax, QWORD PTR $T100[rsp]
	mov	QWORD PTR [rsp+96], rax
	lea	rax, QWORD PTR $T101[rsp]
	mov	QWORD PTR [rsp+88], rax
	lea	rax, QWORD PTR $T102[rsp]
	mov	QWORD PTR [rsp+80], rax
	lea	rax, QWORD PTR $T103[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR $T104[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR $T105[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR $T106[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR $T107[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR $T108[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T109[rsp]
	lea	r8, QWORD PTR $T110[rsp]
	lea	rdx, QWORD PTR $T111[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$?0HHHHHHHHHHHH@?$tmat4x3@M$0A@@glm@@QEAA@AEBH00000000000@Z ; glm::tmat4x3<float,0>::tmat4x3<float,0><int,int,int,int,int,int,int,int,int,int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR n$46[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tmat4x3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test_matri
	mov	DWORD PTR tv437[rsp], 0
	jmp	SHORT $LN20@test_matri
$LN19@test_matri:
	mov	DWORD PTR tv437[rsp], 1
$LN20@test_matri:
	mov	eax, DWORD PTR tv437[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 67   : 	}
; 68   : 
; 69   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 70   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_matrixCompMult@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1952				; 000007a0H
	pop	rdi
	ret	0
?test_matrixCompMult@@YAHXZ ENDP			; test_matrixCompMult
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
