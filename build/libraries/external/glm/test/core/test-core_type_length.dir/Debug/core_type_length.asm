; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@XZ			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@XZ			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	?test_length_mat_non_squared@@YAHXZ		; test_length_mat_non_squared
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tmat2x3@M$0A@@glm@@QEAA@XZ			; glm::tmat2x3<float,0>::tmat2x3<float,0>
PUBLIC	?length@?$tmat2x3@M$0A@@glm@@SAHXZ		; glm::tmat2x3<float,0>::length
PUBLIC	??0?$tmat2x4@M$0A@@glm@@QEAA@XZ			; glm::tmat2x4<float,0>::tmat2x4<float,0>
PUBLIC	?length@?$tmat2x4@M$0A@@glm@@SAHXZ		; glm::tmat2x4<float,0>::length
PUBLIC	??0?$tmat3x2@M$0A@@glm@@QEAA@XZ			; glm::tmat3x2<float,0>::tmat3x2<float,0>
PUBLIC	?length@?$tmat3x2@M$0A@@glm@@SAHXZ		; glm::tmat3x2<float,0>::length
PUBLIC	??0?$tmat3x4@M$0A@@glm@@QEAA@XZ			; glm::tmat3x4<float,0>::tmat3x4<float,0>
PUBLIC	?length@?$tmat3x4@M$0A@@glm@@SAHXZ		; glm::tmat3x4<float,0>::length
PUBLIC	??0?$tmat4x2@M$0A@@glm@@QEAA@XZ			; glm::tmat4x2<float,0>::tmat4x2<float,0>
PUBLIC	?length@?$tmat4x2@M$0A@@glm@@SAHXZ		; glm::tmat4x2<float,0>::length
PUBLIC	??0?$tmat4x3@M$0A@@glm@@QEAA@XZ			; glm::tmat4x3<float,0>::tmat4x3<float,0>
PUBLIC	?length@?$tmat4x3@M$0A@@glm@@SAHXZ		; glm::tmat4x3<float,0>::length
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@XZ			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tmat2x3@N$0A@@glm@@QEAA@XZ			; glm::tmat2x3<double,0>::tmat2x3<double,0>
PUBLIC	?length@?$tmat2x3@N$0A@@glm@@SAHXZ		; glm::tmat2x3<double,0>::length
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@XZ			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tmat2x4@N$0A@@glm@@QEAA@XZ			; glm::tmat2x4<double,0>::tmat2x4<double,0>
PUBLIC	?length@?$tmat2x4@N$0A@@glm@@SAHXZ		; glm::tmat2x4<double,0>::length
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@XZ			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tmat3x2@N$0A@@glm@@QEAA@XZ			; glm::tmat3x2<double,0>::tmat3x2<double,0>
PUBLIC	?length@?$tmat3x2@N$0A@@glm@@SAHXZ		; glm::tmat3x2<double,0>::length
PUBLIC	??0?$tmat3x4@N$0A@@glm@@QEAA@XZ			; glm::tmat3x4<double,0>::tmat3x4<double,0>
PUBLIC	?length@?$tmat3x4@N$0A@@glm@@SAHXZ		; glm::tmat3x4<double,0>::length
PUBLIC	??0?$tmat4x2@N$0A@@glm@@QEAA@XZ			; glm::tmat4x2<double,0>::tmat4x2<double,0>
PUBLIC	?length@?$tmat4x2@N$0A@@glm@@SAHXZ		; glm::tmat4x2<double,0>::length
PUBLIC	??0?$tmat4x3@N$0A@@glm@@QEAA@XZ			; glm::tmat4x3<double,0>::tmat4x3<double,0>
PUBLIC	?length@?$tmat4x3@N$0A@@glm@@SAHXZ		; glm::tmat4x3<double,0>::length
PUBLIC	?test_length_mat@@YAHXZ				; test_length_mat
PUBLIC	??0?$tmat2x2@M$0A@@glm@@QEAA@XZ			; glm::tmat2x2<float,0>::tmat2x2<float,0>
PUBLIC	?length@?$tmat2x2@M$0A@@glm@@SAHXZ		; glm::tmat2x2<float,0>::length
PUBLIC	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ			; glm::tmat3x3<float,0>::tmat3x3<float,0>
PUBLIC	?length@?$tmat3x3@M$0A@@glm@@SAHXZ		; glm::tmat3x3<float,0>::length
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ			; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@SAHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??0?$tmat2x2@N$0A@@glm@@QEAA@XZ			; glm::tmat2x2<double,0>::tmat2x2<double,0>
PUBLIC	?length@?$tmat2x2@N$0A@@glm@@SAHXZ		; glm::tmat2x2<double,0>::length
PUBLIC	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ			; glm::tmat3x3<double,0>::tmat3x3<double,0>
PUBLIC	?length@?$tmat3x3@N$0A@@glm@@SAHXZ		; glm::tmat3x3<double,0>::length
PUBLIC	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ			; glm::tmat4x4<double,0>::tmat4x4<double,0>
PUBLIC	?length@?$tmat4x4@N$0A@@glm@@SAHXZ		; glm::tmat4x4<double,0>::length
PUBLIC	?test_length_vec@@YAHXZ				; test_length_vec
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	?length@?$tvec3@I$0A@@glm@@SAHXZ		; glm::tvec3<unsigned int,0>::length
PUBLIC	??0?$tvec3@I$0A@@glm@@QEAA@XZ			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
PUBLIC	?length@?$tvec4@I$0A@@glm@@SAHXZ		; glm::tvec4<unsigned int,0>::length
PUBLIC	??0?$tvec4@I$0A@@glm@@QEAA@XZ			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
PUBLIC	main
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z		; glm::tvec2<double,0>::tvec2<double,0><int,int>
PUBLIC	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
PUBLIC	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+119
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_length_mat_non_squared@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+844
	DD	imagerel $unwind$?test_length_mat_non_squared@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+240
	DD	imagerel $unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+202
	DD	imagerel $unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+247
	DD	imagerel $unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+180
	DD	imagerel $unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+189
	DD	imagerel $unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+271
	DD	imagerel $unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x3@N$0A@@glm@@SAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_length_mat@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+847
	DD	imagerel $unwind$?test_length_mat@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+130
	DD	imagerel $unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+297
	DD	imagerel $unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat2x2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat2x2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat3x3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat3x3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+306
	DD	imagerel $unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tmat4x4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tmat4x4@N$0A@@glm@@SAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_length_vec@@YAHXZ DD imagerel $LN27
	DD	imagerel $LN27+798
	DD	imagerel $unwind$?test_length_vec@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec3@I$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@I$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@I$0A@@glm@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@N$0A@@glm@@QEAA@XZ DD 040e01H
	DD	017010eH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007820bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x3@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x2@M$0A@@glm@@QEAA@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@N$0A@@glm@@QEAA@XZ DD 040e01H
	DD	011010eH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007c20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@N$0A@@glm@@QEAA@XZ DD 040e01H
	DD	013010eH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@N$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x3@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat4x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat4x2@M$0A@@glm@@QEAA@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007c20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat3x2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat3x2@M$0A@@glm@@QEAA@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x4@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007a20bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tmat2x3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tmat2x3@M$0A@@glm@@QEAA@XZ DD 030b01H
	DD	07007820bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_length_mat@@YAHXZ
	DD	013H
	DD	0336H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_length_mat_non_squared@@YAHXZ
	DD	013H
	DD	0333H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_length_mat_non_squared@@YAHXZ DD 031b19H
	DD	05c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	02d8H
$unwind$?test_length_mat@@YAHXZ DD 031b19H
	DD	0680109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0338H
$unwind$?test_length_vec@@YAHXZ DD 030901H
	DD	0220109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 021901H
	DD	070155219H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2sd xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2sd xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_length.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 70   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 71   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 72   : 	
; 73   : 	Error += test_length_vec();

	call	?test_length_vec@@YAHXZ			; test_length_vec
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 	Error += test_length_mat();

	call	?test_length_mat@@YAHXZ			; test_length_mat
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 	Error += test_length_mat_non_squared();

	call	?test_length_mat_non_squared@@YAHXZ	; test_length_mat_non_squared
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 76   : 	
; 77   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 78   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@I$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@I$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@I$0A@@glm@@SAHXZ PROC			; glm::tvec3<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@I$0A@@glm@@SAHXZ ENDP			; glm::tvec3<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_length.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 36
$T2 = 44
$T3 = 56
$T4 = 72
$T5 = 80
$T6 = 92
$T7 = 108
$T8 = 116
$T9 = 128
$T10 = 144
$T11 = 160
$T12 = 184
tv67 = 216
tv72 = 220
tv77 = 224
tv82 = 228
tv87 = 232
tv92 = 236
tv129 = 240
tv134 = 244
tv139 = 248
tv144 = 252
tv149 = 256
tv154 = 260
?test_length_vec@@YAHXZ PROC				; test_length_vec

; 46   : {

$LN27:
	push	rdi
	sub	rsp, 272				; 00000110H

; 47   : 
; 48   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 49   : 	
; 50   : 	Error += glm::vec2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@XZ		; glm::tvec2<float,0>::tvec2<float,0>
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN3@test_lengt
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_lengt
$LN3@test_lengt:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_lengt:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 51   : 	Error += glm::vec3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@XZ		; glm::tvec3<float,0>::tvec3<float,0>
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN5@test_lengt
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_lengt
$LN5@test_lengt:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_lengt:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 52   : 	Error += glm::vec4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@XZ		; glm::tvec4<float,0>::tvec4<float,0>
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN7@test_lengt
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test_lengt
$LN7@test_lengt:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test_lengt:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 53   : 
; 54   : 	Error += glm::ivec2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@XZ		; glm::tvec2<int,0>::tvec2<int,0>
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	eax, 2
	jne	SHORT $LN9@test_lengt
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN10@test_lengt
$LN9@test_lengt:
	mov	DWORD PTR tv82[rsp], 1
$LN10@test_lengt:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 55   : 	Error += glm::ivec3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@XZ		; glm::tvec3<int,0>::tvec3<int,0>
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	eax, 3
	jne	SHORT $LN11@test_lengt
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN12@test_lengt
$LN11@test_lengt:
	mov	DWORD PTR tv87[rsp], 1
$LN12@test_lengt:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 56   : 	Error += glm::ivec4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@XZ		; glm::tvec4<int,0>::tvec4<int,0>
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	eax, 4
	jne	SHORT $LN13@test_lengt
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@test_lengt
$LN13@test_lengt:
	mov	DWORD PTR tv92[rsp], 1
$LN14@test_lengt:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 57   : 
; 58   : 	Error += glm::uvec2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@XZ		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	eax, 2
	jne	SHORT $LN15@test_lengt
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN16@test_lengt
$LN15@test_lengt:
	mov	DWORD PTR tv129[rsp], 1
$LN16@test_lengt:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 	Error += glm::uvec3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec3@I$0A@@glm@@QEAA@XZ		; glm::tvec3<unsigned int,0>::tvec3<unsigned int,0>
	call	?length@?$tvec3@I$0A@@glm@@SAHXZ	; glm::tvec3<unsigned int,0>::length
	cmp	eax, 3
	jne	SHORT $LN17@test_lengt
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN18@test_lengt
$LN17@test_lengt:
	mov	DWORD PTR tv134[rsp], 1
$LN18@test_lengt:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 60   : 	Error += glm::uvec4().length() == 4 ? 0 : 1;	

	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec4@I$0A@@glm@@QEAA@XZ		; glm::tvec4<unsigned int,0>::tvec4<unsigned int,0>
	call	?length@?$tvec4@I$0A@@glm@@SAHXZ	; glm::tvec4<unsigned int,0>::length
	cmp	eax, 4
	jne	SHORT $LN19@test_lengt
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN20@test_lengt
$LN19@test_lengt:
	mov	DWORD PTR tv139[rsp], 1
$LN20@test_lengt:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 	
; 62   : 	Error += glm::dvec2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@XZ		; glm::tvec2<double,0>::tvec2<double,0>
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN21@test_lengt
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN22@test_lengt
$LN21@test_lengt:
	mov	DWORD PTR tv144[rsp], 1
$LN22@test_lengt:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 63   : 	Error += glm::dvec3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@XZ		; glm::tvec3<double,0>::tvec3<double,0>
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN23@test_lengt
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN24@test_lengt
$LN23@test_lengt:
	mov	DWORD PTR tv149[rsp], 1
$LN24@test_lengt:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 64   : 	Error += glm::dvec4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@XZ		; glm::tvec4<double,0>::tvec4<double,0>
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN25@test_lengt
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN26@test_lengt
$LN25@test_lengt:
	mov	DWORD PTR tv154[rsp], 1
$LN26@test_lengt:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 65   : 	
; 66   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 67   : }

	add	rsp, 272				; 00000110H
	pop	rdi
	ret	0
?test_length_vec@@YAHXZ ENDP				; test_length_vec
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<double,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
$T4 = 144
this$ = 208
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<double,0>::tmat4x4<double,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 4
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<double,0>::tmat4x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<double,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
this$ = 144
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<double,0>::tmat3x3<double,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 3
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 18   : #			endif
; 19   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<double,0>::tmat3x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<double,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
??0?$tmat2x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x2<double,0>::tmat2x2<double,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@N$0A@@glm@@QEAA@XZ ; glm::tvec2<double,0>::tvec2<double,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 17   : #			endif
; 18   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x2<double,0>::tmat2x2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.hpp
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x4<float,0>::length, COMDAT

; 84   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
this$ = 144
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 18   : 				this->value[3] = col_type(0, 0, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 19   : #			endif
; 20   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.hpp
;	COMDAT ?length@?$tmat3x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x3<float,0>::length, COMDAT

; 79   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x3.inl
;	COMDAT ??0?$tmat3x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
this$ = 112
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x3<float,0>::tmat3x3<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 3
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 16   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 17   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 18   : #			endif
; 19   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x3<float,0>::tmat3x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.hpp
;	COMDAT ?length@?$tmat2x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x2<float,0>::length, COMDAT

; 72   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x2.inl
;	COMDAT ??0?$tmat2x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
??0?$tmat2x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x2<float,0>::tmat2x2<float,0>, COMDAT

; 13   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 2
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 14   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 15   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 16   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 17   : #			endif
; 18   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$tmat2x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x2<float,0>::tmat2x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_length.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 40
$T2 = 56
$T3 = 96
$T4 = 160
$T5 = 176
$T6 = 224
$T7 = 288
$T8 = 320
$T9 = 400
$T10 = 528
$T11 = 560
$T12 = 640
tv67 = 776
tv72 = 780
tv77 = 784
tv82 = 788
tv87 = 792
tv92 = 796
tv129 = 800
tv134 = 804
tv139 = 808
tv144 = 812
tv149 = 816
tv154 = 820
__$ArrayPad$ = 824
?test_length_mat@@YAHXZ PROC				; test_length_mat

; 25   : {

$LN27:
	push	rdi
	sub	rsp, 832				; 00000340H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 26   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 27   : 	
; 28   : 	Error += glm::mat2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@XZ		; glm::tmat2x2<float,0>::tmat2x2<float,0>
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN3@test_lengt
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_lengt
$LN3@test_lengt:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_lengt:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 29   : 	Error += glm::mat3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ		; glm::tmat3x3<float,0>::tmat3x3<float,0>
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN5@test_lengt
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_lengt
$LN5@test_lengt:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_lengt:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 	Error += glm::mat4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN7@test_lengt
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test_lengt
$LN7@test_lengt:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test_lengt:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 	Error += glm::mat2x2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tmat2x2@M$0A@@glm@@QEAA@XZ		; glm::tmat2x2<float,0>::tmat2x2<float,0>
	call	?length@?$tmat2x2@M$0A@@glm@@SAHXZ	; glm::tmat2x2<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN9@test_lengt
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN10@test_lengt
$LN9@test_lengt:
	mov	DWORD PTR tv82[rsp], 1
$LN10@test_lengt:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 32   : 	Error += glm::mat3x3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tmat3x3@M$0A@@glm@@QEAA@XZ		; glm::tmat3x3<float,0>::tmat3x3<float,0>
	call	?length@?$tmat3x3@M$0A@@glm@@SAHXZ	; glm::tmat3x3<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN11@test_lengt
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN12@test_lengt
$LN11@test_lengt:
	mov	DWORD PTR tv87[rsp], 1
$LN12@test_lengt:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 	Error += glm::mat4x4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tmat4x4@M$0A@@glm@@QEAA@XZ		; glm::tmat4x4<float,0>::tmat4x4<float,0>
	call	?length@?$tmat4x4@M$0A@@glm@@SAHXZ	; glm::tmat4x4<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN13@test_lengt
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@test_lengt
$LN13@test_lengt:
	mov	DWORD PTR tv92[rsp], 1
$LN14@test_lengt:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 34   : 	
; 35   : 	Error += glm::dmat2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tmat2x2@N$0A@@glm@@QEAA@XZ		; glm::tmat2x2<double,0>::tmat2x2<double,0>
	call	?length@?$tmat2x2@N$0A@@glm@@SAHXZ	; glm::tmat2x2<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN15@test_lengt
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN16@test_lengt
$LN15@test_lengt:
	mov	DWORD PTR tv129[rsp], 1
$LN16@test_lengt:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 	Error += glm::dmat3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ		; glm::tmat3x3<double,0>::tmat3x3<double,0>
	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN17@test_lengt
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN18@test_lengt
$LN17@test_lengt:
	mov	DWORD PTR tv134[rsp], 1
$LN18@test_lengt:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 37   : 	Error += glm::dmat4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ		; glm::tmat4x4<double,0>::tmat4x4<double,0>
	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN19@test_lengt
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN20@test_lengt
$LN19@test_lengt:
	mov	DWORD PTR tv139[rsp], 1
$LN20@test_lengt:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 	Error += glm::dmat2x2().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tmat2x2@N$0A@@glm@@QEAA@XZ		; glm::tmat2x2<double,0>::tmat2x2<double,0>
	call	?length@?$tmat2x2@N$0A@@glm@@SAHXZ	; glm::tmat2x2<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN21@test_lengt
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN22@test_lengt
$LN21@test_lengt:
	mov	DWORD PTR tv144[rsp], 1
$LN22@test_lengt:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 39   : 	Error += glm::dmat3x3().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat3x3@N$0A@@glm@@QEAA@XZ		; glm::tmat3x3<double,0>::tmat3x3<double,0>
	call	?length@?$tmat3x3@N$0A@@glm@@SAHXZ	; glm::tmat3x3<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN23@test_lengt
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN24@test_lengt
$LN23@test_lengt:
	mov	DWORD PTR tv149[rsp], 1
$LN24@test_lengt:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 	Error += glm::dmat4x4().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tmat4x4@N$0A@@glm@@QEAA@XZ		; glm::tmat4x4<double,0>::tmat4x4<double,0>
	call	?length@?$tmat4x4@N$0A@@glm@@SAHXZ	; glm::tmat4x4<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN25@test_lengt
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN26@test_lengt
$LN25@test_lengt:
	mov	DWORD PTR tv154[rsp], 1
$LN26@test_lengt:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 41   : 	
; 42   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 43   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 832				; 00000340H
	pop	rdi
	ret	0
?test_length_mat@@YAHXZ ENDP				; test_length_mat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
$T4 = 104
this$ = 160
??0?$tmat4x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x3<double,0>::tmat4x3<double,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 4
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 17   : #			endif
; 18   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x3<double,0>::tmat4x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
this$ = 128
??0?$tmat4x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x2<double,0>::tmat4x2<double,0>, COMDAT

; 18   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@N$0A@@glm@@QEAA@XZ ; glm::tvec2<double,0>::tvec2<double,0>
	mov	r8d, 4
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 21   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 24   : #			endif
; 25   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x2<double,0>::tmat4x2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
this$ = 176
??0?$tmat3x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x4<double,0>::tmat3x4<double,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 3
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 16   : #			endif
; 17   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x4<double,0>::tmat3x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@N$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<double,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@N$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
this$ = 112
??0?$tmat3x2@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x2<double,0>::tmat3x2<double,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@N$0A@@glm@@QEAA@XZ ; glm::tvec2<double,0>::tvec2<double,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@N$0A@@glm@@QEAA@HH@Z	; glm::tvec2<double,0>::tvec2<double,0><int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : #			endif
; 17   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x2<double,0>::tmat3x2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<double,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
this$ = 144
??0?$tmat2x4@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x4<double,0>::tmat2x4<double,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@N$0A@@glm@@QEAA@XZ ; glm::tvec4<double,0>::tvec4<double,0>
	mov	r8d, 2
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@N$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<double,0>::tvec4<double,0><int,int,int,int>
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb

; 15   : #			endif
; 16   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x4<double,0>::tmat2x4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+24], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@N$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<double,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@N$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
this$ = 112
??0?$tmat2x3@N$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x3<double,0>::tmat2x3<double,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@N$0A@@glm@@QEAA@XZ ; glm::tvec3<double,0>::tvec3<double,0>
	mov	r8d, 2
	mov	edx, 24
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@N$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<double,0>::tvec3<double,0><int,int,int>
	mov	ecx, 24
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb

; 15   : #			endif
; 16   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x3<double,0>::tmat2x3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@N$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rax+16], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.hpp
;	COMDAT ?length@?$tmat4x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x3<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x3.inl
;	COMDAT ??0?$tmat4x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
$T4 = 68
this$ = 112
??0?$tmat4x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x3<float,0>::tmat4x3<float,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 4
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 15   : 				this->value[2] = col_type(0, 0, 1);

	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 16   : 				this->value[3] = col_type(0, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 17   : #			endif
; 18   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat4x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x3<float,0>::tmat4x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.hpp
;	COMDAT ?length@?$tmat4x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat4x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat4x2<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tmat4x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat4x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat4x2.inl
;	COMDAT ??0?$tmat4x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
$T4 = 56
this$ = 80
??0?$tmat4x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat4x2<float,0>::tmat4x2<float,0>, COMDAT

; 18   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 4
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 19   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 20   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 21   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 22   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 23   : 				this->value[3] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 24   : #			endif
; 25   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat4x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat4x2<float,0>::tmat4x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.hpp
;	COMDAT ?length@?$tmat3x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x4<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x4.inl
;	COMDAT ??0?$tmat3x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
this$ = 128
??0?$tmat3x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x4<float,0>::tmat3x4<float,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 3
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : 				this->value[2] = col_type(0, 0, 1, 0);

	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 16   : #			endif
; 17   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat3x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x4<float,0>::tmat3x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.hpp
;	COMDAT ?length@?$tmat3x2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat3x2@M$0A@@glm@@SAHXZ PROC			; glm::tmat3x2<float,0>::length, COMDAT

; 80   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tmat3x2@M$0A@@glm@@SAHXZ ENDP			; glm::tmat3x2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat3x2.inl
;	COMDAT ??0?$tmat3x2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
this$ = 80
??0?$tmat3x2@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat3x2<float,0>::tmat3x2<float,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec2@M$0A@@glm@@QEAA@XZ ; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8d, 3
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0);

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 14   : 				this->value[1] = col_type(0, 1);

	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 15   : 				this->value[2] = col_type(0, 0);

	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rdx+rcx], rax

; 16   : #			endif
; 17   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??0?$tmat3x2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat3x2<float,0>::tmat3x2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.hpp
;	COMDAT ?length@?$tmat2x4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x4@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x4<float,0>::length, COMDAT

; 75   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x4@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x4.inl
;	COMDAT ??0?$tmat2x4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
this$ = 112
??0?$tmat2x4@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x4<float,0>::tmat2x4<float,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec4@M$0A@@glm@@QEAA@XZ ; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8d, 2
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0, 0);

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 15   : #			endif
; 16   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x4<float,0>::tmat2x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.hpp
;	COMDAT ?length@?$tmat2x3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tmat2x3@M$0A@@glm@@SAHXZ PROC			; glm::tmat2x3<float,0>::length, COMDAT

; 73   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tmat2x3@M$0A@@glm@@SAHXZ ENDP			; glm::tmat2x3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_mat2x3.inl
;	COMDAT ??0?$tmat2x3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
this$ = 96
??0?$tmat2x3@M$0A@@glm@@QEAA@XZ PROC			; glm::tmat2x3<float,0>::tmat2x3<float,0>, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR this$[rsp]
	lea	r9, OFFSET FLAT:??0?$tvec3@M$0A@@glm@@QEAA@XZ ; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8d, 2
	mov	edx, 12
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z

; 12   : #			ifndef GLM_FORCE_NO_CTOR_INIT 
; 13   : 				this->value[0] = col_type(1, 0, 0);

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 14   : 				this->value[1] = col_type(0, 1, 0);

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	ecx, 12
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 15   : #			endif
; 16   : 		}

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??0?$tmat2x3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tmat2x3<float,0>::tmat2x3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_length.cpp
_TEXT	SEGMENT
Error$ = 32
$T1 = 40
$T2 = 64
$T3 = 96
$T4 = 120
$T5 = 168
$T6 = 200
$T7 = 248
$T8 = 304
$T9 = 368
$T10 = 416
$T11 = 512
$T12 = 576
tv67 = 680
tv72 = 684
tv77 = 688
tv82 = 692
tv87 = 696
tv92 = 700
tv129 = 704
tv134 = 708
tv139 = 712
tv144 = 716
tv149 = 720
tv154 = 724
__$ArrayPad$ = 728
?test_length_mat_non_squared@@YAHXZ PROC		; test_length_mat_non_squared

; 4    : {

$LN27:
	push	rdi
	sub	rsp, 736				; 000002e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 5    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 6    : 
; 7    : 	Error += glm::mat2x3().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tmat2x3@M$0A@@glm@@QEAA@XZ		; glm::tmat2x3<float,0>::tmat2x3<float,0>
	call	?length@?$tmat2x3@M$0A@@glm@@SAHXZ	; glm::tmat2x3<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN3@test_lengt
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test_lengt
$LN3@test_lengt:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test_lengt:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 8    : 	Error += glm::mat2x4().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tmat2x4@M$0A@@glm@@QEAA@XZ		; glm::tmat2x4<float,0>::tmat2x4<float,0>
	call	?length@?$tmat2x4@M$0A@@glm@@SAHXZ	; glm::tmat2x4<float,0>::length
	cmp	eax, 2
	jne	SHORT $LN5@test_lengt
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test_lengt
$LN5@test_lengt:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test_lengt:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 9    : 	Error += glm::mat3x2().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tmat3x2@M$0A@@glm@@QEAA@XZ		; glm::tmat3x2<float,0>::tmat3x2<float,0>
	call	?length@?$tmat3x2@M$0A@@glm@@SAHXZ	; glm::tmat3x2<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN7@test_lengt
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test_lengt
$LN7@test_lengt:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test_lengt:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 10   : 	Error += glm::mat3x4().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tmat3x4@M$0A@@glm@@QEAA@XZ		; glm::tmat3x4<float,0>::tmat3x4<float,0>
	call	?length@?$tmat3x4@M$0A@@glm@@SAHXZ	; glm::tmat3x4<float,0>::length
	cmp	eax, 3
	jne	SHORT $LN9@test_lengt
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN10@test_lengt
$LN9@test_lengt:
	mov	DWORD PTR tv82[rsp], 1
$LN10@test_lengt:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 11   : 	Error += glm::mat4x2().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tmat4x2@M$0A@@glm@@QEAA@XZ		; glm::tmat4x2<float,0>::tmat4x2<float,0>
	call	?length@?$tmat4x2@M$0A@@glm@@SAHXZ	; glm::tmat4x2<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN11@test_lengt
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN12@test_lengt
$LN11@test_lengt:
	mov	DWORD PTR tv87[rsp], 1
$LN12@test_lengt:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 12   : 	Error += glm::mat4x3().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tmat4x3@M$0A@@glm@@QEAA@XZ		; glm::tmat4x3<float,0>::tmat4x3<float,0>
	call	?length@?$tmat4x3@M$0A@@glm@@SAHXZ	; glm::tmat4x3<float,0>::length
	cmp	eax, 4
	jne	SHORT $LN13@test_lengt
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@test_lengt
$LN13@test_lengt:
	mov	DWORD PTR tv92[rsp], 1
$LN14@test_lengt:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	
; 14   : 	Error += glm::dmat2x3().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tmat2x3@N$0A@@glm@@QEAA@XZ		; glm::tmat2x3<double,0>::tmat2x3<double,0>
	call	?length@?$tmat2x3@N$0A@@glm@@SAHXZ	; glm::tmat2x3<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN15@test_lengt
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN16@test_lengt
$LN15@test_lengt:
	mov	DWORD PTR tv129[rsp], 1
$LN16@test_lengt:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 15   : 	Error += glm::dmat2x4().length() == 2 ? 0 : 1;

	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tmat2x4@N$0A@@glm@@QEAA@XZ		; glm::tmat2x4<double,0>::tmat2x4<double,0>
	call	?length@?$tmat2x4@N$0A@@glm@@SAHXZ	; glm::tmat2x4<double,0>::length
	cmp	eax, 2
	jne	SHORT $LN17@test_lengt
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN18@test_lengt
$LN17@test_lengt:
	mov	DWORD PTR tv134[rsp], 1
$LN18@test_lengt:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 16   : 	Error += glm::dmat3x2().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tmat3x2@N$0A@@glm@@QEAA@XZ		; glm::tmat3x2<double,0>::tmat3x2<double,0>
	call	?length@?$tmat3x2@N$0A@@glm@@SAHXZ	; glm::tmat3x2<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN19@test_lengt
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN20@test_lengt
$LN19@test_lengt:
	mov	DWORD PTR tv139[rsp], 1
$LN20@test_lengt:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 	Error += glm::dmat3x4().length() == 3 ? 0 : 1;

	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tmat3x4@N$0A@@glm@@QEAA@XZ		; glm::tmat3x4<double,0>::tmat3x4<double,0>
	call	?length@?$tmat3x4@N$0A@@glm@@SAHXZ	; glm::tmat3x4<double,0>::length
	cmp	eax, 3
	jne	SHORT $LN21@test_lengt
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN22@test_lengt
$LN21@test_lengt:
	mov	DWORD PTR tv144[rsp], 1
$LN22@test_lengt:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 18   : 	Error += glm::dmat4x2().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tmat4x2@N$0A@@glm@@QEAA@XZ		; glm::tmat4x2<double,0>::tmat4x2<double,0>
	call	?length@?$tmat4x2@N$0A@@glm@@SAHXZ	; glm::tmat4x2<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN23@test_lengt
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN24@test_lengt
$LN23@test_lengt:
	mov	DWORD PTR tv149[rsp], 1
$LN24@test_lengt:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	Error += glm::dmat4x3().length() == 4 ? 0 : 1;

	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tmat4x3@N$0A@@glm@@QEAA@XZ		; glm::tmat4x3<double,0>::tmat4x3<double,0>
	call	?length@?$tmat4x3@N$0A@@glm@@SAHXZ	; glm::tmat4x3<double,0>::length
	cmp	eax, 4
	jne	SHORT $LN25@test_lengt
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN26@test_lengt
$LN25@test_lengt:
	mov	DWORD PTR tv154[rsp], 1
$LN26@test_lengt:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 	
; 21   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 22   : }

	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 736				; 000002e0H
	pop	rdi
	ret	0
?test_length_mat_non_squared@@YAHXZ ENDP		; test_length_mat_non_squared
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@I$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@M$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv66 = 32
tv67 = 40
__t$ = 64
__s$ = 72
__n$ = 80
__f$ = 88
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN2@vector:
	mov	rax, QWORD PTR __n$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	mov	rax, QWORD PTR __n$[rsp]
	dec	rax
	mov	QWORD PTR __n$[rsp], rax
	cmp	QWORD PTR tv66[rsp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rsp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rsp], 0
	je	SHORT $LN3@vector
	mov	rcx, QWORD PTR __t$[rsp]
	call	QWORD PTR __f$[rsp]
	mov	rax, QWORD PTR __s$[rsp]
	mov	rcx, QWORD PTR __t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rsp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
