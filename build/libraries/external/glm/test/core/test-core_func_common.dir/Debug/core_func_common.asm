; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?TestBool@mix_@@3PAU?$entry@M_N@1@A		; mix_::TestBool
PUBLIC	?TestFloat@mix_@@3PAU?$entry@MM@1@A		; mix_::TestFloat
_DATA	SEGMENT
?TestBool@mix_@@3PAU?$entry@M_N@1@A DD 000000000r ; 0	; mix_::TestBool
	DD	03f800000r			; 1
	DB	00H
	ORG $+3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
	ORG $+3
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DB	00H
	ORG $+3
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DB	01H
	ORG $+3
	DD	03f800000r			; 1
?TestFloat@mix_@@3PAU?$entry@MM@1@A DD 000000000r ; 0	; mix_::TestFloat
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
_DATA	ENDS
CONST	SEGMENT
$SG66689 DB	'invalid argument', 00H
	ORG $+3
$SG66690 DB	'%s', 00H
	ORG $+1
$SG66694 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG66691 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+2
$SG66693 DB	00H, 00H
	ORG $+2
$SG61529 DB	'sign_cmp(rand) Time %d clocks', 0aH, 00H
	ORG $+1
$SG61531 DB	'sign_alu1(rand) Time %d clocks', 0aH, 00H
$SG61579 DB	'sign_cmp(linear) Time %d clocks', 0aH, 00H
	ORG $+7
$SG66692 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+4
$SG61530 DB	'sign_if(rand) Time %d clocks', 0aH, 00H
	ORG $+2
$SG61532 DB	'sign_alu2(rand) Time %d clocks', 0aH, 00H
$SG61533 DB	'sign_sub(rand) Time %d clocks', 0aH, 00H
	ORG $+1
$SG61534 DB	'glm::sign(rand) Time %d clocks', 0aH, 00H
$SG61580 DB	'sign_if(linear) Time %d clocks', 0aH, 00H
$SG61581 DB	'sign_alu1(linear) Time %d clocks', 0aH, 00H
	ORG $+6
$SG61582 DB	'sign_alu2(linear) Time %d clocks', 0aH, 00H
	ORG $+6
$SG61583 DB	'sign_sub(linear) Time %d clocks', 0aH, 00H
	ORG $+7
$SG61624 DB	'Sum %d', 0aH, 00H
$SG61625 DB	'sign_cmp(linear_cal) Time %d clocks', 0aH, 00H
	ORG $+3
$SG61626 DB	'sign_if(linear_cal) Time %d clocks', 0aH, 00H
	ORG $+4
$SG61627 DB	'sign_alu1(linear_cal) Time %d clocks', 0aH, 00H
	ORG $+2
$SG61628 DB	'sign_alu2(linear_cal) Time %d clocks', 0aH, 00H
	ORG $+2
$SG61629 DB	'sign_sub(linear_cal) Time %d clocks', 0aH, 00H
CONST	ENDS
PUBLIC	?fpclassify@@YAHM@Z				; fpclassify
PUBLIC	?fpclassify@@YAHN@Z				; fpclassify
PUBLIC	frexpf
PUBLIC	ldexpf
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?floor@@YAMM@Z					; floor
PUBLIC	?frexp@@YAMMPEAH@Z				; frexp
PUBLIC	?ldexp@@YAMMH@Z					; ldexp
PUBLIC	?modf@@YAMMPEAM@Z				; modf
PUBLIC	?round@@YAMM@Z					; round
PUBLIC	?floatBitsToInt@glm@@YAHAEBM@Z			; glm::floatBitsToInt
PUBLIC	?floatBitsToUint@glm@@YAIAEBM@Z			; glm::floatBitsToUint
PUBLIC	?intBitsToFloat@glm@@YAMAEBH@Z			; glm::intBitsToFloat
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?max@?$numeric_limits@E@std@@SAEXZ		; std::numeric_limits<unsigned char>::max
PUBLIC	?min@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::min
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?max@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::max
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	??$epsilonEqual@M@glm@@YA_NAEBM00@Z		; glm::epsilonEqual<float>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??$abs@N@glm@@YANN@Z				; glm::abs<double>
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?test@floor_@@YAHXZ				; floor_::test
PUBLIC	?length@?$tvec1@M$0A@@glm@@SAHXZ		; glm::tvec1<float,0>::length
PUBLIC	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec1<float,0>::operator[]
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
PUBLIC	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
PUBLIC	?length@?$tvec1@_N$0A@@glm@@SAHXZ		; glm::tvec1<bool,0>::length
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec1<bool,0>::operator[]
PUBLIC	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec1<bool,0>::tvec1<bool,0>
PUBLIC	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
PUBLIC	?length@?$tvec1@N$0A@@glm@@SAHXZ		; glm::tvec1<double,0>::length
PUBLIC	??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec1<double,0>::operator[]
PUBLIC	??0?$tvec1@N$0A@@glm@@QEAA@N@Z			; glm::tvec1<double,0>::tvec1<double,0>
PUBLIC	??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec1>
PUBLIC	??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec1>
PUBLIC	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>
PUBLIC	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?length@?$tvec2@N$0A@@glm@@SAHXZ		; glm::tvec2<double,0>::length
PUBLIC	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec2<double,0>::operator[]
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@N@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec2>
PUBLIC	??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec2>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>
PUBLIC	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	?length@?$tvec3@N$0A@@glm@@SAHXZ		; glm::tvec3<double,0>::length
PUBLIC	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec3<double,0>::operator[]
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@N@Z			; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<double,0>::tvec3<double,0>
PUBLIC	??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec3>
PUBLIC	??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec3>
PUBLIC	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?length@?$tvec4@N$0A@@glm@@SAHXZ		; glm::tvec4<double,0>::length
PUBLIC	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z		; glm::tvec4<double,0>::operator[]
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@N@Z			; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z		; glm::tvec4<double,0>::tvec4<double,0>
PUBLIC	??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec4>
PUBLIC	??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec4>
PUBLIC	?test@modf_@@YAHXZ				; modf_::test
PUBLIC	??$modf@M@glm@@YAMMAEAM@Z			; glm::modf<float>
PUBLIC	??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z ; glm::modf<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z ; glm::modf<double,0>
PUBLIC	??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z	; glm::operator==<double,0>
PUBLIC	??$modf@N@glm@@YANNAEAN@Z			; glm::modf<double>
PUBLIC	?test@mod_@@YAHXZ				; mod_::test
PUBLIC	??$mod@M@glm@@YAMMM@Z				; glm::mod<float>
PUBLIC	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec4>
PUBLIC	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>
PUBLIC	?test@floatBitsToInt@@YAHXZ			; floatBitsToInt::test
PUBLIC	?length@?$tvec2@H$0A@@glm@@SAHXZ		; glm::tvec2<int,0>::length
PUBLIC	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec2<int,0>::operator[]
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@XZ			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec2,0>
PUBLIC	??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec2,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?length@?$tvec3@H$0A@@glm@@SAHXZ		; glm::tvec3<int,0>::length
PUBLIC	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec3<int,0>::operator[]
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@XZ			; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec3,0>
PUBLIC	??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec3,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	?length@?$tvec4@H$0A@@glm@@SAHXZ		; glm::tvec4<int,0>::length
PUBLIC	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec4<int,0>::operator[]
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@XZ			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@H@Z			; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec4,0>
PUBLIC	??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec4,0>
PUBLIC	?test@floatBitsToUint@@YAHXZ			; floatBitsToUint::test
PUBLIC	??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec2,0>
PUBLIC	??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec2,0>
PUBLIC	??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec3,0>
PUBLIC	??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec3,0>
PUBLIC	??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec4,0>
PUBLIC	??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec4,0>
PUBLIC	?test@min_@@YAHXZ				; min_::test
PUBLIC	??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec1>
PUBLIC	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
PUBLIC	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec2>
PUBLIC	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
PUBLIC	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>
PUBLIC	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec3>
PUBLIC	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
PUBLIC	?test@max_@@YAHXZ				; max_::test
PUBLIC	??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec1>
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>
PUBLIC	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec3>
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	?test@clamp_@@YAHXZ				; clamp_::test
PUBLIC	?test@mix_@@YAHXZ				; mix_::test
PUBLIC	??$mix@M_N@glm@@YAMMM_N@Z			; glm::mix<float,bool>
PUBLIC	??$epsilon@M@glm@@YAMXZ				; glm::epsilon<float>
PUBLIC	??$mix@MM@glm@@YAMMMM@Z				; glm::mix<float,float>
PUBLIC	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec2>
PUBLIC	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec2>
PUBLIC	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec3>
PUBLIC	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>
PUBLIC	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec4>
PUBLIC	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
PUBLIC	?test@step_@@YAHXZ				; step_::test
PUBLIC	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>
PUBLIC	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>
PUBLIC	?test@round_@@YAHXZ				; round_::test
PUBLIC	?test@roundEven@@YAHXZ				; roundEven::test
PUBLIC	??$roundEven@M@glm@@YAMM@Z			; glm::roundEven<float>
PUBLIC	?test@isnan_@@YAHXZ				; isnan_::test
PUBLIC	??$isnan@N@@YA_NN@Z				; isnan<double>
PUBLIC	??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec2>
PUBLIC	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
PUBLIC	??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec3>
PUBLIC	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
PUBLIC	??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec4>
PUBLIC	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
PUBLIC	??$isnan@M@@YA_NM@Z				; isnan<float>
PUBLIC	??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec2>
PUBLIC	??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec3>
PUBLIC	??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec4>
PUBLIC	?test@isinf_@@YAHXZ				; isinf_::test
PUBLIC	??$isinf@N@@YA_NN@Z				; isinf<double>
PUBLIC	??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec2>
PUBLIC	??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec3>
PUBLIC	??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec4>
PUBLIC	??$isinf@M@@YA_NM@Z				; isinf<float>
PUBLIC	??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec2>
PUBLIC	??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec3>
PUBLIC	??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec4>
PUBLIC	?test_int32@sign@@YAHXZ				; sign::test_int32
PUBLIC	??$sign@H@glm@@YAHH@Z				; glm::sign<int>
PUBLIC	??$sign_cmp@H@sign@@YAHH@Z			; sign::sign_cmp<int>
PUBLIC	??$sign_if@H@sign@@YAHH@Z			; sign::sign_if<int>
PUBLIC	??$sign_alu1@H@sign@@YAHH@Z			; sign::sign_alu1<int>
PUBLIC	??$sign_alu2@H@sign@@YAHH@Z			; sign::sign_alu2<int>
PUBLIC	?test_i32vec4@sign@@YAHXZ			; sign::test_i32vec4
PUBLIC	??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::sign<int,0,glm::tvec4>
PUBLIC	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
PUBLIC	?test_f32vec4@sign@@YAHXZ			; sign::test_f32vec4
PUBLIC	??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::sign<float,0,glm::tvec4>
PUBLIC	?test@sign@@YAHXZ				; sign::test
PUBLIC	?perf_rand@sign@@YAH_K@Z			; sign::perf_rand
PUBLIC	??0?$allocator@H@std@@QEAA@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z	; std::allocator<int>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	??$linearRand@M@glm@@YAMMM@Z			; glm::linearRand<float>
PUBLIC	??$sign_sub@H@sign@@YAHH@Z			; sign::sign_sub<int>
PUBLIC	?perf_linear@sign@@YAH_K@Z			; sign::perf_linear
PUBLIC	?perf_linear_cal@sign@@YAH_K@Z			; sign::perf_linear_cal
PUBLIC	?perf@sign@@YAH_K@Z				; sign::perf
PUBLIC	?test@frexp_@@YAHXZ				; frexp_::test
PUBLIC	?length@?$tvec1@H$0A@@glm@@SAHXZ		; glm::tvec1<int,0>::length
PUBLIC	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z		; glm::tvec1<int,0>::operator[]
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@XZ			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??0?$tvec1@H$0A@@glm@@QEAA@H@Z			; glm::tvec1<int,0>::tvec1<int,0>
PUBLIC	??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z ; glm::frexp<float,0>
PUBLIC	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
PUBLIC	??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z		; glm::tvec2<float,0>::tvec2<float,0><int,double>
PUBLIC	??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z ; glm::frexp<float,0>
PUBLIC	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z		; glm::tvec2<float,0>::tvec2<float,0><double,double>
PUBLIC	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
PUBLIC	??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,double,int>
PUBLIC	??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z ; glm::frexp<float,0>
PUBLIC	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
PUBLIC	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
PUBLIC	??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z	; glm::tvec4<float,0>::tvec4<float,0><int,double,int,double>
PUBLIC	??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z ; glm::frexp<float,0>
PUBLIC	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
PUBLIC	?test@ldexp_@@YAHXZ				; ldexp_::test
PUBLIC	??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z ; glm::ldexp<float,0>
PUBLIC	??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z ; glm::ldexp<float,0>
PUBLIC	??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z ; glm::ldexp<float,0>
PUBLIC	??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z ; glm::ldexp<float,0>
PUBLIC	main
PUBLIC	??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z	; glm::operator~<int,0>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_abs@N$00@detail@glm@@SANN@Z	; glm::detail::compute_abs<double,1>::call
PUBLIC	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
PUBLIC	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
PUBLIC	?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec1,0>::call
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec1>
PUBLIC	??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec1>
PUBLIC	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
PUBLIC	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
PUBLIC	?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec2,0>::call
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec2>
PUBLIC	??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec2>
PUBLIC	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec3,0>::call
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec3>
PUBLIC	??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec3>
PUBLIC	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec4,0>::call
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec4>
PUBLIC	??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec4>
PUBLIC	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
PUBLIC	?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z ; glm::detail::compute_vec4_equal<double,0,0,64,0>::call
PUBLIC	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec1>
PUBLIC	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z ; glm::detail::compute_mix<float,bool>::call
PUBLIC	?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z	; glm::detail::compute_mix<float,float>::call
PUBLIC	?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$fract@M@glm@@YAMM@Z				; glm::fract<float>
PUBLIC	?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec4>::call
PUBLIC	?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
PUBLIC	?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec4,0,0>::call
PUBLIC	?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<float,0,glm::tvec4,1,0>::call
PUBLIC	?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
PUBLIC	??$frexp@M@glm@@YAMMAEAH@Z			; glm::frexp<float>
PUBLIC	??$ldexp@M@glm@@YAMAEBMAEBH@Z			; glm::ldexp<float>
PUBLIC	?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_vec4_bitwise_not<int,0,-1,32,0>::call
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@I$0A@@glm@@QEAA@I@Z			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
PUBLIC	??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
PUBLIC	??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec4>
PUBLIC	??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><bool,0>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z	; glm::operator-<int,0>
PUBLIC	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
PUBLIC	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
PUBLIC	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z	; glm::operator-<int,0>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec1>::call
PUBLIC	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@G$0A@@glm@@QEAA@G@Z			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
PUBLIC	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
PUBLIC	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z	; glm::operator<<<unsigned int,0>
PUBLIC	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned int,0>
PUBLIC	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
PUBLIC	??0?$tvec1@E$0A@@glm@@QEAA@E@Z			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
PUBLIC	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
PUBLIC	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z	; glm::operator<<<unsigned short,0>
PUBLIC	??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z	; glm::operator|<unsigned short,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec1,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec3,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<double,0>::operator-=<double>
PUBLIC	?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
PUBLIC	??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec1>
PUBLIC	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
PUBLIC	??$_Unfancy@H@std@@YAPEAHPEAH@Z			; std::_Unfancy<int>
PUBLIC	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z		; std::_Zero_range<int *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<int,0>::operator-=<int>
PUBLIC	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator/=<float>
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator/<float,0>
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$03@std@@YA_K_K@Z		; std::_Get_size_of_n<4>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<double,0,0>::call
PUBLIC	?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
PUBLIC	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z	; std::_Get_unwrapped<int * const &>
PUBLIC	??$move@AEAH@std@@YA$$QEAHAEAH@Z		; std::move<int &>
PUBLIC	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z	; std::_Copy_memmove<int *,int *>
PUBLIC	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
PUBLIC	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z	; std::_To_address<int *>
PUBLIC	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
PUBLIC	?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<int,0,0>::call
PUBLIC	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
PUBLIC	??$forward@H@std@@YA$$QEAHAEAH@Z		; std::forward<int>
PUBLIC	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
PUBLIC	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z		; std::_Voidify_iter<int *>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
PUBLIC	?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
PUBLIC	?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
PUBLIC	?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
PUBLIC	?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
PUBLIC	?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
PUBLIC	?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A ; step_::TestVec4Scalar
PUBLIC	?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A ; step_::TestVec4Vector
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@34000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@38d1b717
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e112e0be826d695
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f99999a
PUBLIC	__real@3fb999999999999a
PUBLIC	__real@3fc00000
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3fceb851eb851eb8
PUBLIC	__real@3fd9999a
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3feeb851eb851eb8
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@3ff19999a0000000
PUBLIC	__real@3ff33333
PUBLIC	__real@3ff3333333333333
PUBLIC	__real@3ff8000000000000
PUBLIC	__real@3ffb333333333333
PUBLIC	__real@40000000
PUBLIC	__real@4019999a
PUBLIC	__real@40200000
PUBLIC	__real@40266666
PUBLIC	__real@40400000
PUBLIC	__real@40600000
PUBLIC	__real@40800000
PUBLIC	__real@40900000
PUBLIC	__real@40a00000
PUBLIC	__real@40b00000
PUBLIC	__real@40c00000
PUBLIC	__real@40d00000
PUBLIC	__real@40e00000
PUBLIC	__real@40f00000
PUBLIC	__real@41000000
PUBLIC	__real@44800000
PUBLIC	__real@47800000
PUBLIC	__real@80000000
PUBLIC	__real@bdcccccd
PUBLIC	__real@be4ccccd
PUBLIC	__real@bf000000
PUBLIC	__real@bf666666
PUBLIC	__real@bf800000
PUBLIC	__real@bfc00000
PUBLIC	__real@bfe547ae147ae148
PUBLIC	__real@bff0000000000000
PUBLIC	__real@bff33333
PUBLIC	__real@bff547ae147ae148
PUBLIC	__real@c0000000
PUBLIC	__real@c019999a
PUBLIC	__real@c0200000
PUBLIC	__real@c0266666
PUBLIC	__real@c0400000
PUBLIC	__real@c0600000
PUBLIC	__real@c0800000
PUBLIC	__real@c0900000
PUBLIC	__real@c0a00000
PUBLIC	__real@c0b00000
PUBLIC	__real@c0c00000
PUBLIC	__real@c0d00000
PUBLIC	__real@c0f00000
PUBLIC	__real@c1000000
PUBLIC	__real@c7800000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__imp__dtest:PROC
EXTRN	__imp__fdtest:PROC
EXTRN	__imp_floor:PROC
EXTRN	__imp_frexp:PROC
EXTRN	__imp_ldexp:PROC
EXTRN	__imp_modf:PROC
EXTRN	__imp_modff:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_clock:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	floorf:PROC
EXTRN	roundf:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A DB 070H DUP (?) ; mix_::TestVec2Bool
?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A DB 08cH DUP (?) ; mix_::TestBVec2
?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A DB 0a0H DUP (?) ; mix_::TestVec3Bool
?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A DB 0c8H DUP (?) ; mix_::TestBVec3
?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A DB 0d0H DUP (?) ; mix_::TestVec4Bool
?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A DB 0104H DUP (?) ; mix_::TestBVec4
?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A DB 06cH DUP (?) ; step_::TestVec4Scalar
?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A DB 0c0H DUP (?) ; step_::TestVec4Vector
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fpclassify@@YAHN@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?fpclassify@@YAHN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$frexpf DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$frexpf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ldexpf DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$ldexpf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floor@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?floor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?frexp@@YAMMPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$?frexp@@YAMMPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ldexp@@YAMMH@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?ldexp@@YAMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?modf@@YAMMPEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?modf@@YAMMPEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?round@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?round@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floatBitsToInt@glm@@YAHAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?floatBitsToInt@glm@@YAHAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?floatBitsToUint@glm@@YAIAEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+15
	DD	imagerel $unwind$?floatBitsToUint@glm@@YAIAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?intBitsToFloat@glm@@YAMAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$?intBitsToFloat@glm@@YAMAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@E@std@@SAEXZ DD imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$?max@?$numeric_limits@E@std@@SAEXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$numeric_limits@H@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?min@?$numeric_limits@H@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@H@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@H@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@I@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?max@?$numeric_limits@I@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?epsilon@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N@glm@@YANN@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@N@glm@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@floor_@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+1477
	DD	imagerel $unwind$?test@floor_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@modf_@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+1095
	DD	imagerel $unwind$?test@modf_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$modf@M@glm@@YAMMAEAM@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$modf@M@glm@@YAMMAEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+195
	DD	imagerel $unwind$??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+195
	DD	imagerel $unwind$??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$modf@N@glm@@YANNAEAN@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$modf@N@glm@@YANNAEAN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@mod_@@YAHXZ DD imagerel $LN13
	DD	imagerel $LN13+827
	DD	imagerel $unwind$?test@mod_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$mod@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@floatBitsToInt@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+1216
	DD	imagerel $unwind$?test@floatBitsToInt@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@floatBitsToUint@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+1207
	DD	imagerel $unwind$?test@floatBitsToUint@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@min_@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+791
	DD	imagerel $unwind$?test@min_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+270
	DD	imagerel $unwind$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+282
	DD	imagerel $unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@max_@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+791
	DD	imagerel $unwind$?test@max_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@clamp_@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$?test@clamp_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestVec2Bool@mix_@@YAXXZ DD imagerel ??__ETestVec2Bool@mix_@@YAXXZ
	DD	imagerel ??__ETestVec2Bool@mix_@@YAXXZ+265
	DD	imagerel $unwind$??__ETestVec2Bool@mix_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestBVec2@mix_@@YAXXZ DD imagerel ??__ETestBVec2@mix_@@YAXXZ
	DD	imagerel ??__ETestBVec2@mix_@@YAXXZ+378
	DD	imagerel $unwind$??__ETestBVec2@mix_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestVec3Bool@mix_@@YAXXZ DD imagerel ??__ETestVec3Bool@mix_@@YAXXZ
	DD	imagerel ??__ETestVec3Bool@mix_@@YAXXZ+265
	DD	imagerel $unwind$??__ETestVec3Bool@mix_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestBVec3@mix_@@YAXXZ DD imagerel ??__ETestBVec3@mix_@@YAXXZ
	DD	imagerel ??__ETestBVec3@mix_@@YAXXZ+421
	DD	imagerel $unwind$??__ETestBVec3@mix_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestVec4Bool@mix_@@YAXXZ DD imagerel ??__ETestVec4Bool@mix_@@YAXXZ
	DD	imagerel ??__ETestVec4Bool@mix_@@YAXXZ+265
	DD	imagerel $unwind$??__ETestVec4Bool@mix_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestBVec4@mix_@@YAXXZ DD imagerel ??__ETestBVec4@mix_@@YAXXZ
	DD	imagerel ??__ETestBVec4@mix_@@YAXXZ+564
	DD	imagerel $unwind$??__ETestBVec4@mix_@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@mix_@@YAHXZ DD imagerel $LN67
	DD	imagerel $LN67+3300
	DD	imagerel $unwind$?test@mix_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N@glm@@YAMMM_N@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$mix@M_N@glm@@YAMMM_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilon@M@glm@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??$epsilon@M@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@MM@glm@@YAMMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$mix@MM@glm@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestVec4Scalar@step_@@YAXXZ DD imagerel ??__ETestVec4Scalar@step_@@YAXXZ
	DD	imagerel ??__ETestVec4Scalar@step_@@YAXXZ+255
	DD	imagerel $unwind$??__ETestVec4Scalar@step_@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ETestVec4Vector@step_@@YAXXZ DD imagerel ??__ETestVec4Vector@step_@@YAXXZ
	DD	imagerel ??__ETestVec4Vector@step_@@YAXXZ+467
	DD	imagerel $unwind$??__ETestVec4Vector@step_@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test@step_@@YAHXZ DD imagerel $LN13
	DD	imagerel $LN13+488
	DD	imagerel $unwind$?test@step_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@round_@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+1050
	DD	imagerel $unwind$?test@round_@@YAHXZ
$pdata$?test@roundEven@@YAHXZ DD imagerel $LN99
	DD	imagerel $LN99+5139
	DD	imagerel $unwind$?test@roundEven@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$roundEven@M@glm@@YAMM@Z DD imagerel $LN10
	DD	imagerel $LN10+169
	DD	imagerel $unwind$??$roundEven@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@isnan_@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+763
	DD	imagerel $unwind$?test@isnan_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@N@@YA_NN@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isnan@N@@YA_NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@M@@YA_NM@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isnan@M@@YA_NM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@isinf_@@YAHXZ DD imagerel $LN35
	DD	imagerel $LN35+1570
	DD	imagerel $unwind$?test@isinf_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@N@@YA_NN@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isinf@N@@YA_NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@M@@YA_NM@Z DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$??$isinf@M@@YA_NM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_int32@sign@@YAHXZ DD imagerel $LN28
	DD	imagerel $LN28+952
	DD	imagerel $unwind$?test_int32@sign@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign@H@glm@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??$sign@H@glm@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign_cmp@H@sign@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+74
	DD	imagerel $unwind$??$sign_cmp@H@sign@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign_if@H@sign@@YAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+57
	DD	imagerel $unwind$??$sign_if@H@sign@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign_alu1@H@sign@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??$sign_alu1@H@sign@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign_alu2@H@sign@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??$sign_alu2@H@sign@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_i32vec4@sign@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+522
	DD	imagerel $unwind$?test_i32vec4@sign@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_f32vec4@sign@@YAHXZ DD imagerel $LN8
	DD	imagerel $LN8+560
	DD	imagerel $unwind$?test_f32vec4@sign@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@sign@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?test@sign@@YAHXZ
$pdata$?perf_rand@sign@@YAH_K@Z DD imagerel $LN26
	DD	imagerel $LN26+1224
	DD	imagerel $unwind$?perf_rand@sign@@YAH_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA DD imagerel ?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA
$pdata$?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA DD imagerel ?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA
	DD	imagerel ?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@H@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@H@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$linearRand@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$linearRand@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sign_sub@H@sign@@YAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??$sign_sub@H@sign@@YAHH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_linear@sign@@YAH_K@Z DD imagerel $LN23
	DD	imagerel $LN23+1038
	DD	imagerel $unwind$?perf_linear@sign@@YAH_K@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA DD imagerel ?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA
	DD	imagerel ?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA
$pdata$?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA DD imagerel ?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA
	DD	imagerel ?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA+35
	DD	imagerel $unwind$?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?perf_linear_cal@sign@@YAH_K@Z DD imagerel $LN18
	DD	imagerel $LN18+515
	DD	imagerel $unwind$?perf_linear_cal@sign@@YAH_K@Z
$pdata$?perf@sign@@YAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?perf@sign@@YAH_K@Z
$pdata$?test@frexp_@@YAHXZ DD imagerel $LN19
	DD	imagerel $LN19+1326
	DD	imagerel $unwind$?test@frexp_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec1@H$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+265
	DD	imagerel $unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+195
	DD	imagerel $unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@ldexp_@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+949
	DD	imagerel $unwind$?test@ldexp_@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+188
	DD	imagerel $unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+390
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+362
	DD	imagerel $unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+269
	DD	imagerel $unwind$??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+281
	DD	imagerel $unwind$??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+267
	DD	imagerel $unwind$??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+232
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD imagerel $LN8
	DD	imagerel $LN8+247
	DD	imagerel $unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$fract@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$frexp@M@glm@@YAMMAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$??$frexp@M@glm@@YAMMAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ldexp@M@glm@@YAMAEBMAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$??$ldexp@M@glm@@YAMAEBMAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD imagerel $LN11
	DD	imagerel $LN11+333
	DD	imagerel $unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+215
	DD	imagerel $unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+263
	DD	imagerel $unwind$??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+264
	DD	imagerel $unwind$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+149
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@G$0A@@glm@@QEAA@G@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??0?$tvec1@G$0A@@glm@@QEAA@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@E$0A@@glm@@QEAA@E@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$tvec1@E$0A@@glm@@QEAA@E@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@H@std@@YA$$QEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@H@std@@YA$$QEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
pdata	ENDS
CRT$XCU	SEGMENT
?TestVec2Bool$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestVec2Bool@mix_@@YAXXZ ; mix_::TestVec2Bool$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c7800000
CONST	SEGMENT
__real@c7800000 DD 0c7800000r			; -65536
CONST	ENDS
;	COMDAT __real@c1000000
CONST	SEGMENT
__real@c1000000 DD 0c1000000r			; -8
CONST	ENDS
;	COMDAT __real@c0f00000
CONST	SEGMENT
__real@c0f00000 DD 0c0f00000r			; -7.5
CONST	ENDS
;	COMDAT __real@c0d00000
CONST	SEGMENT
__real@c0d00000 DD 0c0d00000r			; -6.5
CONST	ENDS
;	COMDAT __real@c0c00000
CONST	SEGMENT
__real@c0c00000 DD 0c0c00000r			; -6
CONST	ENDS
;	COMDAT __real@c0b00000
CONST	SEGMENT
__real@c0b00000 DD 0c0b00000r			; -5.5
CONST	ENDS
;	COMDAT __real@c0a00000
CONST	SEGMENT
__real@c0a00000 DD 0c0a00000r			; -5
CONST	ENDS
;	COMDAT __real@c0900000
CONST	SEGMENT
__real@c0900000 DD 0c0900000r			; -4.5
CONST	ENDS
;	COMDAT __real@c0800000
CONST	SEGMENT
__real@c0800000 DD 0c0800000r			; -4
CONST	ENDS
;	COMDAT __real@c0600000
CONST	SEGMENT
__real@c0600000 DD 0c0600000r			; -3.5
CONST	ENDS
;	COMDAT __real@c0400000
CONST	SEGMENT
__real@c0400000 DD 0c0400000r			; -3
CONST	ENDS
;	COMDAT __real@c0266666
CONST	SEGMENT
__real@c0266666 DD 0c0266666r			; -2.6
CONST	ENDS
;	COMDAT __real@c0200000
CONST	SEGMENT
__real@c0200000 DD 0c0200000r			; -2.5
CONST	ENDS
;	COMDAT __real@c019999a
CONST	SEGMENT
__real@c019999a DD 0c019999ar			; -2.4
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bff547ae147ae148
CONST	SEGMENT
__real@bff547ae147ae148 DQ 0bff547ae147ae148r	; -1.33
CONST	ENDS
;	COMDAT __real@bff33333
CONST	SEGMENT
__real@bff33333 DD 0bff33333r			; -1.9
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe547ae147ae148
CONST	SEGMENT
__real@bfe547ae147ae148 DQ 0bfe547ae147ae148r	; -0.665
CONST	ENDS
;	COMDAT __real@bfc00000
CONST	SEGMENT
__real@bfc00000 DD 0bfc00000r			; -1.5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf666666
CONST	SEGMENT
__real@bf666666 DD 0bf666666r			; -0.9
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@44800000
CONST	SEGMENT
__real@44800000 DD 044800000r			; 1024
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40f00000
CONST	SEGMENT
__real@40f00000 DD 040f00000r			; 7.5
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40d00000
CONST	SEGMENT
__real@40d00000 DD 040d00000r			; 6.5
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40b00000
CONST	SEGMENT
__real@40b00000 DD 040b00000r			; 5.5
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40900000
CONST	SEGMENT
__real@40900000 DD 040900000r			; 4.5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40600000
CONST	SEGMENT
__real@40600000 DD 040600000r			; 3.5
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40266666
CONST	SEGMENT
__real@40266666 DD 040266666r			; 2.6
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@4019999a
CONST	SEGMENT
__real@4019999a DD 04019999ar			; 2.4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ffb333333333333
CONST	SEGMENT
__real@3ffb333333333333 DQ 03ffb333333333333r	; 1.7
CONST	ENDS
;	COMDAT __real@3ff8000000000000
CONST	SEGMENT
__real@3ff8000000000000 DQ 03ff8000000000000r	; 1.5
CONST	ENDS
;	COMDAT __real@3ff3333333333333
CONST	SEGMENT
__real@3ff3333333333333 DQ 03ff3333333333333r	; 1.2
CONST	ENDS
;	COMDAT __real@3ff33333
CONST	SEGMENT
__real@3ff33333 DD 03ff33333r			; 1.9
CONST	ENDS
;	COMDAT __real@3ff19999a0000000
CONST	SEGMENT
__real@3ff19999a0000000 DQ 03ff19999a0000000r	; 1.1
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3feeb851eb851eb8
CONST	SEGMENT
__real@3feeb851eb851eb8 DQ 03feeb851eb851eb8r	; 0.96
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd9999a
CONST	SEGMENT
__real@3fd9999a DD 03fd9999ar			; 1.7
CONST	ENDS
;	COMDAT __real@3fceb851eb851eb8
CONST	SEGMENT
__real@3fceb851eb851eb8 DQ 03fceb851eb851eb8r	; 0.24
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb999999999999a
CONST	SEGMENT
__real@3fb999999999999a DQ 03fb999999999999ar	; 0.1
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e112e0be826d695
CONST	SEGMENT
__real@3e112e0be826d695 DQ 03e112e0be826d695r	; 1e-09
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'1', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@H@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAH@std@@YA$$QEAHAEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$03@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@H@std@@YAPEAHPEAH@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<int *,std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<int *,std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@E$0A@@glm@@QEAA@E@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@G$0A@@glm@@QEAA@G@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@I$0A@@glm@@QEAA@I@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ DD 020a01H
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z DD 022a11H
	DD	07010b214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	018H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	DD	00H
	DQ	FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	0a8H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $tryMap$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
	DD	imagerel $ip2state$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021419H
	DD	07010d214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ldexp@M@glm@@YAMAEBMAEBH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$frexp@M@glm@@YAMMAEAH@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700bd20fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$fract@M@glm@@YAMM@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z DD 031a01H
	DD	07016221aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z DD 033001H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z DD 031a01H
	DD	07016221aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z DD 022f01H
	DD	070157219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0 DB 052H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc DD 028H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcName$0
	ORG $+48
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData DD 01H ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z DD 021901H
	DD	070151219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z DD 021401H
	DD	070101214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<double,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<double,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<double,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z DD 031501H
	DD	070118215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<double,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<double,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<double,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<double,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<double,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<double,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<double,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<double,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<double,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@N$00@detail@glm@@SANN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec1>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec1>
	DD	01H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec1>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign_sub@H@sign@@YAHH@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$linearRand@M@glm@@YAMMM@Z DD 021101H
	DD	0700d9211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0 DB 05fH ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc DD 024H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	01H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	DD	00H
	DQ	FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@H@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA
	DD	00H
	DD	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<int,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<int,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<int,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign_alu2@H@sign@@YAHH@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign_alu1@H@sign@@YAHH@Z DD 010501H
	DD	07005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign_if@H@sign@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign_cmp@H@sign@@YAHH@Z DD 020901H
	DD	070051209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sign@H@glm@@YAHH@Z DD 020901H
	DD	070055209H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_f32vec4@sign@@YAHXZ
	DD	024H
	DD	0217H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_i32vec4@sign@@YAHXZ
	DD	024H
	DD	01f1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?test_int32@sign@@YAHXZ
	DD	024H
	DD	039fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@M@@YA_NM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isinf@N@@YA_NN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@M@@YA_NM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$isnan@N@@YA_NN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$roundEven@M@glm@@YAMM@Z DD 020b01H
	DD	07007720bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestVec4Vector@step_@@YAXXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestVec4Scalar@step_@@YAXXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@MM@glm@@YAMMMM@Z DD 021701H
	DD	070135217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilon@M@glm@@YAMXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mix@M_N@glm@@YAMMM_N@Z DD 021601H
	DD	070125216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestBVec4@mix_@@YAXXZ DD 020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestVec4Bool@mix_@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestBVec3@mix_@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestVec3Bool@mix_@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestBVec2@mix_@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ETestVec2Bool@mix_@@YAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::equal<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::equal<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::equal<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@H@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z DD 020c01H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@H$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$mod@M@glm@@YAMMM@Z DD 021101H
	DD	0700d7211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$modf@N@glm@@YANNAEAN@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z DD 021401H
	DD	070109214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$modf@M@glm@@YAMMAEAM@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z DD 031c01H
	DD	012011cH
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z DD 021901H
	DD	07015d219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@N$0A@@glm@@QEAA@N@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec1@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
xdata	SEGMENT
$unwind$?test@floor_@@YAHXZ DD 031a01H
	DD	07e0109H
	DD	07002H
$unwind$?test@modf_@@YAHXZ DD 031a01H
	DD	04e0109H
	DD	07002H
$unwind$?test@mod_@@YAHXZ DD 031a01H
	DD	0300109H
	DD	07002H
$unwind$?test@floatBitsToInt@@YAHXZ DD 031a01H
	DD	0460109H
	DD	07002H
$unwind$?test@floatBitsToUint@@YAHXZ DD 031a01H
	DD	0420109H
	DD	07002H
$unwind$?test@min_@@YAHXZ DD 031a01H
	DD	0400109H
	DD	07002H
$unwind$?test@max_@@YAHXZ DD 031a01H
	DD	0400109H
	DD	07002H
$unwind$?test@clamp_@@YAHXZ DD 020601H
	DD	070021206H
$unwind$?test@mix_@@YAHXZ DD 031a01H
	DD	0460109H
	DD	07002H
$unwind$?test@step_@@YAHXZ DD 031a01H
	DD	0140109H
	DD	07002H
$unwind$?test@round_@@YAHXZ DD 030901H
	DD	0140109H
	DD	07002H
$unwind$?test@roundEven@@YAHXZ DD 031a01H
	DD	0900109H
	DD	07002H
$unwind$?test@isnan_@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test@isinf_@@YAHXZ DD 030901H
	DD	0320109H
	DD	07002H
$unwind$?test_int32@sign@@YAHXZ DD 032c19H
	DD	0200109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
$unwind$?test_i32vec4@sign@@YAHXZ DD 032c19H
	DD	02c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0158H
$unwind$?test_f32vec4@sign@@YAHXZ DD 032c19H
	DD	02c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0158H
$unwind$?test@sign@@YAHXZ DD 020601H
	DD	070025206H
$unwind$?perf_rand@sign@@YAH_K@Z DD 032611H
	DD	028010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_rand@sign@@YAH_K@Z
$cppxdata$?perf_rand@sign@@YAH_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_rand@sign@@YAH_K@Z
	DD	imagerel $ip2state$?perf_rand@sign@@YAH_K@Z
$stateUnwindMap$?perf_rand@sign@@YAH_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA
$ip2state$?perf_rand@sign@@YAH_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	08cH
	DB	02H
	DB	016H
	DB	04H
	DB	0fdH, 010H
	DB	02H
	DB	016H
	DB	00H
$unwind$?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_linear@sign@@YAH_K@Z DD 032611H
	DD	024010dH
	DD	07006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?perf_linear@sign@@YAH_K@Z
$cppxdata$?perf_linear@sign@@YAH_K@Z DB 028H
	DD	imagerel $stateUnwindMap$?perf_linear@sign@@YAH_K@Z
	DD	imagerel $ip2state$?perf_linear@sign@@YAH_K@Z
$stateUnwindMap$?perf_linear@sign@@YAH_K@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA
$ip2state$?perf_linear@sign@@YAH_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	08cH
	DB	02H
	DB	016H
	DB	04H
	DB	015H, 0eH
	DB	02H
	DB	016H
	DB	00H
$unwind$?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?perf_linear_cal@sign@@YAH_K@Z DD 020a01H
	DD	07006b20aH
$unwind$?perf@sign@@YAH_K@Z DD 020a01H
	DD	07006520aH
$unwind$?test@frexp_@@YAHXZ DD 031a01H
	DD	0580109H
	DD	07002H
$unwind$?test@ldexp_@@YAHXZ DD 031a01H
	DD	04e0109H
	DD	07002H
$unwind$main DD	031a01H
	DD	0120109H
	DD	07002H
xdata	ENDS
CONST	SEGMENT
	ORG $+3
?test@floor_@@YAHXZ$rtcName$0 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$1 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$2 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$3 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$4 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$5 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$6 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$7 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$8 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$9 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$10 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$11 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$12 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$13 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$14 DB 041H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcName$15 DB 042H			; floor_::test
	DB	00H
	ORG $+2
?test@floor_@@YAHXZ$rtcVarDesc DD 02c8H			; floor_::test
	DD	020H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$15
	DD	0288H
	DD	020H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$14
	DD	0258H
	DD	010H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$13
	DD	0228H
	DD	010H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$12
	DD	01f8H
	DD	018H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$11
	DD	01c8H
	DD	018H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$10
	DD	0198H
	DD	0cH
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$9
	DD	0168H
	DD	0cH
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$8
	DD	0138H
	DD	010H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$7
	DD	0108H
	DD	010H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$6
	DD	0e8H
	DD	08H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$5
	DD	0c8H
	DD	08H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcName$0
	ORG $+768
?test@floor_@@YAHXZ$rtcFrameData DD 010H		; floor_::test
	DD	00H
	DQ	FLAT:?test@floor_@@YAHXZ$rtcVarDesc
?test@modf_@@YAHXZ$rtcName$0 DB 049H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$1 DB 058H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$2 DB 049H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$3 DB 041H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$4 DB 058H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$5 DB 049H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$6 DB 041H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcName$7 DB 049H			; modf_::test
	DB	00H
	ORG $+2
?test@modf_@@YAHXZ$rtcVarDesc DD 01b8H			; modf_::test
	DD	08H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$7
	DD	0178H
	DD	020H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$6
	DD	0138H
	DD	020H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$5
	DD	0f8H
	DD	020H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$4
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$3
	DD	098H
	DD	010H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$2
	DD	068H
	DD	010H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcName$0
	ORG $+384
?test@modf_@@YAHXZ$rtcFrameData DD 08H			; modf_::test
	DD	00H
	DQ	FLAT:?test@modf_@@YAHXZ$rtcVarDesc
?test@mod_@@YAHXZ$rtcName$0 DB 041H			; mod_::test
	DB	00H
	ORG $+2
?test@mod_@@YAHXZ$rtcName$1 DB 043H			; mod_::test
	DB	00H
	ORG $+2
?test@mod_@@YAHXZ$rtcName$2 DB 041H			; mod_::test
	DB	00H
	ORG $+2
?test@mod_@@YAHXZ$rtcName$3 DB 042H			; mod_::test
	DB	00H
	ORG $+2
?test@mod_@@YAHXZ$rtcName$4 DB 043H			; mod_::test
	DB	00H
	ORG $+6
?test@mod_@@YAHXZ$rtcFrameData DD 05H			; mod_::test
	DD	00H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcVarDesc
?test@floatBitsToInt@@YAHXZ$rtcName$0 DB 041H		; floatBitsToInt::test
	DB	00H
	ORG $+6
?test@mod_@@YAHXZ$rtcVarDesc DD 0118H			; mod_::test
	DD	010H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcName$4
	DD	0e8H
	DD	010H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcName$3
	DD	0b8H
	DD	010H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcName$1
	DD	058H
	DD	010H
	DQ	FLAT:?test@mod_@@YAHXZ$rtcName$0
	ORG $+240
?test@floatBitsToInt@@YAHXZ$rtcName$1 DB 042H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$2 DB 041H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$3 DB 042H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$4 DB 043H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$5 DB 041H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$6 DB 042H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$7 DB 043H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$8 DB 041H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$9 DB 042H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcName$10 DB 043H		; floatBitsToInt::test
	DB	00H
	ORG $+2
?test@floatBitsToInt@@YAHXZ$rtcFrameData DD 0bH		; floatBitsToInt::test
	DD	00H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcVarDesc
?test@floatBitsToUint@@YAHXZ$rtcName$0 DB 041H		; floatBitsToUint::test
	DB	00H
	ORG $+6
?test@floatBitsToInt@@YAHXZ$rtcVarDesc DD 01d8H		; floatBitsToInt::test
	DD	010H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$10
	DD	01a8H
	DD	010H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$9
	DD	0178H
	DD	010H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$8
	DD	0148H
	DD	0cH
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$7
	DD	0118H
	DD	0cH
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$6
	DD	0e8H
	DD	0cH
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$5
	DD	0c8H
	DD	08H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@floatBitsToInt@@YAHXZ$rtcName$0
	ORG $+528
?test@floatBitsToUint@@YAHXZ$rtcName$1 DB 041H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$2 DB 042H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$3 DB 043H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$4 DB 041H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$5 DB 042H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$6 DB 043H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$7 DB 041H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$8 DB 042H		; floatBitsToUint::test
	DB	00H
	ORG $+2
?test@floatBitsToUint@@YAHXZ$rtcName$9 DB 043H		; floatBitsToUint::test
	DB	00H
	ORG $+6
?test@floatBitsToUint@@YAHXZ$rtcFrameData DD 0aH	; floatBitsToUint::test
	DD	00H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcVarDesc
?test@min_@@YAHXZ$rtcName$0 DB 041H			; min_::test
	DB	030H
	DB	00H
	ORG $+5
?test@floatBitsToUint@@YAHXZ$rtcVarDesc DD 01b8H	; floatBitsToUint::test
	DD	010H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$9
	DD	0188H
	DD	010H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$8
	DD	0158H
	DD	010H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$7
	DD	0128H
	DD	0cH
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$6
	DD	0f8H
	DD	0cH
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$5
	DD	0c8H
	DD	0cH
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$3
	DD	088H
	DD	08H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@floatBitsToUint@@YAHXZ$rtcName$0
	ORG $+480
?test@min_@@YAHXZ$rtcName$1 DB 042H			; min_::test
	DB	030H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcName$2 DB 042H			; min_::test
	DB	031H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcName$3 DB 043H			; min_::test
	DB	030H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcName$4 DB 043H			; min_::test
	DB	031H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcName$5 DB 044H			; min_::test
	DB	030H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcName$6 DB 044H			; min_::test
	DB	031H
	DB	00H
	ORG $+1
?test@min_@@YAHXZ$rtcFrameData DD 07H			; min_::test
	DD	00H
	DQ	FLAT:?test@min_@@YAHXZ$rtcVarDesc
?test@max_@@YAHXZ$rtcName$0 DB 041H			; max_::test
	DB	030H
	DB	00H
	ORG $+5
?test@min_@@YAHXZ$rtcVarDesc DD 0128H			; min_::test
	DD	010H
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$6
	DD	0f8H
	DD	010H
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$5
	DD	0c8H
	DD	0cH
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$4
	DD	098H
	DD	0cH
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@min_@@YAHXZ$rtcName$0
	ORG $+336
?test@max_@@YAHXZ$rtcName$1 DB 042H			; max_::test
	DB	030H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcName$2 DB 042H			; max_::test
	DB	031H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcName$3 DB 043H			; max_::test
	DB	030H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcName$4 DB 043H			; max_::test
	DB	031H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcName$5 DB 044H			; max_::test
	DB	030H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcName$6 DB 044H			; max_::test
	DB	031H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcFrameData DD 07H			; max_::test
	DD	00H
	DQ	FLAT:?test@max_@@YAHXZ$rtcVarDesc
?test@mix_@@YAHXZ$rtcName$0 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@max_@@YAHXZ$rtcVarDesc DD 0128H			; max_::test
	DD	010H
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$6
	DD	0f8H
	DD	010H
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$5
	DD	0c8H
	DD	0cH
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$4
	DD	098H
	DD	0cH
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@max_@@YAHXZ$rtcName$0
	ORG $+336
?test@mix_@@YAHXZ$rtcName$1 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$2 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$3 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$4 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$5 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$6 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcName$7 DB 052H			; mix_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcFrameData DD 08H			; mix_::test
	DD	00H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcVarDesc
?test@step_@@YAHXZ$rtcName$0 DB 052H			; step_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@mix_@@YAHXZ$rtcVarDesc DD 0148H			; mix_::test
	DD	010H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$7
	DD	0118H
	DD	010H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$6
	DD	0e8H
	DD	0cH
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$5
	DD	0b8H
	DD	0cH
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@mix_@@YAHXZ$rtcName$0
	ORG $+384
?test@step_@@YAHXZ$rtcName$1 DB 052H			; step_::test
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test@step_@@YAHXZ$rtcFrameData DD 02H			; step_::test
	DD	00H
	DQ	FLAT:?test@step_@@YAHXZ$rtcVarDesc
?test@roundEven@@YAHXZ$rtcName$0 DB 041H		; roundEven::test
	DB	031H
	DB	00H
	ORG $+5
?test@step_@@YAHXZ$rtcVarDesc DD 068H			; step_::test
	DD	010H
	DQ	FLAT:?test@step_@@YAHXZ$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?test@step_@@YAHXZ$rtcName$0
	ORG $+96
?test@roundEven@@YAHXZ$rtcName$1 DB 041H		; roundEven::test
	DB	032H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$2 DB 041H		; roundEven::test
	DB	035H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$3 DB 041H		; roundEven::test
	DB	036H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$4 DB 041H		; roundEven::test
	DB	033H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$5 DB 041H		; roundEven::test
	DB	034H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$6 DB 043H		; roundEven::test
	DB	037H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$7 DB 043H		; roundEven::test
	DB	038H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$8 DB 043H		; roundEven::test
	DB	031H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$9 DB 043H		; roundEven::test
	DB	032H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$10 DB 043H		; roundEven::test
	DB	033H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$11 DB 043H		; roundEven::test
	DB	034H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$12 DB 043H		; roundEven::test
	DB	035H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$13 DB 043H		; roundEven::test
	DB	036H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$14 DB 041H		; roundEven::test
	DB	037H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$15 DB 041H		; roundEven::test
	DB	038H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$16 DB 042H		; roundEven::test
	DB	031H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$17 DB 042H		; roundEven::test
	DB	032H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$18 DB 042H		; roundEven::test
	DB	033H
	DB	00H
	ORG $+1
?test@roundEven@@YAHXZ$rtcName$19 DB 042H		; roundEven::test
	DB	034H
	DB	00H
	ORG $+5
?test@roundEven@@YAHXZ$rtcVarDesc DD 0294H		; roundEven::test
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$19
	DD	0274H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$18
	DD	0254H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$17
	DD	0234H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$16
	DD	0214H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$15
	DD	01f4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$14
	DD	01d4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$13
	DD	01b4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$12
	DD	0194H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$11
	DD	0174H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$10
	DD	0154H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$9
	DD	0134H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$8
	DD	0114H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$7
	DD	0f4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$6
	DD	0d4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$5
	DD	0b4H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$4
	DD	094H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcName$0
	ORG $+960
?test@roundEven@@YAHXZ$rtcFrameData DD 014H		; roundEven::test
	DD	00H
	DQ	FLAT:?test@roundEven@@YAHXZ$rtcVarDesc
?test_int32@sign@@YAHXZ$rtcName$0 DB 044H		; sign::test_int32
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_int32@sign@@YAHXZ$rtcFrameData DD 01H		; sign::test_int32
	DD	00H
	DQ	FLAT:?test_int32@sign@@YAHXZ$rtcVarDesc
?test_i32vec4@sign@@YAHXZ$rtcName$0 DB 044H		; sign::test_i32vec4
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_int32@sign@@YAHXZ$rtcVarDesc DD 030H		; sign::test_int32
	DD	048H
	DQ	FLAT:?test_int32@sign@@YAHXZ$rtcName$0
	ORG $+48
?test_i32vec4@sign@@YAHXZ$rtcName$1 DB 052H		; sign::test_i32vec4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_i32vec4@sign@@YAHXZ$rtcFrameData DD 02H		; sign::test_i32vec4
	DD	00H
	DQ	FLAT:?test_i32vec4@sign@@YAHXZ$rtcVarDesc
?test_f32vec4@sign@@YAHXZ$rtcName$0 DB 044H		; sign::test_f32vec4
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+3
?test_i32vec4@sign@@YAHXZ$rtcVarDesc DD 0128H		; sign::test_i32vec4
	DD	010H
	DQ	FLAT:?test_i32vec4@sign@@YAHXZ$rtcName$1
	DD	030H
	DD	0e0H
	DQ	FLAT:?test_i32vec4@sign@@YAHXZ$rtcName$0
	ORG $+96
?test_f32vec4@sign@@YAHXZ$rtcName$1 DB 052H		; sign::test_f32vec4
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?test_f32vec4@sign@@YAHXZ$rtcFrameData DD 02H		; sign::test_f32vec4
	DD	00H
	DQ	FLAT:?test_f32vec4@sign@@YAHXZ$rtcVarDesc
?perf_rand@sign@@YAH_K@Z$rtcName$0 DB 049H		; sign::perf_rand
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+2
?test_f32vec4@sign@@YAHXZ$rtcVarDesc DD 0128H		; sign::test_f32vec4
	DD	010H
	DQ	FLAT:?test_f32vec4@sign@@YAHXZ$rtcName$1
	DD	030H
	DD	0e0H
	DQ	FLAT:?test_f32vec4@sign@@YAHXZ$rtcName$0
	ORG $+96
?perf_rand@sign@@YAH_K@Z$rtcName$1 DB 04fH		; sign::perf_rand
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
?perf_rand@sign@@YAH_K@Z$rtcFrameData DD 02H		; sign::perf_rand
	DD	00H
	DQ	FLAT:?perf_rand@sign@@YAH_K@Z$rtcVarDesc
?perf_linear@sign@@YAH_K@Z$rtcName$0 DB 049H		; sign::perf_linear
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+2
?perf_rand@sign@@YAH_K@Z$rtcVarDesc DD 078H		; sign::perf_rand
	DD	020H
	DQ	FLAT:?perf_rand@sign@@YAH_K@Z$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?perf_rand@sign@@YAH_K@Z$rtcName$0
	ORG $+96
?perf_linear@sign@@YAH_K@Z$rtcName$1 DB 04fH		; sign::perf_linear
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	00H
	ORG $+1
?perf_linear@sign@@YAH_K@Z$rtcFrameData DD 02H		; sign::perf_linear
	DD	00H
	DQ	FLAT:?perf_linear@sign@@YAH_K@Z$rtcVarDesc
?test@frexp_@@YAHXZ$rtcName$0 DB 078H			; frexp_::test
	DB	00H
	ORG $+6
?perf_linear@sign@@YAH_K@Z$rtcVarDesc DD 078H		; sign::perf_linear
	DD	020H
	DQ	FLAT:?perf_linear@sign@@YAH_K@Z$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?perf_linear@sign@@YAH_K@Z$rtcName$0
	ORG $+96
?test@frexp_@@YAHXZ$rtcName$1 DB 065H			; frexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@frexp_@@YAHXZ$rtcName$2 DB 041H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$3 DB 078H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$4 DB 065H			; frexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@frexp_@@YAHXZ$rtcName$5 DB 041H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$6 DB 078H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$7 DB 065H			; frexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@frexp_@@YAHXZ$rtcName$8 DB 041H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$9 DB 078H			; frexp_::test
	DB	00H
	ORG $+2
?test@frexp_@@YAHXZ$rtcName$10 DB 065H			; frexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@frexp_@@YAHXZ$rtcName$11 DB 041H			; frexp_::test
	DB	00H
	ORG $+6
?test@frexp_@@YAHXZ$rtcVarDesc DD 01f8H			; frexp_::test
	DD	010H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$11
	DD	01c8H
	DD	010H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$10
	DD	0198H
	DD	010H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$9
	DD	0168H
	DD	0cH
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$8
	DD	0138H
	DD	0cH
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$7
	DD	0108H
	DD	0cH
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$6
	DD	0e8H
	DD	08H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$5
	DD	0c8H
	DD	08H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcName$0
	ORG $+576
?test@frexp_@@YAHXZ$rtcFrameData DD 0cH			; frexp_::test
	DD	00H
	DQ	FLAT:?test@frexp_@@YAHXZ$rtcVarDesc
?test@ldexp_@@YAHXZ$rtcName$0 DB 041H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$1 DB 065H			; ldexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@ldexp_@@YAHXZ$rtcName$2 DB 078H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$3 DB 041H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$4 DB 065H			; ldexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@ldexp_@@YAHXZ$rtcName$5 DB 078H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$6 DB 041H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$7 DB 065H			; ldexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@ldexp_@@YAHXZ$rtcName$8 DB 078H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$9 DB 041H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcName$10 DB 065H			; ldexp_::test
	DB	078H
	DB	070H
	DB	00H
?test@ldexp_@@YAHXZ$rtcName$11 DB 078H			; ldexp_::test
	DB	00H
	ORG $+2
?test@ldexp_@@YAHXZ$rtcVarDesc DD 01f8H			; ldexp_::test
	DD	010H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$11
	DD	01c8H
	DD	010H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$10
	DD	0198H
	DD	010H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$9
	DD	0168H
	DD	0cH
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$8
	DD	0138H
	DD	0cH
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$7
	DD	0108H
	DD	0cH
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$6
	DD	0e8H
	DD	08H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$5
	DD	0c8H
	DD	08H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$4
	DD	0a8H
	DD	08H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcName$0
	ORG $+576
?test@ldexp_@@YAHXZ$rtcFrameData DD 0cH			; ldexp_::test
	DD	00H
	DQ	FLAT:?test@ldexp_@@YAHXZ$rtcVarDesc
main$rtcName$0 DB 061H
	DB	00H
	ORG $+2
main$rtcName$1 DB 062H
	DB	00H
	ORG $+2
main$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
	ORG $+8
main$rtcVarDesc DD 068H
	DD	010H
	DQ	FLAT:main$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:main$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@N@glm@@YANN@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M@glm@@YA_NAEBM00@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@I@std@@SAIXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@H@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$numeric_limits@H@std@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@E@std@@SAEXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?intBitsToFloat@glm@@YAMAEBH@Z DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floatBitsToUint@glm@@YAIAEBM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floatBitsToInt@glm@@YAHAEBM@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?round@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?modf@@YAMMPEAM@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ldexp@@YAMMH@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?frexp@@YAMMPEAH@Z DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?floor@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ldexpf DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frexpf DD 021001H
	DD	0700c5210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHN@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fpclassify@@YAHM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
CRT$XCU	SEGMENT
?TestBVec2$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestBVec2@mix_@@YAXXZ ; mix_::TestBVec2$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestVec3Bool$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestVec3Bool@mix_@@YAXXZ ; mix_::TestVec3Bool$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestBVec3$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestBVec3@mix_@@YAXXZ ; mix_::TestBVec3$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestVec4Bool$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestVec4Bool@mix_@@YAXXZ ; mix_::TestVec4Bool$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestBVec4$initializer$@mix_@@3P6AXXZEA DQ FLAT:??__ETestBVec4@mix_@@YAXXZ ; mix_::TestBVec4$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestVec4Scalar$initializer$@step_@@3P6AXXZEA DQ FLAT:??__ETestVec4Scalar@step_@@YAXXZ ; step_::TestVec4Scalar$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?TestVec4Vector$initializer$@step_@@3P6AXXZEA DQ FLAT:??__ETestVec4Vector@step_@@YAXXZ ; step_::TestVec4Vector$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z PROC		; std::_Voidify_iter<int *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z ENDP		; std::_Voidify_iter<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	ecx, 4
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	rcx, QWORD PTR $T1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@H@std@@YA$$QEAHAEAH@Z PROC			; std::forward<int>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@H@std@@YA$$QEAHAEAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_div<float,0,0>::call, COMDAT

; 68   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 69   : 			return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	divss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	divss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	divss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	divss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 70   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_div<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<int,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, edx
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	mov	edx, DWORD PTR [rdx+4]
	sub	edx, r8d
	mov	r8, QWORD PTR a$[rsp]
	mov	r9, QWORD PTR b$[rsp]
	mov	r9d, DWORD PTR [r9]
	mov	r8d, DWORD PTR [r8]
	sub	r8d, r9d
	mov	DWORD PTR tv80[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv80[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<int,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__formal$ = 64
_Ptr$ = 72
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	QWORD PTR $T1[rsp], 4
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAH@std@@YAPEAXPEAH@Z	; std::_Voidify_iter<int *>
	mov	rdx, rax
	mov	rcx, QWORD PTR $T1[rsp]
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T2[rsp], rax
	mov	rdi, QWORD PTR $T2[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR $T1[rsp]
	rep stosb

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z PROC		; std::_To_address<int *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ENDP		; std::_To_address<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@H@std@@YA$$QEAHAEAH@Z	; std::forward<int>
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@HH@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH$$QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int,int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z PROC	; std::_Copy_memmove<int *,int *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ENDP	; std::_Copy_memmove<int *,int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAH@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAH@std@@YA$$QEAHAEAH@Z PROC			; std::move<int &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAH@std@@YA$$QEAHAEAH@Z ENDP			; std::move<int &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z PROC	; std::_Get_unwrapped<int * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ENDP	; std::_Get_unwrapped<int * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call, COMDAT

; 227  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 228  : 			return x - floor(x);

	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 229  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<double,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	subsd	xmm0, QWORD PTR [rcx+24]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm1, QWORD PTR [rax+16]
	subsd	xmm1, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm2, QWORD PTR [rax+8]
	subsd	xmm2, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movsd	xmm3, QWORD PTR [rax]
	subsd	xmm3, QWORD PTR [rcx]
	movsd	QWORD PTR tv80[rsp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movsd	xmm0, QWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$03@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<4>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$03@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 393  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 394  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 395  : 			v1.x / v2.x);
; 396  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG66689
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG66690
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG66691
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG66692
	lea	rdx, OFFSET FLAT:$SG66693
	lea	rcx, OFFSET FLAT:$SG66694
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator/=<float>, COMDAT

; 446  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 447  : 		return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_div@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_div<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 448  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator/=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<int,0>::operator-=<int>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@H$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<int,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<int,0>::operator-=<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@H$$V@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@QEAH@Z ; std::_Default_allocator_traits<std::allocator<int> >::construct<int>

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 4
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Last_ch$ = 40
_First$ = 64
_Last$ = 72
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z PROC		; std::_Zero_range<int *>, COMDAT

; 1824 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1825 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _First_ch$[rsp], rax

; 1826 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAH@std@@YA?A_PAEBQEAH@Z ; std::_To_address<int *>
	mov	QWORD PTR _Last_ch$[rsp], rax

; 1827 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR _First_ch$[rsp]
	call	memset

; 1828 :     return _Last;

	mov	rax, QWORD PTR _Last$[rsp]

; 1829 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z ENDP		; std::_Zero_range<int *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@H@std@@YAPEAHPEAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@H@std@@YAPEAHPEAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_move<int *,std::allocator<int> >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAH@std@@YA?A_TAEBQEAH@Z ; std::_Get_unwrapped<int * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ; std::_Copy_memmove<int *,int *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 4
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAH@std@@YA$$QEAHAEAH@Z	; std::move<int &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@H@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<int>

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_move<int *,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_move<int *,std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::fract<float,0,glm::tvec1>, COMDAT

; 433  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 434  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
; 435  : 		return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_fract@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_fract<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::fract<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<double,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@N@glm@@YANN@Z	; glm::abs<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<double,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
v$ = 136
??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<double,0>::operator-=<double>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@N$0A@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<double,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<double,0>::operator-=<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<double,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@N@glm@@YANN@Z	; glm::abs<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<double,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<double,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@N@glm@@YANN@Z	; glm::abs<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<double,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<double,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@N@glm@@YANN@Z	; glm::abs<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<double,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned short,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v2$[rsp]
	movzx	ecx, WORD PTR [rcx]
	or	eax, ecx
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@G$0A@@glm@@QEAA@G@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z PROC	; glm::operator<<<unsigned short,0>, COMDAT

; 486  : 	{

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 487  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	movzx	ecx, WORD PTR scalar$[rsp]
	shl	eax, cl
	movzx	edx, ax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@G$0A@@glm@@QEAA@G@Z		; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ENDP	; glm::operator<<<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z PROC ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ENDP ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@E$0A@@glm@@QEAA@E@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@E$0A@@glm@@QEAA@E@Z PROC			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@E$0A@@glm@@QEAA@E@Z ENDP			; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ
_TEXT	SEGMENT
tv66 = 32
tv68 = 36
__$ReturnUdt$ = 64
?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call, COMDAT

; 23   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 24   : 			return tvec1<uint8, P>(

	call	QWORD PTR __imp_rand
	mov	DWORD PTR tv66[rsp], eax
	call	?max@?$numeric_limits@E@std@@SAEXZ	; std::numeric_limits<unsigned char>::max
	movzx	eax, al
	mov	DWORD PTR tv68[rsp], eax
	mov	ecx, DWORD PTR tv66[rsp]
	mov	eax, ecx
	cdq
	mov	ecx, DWORD PTR tv68[rsp]
	idiv	ecx
	mov	eax, edx
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@E$0A@@glm@@QEAA@E@Z		; glm::tvec1<unsigned char,0>::tvec1<unsigned char,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 25   : 				std::rand() % std::numeric_limits<uint8>::max());
; 26   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z PROC	; glm::operator|<unsigned int,0>, COMDAT

; 458  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 459  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 460  : 			v1.x | v2.x);
; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ENDP	; glm::operator|<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z
_TEXT	SEGMENT
tv70 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z PROC	; glm::operator<<<unsigned int,0>, COMDAT

; 486  : 	{

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 487  : 		return tvec1<T, P>(

	mov	eax, DWORD PTR scalar$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR tv70[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv70[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, cl
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@I$0A@@glm@@QEAA@I@Z		; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 488  : 			v.x << scalar);
; 489  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ENDP	; glm::operator<<<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z PROC ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ENDP ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@G$0A@@glm@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@G$0A@@glm@@QEAA@G@Z PROC			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, WORD PTR scalar$[rsp]
	mov	WORD PTR [rax], cx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@G$0A@@glm@@QEAA@G@Z ENDP			; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 34
$T3 = 36
$T4 = 38
$T5 = 40
$T6 = 42
tv65 = 48
__$ReturnUdt$ = 80
?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 70   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@E$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@E$0A@@3@XZ ; glm::detail::compute_rand<unsigned char,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0E$0A@@?$tvec1@G$0A@@glm@@QEAA@AEBU?$tvec1@E$0A@@1@@Z ; glm::tvec1<unsigned short,0>::tvec1<unsigned short,0><unsigned char,0>
	mov	r8w, 8
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6G$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@G@Z ; glm::operator<<<unsigned short,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UG$0A@@glm@@YA?AU?$tvec1@G$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned short,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(8)) |
; 72   : 				(vecType<uint16, P>(compute_rand<uint8, P, vecType>::call()) << static_cast<uint16>(0));
; 73   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
v$ = 64
?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec1>::call, COMDAT

; 21   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 22   : 			return tvec1<R, P>(Func(v.x));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 23   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movsd	xmm1, QWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 40
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movsd	xmm1, QWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movsd	xmm1, QWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 56
tv74 = 64
__$ReturnUdt$ = 96
Func$ = 104
v$ = 112
?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z PROC ; glm::detail::functor1<double,double,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movsd	QWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movsd	xmm1, QWORD PTR tv66[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movsd	xmm1, QWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z ENDP ; glm::detail::functor1<double,double,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator/<float,0>, COMDAT

; 748  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 749  : 		return tvec4<T, P>(v1) /= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?_0M@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator/=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 750  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
Func$ = 56
a$ = 64
b$ = 72
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec1>::call, COMDAT

; 60   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 61   : 			return tvec1<T, P>(Func(a.x, b.x));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec3>::call, COMDAT

; 78   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 79   : 			return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 80   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z PROC	; glm::operator-<int,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z PROC ; glm::tvec1<int,0>::tvec1<int,0><bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ENDP ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::lessThan<int,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jge	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::lessThan<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z PROC	; glm::operator-<int,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZH@?$tvec4@H$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<int,0>::operator-=<int>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z PROC ; glm::tvec4<int,0>::tvec4<int,0><bool,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx], eax

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+4], eax

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+8], eax

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	mov	rcx, QWORD PTR this$[rsp]
	mov	DWORD PTR [rcx+12], eax

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ENDP ; glm::tvec4<int,0>::tvec4<int,0><bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::lessThan<int,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jge	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::lessThan<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z PROC ; glm::tvec4<float,0>::tvec4<float,0><bool,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	movzx	eax, BYTE PTR [rax+3]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ENDP ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 329  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 331  : 			v1.x + v2.x);
; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 372  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 373  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 374  : 			v1.x * v2.x);
; 375  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 379  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 380  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR scalar$[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 381  : 			v.x / scalar);
; 382  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z PROC ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 46   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 47   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ENDP ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@I$0A@@glm@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@I$0A@@glm@@QEAA@I@Z PROC			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@I$0A@@glm@@QEAA@I@Z ENDP			; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
tv65 = 56
__$ReturnUdt$ = 80
?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ PROC ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call, COMDAT

; 80   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 81   : 			return

	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	QWORD PTR tv65[rsp], rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	?call@?$compute_rand@G$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@G$0A@@3@XZ ; glm::detail::compute_rand<unsigned short,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0G$0A@@?$tvec1@I$0A@@glm@@QEAA@AEBU?$tvec1@G$0A@@1@@Z ; glm::tvec1<unsigned int,0>::tvec1<unsigned int,0><unsigned short,0>
	mov	r8d, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?6I$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@I@Z ; glm::operator<<<unsigned int,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?UI$0A@@glm@@YA?AU?$tvec1@I$0A@@0@AEBU10@0@Z ; glm::operator|<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 82   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(16)) |
; 83   : 				(vecType<uint32, P>(compute_rand<uint16, P, vecType>::call()) << static_cast<uint32>(0));
; 84   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ENDP ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<int> >, COMDAT

; 1833 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1834 :     // value-initialize _Count objects to raw _First, using _Al
; 1835 :     using _Ptrty = typename _Alloc::value_type*;
; 1836 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1837 : #if _HAS_CXX20
; 1838 :         if (!_STD is_constant_evaluated())
; 1839 : #endif // _HAS_CXX20
; 1840 :         {
; 1841 :             auto _PFirst = _Unfancy(_First);

	mov	rcx, QWORD PTR _First$[rsp]
	call	??$_Unfancy@H@std@@YAPEAHPEAH@Z		; std::_Unfancy<int>
	mov	QWORD PTR _PFirst$4[rsp], rax

; 1842 :             _Zero_range(_PFirst, _PFirst + _Count);

	mov	rax, QWORD PTR _PFirst$4[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rdx, rax
	mov	rcx, QWORD PTR _PFirst$4[rsp]
	call	??$_Zero_range@PEAH@std@@YAPEAHQEAH0@Z	; std::_Zero_range<int *>

; 1843 :             return _First + _Count;

	mov	rax, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR _Count$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	jmp	SHORT $LN1@Uninitiali

; 1844 :         }
; 1845 :     }
; 1846 : 
; 1847 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@PEAHAEAV?$allocator@H@1@@Z ; std::_Uninitialized_backout_al<std::allocator<int> >::_Uninitialized_backout_al<std::allocator<int> >

; 1848 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _Count$[rsp]
	dec	rax
	mov	QWORD PTR _Count$[rsp], rax
$LN4@Uninitiali:
	cmp	QWORD PTR _Count$[rsp], 0
	jbe	SHORT $LN3@Uninitiali

; 1849 :         _Backout._Emplace_back();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAXXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Emplace_back<>

; 1850 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1851 : 
; 1852 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAAPEAHXZ ; std::_Uninitialized_backout_al<std::allocator<int> >::_Release
	mov	QWORD PTR $T5[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	mov	rax, QWORD PTR $T5[rsp]
$LN1@Uninitiali:

; 1853 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_PFirst$4 = 32
_Backout$ = 56
$T5 = 88
_First$ = 112
_Count$ = 120
_Al$ = 128
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA PROC ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<int> >::~_Uninitialized_backout_al<std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z@4HA ENDP ; `std::_Uninitialized_value_construct_n<std::allocator<int> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT

; 1357 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 1358 :         if (_Newsize > max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN2@Resize_rea

; 1359 :             _Xlength();

	call	?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ; std::vector<int,std::allocator<int> >::_Xlength
$LN2@Resize_rea:

; 1360 :         }
; 1361 : 
; 1362 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1363 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1364 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1365 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1366 : 
; 1367 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1368 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 1369 : 
; 1370 :         const pointer _Newvec         = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ; std::allocator<int>::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 1371 :         const pointer _Appended_first = _Newvec + _Oldsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Oldsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Appended_first$[rsp], rax

; 1372 :         pointer _Appended_last        = _Appended_first;

	mov	rax, QWORD PTR _Appended_first$[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1373 : 
; 1374 :         _TRY_BEGIN
; 1375 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1376 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1377 :         } else {
; 1378 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1379 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Appended_first$[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	mov	QWORD PTR _Appended_last$[rsp], rax

; 1380 :         }
; 1381 : 
; 1382 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1383 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAHV?$allocator@H@std@@@std@@YAPEAHQEAH0PEAHAEAV?$allocator@H@0@@Z ; std::_Uninitialized_move<int *,std::allocator<int> >
	npad	1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
$LN7@Resize_rea:

; 1384 :         } else {
; 1385 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1386 :         }
; 1387 :         _CATCH_ALL
; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);
; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);
; 1390 :         _RERAISE;
; 1391 :         _CATCH_END
; 1392 : 
; 1393 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ; std::vector<int,std::allocator<int> >::_Change_array

; 1394 :     }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN9@Resize_rea:
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newcapacity$ = 72
_Newvec$ = 80
_Appended_first$ = 88
_Appended_last$ = 96
tv140 = 104
this$ = 128
_Newsize$ = 136
_Val$ = 144
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0

; 1387 :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z$0:

; 1388 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Appended_last$[rbp]
	mov	rcx, QWORD PTR _Appended_first$[rbp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1389 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1390 :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 1391 :         _CATCH_END

	lea	rax, $LN8@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
tv76 = 48
__$ReturnUdt$ = 80
v$ = 88
?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_vec4_bitwise_not<int,0,-1,32,0>::call, COMDAT

; 149  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 150  : 			return tvec4<T, P>(~v.x, ~v.y, ~v.z, ~v.w);

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax+12]
	not	eax
	mov	rcx, QWORD PTR v$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	not	ecx
	mov	rdx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	not	edx
	mov	r8, QWORD PTR v$[rsp]
	mov	r8d, DWORD PTR [r8]
	not	r8d
	mov	DWORD PTR tv76[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv76[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 151  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_vec4_bitwise_not<int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$ldexp@M@glm@@YAMAEBMAEBH@Z
_TEXT	SEGMENT
x$ = 64
exp$ = 72
??$ldexp@M@glm@@YAMAEBMAEBH@Z PROC			; glm::ldexp<float>, COMDAT

; 798  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 799  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'ldexp' only accept floating-point inputs");
; 800  : 
; 801  : 		return std::ldexp(x, exp);

	mov	rax, QWORD PTR exp$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?ldexp@@YAMMH@Z				; ldexp

; 802  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ldexp@M@glm@@YAMAEBMAEBH@Z ENDP			; glm::ldexp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$frexp@M@glm@@YAMMAEAH@Z
_TEXT	SEGMENT
x$ = 64
exp$ = 72
??$frexp@M@glm@@YAMMAEAH@Z PROC				; glm::frexp<float>, COMDAT

; 749  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 750  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'frexp' only accept floating-point inputs");
; 751  : 
; 752  : 		return std::frexp(x, &exp);

	mov	rdx, QWORD PTR exp$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?frexp@@YAMMPEAH@Z			; frexp

; 753  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$frexp@M@glm@@YAMMAEAH@Z ENDP				; glm::frexp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
tv67 = 56
tv74 = 64
__$ReturnUdt$ = 96
Min$ = 104
Max$ = 112
?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call, COMDAT

; 198  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 199  : 			return vecType<float, highp>(compute_rand<uint32, highp, vecType>::call()) / static_cast<float>(std::numeric_limits<uint32>::max()) * (Max - Min) + Min;

	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, QWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv67[rsp], rax
	call	?max@?$numeric_limits@I@std@@SAIXZ	; std::numeric_limits<unsigned int>::max
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv74[rsp], xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_rand@I$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@I$0A@@3@XZ ; glm::detail::compute_rand<unsigned int,0,glm::tvec1>::call
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0I$0A@@?$tvec1@M$0A@@glm@@QEAA@AEBU?$tvec1@I$0A@@1@@Z ; glm::tvec1<float,0>::tvec1<float,0><unsigned int,0>
	movss	xmm0, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rcx, QWORD PTR tv67[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, QWORD PTR Min$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?HM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 200  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 68
$T5 = 84
$T6 = 100
tv66 = 104
__$ReturnUdt$ = 128
x$ = 136
?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sign<float,0,glm::tvec4,1,0>::call, COMDAT

; 186  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 187  : 			return vecType<T, P>(glm::lessThan(vecType<T, P>(0), x)) - vecType<T, P>(glm::lessThan(x, vecType<T, P>(0)));

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
	mov	QWORD PTR tv66[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0_N$0A@@?$tvec4@M$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<float,0>::tvec4<float,0><bool,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 188  : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sign<float,0,glm::tvec4,1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 68
$T5 = 84
$T6 = 100
tv66 = 104
__$ReturnUdt$ = 128
x$ = 136
?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sign<int,0,glm::tvec4,0,0>::call, COMDAT

; 186  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 187  : 			return vecType<T, P>(glm::lessThan(vecType<T, P>(0), x)) - vecType<T, P>(glm::lessThan(x, vecType<T, P>(0)));

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><bool,0>
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThan@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0_N$0A@@?$tvec4@H$0A@@glm@@QEAA@AEBU?$tvec4@_N$0A@@1@@Z ; glm::tvec4<int,0>::tvec4<int,0><bool,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@0@Z ; glm::operator-<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 188  : 		}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sign<int,0,glm::tvec4,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
$T4 = 44
$T5 = 48
$T6 = 52
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call, COMDAT

; 186  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 187  : 			return vecType<T, P>(glm::lessThan(vecType<T, P>(0), x)) - vecType<T, P>(glm::lessThan(x, vecType<T, P>(0)));

	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
	mov	QWORD PTR tv66[rsp], rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$lessThan@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::lessThan<int,0,glm::tvec1>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0_N$0A@@?$tvec1@H$0A@@glm@@QEAA@AEBU?$tvec1@_N$0A@@1@@Z ; glm::tvec1<int,0>::tvec1<int,0><bool,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GH$0A@@glm@@YA?AU?$tvec1@H$0A@@0@AEBU10@0@Z ; glm::operator-<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 188  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
tv79 = 48
tv75 = 49
tv69 = 50
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::functor1<bool,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv79[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv75[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv69[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv79[rsp]
	mov	BYTE PTR [rsp+32], cl
	movzx	ecx, BYTE PTR tv75[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv69[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::functor1<bool,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
tv75 = 32
tv67 = 33
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::functor1<bool,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv75[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx+4]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv67[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv75[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv67[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::functor1<bool,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z
_TEXT	SEGMENT
tv71 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z PROC ; glm::detail::functor1<bool,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv71[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv71[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z ENDP ; glm::detail::functor1<bool,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z
_TEXT	SEGMENT
tv79 = 48
tv75 = 49
tv69 = 50
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z PROC ; glm::detail::functor1<bool,double,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv79[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+16]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv75[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv69[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv79[rsp]
	mov	BYTE PTR [rsp+32], cl
	movzx	ecx, BYTE PTR tv75[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv69[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z ENDP ; glm::detail::functor1<bool,double,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z
_TEXT	SEGMENT
tv75 = 32
tv67 = 33
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z PROC ; glm::detail::functor1<bool,double,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv75[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx+8]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv67[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv75[rsp]
	movzx	r9d, cl
	movzx	ecx, BYTE PTR tv67[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z ENDP ; glm::detail::functor1<bool,double,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z
_TEXT	SEGMENT
tv71 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z PROC ; glm::detail::functor1<bool,double,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	mov	BYTE PTR tv71[rsp], al
	mov	rcx, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rcx]
	call	QWORD PTR Func$[rsp]
	movzx	ecx, BYTE PTR tv71[rsp]
	movzx	r8d, cl
	movzx	edx, al
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z ENDP ; glm::detail::functor1<bool,double,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$fract@M@glm@@YAMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
??$fract@M@glm@@YAMM@Z PROC				; glm::fract<float>, COMDAT

; 427  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 428  : 		return fract(tvec1<genType>(x)).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$fract@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::fract<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 429  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$fract@M@glm@@YAMM@Z ENDP				; glm::fract<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 52
tv65 = 72
tv71 = 80
__$ReturnUdt$ = 112
edge$ = 120
x$ = 128
?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call, COMDAT

; 291  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 292  : 			return mix(vecType<T, P>(1), vecType<T, P>(0), glm::lessThan(x, edge));

	mov	r8, QWORD PTR edge$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	QWORD PTR tv65[rsp], rax
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv71[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv65[rsp]
	mov	r9, rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 293  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z
_TEXT	SEGMENT
$T1 = 0
tv66 = 8
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z PROC ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec4,0>::call, COMDAT

; 157  : 		{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24

; 158  : 			return a ? y : x;

	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@call
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv66[rsp], rax
$LN4@call:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 159  : 		}

	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z ENDP ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 68
tv83 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
a$ = 136
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z
_TEXT	SEGMENT
$T1 = 0
tv66 = 8
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z PROC ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec3,0>::call, COMDAT

; 157  : 		{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24

; 158  : 			return a ? y : x;

	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@call
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv66[rsp], rax
$LN4@call:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 159  : 		}

	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z ENDP ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z
_TEXT	SEGMENT
Result$ = 40
i$4 = 52
tv83 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
a$ = 104
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z PROC ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call, COMDAT

; 134  : 		{

$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 135  : 			vecType<T, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<float,0>::tvec2<float,0>

; 136  : 			for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@call
$LN2@call:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@call:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@call

; 137  : 				Result[i] = a[i] ? y[i] : x[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@call
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
	jmp	SHORT $LN7@call
$LN6@call:
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rsp], xmm0
$LN7@call:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR tv83[rsp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN2@call
$LN3@call:

; 138  : 			return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	rcx, QWORD PTR Result$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 139  : 		}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ENDP ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z
_TEXT	SEGMENT
$T1 = 0
tv66 = 8
__$ReturnUdt$ = 32
x$ = 40
y$ = 48
a$ = 56
?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z PROC ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec2,0>::call, COMDAT

; 157  : 		{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 158  : 			return a ? y : x;

	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@call
	mov	rax, QWORD PTR y$[rsp]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rax, QWORD PTR x$[rsp]
	mov	QWORD PTR tv66[rsp], rax
$LN4@call:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 159  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z ENDP ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z
_TEXT	SEGMENT
x$ = 32
y$ = 40
a$ = 48
?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z PROC	; glm::detail::compute_mix<float,float>::call, COMDAT

; 166  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 167  : 			GLM_STATIC_ASSERT(std::numeric_limits<U>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'mix' only accept floating-point inputs for the interpolator a");
; 168  : 
; 169  : 			return static_cast<T>(static_cast<U>(x) + a * static_cast<U>(y - x));

	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1

; 170  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z ENDP	; glm::detail::compute_mix<float,float>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
y$ = 56
a$ = 64
?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z PROC ; glm::detail::compute_mix<float,bool>::call, COMDAT

; 177  : 		{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 178  : 			return a ? y : x;

	mov	rax, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@call
	mov	rax, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 179  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z ENDP ; glm::detail::compute_mix<float,bool>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call, COMDAT

; 254  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 255  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
; 256  : 			return a - b * floor(a / b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?KM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>
	mov	r8, rax
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 257  : 		}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z PROC ; glm::mod<float,0,glm::tvec1>, COMDAT

; 453  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 454  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 455  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ENDP ; glm::mod<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<double,0,0,64,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	ucomisd	xmm0, QWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	ucomisd	xmm0, QWORD PTR [rcx+16]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	ucomisd	xmm0, QWORD PTR [rcx+24]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<double,0,0,64,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z PROC ; glm::lessThan<double,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec4<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ENDP ; glm::lessThan<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z PROC ; glm::abs<double,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ENDP ; glm::abs<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 96
v1$ = 104
v2$ = 112
??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZN@?$tvec4@N$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<double,0>::operator-=<double>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<double,0,glm::tvec4,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR __imp_floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<double,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z PROC ; glm::lessThan<double,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec3<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ENDP ; glm::lessThan<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z PROC ; glm::abs<double,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ENDP ; glm::abs<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	subsd	xmm0, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax+8]
	subsd	xmm1, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm2, QWORD PTR [rax]
	subsd	xmm2, QWORD PTR [rcx]
	movsd	QWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movsd	xmm0, QWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<double,0>::tvec3<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<double,0,glm::tvec3,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR __imp_floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<double,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::lessThan<double,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec2<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::lessThan<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z PROC ; glm::abs<double,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ENDP ; glm::abs<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	subsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	subsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<double,0,glm::tvec2,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR __imp_floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<double,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z PROC ; glm::lessThan<double,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec1<double,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z	; glm::tvec1<double,0>::operator[]
	movsd	xmm0, QWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z ENDP ; glm::lessThan<double,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z PROC ; glm::abs<double,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<double,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ENDP ; glm::abs<double,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<double,0,glm::tvec1,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR __imp_floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@NN$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@N$0A@@3@P6ANN@ZAEBU43@@Z ; glm::detail::functor1<double,double,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<double,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec1>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec1<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec1>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call, COMDAT

; 209  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 210  : 			return detail::functor1<T, T, P, vecType>::call(std::floor, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?floor@@YAMM@Z		; floor
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec1>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 211  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@N$00@detail@glm@@SANN@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@N$00@detail@glm@@SANN@Z PROC	; glm::detail::compute_abs<double,1>::call, COMDAT

; 77   : 		{

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movsd	xmm0, QWORD PTR x$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@call
	movsd	xmm0, QWORD PTR x$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movsd	xmm0, QWORD PTR x$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv66[rsp], xmm0
$LN4@call:
	movsd	xmm0, QWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@N$00@detail@glm@@SANN@Z ENDP	; glm::detail::compute_abs<double,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z PROC ; std::_Destroy_range<std::allocator<int> >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ENDP ; std::_Destroy_range<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@H@std@@QEAA@XZ		; std::allocator<int>::allocator<int>
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Oldsize$ = 64
_Newlast$1 = 72
_Oldcapacity$2 = 80
_Oldlast$3 = 88
this$ = 112
_Newsize$ = 120
_Val$ = 128
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z PROC ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>, COMDAT

; 1397 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1398 :         // trim or append elements, provide strong guarantee
; 1399 :         auto& _Al           = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1400 :         auto& _My_data      = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1401 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1402 :         pointer& _Mylast    = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1403 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldsize$[rsp], rax

; 1404 :         if (_Newsize < _Oldsize) { // trim

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jae	SHORT $LN2@Resize

; 1405 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR _Newlast$1[rsp], rax

; 1406 :             _Orphan_range(_Newlast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR _Newlast$1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1407 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1408 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1409 :             _Mylast = _Newlast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Newlast$1[rsp]
	mov	QWORD PTR [rax], rcx

; 1410 :             return;

	jmp	$LN1@Resize
$LN2@Resize:

; 1411 :         }
; 1412 : 
; 1413 :         if (_Newsize > _Oldsize) { // append

	mov	rax, QWORD PTR _Oldsize$[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	$LN3@Resize

; 1414 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2
	mov	QWORD PTR _Oldcapacity$2[rsp], rax

; 1415 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	rax, QWORD PTR _Oldcapacity$2[rsp]
	cmp	QWORD PTR _Newsize$[rsp], rax
	jbe	SHORT $LN4@Resize

; 1416 :                 _Resize_reallocate(_Newsize, _Val);

	mov	r8, QWORD PTR _Val$[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize_reallocate<std::_Value_init_tag>

; 1417 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1418 :             }
; 1419 : 
; 1420 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1421 :             const pointer _Oldlast = _Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Oldlast$3[rsp], rax

; 1422 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1423 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1424 :             } else {
; 1425 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1426 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	rax, QWORD PTR _Oldsize$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR _Oldlast$3[rsp]
	call	??$_Uninitialized_value_construct_n@V?$allocator@H@std@@@std@@YAPEAHPEAH_KAEAV?$allocator@H@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<int> >
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1427 :             }
; 1428 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1429 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	r8, QWORD PTR _Oldlast$3[rsp]
	mov	rdx, QWORD PTR _Oldlast$3[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
$LN3@Resize:
$LN1@Resize:

; 1430 :         }
; 1431 : 
; 1432 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1433 :     }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ENDP ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC	; glm::operator~<int,0>, COMDAT

; 936  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 937  : 		return detail::compute_vec4_bitwise_not<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v);

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_vec4_bitwise_not@H$0A@$0?0$0CA@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_vec4_bitwise_not<int,0,-1,32,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 938  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP	; glm::operator~<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
a$ = 56
b$ = 104
c$ = 132
d$ = 136
main	PROC

; 1231 : {

$LN3:
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1232 : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 1233 : 
; 1234 : 	glm::ivec4 const a(1);

	mov	edx, 1
	lea	rcx, QWORD PTR a$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 1235 : 	glm::ivec4 const b = ~a;

	lea	rdx, QWORD PTR a$[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	call	??$?SH$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::operator~<int,0>

; 1236 : 
; 1237 : 	glm::int32 const c(1);

	mov	DWORD PTR c$[rsp], 1

; 1238 : 	glm::int32 const d = ~c;

	mov	DWORD PTR d$[rsp], -2

; 1239 : 
; 1240 : #	if GLM_ARCH & GLM_ARCH_AVX_BIT && GLM_HAS_UNRESTRICTED_UNIONS
; 1241 : 	glm_vec4 const A = _mm_set_ps(4, 3, 2, 1);
; 1242 : 	glm_vec4 const B = glm_vec4_swizzle_xyzw(A);
; 1243 : 	glm_vec4 const C = _mm_permute_ps(A, _MM_SHUFFLE(3, 2, 1, 0));
; 1244 : 	glm_vec4 const D = _mm_permute_ps(A, _MM_SHUFFLE(0, 1, 2, 3));
; 1245 : 	glm_vec4 const E = _mm_shuffle_ps(A, A, _MM_SHUFFLE(0, 1, 2, 3));
; 1246 : #	endif
; 1247 : 
; 1248 : 	Error += sign::test();

	call	?test@sign@@YAHXZ			; sign::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1249 : 	Error += floor_::test();

	call	?test@floor_@@YAHXZ			; floor_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1250 : 	Error += mod_::test();

	call	?test@mod_@@YAHXZ			; mod_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1251 : 	Error += modf_::test();

	call	?test@modf_@@YAHXZ			; modf_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1252 : 	Error += floatBitsToInt::test();

	call	?test@floatBitsToInt@@YAHXZ		; floatBitsToInt::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1253 : 	Error += floatBitsToUint::test();

	call	?test@floatBitsToUint@@YAHXZ		; floatBitsToUint::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1254 : 	Error += mix_::test();

	call	?test@mix_@@YAHXZ			; mix_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1255 : 	Error += step_::test();

	call	?test@step_@@YAHXZ			; step_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1256 : 	Error += max_::test();

	call	?test@max_@@YAHXZ			; max_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1257 : 	Error += min_::test();

	call	?test@min_@@YAHXZ			; min_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1258 : 	Error += round_::test();

	call	?test@round_@@YAHXZ			; round_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1259 : 	Error += roundEven::test();

	call	?test@roundEven@@YAHXZ			; roundEven::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1260 : 	Error += isnan_::test();

	call	?test@isnan_@@YAHXZ			; isnan_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1261 : 	Error += isinf_::test();

	call	?test@isinf_@@YAHXZ			; isinf_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1262 : 	Error += frexp_::test();

	call	?test@frexp_@@YAHXZ			; frexp_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1263 : 	Error += ldexp_::test();

	call	?test@ldexp_@@YAHXZ			; ldexp_::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1264 : 
; 1265 : #	ifdef NDEBUG
; 1266 : 		std::size_t Samples = 1000;
; 1267 : 		Error += sign::perf(Samples);
; 1268 : #	endif
; 1269 : 
; 1270 : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1271 : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
x$ = 88
exp$ = 96
??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z PROC ; glm::ldexp<float,0>, COMDAT

; 836  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 837  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'ldexp' only accept floating-point inputs");
; 838  : 
; 839  : 		return tvec4<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 12
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 12
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 840  : 			ldexp(x.x, exp.x),
; 841  : 			ldexp(x.y, exp.y),
; 842  : 			ldexp(x.z, exp.z),
; 843  : 			ldexp(x.w, exp.w));
; 844  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z ENDP ; glm::ldexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
x$ = 72
exp$ = 80
??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z PROC ; glm::ldexp<float,0>, COMDAT

; 825  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 826  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'ldexp' only accept floating-point inputs");
; 827  : 
; 828  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 829  : 			ldexp(x.x, exp.x),
; 830  : 			ldexp(x.y, exp.y),
; 831  : 			ldexp(x.z, exp.z));
; 832  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z ENDP ; glm::ldexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
x$ = 72
exp$ = 80
??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z PROC ; glm::ldexp<float,0>, COMDAT

; 815  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 816  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'ldexp' only accept floating-point inputs");
; 817  : 
; 818  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rcx, QWORD PTR x$[rsp]
	add	rcx, 4
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 819  : 			ldexp(x.x, exp.x),
; 820  : 			ldexp(x.y, exp.y));
; 821  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z ENDP ; glm::ldexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
exp$ = 64
??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z PROC ; glm::ldexp<float,0>, COMDAT

; 806  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 807  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'ldexp' only accept floating-point inputs");
; 808  : 
; 809  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	mov	rdx, rax
	call	??$ldexp@M@glm@@YAMAEBMAEBH@Z		; glm::ldexp<float>
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 810  : 			ldexp(x.x, exp.x));
; 811  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z ENDP ; glm::ldexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 48
A$15 = 68
exp$16 = 100
x$17 = 132
A$18 = 168
exp$19 = 200
x$20 = 232
A$21 = 264
exp$22 = 312
x$23 = 360
A$24 = 408
exp$25 = 456
x$26 = 504
$T27 = 532
$T28 = 536
$T29 = 540
$T30 = 544
$T31 = 548
$T32 = 556
$T33 = 560
$T34 = 564
$T35 = 576
$T36 = 580
$T37 = 584
$T38 = 600
tv83 = 604
tv139 = 608
tv166 = 612
tv196 = 616
?test@ldexp_@@YAHXZ PROC				; ldexp_::test

; 1195 : 	{

$LN11:
	push	rdi
	sub	rsp, 624				; 00000270H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1196 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1197 : 
; 1198 : 		{
; 1199 : 			glm::vec1 A = glm::vec1(0.5);

	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR A$15[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 1200 : 			glm::ivec1 exp = glm::ivec1(11);

	mov	edx, 11
	lea	rcx, QWORD PTR exp$16[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>

; 1201 : 			glm::vec1 x = glm::ldexp(A, exp);

	lea	r8, QWORD PTR exp$16[rsp]
	lea	rdx, QWORD PTR A$15[rsp]
	lea	rcx, QWORD PTR x$17[rsp]
	call	??$ldexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEBU?$tvec1@H$0A@@0@@Z ; glm::ldexp<float,0>

; 1202 : 			Error += glm::all(glm::epsilonEqual(x, glm::vec1(1024),0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T27[rsp], xmm0
	movss	xmm1, DWORD PTR __real@44800000
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r9, QWORD PTR $T27[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR x$17[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv83[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1203 : 		}
; 1204 : 
; 1205 : 		{
; 1206 : 			glm::vec2 A = glm::vec2(0.5, 0.96);

	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR A$18[rsp]
	call	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z	; glm::tvec2<float,0>::tvec2<float,0><double,double>

; 1207 : 			glm::ivec2 exp = glm::ivec2(11, -2);

	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR exp$19[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 1208 : 			glm::vec2 x = glm::ldexp(A, exp);

	lea	r8, QWORD PTR exp$19[rsp]
	lea	rdx, QWORD PTR A$18[rsp]
	lea	rcx, QWORD PTR x$20[rsp]
	call	??$ldexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEBU?$tvec2@H$0A@@0@@Z ; glm::ldexp<float,0>

; 1209 : 			Error += glm::all(glm::epsilonEqual(x, glm::vec2(1024, .24),0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T30[rsp], xmm0
	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z	; glm::tvec2<float,0>::tvec2<float,0><int,double>
	lea	r9, QWORD PTR $T30[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR x$20[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv139[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1210 : 		}
; 1211 : 
; 1212 : 		{
; 1213 : 			glm::vec3 A = glm::vec3(0.5, 0.96, 0.0);

	xorps	xmm3, xmm3
	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR A$21[rsp]
	call	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<float,0>::tvec3<float,0><double,double,double>

; 1214 : 			glm::ivec3 exp = glm::ivec3(11, -2, 0);

	xor	r9d, r9d
	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR exp$22[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>

; 1215 : 			glm::vec3 x = glm::ldexp(A, exp);

	lea	r8, QWORD PTR exp$22[rsp]
	lea	rdx, QWORD PTR A$21[rsp]
	lea	rcx, QWORD PTR x$23[rsp]
	call	??$ldexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEBU?$tvec3@H$0A@@0@@Z ; glm::ldexp<float,0>

; 1216 : 			Error += glm::all(glm::epsilonEqual(x, glm::vec3(1024, .24, 0),0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T33[rsp], xmm0
	xor	r9d, r9d
	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,double,int>
	lea	r9, QWORD PTR $T33[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR x$23[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv166[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1217 : 		}
; 1218 : 
; 1219 : 		{
; 1220 : 			glm::vec4 A = glm::vec4(0.5, 0.96, 0.0, -0.665);

	movsd	xmm0, QWORD PTR __real@bfe547ae147ae148
	movsd	QWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR A$24[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>

; 1221 : 			glm::ivec4 exp = glm::ivec4(11, -2, 0, 1);

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR exp$25[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>

; 1222 : 			glm::vec4 x = glm::ldexp(A, exp);

	lea	r8, QWORD PTR exp$25[rsp]
	lea	rdx, QWORD PTR A$24[rsp]
	lea	rcx, QWORD PTR x$26[rsp]
	call	??$ldexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEBU?$tvec4@H$0A@@0@@Z ; glm::ldexp<float,0>

; 1223 : 			Error += glm::all(glm::epsilonEqual(x, glm::vec4(1024, .24, 0, -1.33),0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T36[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@bff547ae147ae148
	movsd	QWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR $T37[rsp]
	call	??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z ; glm::tvec4<float,0>::tvec4<float,0><int,double,int,double>
	lea	r9, QWORD PTR $T36[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR x$26[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv196[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv196[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1224 : 		}
; 1225 : 
; 1226 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1227 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@ldexp_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 624				; 00000270H
	pop	rdi
	ret	0
?test@ldexp_@@YAHXZ ENDP				; ldexp_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>, COMDAT

; 204  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsd2ss xmm0, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsd2ss xmm0, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
x$ = 88
exp$ = 96
??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z PROC ; glm::frexp<float,0>, COMDAT

; 786  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 787  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'frexp' only accept floating-point inputs");
; 788  : 
; 789  : 		return tvec4<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 12
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 790  : 			frexp(x.x, exp.x),
; 791  : 			frexp(x.y, exp.y),
; 792  : 			frexp(x.z, exp.z),
; 793  : 			frexp(x.w, exp.w));
; 794  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z ENDP ; glm::frexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,double,int,double>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsd2ss xmm0, QWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,double,int,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec3<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>, COMDAT

; 80   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsd2ss xmm0, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 32
tv72 = 36
__$ReturnUdt$ = 64
x$ = 72
exp$ = 80
??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z PROC ; glm::frexp<float,0>, COMDAT

; 775  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 776  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'frexp' only accept floating-point inputs");
; 777  : 
; 778  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 779  : 			frexp(x.x, exp.x),
; 780  : 			frexp(x.y, exp.y),
; 781  : 			frexp(x.z, exp.z));
; 782  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z ENDP ; glm::frexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,double,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,double,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec2<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><double,double>, COMDAT

; 66   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
x$ = 72
exp$ = 80
??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z PROC ; glm::frexp<float,0>, COMDAT

; 765  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 766  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'frexp' only accept floating-point inputs");
; 767  : 
; 768  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR exp$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR exp$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$frexp@M@glm@@YAMMAEAH@Z		; glm::frexp<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 769  : 			frexp(x.x, exp.x),
; 770  : 			frexp(x.y, exp.y));
; 771  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z ENDP ; glm::frexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,double>, COMDAT

; 66   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec1>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec1<bool,0>::tvec1<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec1<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, BYTE PTR Result$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
exp$ = 64
??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z PROC ; glm::frexp<float,0>, COMDAT

; 757  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 758  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || GLM_UNRESTRICTED_GENTYPE, "'frexp' only accept floating-point inputs");
; 759  : 
; 760  : 		return tvec1<T, P>(std::frexp(x.x, &exp.x));

	mov	rax, QWORD PTR exp$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	?frexp@@YAMMPEAH@Z			; frexp
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 761  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z ENDP ; glm::frexp<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 39   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec1@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec1<int,0>::tvec1<int,0>, COMDAT

; 14   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 12   : 				: x(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0

; 14   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec1<int,0>::tvec1<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec1<int,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@H$0A@@glm@@SAHXZ	; glm::tvec1<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec1<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@H$0A@@glm@@SAHXZ PROC			; glm::tvec1<int,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@H$0A@@glm@@SAHXZ ENDP			; glm::tvec1<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 48
x$15 = 68
exp$16 = 100
A$17 = 132
x$18 = 168
exp$19 = 200
A$20 = 232
x$21 = 264
exp$22 = 312
A$23 = 360
x$24 = 408
exp$25 = 456
A$26 = 504
$T27 = 532
$T28 = 536
$T29 = 540
$T30 = 544
$T31 = 548
$T32 = 552
$T33 = 556
$T34 = 564
$T35 = 568
$T36 = 576
$T37 = 580
$T38 = 584
$T39 = 596
$T40 = 600
$T41 = 612
$T42 = 616
$T43 = 620
$T44 = 636
$T45 = 640
$T46 = 656
tv82 = 660
tv95 = 664
tv149 = 668
tv163 = 672
tv187 = 676
tv202 = 680
tv228 = 684
tv244 = 688
?test@frexp_@@YAHXZ PROC				; frexp_::test

; 1153 : 	{

$LN19:
	push	rdi
	sub	rsp, 704				; 000002c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1154 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1155 : 
; 1156 : 		{
; 1157 : 			glm::vec1 x(1024);

	movss	xmm1, DWORD PTR __real@44800000
	lea	rcx, QWORD PTR x$15[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 1158 : 			glm::ivec1 exp;

	lea	rcx, QWORD PTR exp$16[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@XZ		; glm::tvec1<int,0>::tvec1<int,0>

; 1159 : 			glm::vec1 A = glm::frexp(x, exp);

	lea	r8, QWORD PTR exp$16[rsp]
	lea	rdx, QWORD PTR x$15[rsp]
	lea	rcx, QWORD PTR A$17[rsp]
	call	??$frexp@M$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@AEAU?$tvec1@H$0A@@0@@Z ; glm::frexp<float,0>

; 1160 : 			Error += glm::all(glm::epsilonEqual(A, glm::vec1(0.5), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T27[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T28[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r9, QWORD PTR $T27[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$17[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv82[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1161 : 			Error += glm::all(glm::equal(exp, glm::ivec1(11))) ? 0 : 1;

	mov	edx, 11
	lea	rcx, QWORD PTR $T30[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR exp$16[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	??$equal@H$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv95[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1162 : 		}
; 1163 : 
; 1164 : 		{
; 1165 : 			glm::vec2 x(1024, 0.24);

	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR x$18[rsp]
	call	??$?0HN@?$tvec2@M$0A@@glm@@QEAA@HN@Z	; glm::tvec2<float,0>::tvec2<float,0><int,double>

; 1166 : 			glm::ivec2 exp;

	lea	rcx, QWORD PTR exp$19[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@XZ		; glm::tvec2<int,0>::tvec2<int,0>

; 1167 : 			glm::vec2 A = glm::frexp(x, exp);

	lea	r8, QWORD PTR exp$19[rsp]
	lea	rdx, QWORD PTR x$18[rsp]
	lea	rcx, QWORD PTR A$20[rsp]
	call	??$frexp@M$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@AEAU?$tvec2@H$0A@@0@@Z ; glm::frexp<float,0>

; 1168 : 			Error += glm::all(glm::epsilonEqual(A, glm::vec2(0.5, 0.96), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T32[rsp], xmm0
	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR $T33[rsp]
	call	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z	; glm::tvec2<float,0>::tvec2<float,0><double,double>
	lea	r9, QWORD PTR $T32[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$20[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv149[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1169 : 			Error += glm::all(glm::equal(exp, glm::ivec2(11, -2))) ? 0 : 1;

	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR $T35[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR exp$19[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??$equal@H$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv163[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1170 : 		}
; 1171 : 
; 1172 : 		{
; 1173 : 			glm::vec3 x(1024, 0.24, 0);

	xor	r9d, r9d
	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR x$21[rsp]
	call	??$?0HNH@?$tvec3@M$0A@@glm@@QEAA@HNH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,double,int>

; 1174 : 			glm::ivec3 exp;

	lea	rcx, QWORD PTR exp$22[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@XZ		; glm::tvec3<int,0>::tvec3<int,0>

; 1175 : 			glm::vec3 A = glm::frexp(x, exp);

	lea	r8, QWORD PTR exp$22[rsp]
	lea	rdx, QWORD PTR x$21[rsp]
	lea	rcx, QWORD PTR A$23[rsp]
	call	??$frexp@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@AEAU?$tvec3@H$0A@@0@@Z ; glm::frexp<float,0>

; 1176 : 			Error += glm::all(glm::epsilonEqual(A, glm::vec3(0.5, 0.96, 0.0), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T37[rsp], xmm0
	xorps	xmm3, xmm3
	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR $T38[rsp]
	call	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
	lea	r9, QWORD PTR $T37[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$23[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv187[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv187[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv187[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1177 : 			Error += glm::all(glm::equal(exp, glm::ivec3(11, -2, 0))) ? 0 : 1;

	xor	r9d, r9d
	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR exp$22[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$equal@H$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv202[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv202[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv202[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1178 : 		}
; 1179 : 
; 1180 : 		{
; 1181 : 			glm::vec4 x(1024, 0.24, 0, -1.33);

	movsd	xmm0, QWORD PTR __real@bff547ae147ae148
	movsd	QWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	movsd	xmm2, QWORD PTR __real@3fceb851eb851eb8
	mov	edx, 1024				; 00000400H
	lea	rcx, QWORD PTR x$24[rsp]
	call	??$?0HNHN@?$tvec4@M$0A@@glm@@QEAA@HNHN@Z ; glm::tvec4<float,0>::tvec4<float,0><int,double,int,double>

; 1182 : 			glm::ivec4 exp;

	lea	rcx, QWORD PTR exp$25[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@XZ		; glm::tvec4<int,0>::tvec4<int,0>

; 1183 : 			glm::vec4 A = glm::frexp(x, exp);

	lea	r8, QWORD PTR exp$25[rsp]
	lea	rdx, QWORD PTR x$24[rsp]
	lea	rcx, QWORD PTR A$26[rsp]
	call	??$frexp@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU?$tvec4@H$0A@@0@@Z ; glm::frexp<float,0>

; 1184 : 			Error += glm::all(glm::epsilonEqual(A, glm::vec4(0.5, 0.96, 0.0, -0.665), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T42[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@bfe547ae147ae148
	movsd	QWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movsd	xmm2, QWORD PTR __real@3feeb851eb851eb8
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??$?0NNNN@?$tvec4@M$0A@@glm@@QEAA@NNNN@Z ; glm::tvec4<float,0>::tvec4<float,0><double,double,double,double>
	lea	r9, QWORD PTR $T42[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$26[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv228[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv228[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv228[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1185 : 			Error += glm::all(glm::equal(exp, glm::ivec4(11, -2, 0, 1))) ? 0 : 1;

	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, -2
	mov	edx, 11
	lea	rcx, QWORD PTR $T45[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	r8, rax
	lea	rdx, QWORD PTR exp$25[rsp]
	lea	rcx, QWORD PTR $T46[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv244[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv244[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv244[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1186 : 		}
; 1187 : 
; 1188 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1189 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@frexp_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 704				; 000002c0H
	pop	rdi
	ret	0
?test@frexp_@@YAHXZ ENDP				; frexp_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Samples$ = 64
?perf@sign@@YAH_K@Z PROC				; sign::perf

; 1139 : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1140 : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 1141 : 
; 1142 : 		Error += perf_linear_cal(Samples);

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf_linear_cal@sign@@YAH_K@Z		; sign::perf_linear_cal
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1143 : 		Error += perf_linear(Samples);

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf_linear@sign@@YAH_K@Z		; sign::perf_linear
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1144 : 		Error += perf_rand(Samples);

	mov	rcx, QWORD PTR Samples$[rsp]
	call	?perf_rand@sign@@YAH_K@Z		; sign::perf_rand
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 1145 : 
; 1146 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1147 : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?perf@sign@@YAH_K@Z ENDP				; sign::perf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 36
Timestamp0$ = 40
Sum$ = 44
i$1 = 48
Timestamp1$ = 52
i$2 = 56
Timestamp2$ = 60
i$3 = 64
Timestamp3$ = 68
i$4 = 72
Timestamp4$ = 76
i$5 = 80
Timestamp5$ = 84
Samples$ = 112
?perf_linear_cal@sign@@YAH_K@Z PROC			; sign::perf_linear_cal

; 1094 : 	{

$LN18:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 1095 : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 1096 : 
; 1097 : 		glm::int32 const Count = static_cast<glm::int32>(Samples);

	mov	eax, DWORD PTR Samples$[rsp]
	mov	DWORD PTR Count$[rsp], eax

; 1098 : 
; 1099 : 		std::clock_t Timestamp0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp0$[rsp], eax

; 1100 : 		glm::int32 Sum = 0;

	mov	DWORD PTR Sum$[rsp], 0

; 1101 : 
; 1102 : 		for(glm::int32 i = 1; i < Count; ++i)

	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@perf_linea
$LN2@perf_linea:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@perf_linea:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@perf_linea

; 1103 : 			Sum += sign_cmp(i);

	mov	ecx, DWORD PTR i$1[rsp]
	call	??$sign_cmp@H@sign@@YAHH@Z		; sign::sign_cmp<int>
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
	jmp	SHORT $LN2@perf_linea
$LN3@perf_linea:

; 1104 : 
; 1105 : 		std::clock_t Timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp1$[rsp], eax

; 1106 : 
; 1107 : 		for(glm::int32 i = 1; i < Count; ++i)

	mov	DWORD PTR i$2[rsp], 1
	jmp	SHORT $LN7@perf_linea
$LN5@perf_linea:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@perf_linea:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN6@perf_linea

; 1108 : 			Sum += sign_if(i);

	mov	ecx, DWORD PTR i$2[rsp]
	call	??$sign_if@H@sign@@YAHH@Z		; sign::sign_if<int>
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
	jmp	SHORT $LN5@perf_linea
$LN6@perf_linea:

; 1109 : 
; 1110 : 		std::clock_t Timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp2$[rsp], eax

; 1111 : 
; 1112 : 		for(glm::int32 i = 1; i < Count; ++i)

	mov	DWORD PTR i$3[rsp], 1
	jmp	SHORT $LN10@perf_linea
$LN8@perf_linea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@perf_linea:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN9@perf_linea

; 1113 : 			Sum += sign_alu1(i);

	mov	ecx, DWORD PTR i$3[rsp]
	call	??$sign_alu1@H@sign@@YAHH@Z		; sign::sign_alu1<int>
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
	jmp	SHORT $LN8@perf_linea
$LN9@perf_linea:

; 1114 : 
; 1115 : 		std::clock_t Timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp3$[rsp], eax

; 1116 : 
; 1117 : 		for(glm::int32 i = 1; i < Count; ++i)

	mov	DWORD PTR i$4[rsp], 1
	jmp	SHORT $LN13@perf_linea
$LN11@perf_linea:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN13@perf_linea:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN12@perf_linea

; 1118 : 			Sum += sign_alu2(i);

	mov	ecx, DWORD PTR i$4[rsp]
	call	??$sign_alu2@H@sign@@YAHH@Z		; sign::sign_alu2<int>
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
	jmp	SHORT $LN11@perf_linea
$LN12@perf_linea:

; 1119 : 
; 1120 : 		std::clock_t Timestamp4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp4$[rsp], eax

; 1121 : 
; 1122 : 		for(glm::int32 i = 1; i < Count; ++i)

	mov	DWORD PTR i$5[rsp], 1
	jmp	SHORT $LN16@perf_linea
$LN14@perf_linea:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN16@perf_linea:
	mov	eax, DWORD PTR Count$[rsp]
	cmp	DWORD PTR i$5[rsp], eax
	jge	SHORT $LN15@perf_linea

; 1123 : 			Sum += sign_sub(i);

	mov	ecx, DWORD PTR i$5[rsp]
	call	??$sign_sub@H@sign@@YAHH@Z		; sign::sign_sub<int>
	mov	ecx, DWORD PTR Sum$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Sum$[rsp], eax
	jmp	SHORT $LN14@perf_linea
$LN15@perf_linea:

; 1124 : 
; 1125 : 		std::clock_t Timestamp5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp5$[rsp], eax

; 1126 : 
; 1127 : 		std::printf("Sum %d\n", static_cast<unsigned int>(Sum));

	mov	edx, DWORD PTR Sum$[rsp]
	lea	rcx, OFFSET FLAT:$SG61624
	call	printf

; 1128 : 
; 1129 : 		std::printf("sign_cmp(linear_cal) Time %d clocks\n", static_cast<unsigned int>(Timestamp1 - Timestamp0));

	mov	eax, DWORD PTR Timestamp0$[rsp]
	mov	ecx, DWORD PTR Timestamp1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61625
	call	printf

; 1130 : 		std::printf("sign_if(linear_cal) Time %d clocks\n", static_cast<unsigned int>(Timestamp2 - Timestamp1));

	mov	eax, DWORD PTR Timestamp1$[rsp]
	mov	ecx, DWORD PTR Timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61626
	call	printf

; 1131 : 		std::printf("sign_alu1(linear_cal) Time %d clocks\n", static_cast<unsigned int>(Timestamp3 - Timestamp2));

	mov	eax, DWORD PTR Timestamp2$[rsp]
	mov	ecx, DWORD PTR Timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61627
	call	printf

; 1132 : 		std::printf("sign_alu2(linear_cal) Time %d clocks\n", static_cast<unsigned int>(Timestamp4 - Timestamp3));

	mov	eax, DWORD PTR Timestamp3$[rsp]
	mov	ecx, DWORD PTR Timestamp4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61628
	call	printf

; 1133 : 		std::printf("sign_sub(linear_cal) Time %d clocks\n", static_cast<unsigned int>(Timestamp5 - Timestamp4));

	mov	eax, DWORD PTR Timestamp4$[rsp]
	mov	ecx, DWORD PTR Timestamp5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61629
	call	printf

; 1134 : 
; 1135 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 1136 : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?perf_linear_cal@sign@@YAH_K@Z ENDP			; sign::perf_linear_cal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
$T11 = 260
tv85 = 264
tv128 = 268
tv139 = 272
tv150 = 276
tv161 = 280
Samples$ = 304
?perf_linear@sign@@YAH_K@Z PROC				; sign::perf_linear

; 1047 : 	{

$LN23:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+304]

; 1048 : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 1049 : 
; 1050 : 		std::size_t const Count = Samples;

	mov	rax, QWORD PTR Samples$[rsp]
	mov	QWORD PTR Count$[rsp], rax

; 1051 : 		std::vector<glm::int32> Input, Output;

	lea	rcx, QWORD PTR Input$[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1
	lea	rcx, QWORD PTR Output$[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 1052 : 		Input.resize(Count);

	mov	rdx, QWORD PTR Count$[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 1053 : 		Output.resize(Count);

	mov	rdx, QWORD PTR Count$[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 1054 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@perf_linea
$LN2@perf_linea:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN3@perf_linea

; 1055 : 			Input[i] = static_cast<glm::int32>(i);

	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR i$5[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf_linea
$LN3@perf_linea:

; 1056 : 
; 1057 : 		std::clock_t Timestamp0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp0$[rsp], eax

; 1058 : 
; 1059 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@perf_linea
$LN5@perf_linea:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN7@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$6[rsp], rax
	jae	SHORT $LN6@perf_linea

; 1060 : 			Output[i] = sign_cmp(Input[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_cmp@H@sign@@YAHH@Z		; sign::sign_cmp<int>
	mov	DWORD PTR tv85[rsp], eax
	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv85[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf_linea
$LN6@perf_linea:

; 1061 : 
; 1062 : 		std::clock_t Timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp1$[rsp], eax

; 1063 : 
; 1064 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN10@perf_linea
$LN8@perf_linea:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN10@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$7[rsp], rax
	jae	SHORT $LN9@perf_linea

; 1065 : 			Output[i] = sign_if(Input[i]);

	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_if@H@sign@@YAHH@Z		; sign::sign_if<int>
	mov	DWORD PTR tv128[rsp], eax
	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv128[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN8@perf_linea
$LN9@perf_linea:

; 1066 : 
; 1067 : 		std::clock_t Timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp2$[rsp], eax

; 1068 : 
; 1069 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@perf_linea
$LN11@perf_linea:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN13@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$8[rsp], rax
	jae	SHORT $LN12@perf_linea

; 1070 : 			Output[i] = sign_alu1(Input[i]);

	mov	rdx, QWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_alu1@H@sign@@YAHH@Z		; sign::sign_alu1<int>
	mov	DWORD PTR tv139[rsp], eax
	mov	rdx, QWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv139[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN11@perf_linea
$LN12@perf_linea:

; 1071 : 
; 1072 : 		std::clock_t Timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp3$[rsp], eax

; 1073 : 
; 1074 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$9[rsp], 0
	jmp	SHORT $LN16@perf_linea
$LN14@perf_linea:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN16@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$9[rsp], rax
	jae	SHORT $LN15@perf_linea

; 1075 : 			Output[i] = sign_alu2(Input[i]);

	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_alu2@H@sign@@YAHH@Z		; sign::sign_alu2<int>
	mov	DWORD PTR tv150[rsp], eax
	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv150[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN14@perf_linea
$LN15@perf_linea:

; 1076 : 
; 1077 : 		std::clock_t Timestamp4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp4$[rsp], eax

; 1078 : 
; 1079 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$10[rsp], 0
	jmp	SHORT $LN19@perf_linea
$LN17@perf_linea:
	mov	rax, QWORD PTR i$10[rsp]
	inc	rax
	mov	QWORD PTR i$10[rsp], rax
$LN19@perf_linea:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$10[rsp], rax
	jae	SHORT $LN18@perf_linea

; 1080 : 			Output[i] = sign_sub(Input[i]);

	mov	rdx, QWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_sub@H@sign@@YAHH@Z		; sign::sign_sub<int>
	mov	DWORD PTR tv161[rsp], eax
	mov	rdx, QWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv161[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN17@perf_linea
$LN18@perf_linea:

; 1081 : 
; 1082 : 		std::clock_t Timestamp5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp5$[rsp], eax

; 1083 : 
; 1084 : 		std::printf("sign_cmp(linear) Time %d clocks\n", static_cast<unsigned int>(Timestamp1 - Timestamp0));

	mov	eax, DWORD PTR Timestamp0$[rsp]
	mov	ecx, DWORD PTR Timestamp1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61579
	call	printf

; 1085 : 		std::printf("sign_if(linear) Time %d clocks\n", static_cast<unsigned int>(Timestamp2 - Timestamp1));

	mov	eax, DWORD PTR Timestamp1$[rsp]
	mov	ecx, DWORD PTR Timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61580
	call	printf

; 1086 : 		std::printf("sign_alu1(linear) Time %d clocks\n", static_cast<unsigned int>(Timestamp3 - Timestamp2));

	mov	eax, DWORD PTR Timestamp2$[rsp]
	mov	ecx, DWORD PTR Timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61581
	call	printf

; 1087 : 		std::printf("sign_alu2(linear) Time %d clocks\n", static_cast<unsigned int>(Timestamp4 - Timestamp3));

	mov	eax, DWORD PTR Timestamp3$[rsp]
	mov	ecx, DWORD PTR Timestamp4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61582
	call	printf

; 1088 : 		std::printf("sign_sub(linear) Time %d clocks\n", static_cast<unsigned int>(Timestamp5 - Timestamp4));

	mov	eax, DWORD PTR Timestamp4$[rsp]
	mov	ecx, DWORD PTR Timestamp5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61583
	call	printf

; 1089 : 
; 1090 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T11[rsp], eax
	lea	rcx, QWORD PTR Output$[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	npad	1
	lea	rcx, QWORD PTR Input$[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR $T11[rsp]

; 1091 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_linear@sign@@YAH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 288				; 00000120H
	pop	rdi
	ret	0
?perf_linear@sign@@YAH_K@Z ENDP				; sign::perf_linear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
$T11 = 260
tv85 = 264
tv128 = 268
tv139 = 272
tv150 = 276
tv161 = 280
Samples$ = 304
?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA PROC		; `sign::perf_linear'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Input$[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_linear@sign@@YAH_K@Z@4HA ENDP		; `sign::perf_linear'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
$T11 = 260
tv85 = 264
tv128 = 268
tv139 = 272
tv150 = 276
tv161 = 280
Samples$ = 304
?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA PROC		; `sign::perf_linear'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Output$[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??perf_linear@sign@@YAH_K@Z@4HA ENDP		; `sign::perf_linear'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??$sign_sub@H@sign@@YAHH@Z
_TEXT	SEGMENT
x$ = 16
??$sign_sub@H@sign@@YAHH@Z PROC				; sign::sign_sub<int>, COMDAT

; 859  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 860  : 		GLM_STATIC_ASSERT(
; 861  : 			std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer, 
; 862  : 			"'sign' only accept integer inputs");
; 863  : 
; 864  : 		return ((unsigned)-x >> 31) - ((unsigned)x >> 31);

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	shr	eax, 31
	mov	ecx, DWORD PTR x$[rsp]
	shr	ecx, 31
	sub	eax, ecx

; 865  : 	}

	pop	rdi
	ret	0
??$sign_sub@H@sign@@YAHH@Z ENDP				; sign::sign_sub<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\random.inl
;	COMDAT ??$linearRand@M@glm@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
$T3 = 56
tv66 = 64
Min$ = 96
Max$ = 104
??$linearRand@M@glm@@YAMMM@Z PROC			; glm::linearRand<float>, COMDAT

; 260  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 80					; 00000050H

; 261  : 		return detail::compute_linearRand<genType, highp, tvec1>::call(

	movss	xmm1, DWORD PTR Max$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR Min$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	?call@?$compute_linearRand@M$0A@Utvec1@glm@@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_linearRand<float,0,glm::tvec1>::call
	movss	xmm0, DWORD PTR [rax]

; 262  : 			tvec1<genType, highp>(Min),
; 263  : 			tvec1<genType, highp>(Max)).x;
; 264  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$linearRand@M@glm@@YAMMM@Z ENDP			; glm::linearRand<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ PROC ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ENDP ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ PROC ; std::vector<int,std::allocator<int> >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$allocator@H@2@XZ ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ENDP ; std::vector<int,std::allocator<int> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@HV?$allocator@H@std@@@std@@AEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ PROC ; std::vector<int,std::allocator<int> >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@HV?$allocator@H@std@@@std@@CAXXZ ENDP ; std::vector<int,std::allocator<int> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z PROC ; std::vector<int,std::allocator<int> >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@H@std@@@std@@YAXPEAHQEAHAEAV?$allocator@H@0@@Z ; std::_Destroy_range<std::allocator<int> >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 2
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ; std::allocator<int>::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@HV?$allocator@H@std@@@std@@AEAAXQEAH_K1@Z ENDP ; std::vector<int,std::allocator<int> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z PROC ; std::vector<int,std::allocator<int> >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@HV?$allocator@H@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 2
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ENDP ; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 2

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEBAAEBV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::_Default_allocator_traits<std::allocator<int> >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Newsize$ = 72
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z PROC ; std::vector<int,std::allocator<int> >::resize, COMDAT

; 1436 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1437 :         // trim or append value-initialized elements, provide strong guarantee
; 1438 :         _Resize(_Newsize, _Value_init_tag{});

	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@HV?$allocator@H@std@@@std@@AEAAX_KAEBU_Value_init_tag@1@@Z ; std::vector<int,std::allocator<int> >::_Resize<std::_Value_init_tag>

; 1439 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ENDP ; std::vector<int,std::allocator<int> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@AEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@H@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::allocator<int>,std::_Vector_val<std::_Simple_types<int> >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@HV?$allocator@H@std@@@std@@AEAAAEAV?$allocator@H@2@XZ ; std::vector<int,std::allocator<int> >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0H@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@H@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><int>
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<int> >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 4611686018427387903		; 3fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z PROC		; std::allocator<int>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$03@std@@YA_K_K@Z	; std::_Get_size_of_n<4>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z PROC	; std::allocator<int>::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@H@std@@QEAAXQEAH_K@Z ENDP	; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@H@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@H@std@@QEAA@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@H@std@@QEAA@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
i$11 = 264
Timestamp6$ = 272
$T12 = 276
tv82 = 280
tv89 = 284
tv132 = 288
tv143 = 292
tv154 = 296
tv165 = 300
tv176 = 304
Samples$ = 336
?perf_rand@sign@@YAH_K@Z PROC				; sign::perf_rand

; 994  : 	{

$LN26:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+336]

; 995  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 996  : 
; 997  : 		std::size_t const Count = Samples;

	mov	rax, QWORD PTR Samples$[rsp]
	mov	QWORD PTR Count$[rsp], rax

; 998  : 		std::vector<glm::int32> Input, Output;

	lea	rcx, QWORD PTR Input$[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1
	lea	rcx, QWORD PTR Output$[rsp]
	call	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
	npad	1

; 999  : 		Input.resize(Count);

	mov	rdx, QWORD PTR Count$[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 1000 : 		Output.resize(Count);

	mov	rdx, QWORD PTR Count$[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	?resize@?$vector@HV?$allocator@H@std@@@std@@QEAAX_K@Z ; std::vector<int,std::allocator<int> >::resize

; 1001 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@perf_rand
$LN2@perf_rand:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$5[rsp], rax
	jae	SHORT $LN3@perf_rand

; 1002 : 			Input[i] = static_cast<glm::int32>(glm::linearRand(-65536.f, 65536.f));

	movss	xmm1, DWORD PTR __real@47800000
	movss	xmm0, DWORD PTR __real@c7800000
	call	??$linearRand@M@glm@@YAMMM@Z		; glm::linearRand<float>
	cvttss2si eax, xmm0
	mov	DWORD PTR tv82[rsp], eax
	mov	rdx, QWORD PTR i$5[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv82[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN2@perf_rand
$LN3@perf_rand:

; 1003 : 
; 1004 : 		std::clock_t Timestamp0 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp0$[rsp], eax

; 1005 : 
; 1006 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@perf_rand
$LN5@perf_rand:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN7@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$6[rsp], rax
	jae	SHORT $LN6@perf_rand

; 1007 : 			Output[i] = sign_cmp(Input[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_cmp@H@sign@@YAHH@Z		; sign::sign_cmp<int>
	mov	DWORD PTR tv89[rsp], eax
	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv89[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN5@perf_rand
$LN6@perf_rand:

; 1008 : 
; 1009 : 		std::clock_t Timestamp1 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp1$[rsp], eax

; 1010 : 
; 1011 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN10@perf_rand
$LN8@perf_rand:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN10@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$7[rsp], rax
	jae	SHORT $LN9@perf_rand

; 1012 : 			Output[i] = sign_if(Input[i]);

	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_if@H@sign@@YAHH@Z		; sign::sign_if<int>
	mov	DWORD PTR tv132[rsp], eax
	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv132[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN8@perf_rand
$LN9@perf_rand:

; 1013 : 
; 1014 : 		std::clock_t Timestamp2 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp2$[rsp], eax

; 1015 : 
; 1016 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@perf_rand
$LN11@perf_rand:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN13@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$8[rsp], rax
	jae	SHORT $LN12@perf_rand

; 1017 : 			Output[i] = sign_alu1(Input[i]);

	mov	rdx, QWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_alu1@H@sign@@YAHH@Z		; sign::sign_alu1<int>
	mov	DWORD PTR tv143[rsp], eax
	mov	rdx, QWORD PTR i$8[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv143[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN11@perf_rand
$LN12@perf_rand:

; 1018 : 
; 1019 : 		std::clock_t Timestamp3 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp3$[rsp], eax

; 1020 : 
; 1021 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$9[rsp], 0
	jmp	SHORT $LN16@perf_rand
$LN14@perf_rand:
	mov	rax, QWORD PTR i$9[rsp]
	inc	rax
	mov	QWORD PTR i$9[rsp], rax
$LN16@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$9[rsp], rax
	jae	SHORT $LN15@perf_rand

; 1022 : 			Output[i] = sign_alu2(Input[i]);

	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_alu2@H@sign@@YAHH@Z		; sign::sign_alu2<int>
	mov	DWORD PTR tv154[rsp], eax
	mov	rdx, QWORD PTR i$9[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN14@perf_rand
$LN15@perf_rand:

; 1023 : 
; 1024 : 		std::clock_t Timestamp4 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp4$[rsp], eax

; 1025 : 
; 1026 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$10[rsp], 0
	jmp	SHORT $LN19@perf_rand
$LN17@perf_rand:
	mov	rax, QWORD PTR i$10[rsp]
	inc	rax
	mov	QWORD PTR i$10[rsp], rax
$LN19@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$10[rsp], rax
	jae	SHORT $LN18@perf_rand

; 1027 : 			Output[i] = sign_sub(Input[i]);

	mov	rdx, QWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign_sub@H@sign@@YAHH@Z		; sign::sign_sub<int>
	mov	DWORD PTR tv165[rsp], eax
	mov	rdx, QWORD PTR i$10[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv165[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN17@perf_rand
$LN18@perf_rand:

; 1028 : 
; 1029 : 		std::clock_t Timestamp5 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp5$[rsp], eax

; 1030 : 
; 1031 : 		for(std::size_t i = 0; i < Count; ++i)

	mov	QWORD PTR i$11[rsp], 0
	jmp	SHORT $LN22@perf_rand
$LN20@perf_rand:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN22@perf_rand:
	mov	rax, QWORD PTR Count$[rsp]
	cmp	QWORD PTR i$11[rsp], rax
	jae	SHORT $LN21@perf_rand

; 1032 : 			Output[i] = glm::sign(Input[i]);

	mov	rdx, QWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR Input$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR [rax]
	call	??$sign@H@glm@@YAHH@Z			; glm::sign<int>
	mov	DWORD PTR tv176[rsp], eax
	mov	rdx, QWORD PTR i$11[rsp]
	lea	rcx, QWORD PTR Output$[rsp]
	call	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
	mov	ecx, DWORD PTR tv176[rsp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN20@perf_rand
$LN21@perf_rand:

; 1033 : 
; 1034 : 		std::clock_t Timestamp6 = std::clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR Timestamp6$[rsp], eax

; 1035 : 
; 1036 : 		std::printf("sign_cmp(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp1 - Timestamp0));

	mov	eax, DWORD PTR Timestamp0$[rsp]
	mov	ecx, DWORD PTR Timestamp1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61529
	call	printf

; 1037 : 		std::printf("sign_if(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp2 - Timestamp1));

	mov	eax, DWORD PTR Timestamp1$[rsp]
	mov	ecx, DWORD PTR Timestamp2$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61530
	call	printf

; 1038 : 		std::printf("sign_alu1(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp3 - Timestamp2));

	mov	eax, DWORD PTR Timestamp2$[rsp]
	mov	ecx, DWORD PTR Timestamp3$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61531
	call	printf

; 1039 : 		std::printf("sign_alu2(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp4 - Timestamp3));

	mov	eax, DWORD PTR Timestamp3$[rsp]
	mov	ecx, DWORD PTR Timestamp4$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61532
	call	printf

; 1040 : 		std::printf("sign_sub(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp5 - Timestamp4));

	mov	eax, DWORD PTR Timestamp4$[rsp]
	mov	ecx, DWORD PTR Timestamp5$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61533
	call	printf

; 1041 : 		std::printf("glm::sign(rand) Time %d clocks\n", static_cast<unsigned int>(Timestamp6 - Timestamp5));

	mov	eax, DWORD PTR Timestamp5$[rsp]
	mov	ecx, DWORD PTR Timestamp6$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG61534
	call	printf

; 1042 : 
; 1043 : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T12[rsp], eax
	lea	rcx, QWORD PTR Output$[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	npad	1
	lea	rcx, QWORD PTR Input$[rsp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	mov	eax, DWORD PTR $T12[rsp]

; 1044 : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?perf_rand@sign@@YAH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?perf_rand@sign@@YAH_K@Z ENDP				; sign::perf_rand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
i$11 = 264
Timestamp6$ = 272
$T12 = 276
tv82 = 280
tv89 = 284
tv132 = 288
tv143 = 292
tv154 = 296
tv165 = 300
tv176 = 304
Samples$ = 336
?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA PROC		; `sign::perf_rand'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Input$[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??perf_rand@sign@@YAH_K@Z@4HA ENDP		; `sign::perf_rand'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
Count$ = 40
Input$ = 56
Output$ = 120
i$5 = 168
Timestamp0$ = 176
i$6 = 184
Timestamp1$ = 192
i$7 = 200
Timestamp2$ = 208
i$8 = 216
Timestamp3$ = 224
i$9 = 232
Timestamp4$ = 240
i$10 = 248
Timestamp5$ = 256
i$11 = 264
Timestamp6$ = 272
$T12 = 276
tv82 = 280
tv89 = 284
tv132 = 288
tv143 = 292
tv154 = 296
tv165 = 300
tv176 = 304
Samples$ = 336
?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA PROC		; `sign::perf_rand'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR Output$[rbp]
	call	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??perf_rand@sign@@YAH_K@Z@4HA ENDP		; `sign::perf_rand'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
?test@sign@@YAHXZ PROC					; sign::test

; 983  : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 984  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 985  : 
; 986  : 		Error += test_int32();

	call	?test_int32@sign@@YAHXZ			; sign::test_int32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 987  : 		Error += test_i32vec4();

	call	?test_i32vec4@sign@@YAHXZ		; sign::test_i32vec4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 988  : 		Error += test_f32vec4();

	call	?test_f32vec4@sign@@YAHXZ		; sign::test_f32vec4
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 989  : 
; 990  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 991  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?test@sign@@YAHXZ ENDP					; sign::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::sign<float,0,glm::tvec4>, COMDAT

; 334  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 335  : 		GLM_STATIC_ASSERT(
; 336  : 			std::numeric_limits<T>::is_iec559 || (std::numeric_limits<T>::is_signed && std::numeric_limits<T>::is_integer),
; 337  : 			"'sign' only accept signed inputs");
; 338  : 
; 339  : 		return detail::compute_sign<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sign@M$0A@Utvec4@glm@@$00$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<float,0,glm::tvec4,1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::sign<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 276
i$5 = 280
Result$6 = 296
$T7 = 336
tv142 = 340
__$ArrayPad$ = 344
?test_f32vec4@sign@@YAHXZ PROC				; sign::test_f32vec4

; 959  : 	{

$LN8:
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 960  : 		type<glm::vec4> const Data[] =
; 961  : 		{
; 962  : 			{glm::vec4( 1), glm::vec4( 1)},

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Data$[rsp+16]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 963  : 			{glm::vec4( 0), glm::vec4( 0)},

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Data$[rsp+32]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Data$[rsp+48]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 964  : 			{glm::vec4( 2), glm::vec4( 1)},

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR Data$[rsp+64]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Data$[rsp+80]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 965  : 			{glm::vec4( 3), glm::vec4( 1)},

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR Data$[rsp+96]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR Data$[rsp+112]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 966  : 			{glm::vec4(-1), glm::vec4(-1)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR Data$[rsp+128]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR Data$[rsp+144]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 967  : 			{glm::vec4(-2), glm::vec4(-1)},

	movss	xmm1, DWORD PTR __real@c0000000
	lea	rcx, QWORD PTR Data$[rsp+160]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR Data$[rsp+176]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 968  : 			{glm::vec4(-3), glm::vec4(-1)}

	movss	xmm1, DWORD PTR __real@c0400000
	lea	rcx, QWORD PTR Data$[rsp+192]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR Data$[rsp+208]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 969  : 		};
; 970  : 
; 971  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 972  : 
; 973  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::vec4>); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@test_f32ve
$LN2@test_f32ve:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_f32ve:
	cmp	QWORD PTR i$5[rsp], 7
	jae	$LN3@test_f32ve

; 974  : 		{
; 975  : 			glm::vec4 Result = glm::sign(Data[i].Value);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$6[rsp]
	call	??$sign@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::sign<float,0,glm::tvec4>

; 976  : 			Error += glm::all(glm::equal(Data[i].Return, Result)) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+16]
	lea	r8, QWORD PTR Result$6[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_f32ve
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN7@test_f32ve
$LN6@test_f32ve:
	mov	DWORD PTR tv142[rsp], 1
$LN7@test_f32ve:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 977  : 		}

	jmp	$LN2@test_f32ve
$LN3@test_f32ve:

; 978  : 
; 979  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 980  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_f32vec4@sign@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
?test_f32vec4@sign@@YAHXZ ENDP				; sign::test_f32vec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z PROC ; glm::equal<int,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z	; glm::tvec4<int,0>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv80[rsp]
	cmp	DWORD PTR [rcx], eax
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ENDP ; glm::equal<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z PROC ; glm::sign<int,0,glm::tvec4>, COMDAT

; 334  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 335  : 		GLM_STATIC_ASSERT(
; 336  : 			std::numeric_limits<T>::is_iec559 || (std::numeric_limits<T>::is_signed && std::numeric_limits<T>::is_integer),
; 337  : 			"'sign' only accept signed inputs");
; 338  : 
; 339  : 		return detail::compute_sign<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_sign@H$0A@Utvec4@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec4@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec4,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 340  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ENDP ; glm::sign<int,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 276
i$5 = 280
Result$6 = 296
$T7 = 336
tv142 = 340
__$ArrayPad$ = 344
?test_i32vec4@sign@@YAHXZ PROC				; sign::test_i32vec4

; 935  : 	{

$LN8:
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 936  : 		type<glm::i32vec4> const Data[] =
; 937  : 		{
; 938  : 			{glm::i32vec4( 1), glm::i32vec4( 1)},

	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+16]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 939  : 			{glm::i32vec4( 0), glm::i32vec4( 0)},

	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp+32]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	xor	edx, edx
	lea	rcx, QWORD PTR Data$[rsp+48]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 940  : 			{glm::i32vec4( 2), glm::i32vec4( 1)},

	mov	edx, 2
	lea	rcx, QWORD PTR Data$[rsp+64]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+80]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 941  : 			{glm::i32vec4( 3), glm::i32vec4( 1)},

	mov	edx, 3
	lea	rcx, QWORD PTR Data$[rsp+96]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, 1
	lea	rcx, QWORD PTR Data$[rsp+112]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 942  : 			{glm::i32vec4(-1), glm::i32vec4(-1)},

	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+128]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+144]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 943  : 			{glm::i32vec4(-2), glm::i32vec4(-1)},

	mov	edx, -2
	lea	rcx, QWORD PTR Data$[rsp+160]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+176]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 944  : 			{glm::i32vec4(-3), glm::i32vec4(-1)}

	mov	edx, -3
	lea	rcx, QWORD PTR Data$[rsp+192]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>
	mov	edx, -1
	lea	rcx, QWORD PTR Data$[rsp+208]
	call	??0?$tvec4@H$0A@@glm@@QEAA@H@Z		; glm::tvec4<int,0>::tvec4<int,0>

; 945  : 		};
; 946  : 
; 947  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 948  : 
; 949  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::i32vec4>); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@test_i32ve
$LN2@test_i32ve:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test_i32ve:
	cmp	QWORD PTR i$5[rsp], 7
	jae	$LN3@test_i32ve

; 950  : 		{
; 951  : 			glm::i32vec4 Result = glm::sign(Data[i].Value);

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$6[rsp]
	call	??$sign@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU10@@Z ; glm::sign<int,0,glm::tvec4>

; 952  : 			Error += glm::all(glm::equal(Data[i].Return, Result)) ? 0 : 1;

	imul	rax, QWORD PTR i$5[rsp], 32		; 00000020H
	lea	rax, QWORD PTR Data$[rsp+rax+16]
	lea	r8, QWORD PTR Result$6[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$equal@H$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@H$0A@@0@0@Z ; glm::equal<int,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_i32ve
	mov	DWORD PTR tv142[rsp], 0
	jmp	SHORT $LN7@test_i32ve
$LN6@test_i32ve:
	mov	DWORD PTR tv142[rsp], 1
$LN7@test_i32ve:
	mov	eax, DWORD PTR tv142[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 953  : 		}

	jmp	$LN2@test_i32ve
$LN3@test_i32ve:

; 954  : 
; 955  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 956  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_i32vec4@sign@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
?test_i32vec4@sign@@YAHXZ ENDP				; sign::test_i32vec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??$sign_alu2@H@sign@@YAHH@Z
_TEXT	SEGMENT
x$ = 16
??$sign_alu2@H@sign@@YAHH@Z PROC			; sign::sign_alu2<int>, COMDAT

; 849  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 850  : 		GLM_STATIC_ASSERT(
; 851  : 			std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer, 
; 852  : 			"'sign' only accept integer inputs");
; 853  : 
; 854  : 		return -((unsigned)x >> 31) | (-(unsigned)x >> 31);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 31
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	neg	ecx
	shr	ecx, 31
	or	eax, ecx

; 855  : 	}

	pop	rdi
	ret	0
??$sign_alu2@H@sign@@YAHH@Z ENDP			; sign::sign_alu2<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??$sign_alu1@H@sign@@YAHH@Z
_TEXT	SEGMENT
x$ = 16
??$sign_alu1@H@sign@@YAHH@Z PROC			; sign::sign_alu1<int>, COMDAT

; 839  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 840  : 		GLM_STATIC_ASSERT(
; 841  : 			std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer, 
; 842  : 			"'sign' only accept integer inputs");
; 843  : 
; 844  : 		return (x >> 31) | ((unsigned)-x >> 31);

	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 31
	mov	ecx, DWORD PTR x$[rsp]
	neg	ecx
	shr	ecx, 31
	or	eax, ecx

; 845  : 	}

	pop	rdi
	ret	0
??$sign_alu1@H@sign@@YAHH@Z ENDP			; sign::sign_alu1<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??$sign_if@H@sign@@YAHH@Z
_TEXT	SEGMENT
result$ = 0
x$ = 32
??$sign_if@H@sign@@YAHH@Z PROC				; sign::sign_if<int>, COMDAT

; 822  : 	{

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 823  : 		GLM_STATIC_ASSERT(
; 824  : 			std::numeric_limits<genFIType>::is_iec559 ||
; 825  : 			(std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer), "'sign' only accept signed inputs");
; 826  : 
; 827  : 		genFIType result;
; 828  : 		if(x > genFIType(0))

	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN2@sign_if

; 829  : 			result = genFIType(1);

	mov	DWORD PTR result$[rsp], 1
	jmp	SHORT $LN3@sign_if
$LN2@sign_if:

; 830  : 		else if(x < genFIType(0))

	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN4@sign_if

; 831  : 			result = genFIType(-1);

	mov	DWORD PTR result$[rsp], -1
	jmp	SHORT $LN5@sign_if
$LN4@sign_if:

; 832  : 		else
; 833  : 			result = genFIType(0);

	mov	DWORD PTR result$[rsp], 0
$LN5@sign_if:
$LN3@sign_if:

; 834  : 		return result;

	mov	eax, DWORD PTR result$[rsp]

; 835  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$sign_if@H@sign@@YAHH@Z ENDP				; sign::sign_if<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??$sign_cmp@H@sign@@YAHH@Z
_TEXT	SEGMENT
tv65 = 0
tv67 = 4
x$ = 32
??$sign_cmp@H@sign@@YAHH@Z PROC				; sign::sign_cmp<int>, COMDAT

; 869  : 	{

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 870  : 		GLM_STATIC_ASSERT(
; 871  : 			std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer, 
; 872  : 			"'sign' only accept integer inputs");
; 873  : 
; 874  : 		return (x > 0) - (x < 0);

	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN3@sign_cmp
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@sign_cmp
$LN3@sign_cmp:
	mov	DWORD PTR tv65[rsp], 0
$LN4@sign_cmp:
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN5@sign_cmp
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@sign_cmp
$LN5@sign_cmp:
	mov	DWORD PTR tv67[rsp], 0
$LN6@sign_cmp:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR tv65[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$sign_cmp@H@sign@@YAHH@Z ENDP				; sign::sign_cmp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$sign@H@glm@@YAHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
x$ = 64
??$sign@H@glm@@YAHH@Z PROC				; glm::sign<int>, COMDAT

; 324  : 	{

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 325  : 		GLM_STATIC_ASSERT(
; 326  : 			std::numeric_limits<genFIType>::is_iec559 || (std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer),
; 327  : 			"'sign' only accept signed inputs");
; 328  : 		
; 329  : 		return detail::compute_sign<genFIType, defaultp, tvec1, std::numeric_limits<genFIType>::is_iec559, highp>::call(tvec1<genFIType>(x)).x;

	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@H$0A@@glm@@QEAA@H@Z		; glm::tvec1<int,0>::tvec1<int,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_sign@H$0A@Utvec1@glm@@$0A@$0A@@detail@glm@@SA?AU?$tvec1@H$0A@@3@AEBU43@@Z ; glm::detail::compute_sign<int,0,glm::tvec1,0,0>::call
	mov	eax, DWORD PTR [rax]

; 330  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$sign@H@glm@@YAHH@Z ENDP				; glm::sign<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Data$ = 48
Error$ = 132
i$4 = 136
Result$5 = 144
i$6 = 152
Result$7 = 160
i$8 = 168
Result$9 = 176
i$10 = 184
Result$11 = 192
i$12 = 200
Result$13 = 208
tv77 = 224
tv90 = 228
tv167 = 232
tv180 = 236
tv193 = 240
__$ArrayPad$ = 248
?test_int32@sign@@YAHXZ PROC				; sign::test_int32

; 885  : 	{

$LN28:
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 886  : 		type<glm::int32> const Data[] =
; 887  : 		{
; 888  : 			{ std::numeric_limits<glm::int32>::max(),  1},

	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR Data$[rsp], eax
	mov	DWORD PTR Data$[rsp+4], 1

; 889  : 			{ std::numeric_limits<glm::int32>::min(), -1},

	call	?min@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::min
	mov	DWORD PTR Data$[rsp+8], eax
	mov	DWORD PTR Data$[rsp+12], -1

; 890  : 			{ 0, 0},

	mov	DWORD PTR Data$[rsp+16], 0
	mov	DWORD PTR Data$[rsp+20], 0

; 891  : 			{ 1, 1},

	mov	DWORD PTR Data$[rsp+24], 1
	mov	DWORD PTR Data$[rsp+28], 1

; 892  : 			{ 2, 1},

	mov	DWORD PTR Data$[rsp+32], 2
	mov	DWORD PTR Data$[rsp+36], 1

; 893  : 			{ 3, 1},

	mov	DWORD PTR Data$[rsp+40], 3
	mov	DWORD PTR Data$[rsp+44], 1

; 894  : 			{-1,-1},

	mov	DWORD PTR Data$[rsp+48], -1
	mov	DWORD PTR Data$[rsp+52], -1

; 895  : 			{-2,-1},

	mov	DWORD PTR Data$[rsp+56], -2
	mov	DWORD PTR Data$[rsp+60], -1

; 896  : 			{-3,-1}

	mov	DWORD PTR Data$[rsp+64], -3
	mov	DWORD PTR Data$[rsp+68], -1

; 897  : 		};
; 898  : 
; 899  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 900  : 
; 901  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::int32>); ++i)

	mov	QWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@test_int32
$LN2@test_int32:
	mov	rax, QWORD PTR i$4[rsp]
	inc	rax
	mov	QWORD PTR i$4[rsp], rax
$LN4@test_int32:
	cmp	QWORD PTR i$4[rsp], 9
	jae	SHORT $LN3@test_int32

; 902  : 		{
; 903  : 			glm::int32 Result = glm::sign(Data[i].Value);

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$sign@H@glm@@YAHH@Z			; glm::sign<int>
	mov	DWORD PTR Result$5[rsp], eax

; 904  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$4[rsp]
	mov	ecx, DWORD PTR Result$5[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN18@test_int32
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN19@test_int32
$LN18@test_int32:
	mov	DWORD PTR tv77[rsp], 1
$LN19@test_int32:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 905  : 		}

	jmp	SHORT $LN2@test_int32
$LN3@test_int32:

; 906  : 
; 907  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::int32>); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@test_int32
$LN5@test_int32:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN7@test_int32:
	cmp	QWORD PTR i$6[rsp], 9
	jae	SHORT $LN6@test_int32

; 908  : 		{
; 909  : 			glm::int32 Result = sign_cmp(Data[i].Value);

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$sign_cmp@H@sign@@YAHH@Z		; sign::sign_cmp<int>
	mov	DWORD PTR Result$7[rsp], eax

; 910  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$6[rsp]
	mov	ecx, DWORD PTR Result$7[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN20@test_int32
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN21@test_int32
$LN20@test_int32:
	mov	DWORD PTR tv90[rsp], 1
$LN21@test_int32:
	mov	eax, DWORD PTR tv90[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 911  : 		}

	jmp	SHORT $LN5@test_int32
$LN6@test_int32:

; 912  : 
; 913  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::int32>); ++i)

	mov	QWORD PTR i$8[rsp], 0
	jmp	SHORT $LN10@test_int32
$LN8@test_int32:
	mov	rax, QWORD PTR i$8[rsp]
	inc	rax
	mov	QWORD PTR i$8[rsp], rax
$LN10@test_int32:
	cmp	QWORD PTR i$8[rsp], 9
	jae	SHORT $LN9@test_int32

; 914  : 		{
; 915  : 			glm::int32 Result = sign_if(Data[i].Value);

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$sign_if@H@sign@@YAHH@Z		; sign::sign_if<int>
	mov	DWORD PTR Result$9[rsp], eax

; 916  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$8[rsp]
	mov	ecx, DWORD PTR Result$9[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN22@test_int32
	mov	DWORD PTR tv167[rsp], 0
	jmp	SHORT $LN23@test_int32
$LN22@test_int32:
	mov	DWORD PTR tv167[rsp], 1
$LN23@test_int32:
	mov	eax, DWORD PTR tv167[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 917  : 		}

	jmp	SHORT $LN8@test_int32
$LN9@test_int32:

; 918  : 
; 919  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::int32>); ++i)

	mov	QWORD PTR i$10[rsp], 0
	jmp	SHORT $LN13@test_int32
$LN11@test_int32:
	mov	rax, QWORD PTR i$10[rsp]
	inc	rax
	mov	QWORD PTR i$10[rsp], rax
$LN13@test_int32:
	cmp	QWORD PTR i$10[rsp], 9
	jae	SHORT $LN12@test_int32

; 920  : 		{
; 921  : 			glm::int32 Result = sign_alu1(Data[i].Value);

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$sign_alu1@H@sign@@YAHH@Z		; sign::sign_alu1<int>
	mov	DWORD PTR Result$11[rsp], eax

; 922  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$10[rsp]
	mov	ecx, DWORD PTR Result$11[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN24@test_int32
	mov	DWORD PTR tv180[rsp], 0
	jmp	SHORT $LN25@test_int32
$LN24@test_int32:
	mov	DWORD PTR tv180[rsp], 1
$LN25@test_int32:
	mov	eax, DWORD PTR tv180[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 923  : 		}

	jmp	SHORT $LN11@test_int32
$LN12@test_int32:

; 924  : 
; 925  : 		for(std::size_t i = 0; i < sizeof(Data) / sizeof(type<glm::int32>); ++i)

	mov	QWORD PTR i$12[rsp], 0
	jmp	SHORT $LN16@test_int32
$LN14@test_int32:
	mov	rax, QWORD PTR i$12[rsp]
	inc	rax
	mov	QWORD PTR i$12[rsp], rax
$LN16@test_int32:
	cmp	QWORD PTR i$12[rsp], 9
	jae	SHORT $LN15@test_int32

; 926  : 		{
; 927  : 			glm::int32 Result = sign_alu2(Data[i].Value);

	mov	rax, QWORD PTR i$12[rsp]
	mov	ecx, DWORD PTR Data$[rsp+rax*8]
	call	??$sign_alu2@H@sign@@YAHH@Z		; sign::sign_alu2<int>
	mov	DWORD PTR Result$13[rsp], eax

; 928  : 			Error += Data[i].Return == Result ? 0 : 1;

	mov	rax, QWORD PTR i$12[rsp]
	mov	ecx, DWORD PTR Result$13[rsp]
	cmp	DWORD PTR Data$[rsp+rax*8+4], ecx
	jne	SHORT $LN26@test_int32
	mov	DWORD PTR tv193[rsp], 0
	jmp	SHORT $LN27@test_int32
$LN26@test_int32:
	mov	DWORD PTR tv193[rsp], 1
$LN27@test_int32:
	mov	eax, DWORD PTR tv193[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 929  : 		}

	jmp	SHORT $LN14@test_int32
$LN15@test_int32:

; 930  : 
; 931  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 932  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_int32@sign@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?test_int32@sign@@YAHXZ ENDP				; sign::test_int32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::isinf<float,0,glm::tvec4>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@M@@YA_NM@Z	; isinf<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::isinf<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::isinf<float,0,glm::tvec3>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@M@@YA_NM@Z	; isinf<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::isinf<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::isinf<float,0,glm::tvec2>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@M@@YA_NM@Z	; isinf<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::isinf<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isinf@M@@YA_NM@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isinf@M@@YA_NM@Z PROC				; isinf<float>, COMDAT

; 406  :     {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 407  :         return fpclassify(_X) == FP_INFINITE;

	movss	xmm0, DWORD PTR _X$[rsp]
	call	?fpclassify@@YAHM@Z			; fpclassify
	cmp	eax, 1
	jne	SHORT $LN3@isinf
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isinf
$LN3@isinf:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isinf:
	movzx	eax, BYTE PTR tv67[rsp]

; 408  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isinf@M@@YA_NM@Z ENDP				; isinf<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z PROC ; glm::isinf<double,0,glm::tvec4>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@N@@YA_NN@Z	; isinf<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ENDP ; glm::isinf<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z PROC ; glm::isinf<double,0,glm::tvec3>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@N@@YA_NN@Z	; isinf<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ENDP ; glm::isinf<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z PROC ; glm::isinf<double,0,glm::tvec2>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 692  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 693  : 
; 694  : 		return detail::functor1<bool, T, P, vecType>::call(isinf, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isinf@N@@YA_NN@Z	; isinf<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 695  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ENDP ; glm::isinf<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isinf@N@@YA_NN@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isinf@N@@YA_NN@Z PROC				; isinf<double>, COMDAT

; 406  :     {

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 407  :         return fpclassify(_X) == FP_INFINITE;

	movsd	xmm0, QWORD PTR _X$[rsp]
	call	?fpclassify@@YAHN@Z			; fpclassify
	cmp	eax, 1
	jne	SHORT $LN3@isinf
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isinf
$LN3@isinf:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isinf:
	movzx	eax, BYTE PTR tv67[rsp]

; 408  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isinf@N@@YA_NN@Z ENDP				; isinf<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Zero_f$ = 36
Zero_d$ = 40
$T1 = 48
$T2 = 64
$T3 = 72
$T4 = 88
$T5 = 96
$T6 = 120
$T7 = 128
$T8 = 152
$T9 = 160
$T10 = 192
$T11 = 200
$T12 = 232
$T13 = 236
$T14 = 244
$T15 = 248
$T16 = 256
$T17 = 260
$T18 = 272
$T19 = 276
$T20 = 288
$T21 = 292
$T22 = 308
$T23 = 312
$T24 = 328
tv69 = 332
tv76 = 336
tv89 = 340
tv134 = 344
tv147 = 348
tv160 = 352
tv173 = 356
tv186 = 360
tv193 = 364
tv200 = 368
tv213 = 372
tv226 = 376
tv239 = 380
tv252 = 384
tv265 = 388
tv278 = 392
?test@isinf_@@YAHXZ PROC				; isinf_::test

; 786  : 	{

$LN35:
	push	rdi
	sub	rsp, 400				; 00000190H

; 787  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 788  : 
; 789  : 		float Zero_f = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR Zero_f$[rsp], xmm0

; 790  : 		double Zero_d = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR Zero_d$[rsp], xmm0

; 791  : 
; 792  : 		{
; 793  : 			Error += true == glm::isinf( 1.0/Zero_d) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	call	??$isinf@N@@YA_NN@Z			; isinf<double>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 794  : 			Error += true == glm::isinf(-1.0/Zero_d) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	call	??$isinf@N@@YA_NN@Z			; isinf<double>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN5@test
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv76[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 795  : 			Error += true == glm::any(glm::isinf(glm::dvec2( 1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN7@test
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv89[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv89[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 796  : 			Error += true == glm::any(glm::isinf(glm::dvec2(-1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$isinf@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 797  : 			Error += true == glm::any(glm::isinf(glm::dvec3( 1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN11@test
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv147[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv147[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 798  : 			Error += true == glm::any(glm::isinf(glm::dvec3(-1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$isinf@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN13@test
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv160[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 799  : 			Error += true == glm::any(glm::isinf(glm::dvec4( 1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN15@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv173[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 800  : 			Error += true == glm::any(glm::isinf(glm::dvec4(-1.0/Zero_d))) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@bff0000000000000
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$isinf@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isinf<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN17@test
	mov	DWORD PTR tv186[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv186[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv186[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 801  : 		}
; 802  : 
; 803  : 		{
; 804  : 			Error += true == glm::isinf( 1.0f/Zero_f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	call	??$isinf@M@@YA_NM@Z			; isinf<float>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN19@test
	mov	DWORD PTR tv193[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv193[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv193[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 805  : 			Error += true == glm::isinf(-1.0f/Zero_f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	call	??$isinf@M@@YA_NM@Z			; isinf<float>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN21@test
	mov	DWORD PTR tv200[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv200[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv200[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 806  : 			Error += true == glm::any(glm::isinf(glm::vec2( 1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN23@test
	mov	DWORD PTR tv213[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv213[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv213[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 807  : 			Error += true == glm::any(glm::isinf(glm::vec2(-1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T15[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$isinf@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN25@test
	mov	DWORD PTR tv226[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv226[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv226[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 808  : 			Error += true == glm::any(glm::isinf(glm::vec3( 1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN27@test
	mov	DWORD PTR tv239[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv239[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv239[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 809  : 			Error += true == glm::any(glm::isinf(glm::vec3(-1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$isinf@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN29@test
	mov	DWORD PTR tv252[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv252[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv252[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 810  : 			Error += true == glm::any(glm::isinf(glm::vec4( 1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN31@test
	mov	DWORD PTR tv265[rsp], 0
	jmp	SHORT $LN32@test
$LN31@test:
	mov	DWORD PTR tv265[rsp], 1
$LN32@test:
	mov	eax, DWORD PTR tv265[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 811  : 			Error += true == glm::any(glm::isinf(glm::vec4(-1.0f/Zero_f))) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@bf800000
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$isinf@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isinf<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN33@test
	mov	DWORD PTR tv278[rsp], 0
	jmp	SHORT $LN34@test
$LN33@test:
	mov	DWORD PTR tv278[rsp], 1
$LN34@test:
	mov	eax, DWORD PTR tv278[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 812  : 		}
; 813  : 
; 814  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 815  : 	}

	add	rsp, 400				; 00000190H
	pop	rdi
	ret	0
?test@isinf_@@YAHXZ ENDP				; isinf_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::isnan<float,0,glm::tvec4>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@M@@YA_NM@Z	; isnan<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NM@ZAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::isnan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::isnan<float,0,glm::tvec3>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@M@@YA_NM@Z	; isnan<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NM@ZAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::isnan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::isnan<float,0,glm::tvec2>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@M@@YA_NM@Z	; isnan<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NM@ZAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::functor1<bool,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::isnan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isnan@M@@YA_NM@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isnan@M@@YA_NM@Z PROC				; isnan<float>, COMDAT

; 412  :     {

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 413  :         return fpclassify(_X) == FP_NAN;

	movss	xmm0, DWORD PTR _X$[rsp]
	call	?fpclassify@@YAHM@Z			; fpclassify
	cmp	eax, 2
	jne	SHORT $LN3@isnan
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isnan
$LN3@isnan:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isnan:
	movzx	eax, BYTE PTR tv67[rsp]

; 414  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isnan@M@@YA_NM@Z ENDP				; isnan<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::any<0,glm::tvec4>, COMDAT

; 77   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 		bool Result = false;

	mov	BYTE PTR Result$[rsp], 0

; 79   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@any
$LN2@any:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@any:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@any

; 80   : 			Result = Result || v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN7@any
$LN6@any:
	mov	DWORD PTR tv74[rsp], 1
$LN7@any:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@any
$LN3@any:

; 81   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 82   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::any<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z PROC ; glm::isnan<double,0,glm::tvec4>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@N@@YA_NN@Z	; isnan<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@_N$0A@@3@P6A_NN@ZAEBU?$tvec4@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ENDP ; glm::isnan<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::any<0,glm::tvec3>, COMDAT

; 77   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 		bool Result = false;

	mov	BYTE PTR Result$[rsp], 0

; 79   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@any
$LN2@any:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@any:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@any

; 80   : 			Result = Result || v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN7@any
$LN6@any:
	mov	DWORD PTR tv74[rsp], 1
$LN7@any:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@any
$LN3@any:

; 81   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 82   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::any<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z PROC ; glm::isnan<double,0,glm::tvec3>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@N@@YA_NN@Z	; isnan<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@_N$0A@@3@P6A_NN@ZAEBU?$tvec3@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ENDP ; glm::isnan<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::any<0,glm::tvec2>, COMDAT

; 77   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 		bool Result = false;

	mov	BYTE PTR Result$[rsp], 0

; 79   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@any
$LN2@any:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@any:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@any

; 80   : 			Result = Result || v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN6@any
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN7@any
$LN6@any:
	mov	DWORD PTR tv74[rsp], 1
$LN7@any:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@any
$LN3@any:

; 81   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 82   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::any<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z PROC ; glm::isnan<double,0,glm::tvec2>, COMDAT

; 652  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 653  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");
; 654  : 
; 655  : 		return detail::functor1<bool, T, P, vecType>::call(isnan, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$isnan@N@@YA_NN@Z	; isnan<double>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@_NN$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@_N$0A@@3@P6A_NN@ZAEBU?$tvec2@N$0A@@3@@Z ; glm::detail::functor1<bool,double,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 656  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ENDP ; glm::isnan<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ??$isnan@N@@YA_NN@Z
_TEXT	SEGMENT
tv67 = 32
_X$ = 64
??$isnan@N@@YA_NN@Z PROC				; isnan<double>, COMDAT

; 412  :     {

$LN5:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 413  :         return fpclassify(_X) == FP_NAN;

	movsd	xmm0, QWORD PTR _X$[rsp]
	call	?fpclassify@@YAHN@Z			; fpclassify
	cmp	eax, 2
	jne	SHORT $LN3@isnan
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@isnan
$LN3@isnan:
	mov	DWORD PTR tv67[rsp], 0
$LN4@isnan:
	movzx	eax, BYTE PTR tv67[rsp]

; 414  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$isnan@N@@YA_NN@Z ENDP				; isnan<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
Zero_f$ = 36
Zero_d$ = 40
$T1 = 48
$T2 = 64
$T3 = 72
$T4 = 96
$T5 = 104
$T6 = 136
$T7 = 140
$T8 = 148
$T9 = 152
$T10 = 164
$T11 = 168
$T12 = 184
tv69 = 188
tv82 = 192
tv95 = 196
tv140 = 200
tv147 = 204
tv160 = 208
tv173 = 212
tv186 = 216
?test@isnan_@@YAHXZ PROC				; isnan_::test

; 759  : 	{

$LN19:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 760  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 761  : 
; 762  : 		float Zero_f = 0.0;

	xorps	xmm0, xmm0
	movss	DWORD PTR Zero_f$[rsp], xmm0

; 763  : 		double Zero_d = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR Zero_d$[rsp], xmm0

; 764  : 
; 765  : 		{
; 766  : 			Error += true == glm::isnan(0.0/Zero_d) ? 0 : 1;

	xorps	xmm0, xmm0
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	call	??$isnan@N@@YA_NN@Z			; isnan<double>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 767  : 			Error += true == glm::any(glm::isnan(glm::dvec2(0.0 / Zero_d))) ? 0 : 1;

	xorps	xmm0, xmm0
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$isnan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 768  : 			Error += true == glm::any(glm::isnan(glm::dvec3(0.0 / Zero_d))) ? 0 : 1;

	xorps	xmm0, xmm0
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$isnan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN7@test
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv95[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 769  : 			Error += true == glm::any(glm::isnan(glm::dvec4(0.0 / Zero_d))) ? 0 : 1;

	xorps	xmm0, xmm0
	divsd	xmm0, QWORD PTR Zero_d$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$isnan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@@Z ; glm::isnan<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN9@test
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv140[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 770  : 		}
; 771  : 
; 772  : 		{
; 773  : 			Error += true == glm::isnan(0.0f/Zero_f) ? 0 : 1;

	xorps	xmm0, xmm0
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	call	??$isnan@M@@YA_NM@Z			; isnan<float>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN11@test
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv147[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv147[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 774  : 			Error += true == glm::any(glm::isnan(glm::vec2(0.0f/Zero_f))) ? 0 : 1;

	xorps	xmm0, xmm0
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$isnan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$any@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::any<0,glm::tvec2>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN13@test
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv160[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 775  : 			Error += true == glm::any(glm::isnan(glm::vec3(0.0f/Zero_f))) ? 0 : 1;

	xorps	xmm0, xmm0
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$isnan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$any@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::any<0,glm::tvec3>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN15@test
	mov	DWORD PTR tv173[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv173[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv173[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 776  : 			Error += true == glm::any(glm::isnan(glm::vec4(0.0f/Zero_f))) ? 0 : 1;

	xorps	xmm0, xmm0
	divss	xmm0, DWORD PTR Zero_f$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$isnan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::isnan<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$any@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::any<0,glm::tvec4>
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN17@test
	mov	DWORD PTR tv186[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv186[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv186[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 777  : 		}
; 778  : 
; 779  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 780  : 	}

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test@isnan_@@YAHXZ ENDP				; isnan_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$roundEven@M@glm@@YAMM@Z
_TEXT	SEGMENT
Integer$ = 48
IntegerPart$ = 52
FractionalPart$ = 56
x$ = 80
??$roundEven@M@glm@@YAMM@Z PROC				; glm::roundEven<float>, COMDAT

; 379  : 	{

$LN10:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 380  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'roundEven' only accept floating-point inputs");
; 381  : 		
; 382  : 		int Integer = static_cast<int>(x);

	cvttss2si eax, DWORD PTR x$[rsp]
	mov	DWORD PTR Integer$[rsp], eax

; 383  : 		genType IntegerPart = static_cast<genType>(Integer);

	cvtsi2ss xmm0, DWORD PTR Integer$[rsp]
	movss	DWORD PTR IntegerPart$[rsp], xmm0

; 384  : 		genType FractionalPart = fract(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	??$fract@M@glm@@YAMM@Z			; glm::fract<float>
	movss	DWORD PTR FractionalPart$[rsp], xmm0

; 385  : 
; 386  : 		if(FractionalPart > static_cast<genType>(0.5) || FractionalPart < static_cast<genType>(0.5))

	movss	xmm0, DWORD PTR FractionalPart$[rsp]
	comiss	xmm0, DWORD PTR __real@3f000000
	ja	SHORT $LN4@roundEven
	movss	xmm0, DWORD PTR __real@3f000000
	comiss	xmm0, DWORD PTR FractionalPart$[rsp]
	jbe	SHORT $LN2@roundEven
$LN4@roundEven:

; 387  : 		{
; 388  : 			return round(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?round@@YAMM@Z				; round
	jmp	SHORT $LN1@roundEven

; 389  : 		}

	jmp	SHORT $LN3@roundEven
$LN2@roundEven:

; 390  : 		else if((Integer % 2) == 0)

	mov	eax, DWORD PTR Integer$[rsp]
	cdq
	and	eax, 1
	xor	eax, edx
	sub	eax, edx
	test	eax, eax
	jne	SHORT $LN5@roundEven

; 391  : 		{
; 392  : 			return IntegerPart;

	movss	xmm0, DWORD PTR IntegerPart$[rsp]
	jmp	SHORT $LN1@roundEven

; 393  : 		}

	jmp	SHORT $LN6@roundEven
$LN5@roundEven:

; 394  : 		else if(x <= static_cast<genType>(0)) // Work around... 

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rsp]
	jb	SHORT $LN7@roundEven

; 395  : 		{
; 396  : 			return IntegerPart - static_cast<genType>(1);

	movss	xmm0, DWORD PTR IntegerPart$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	jmp	SHORT $LN1@roundEven

; 397  : 		}

	jmp	SHORT $LN8@roundEven
$LN7@roundEven:

; 398  : 		else
; 399  : 		{
; 400  : 			return IntegerPart + static_cast<genType>(1);

	movss	xmm0, DWORD PTR IntegerPart$[rsp]
	addss	xmm0, DWORD PTR __real@3f800000
$LN8@roundEven:
$LN6@roundEven:
$LN3@roundEven:
$LN1@roundEven:

; 401  : 		}
; 402  : 		//else // Bug on MinGW 4.5.2
; 403  : 		//{
; 404  : 		//	return mix(IntegerPart + genType(-1), IntegerPart + genType(1), x <= genType(0));
; 405  : 		//}
; 406  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$roundEven@M@glm@@YAMM@Z ENDP				; glm::roundEven<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A1$23 = 52
A2$24 = 84
A5$25 = 116
A6$26 = 148
A3$27 = 180
A4$28 = 212
C7$29 = 244
C8$30 = 276
C1$31 = 308
C2$32 = 340
C3$33 = 372
C4$34 = 404
C5$35 = 436
C6$36 = 468
A7$37 = 500
A8$38 = 532
B1$39 = 564
B2$40 = 596
B3$41 = 628
B4$42 = 660
A$43 = 676
B$44 = 680
C$45 = 684
D$46 = 688
E$47 = 692
F$48 = 696
G$49 = 700
A$50 = 704
B$51 = 708
C$52 = 712
D$53 = 716
E$54 = 720
F$55 = 724
G$56 = 728
A$57 = 732
B$58 = 736
C$59 = 740
D$60 = 744
E$61 = 748
F$62 = 752
G$63 = 756
A$64 = 760
B$65 = 764
C$66 = 768
D$67 = 772
E$68 = 776
F$69 = 780
G$70 = 784
$T71 = 788
$T72 = 792
$T73 = 796
$T74 = 800
$T75 = 804
$T76 = 808
$T77 = 812
$T78 = 816
$T79 = 820
$T80 = 824
$T81 = 828
$T82 = 832
$T83 = 836
$T84 = 840
$T85 = 844
$T86 = 848
$T87 = 852
$T88 = 856
$T89 = 860
$T90 = 864
$T91 = 868
$T92 = 872
$T93 = 876
$T94 = 880
$T95 = 884
$T96 = 888
$T97 = 892
$T98 = 896
$T99 = 900
$T100 = 904
$T101 = 908
$T102 = 912
$T103 = 916
$T104 = 920
$T105 = 924
$T106 = 928
$T107 = 932
$T108 = 936
$T109 = 940
$T110 = 944
tv72 = 948
tv82 = 952
tv92 = 956
tv134 = 960
tv144 = 964
tv154 = 968
tv164 = 972
tv174 = 976
tv184 = 980
tv194 = 984
tv204 = 988
tv214 = 992
tv256 = 996
tv266 = 1000
tv276 = 1004
tv286 = 1008
tv296 = 1012
tv306 = 1016
tv316 = 1020
tv326 = 1024
tv331 = 1028
tv336 = 1032
tv341 = 1036
tv346 = 1040
tv351 = 1044
tv388 = 1048
tv393 = 1052
tv398 = 1056
tv403 = 1060
tv408 = 1064
tv413 = 1068
tv418 = 1072
tv423 = 1076
tv428 = 1080
tv433 = 1084
tv438 = 1088
tv443 = 1092
tv448 = 1096
tv453 = 1100
tv458 = 1104
tv463 = 1108
tv468 = 1112
tv473 = 1116
tv478 = 1120
tv483 = 1124
tv488 = 1128
tv493 = 1132
tv498 = 1136
?test@roundEven@@YAHXZ PROC				; roundEven::test

; 613  : 	{

$LN99:
	push	rdi
	sub	rsp, 1152				; 00000480H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 280				; 00000118H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 614  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 615  : 
; 616  : 		{
; 617  : 			float A1 = glm::roundEven(-1.5f);

	movss	xmm0, DWORD PTR __real@bfc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A1$23[rsp], xmm0

; 618  : 			Error += glm::epsilonEqual(A1, -2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T71[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR $T72[rsp], xmm0
	lea	r8, QWORD PTR $T71[rsp]
	lea	rdx, QWORD PTR $T72[rsp]
	lea	rcx, QWORD PTR A1$23[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv72[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 619  : 
; 620  : 			float A2 = glm::roundEven(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A2$24[rsp], xmm0

; 621  : 			Error += glm::epsilonEqual(A2, 2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T73[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T74[rsp], xmm0
	lea	r8, QWORD PTR $T73[rsp]
	lea	rdx, QWORD PTR $T74[rsp]
	lea	rcx, QWORD PTR A2$24[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv82[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 622  : 
; 623  : 			float A5 = glm::roundEven(-2.5f);

	movss	xmm0, DWORD PTR __real@c0200000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A5$25[rsp], xmm0

; 624  : 			Error += glm::epsilonEqual(A5, -2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T75[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR $T76[rsp], xmm0
	lea	r8, QWORD PTR $T75[rsp]
	lea	rdx, QWORD PTR $T76[rsp]
	lea	rcx, QWORD PTR A5$25[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv92[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 625  : 
; 626  : 			float A6 = glm::roundEven(2.5f);

	movss	xmm0, DWORD PTR __real@40200000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A6$26[rsp], xmm0

; 627  : 			Error += glm::epsilonEqual(A6, 2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T77[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T78[rsp], xmm0
	lea	r8, QWORD PTR $T77[rsp]
	lea	rdx, QWORD PTR $T78[rsp]
	lea	rcx, QWORD PTR A6$26[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv134[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 628  : 
; 629  : 			float A3 = glm::roundEven(-3.5f);

	movss	xmm0, DWORD PTR __real@c0600000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A3$27[rsp], xmm0

; 630  : 			Error += glm::epsilonEqual(A3, -4.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T79[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR $T80[rsp], xmm0
	lea	r8, QWORD PTR $T79[rsp]
	lea	rdx, QWORD PTR $T80[rsp]
	lea	rcx, QWORD PTR A3$27[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv144[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 631  : 
; 632  : 			float A4 = glm::roundEven(3.5f);

	movss	xmm0, DWORD PTR __real@40600000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A4$28[rsp], xmm0

; 633  : 			Error += glm::epsilonEqual(A4, 4.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T81[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR $T82[rsp], xmm0
	lea	r8, QWORD PTR $T81[rsp]
	lea	rdx, QWORD PTR $T82[rsp]
	lea	rcx, QWORD PTR A4$28[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv154[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 634  : 
; 635  : 			float C7 = glm::roundEven(-4.5f);

	movss	xmm0, DWORD PTR __real@c0900000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C7$29[rsp], xmm0

; 636  : 			Error += glm::epsilonEqual(C7, -4.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T83[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR $T84[rsp], xmm0
	lea	r8, QWORD PTR $T83[rsp]
	lea	rdx, QWORD PTR $T84[rsp]
	lea	rcx, QWORD PTR C7$29[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv164[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 637  : 
; 638  : 			float C8 = glm::roundEven(4.5f);

	movss	xmm0, DWORD PTR __real@40900000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C8$30[rsp], xmm0

; 639  : 			Error += glm::epsilonEqual(C8, 4.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T85[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR $T86[rsp], xmm0
	lea	r8, QWORD PTR $T85[rsp]
	lea	rdx, QWORD PTR $T86[rsp]
	lea	rcx, QWORD PTR C8$30[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv174[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv174[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 640  : 
; 641  : 			float C1 = glm::roundEven(-5.5f);

	movss	xmm0, DWORD PTR __real@c0b00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C1$31[rsp], xmm0

; 642  : 			Error += glm::epsilonEqual(C1, -6.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T87[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0c00000
	movss	DWORD PTR $T88[rsp], xmm0
	lea	r8, QWORD PTR $T87[rsp]
	lea	rdx, QWORD PTR $T88[rsp]
	lea	rcx, QWORD PTR C1$31[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv184[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv184[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv184[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 643  : 
; 644  : 			float C2 = glm::roundEven(5.5f);

	movss	xmm0, DWORD PTR __real@40b00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C2$32[rsp], xmm0

; 645  : 			Error += glm::epsilonEqual(C2, 6.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T89[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR $T90[rsp], xmm0
	lea	r8, QWORD PTR $T89[rsp]
	lea	rdx, QWORD PTR $T90[rsp]
	lea	rcx, QWORD PTR C2$32[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@test
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv194[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv194[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 646  : 
; 647  : 			float C3 = glm::roundEven(-6.5f);

	movss	xmm0, DWORD PTR __real@c0d00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C3$33[rsp], xmm0

; 648  : 			Error += glm::epsilonEqual(C3, -6.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T91[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0c00000
	movss	DWORD PTR $T92[rsp], xmm0
	lea	r8, QWORD PTR $T91[rsp]
	lea	rdx, QWORD PTR $T92[rsp]
	lea	rcx, QWORD PTR C3$33[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@test
	mov	DWORD PTR tv204[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv204[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv204[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 649  : 
; 650  : 			float C4 = glm::roundEven(6.5f);

	movss	xmm0, DWORD PTR __real@40d00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C4$34[rsp], xmm0

; 651  : 			Error += glm::epsilonEqual(C4, 6.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T93[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR $T94[rsp], xmm0
	lea	r8, QWORD PTR $T93[rsp]
	lea	rdx, QWORD PTR $T94[rsp]
	lea	rcx, QWORD PTR C4$34[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@test
	mov	DWORD PTR tv214[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv214[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv214[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 652  : 
; 653  : 			float C5 = glm::roundEven(-7.5f);

	movss	xmm0, DWORD PTR __real@c0f00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C5$35[rsp], xmm0

; 654  : 			Error += glm::epsilonEqual(C5, -8.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T95[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c1000000
	movss	DWORD PTR $T96[rsp], xmm0
	lea	r8, QWORD PTR $T95[rsp]
	lea	rdx, QWORD PTR $T96[rsp]
	lea	rcx, QWORD PTR C5$35[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv256[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 655  : 
; 656  : 			float C6 = glm::roundEven(7.5f);

	movss	xmm0, DWORD PTR __real@40f00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C6$36[rsp], xmm0

; 657  : 			Error += glm::epsilonEqual(C6, 8.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T97[rsp], xmm0
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR $T98[rsp], xmm0
	lea	r8, QWORD PTR $T97[rsp]
	lea	rdx, QWORD PTR $T98[rsp]
	lea	rcx, QWORD PTR C6$36[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test
	mov	DWORD PTR tv266[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv266[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv266[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 658  : 
; 659  : 			Error += 0;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 660  : 		}
; 661  : 
; 662  : 		{
; 663  : 			float A7 = glm::roundEven(-2.4f);

	movss	xmm0, DWORD PTR __real@c019999a
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A7$37[rsp], xmm0

; 664  : 			Error += glm::epsilonEqual(A7, -2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T99[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR $T100[rsp], xmm0
	lea	r8, QWORD PTR $T99[rsp]
	lea	rdx, QWORD PTR $T100[rsp]
	lea	rcx, QWORD PTR A7$37[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@test
	mov	DWORD PTR tv276[rsp], 0
	jmp	SHORT $LN32@test
$LN31@test:
	mov	DWORD PTR tv276[rsp], 1
$LN32@test:
	mov	eax, DWORD PTR tv276[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 665  : 
; 666  : 			float A8 = glm::roundEven(2.4f);

	movss	xmm0, DWORD PTR __real@4019999a
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A8$38[rsp], xmm0

; 667  : 			Error += glm::epsilonEqual(A8, 2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T101[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T102[rsp], xmm0
	lea	r8, QWORD PTR $T101[rsp]
	lea	rdx, QWORD PTR $T102[rsp]
	lea	rcx, QWORD PTR A8$38[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@test
	mov	DWORD PTR tv286[rsp], 0
	jmp	SHORT $LN34@test
$LN33@test:
	mov	DWORD PTR tv286[rsp], 1
$LN34@test:
	mov	eax, DWORD PTR tv286[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 668  : 
; 669  : 			float B1 = glm::roundEven(-2.6f);

	movss	xmm0, DWORD PTR __real@c0266666
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B1$39[rsp], xmm0

; 670  : 			Error += glm::epsilonEqual(B1, -3.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T103[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0400000
	movss	DWORD PTR $T104[rsp], xmm0
	lea	r8, QWORD PTR $T103[rsp]
	lea	rdx, QWORD PTR $T104[rsp]
	lea	rcx, QWORD PTR B1$39[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@test
	mov	DWORD PTR tv296[rsp], 0
	jmp	SHORT $LN36@test
$LN35@test:
	mov	DWORD PTR tv296[rsp], 1
$LN36@test:
	mov	eax, DWORD PTR tv296[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 671  : 
; 672  : 			float B2 = glm::roundEven(2.6f);

	movss	xmm0, DWORD PTR __real@40266666
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B2$40[rsp], xmm0

; 673  : 			Error += glm::epsilonEqual(B2, 3.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T105[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR $T106[rsp], xmm0
	lea	r8, QWORD PTR $T105[rsp]
	lea	rdx, QWORD PTR $T106[rsp]
	lea	rcx, QWORD PTR B2$40[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@test
	mov	DWORD PTR tv306[rsp], 0
	jmp	SHORT $LN38@test
$LN37@test:
	mov	DWORD PTR tv306[rsp], 1
$LN38@test:
	mov	eax, DWORD PTR tv306[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 674  : 
; 675  : 			float B3 = glm::roundEven(-2.0f);

	movss	xmm0, DWORD PTR __real@c0000000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B3$41[rsp], xmm0

; 676  : 			Error += glm::epsilonEqual(B3, -2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T107[rsp], xmm0
	movss	xmm0, DWORD PTR __real@c0000000
	movss	DWORD PTR $T108[rsp], xmm0
	lea	r8, QWORD PTR $T107[rsp]
	lea	rdx, QWORD PTR $T108[rsp]
	lea	rcx, QWORD PTR B3$41[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@test
	mov	DWORD PTR tv316[rsp], 0
	jmp	SHORT $LN40@test
$LN39@test:
	mov	DWORD PTR tv316[rsp], 1
$LN40@test:
	mov	eax, DWORD PTR tv316[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 677  : 
; 678  : 			float B4 = glm::roundEven(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B4$42[rsp], xmm0

; 679  : 			Error += glm::epsilonEqual(B4, 2.0f, 0.0001f) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T109[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR $T110[rsp], xmm0
	lea	r8, QWORD PTR $T109[rsp]
	lea	rdx, QWORD PTR $T110[rsp]
	lea	rcx, QWORD PTR B4$42[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@test
	mov	DWORD PTR tv326[rsp], 0
	jmp	SHORT $LN42@test
$LN41@test:
	mov	DWORD PTR tv326[rsp], 1
$LN42@test:
	mov	eax, DWORD PTR tv326[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 680  : 
; 681  : 			Error += 0;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR Error$[rsp], eax

; 682  : 		}
; 683  : 
; 684  : 		{
; 685  : 			float A = glm::roundEven(0.0f);

	xorps	xmm0, xmm0
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A$43[rsp], xmm0

; 686  : 			Error += A == 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$43[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN43@test
	jne	SHORT $LN43@test
	mov	DWORD PTR tv331[rsp], 0
	jmp	SHORT $LN44@test
$LN43@test:
	mov	DWORD PTR tv331[rsp], 1
$LN44@test:
	mov	eax, DWORD PTR tv331[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 687  : 			float B = glm::roundEven(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B$44[rsp], xmm0

; 688  : 			Error += B == 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$44[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN45@test
	jne	SHORT $LN45@test
	mov	DWORD PTR tv336[rsp], 0
	jmp	SHORT $LN46@test
$LN45@test:
	mov	DWORD PTR tv336[rsp], 1
$LN46@test:
	mov	eax, DWORD PTR tv336[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 689  : 			float C = glm::roundEven(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C$45[rsp], xmm0

; 690  : 			Error += C == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$45[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN47@test
	jne	SHORT $LN47@test
	mov	DWORD PTR tv341[rsp], 0
	jmp	SHORT $LN48@test
$LN47@test:
	mov	DWORD PTR tv341[rsp], 1
$LN48@test:
	mov	eax, DWORD PTR tv341[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 691  : 			float D = glm::roundEven(0.1f);

	movss	xmm0, DWORD PTR __real@3dcccccd
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR D$46[rsp], xmm0

; 692  : 			Error += D == 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$46[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN49@test
	jne	SHORT $LN49@test
	mov	DWORD PTR tv346[rsp], 0
	jmp	SHORT $LN50@test
$LN49@test:
	mov	DWORD PTR tv346[rsp], 1
$LN50@test:
	mov	eax, DWORD PTR tv346[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 693  : 			float E = glm::roundEven(0.9f);

	movss	xmm0, DWORD PTR __real@3f666666
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR E$47[rsp], xmm0

; 694  : 			Error += E == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$47[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN51@test
	jne	SHORT $LN51@test
	mov	DWORD PTR tv351[rsp], 0
	jmp	SHORT $LN52@test
$LN51@test:
	mov	DWORD PTR tv351[rsp], 1
$LN52@test:
	mov	eax, DWORD PTR tv351[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 695  : 			float F = glm::roundEven(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR F$48[rsp], xmm0

; 696  : 			Error += F == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$48[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN53@test
	jne	SHORT $LN53@test
	mov	DWORD PTR tv388[rsp], 0
	jmp	SHORT $LN54@test
$LN53@test:
	mov	DWORD PTR tv388[rsp], 1
$LN54@test:
	mov	eax, DWORD PTR tv388[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 697  : 			float G = glm::roundEven(1.9f);

	movss	xmm0, DWORD PTR __real@3ff33333
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR G$49[rsp], xmm0

; 698  : 			Error += G == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$49[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN55@test
	jne	SHORT $LN55@test
	mov	DWORD PTR tv393[rsp], 0
	jmp	SHORT $LN56@test
$LN55@test:
	mov	DWORD PTR tv393[rsp], 1
$LN56@test:
	mov	eax, DWORD PTR tv393[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 699  : 		}
; 700  : 
; 701  : 		{
; 702  : 			float A = glm::roundEven(-0.0f);

	movss	xmm0, DWORD PTR __real@80000000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A$50[rsp], xmm0

; 703  : 			Error += A ==  0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$50[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN57@test
	jne	SHORT $LN57@test
	mov	DWORD PTR tv398[rsp], 0
	jmp	SHORT $LN58@test
$LN57@test:
	mov	DWORD PTR tv398[rsp], 1
$LN58@test:
	mov	eax, DWORD PTR tv398[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 704  : 			float B = glm::roundEven(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B$51[rsp], xmm0

; 705  : 			Error += B == -0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$51[rsp]
	ucomiss	xmm0, DWORD PTR __real@80000000
	jp	SHORT $LN59@test
	jne	SHORT $LN59@test
	mov	DWORD PTR tv403[rsp], 0
	jmp	SHORT $LN60@test
$LN59@test:
	mov	DWORD PTR tv403[rsp], 1
$LN60@test:
	mov	eax, DWORD PTR tv403[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 706  : 			float C = glm::roundEven(-1.0f);

	movss	xmm0, DWORD PTR __real@bf800000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C$52[rsp], xmm0

; 707  : 			Error += C == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$52[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN61@test
	jne	SHORT $LN61@test
	mov	DWORD PTR tv408[rsp], 0
	jmp	SHORT $LN62@test
$LN61@test:
	mov	DWORD PTR tv408[rsp], 1
$LN62@test:
	mov	eax, DWORD PTR tv408[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 708  : 			float D = glm::roundEven(-0.1f);

	movss	xmm0, DWORD PTR __real@bdcccccd
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR D$53[rsp], xmm0

; 709  : 			Error += D ==  0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$53[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN63@test
	jne	SHORT $LN63@test
	mov	DWORD PTR tv413[rsp], 0
	jmp	SHORT $LN64@test
$LN63@test:
	mov	DWORD PTR tv413[rsp], 1
$LN64@test:
	mov	eax, DWORD PTR tv413[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 710  : 			float E = glm::roundEven(-0.9f);

	movss	xmm0, DWORD PTR __real@bf666666
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR E$54[rsp], xmm0

; 711  : 			Error += E == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$54[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN65@test
	jne	SHORT $LN65@test
	mov	DWORD PTR tv418[rsp], 0
	jmp	SHORT $LN66@test
$LN65@test:
	mov	DWORD PTR tv418[rsp], 1
$LN66@test:
	mov	eax, DWORD PTR tv418[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 712  : 			float F = glm::roundEven(-1.5f);

	movss	xmm0, DWORD PTR __real@bfc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR F$55[rsp], xmm0

; 713  : 			Error += F == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$55[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN67@test
	jne	SHORT $LN67@test
	mov	DWORD PTR tv423[rsp], 0
	jmp	SHORT $LN68@test
$LN67@test:
	mov	DWORD PTR tv423[rsp], 1
$LN68@test:
	mov	eax, DWORD PTR tv423[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 714  : 			float G = glm::roundEven(-1.9f);

	movss	xmm0, DWORD PTR __real@bff33333
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR G$56[rsp], xmm0

; 715  : 			Error += G == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$56[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN69@test
	jne	SHORT $LN69@test
	mov	DWORD PTR tv428[rsp], 0
	jmp	SHORT $LN70@test
$LN69@test:
	mov	DWORD PTR tv428[rsp], 1
$LN70@test:
	mov	eax, DWORD PTR tv428[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 716  : 		}
; 717  : 
; 718  : 		{
; 719  : 			float A = glm::roundEven(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A$57[rsp], xmm0

; 720  : 			Error += A == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$57[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN71@test
	jne	SHORT $LN71@test
	mov	DWORD PTR tv433[rsp], 0
	jmp	SHORT $LN72@test
$LN71@test:
	mov	DWORD PTR tv433[rsp], 1
$LN72@test:
	mov	eax, DWORD PTR tv433[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 721  : 			float B = glm::roundEven(2.5f);

	movss	xmm0, DWORD PTR __real@40200000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B$58[rsp], xmm0

; 722  : 			Error += B == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$58[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN73@test
	jne	SHORT $LN73@test
	mov	DWORD PTR tv438[rsp], 0
	jmp	SHORT $LN74@test
$LN73@test:
	mov	DWORD PTR tv438[rsp], 1
$LN74@test:
	mov	eax, DWORD PTR tv438[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 723  : 			float C = glm::roundEven(3.5f);

	movss	xmm0, DWORD PTR __real@40600000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C$59[rsp], xmm0

; 724  : 			Error += C == 4.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$59[rsp]
	ucomiss	xmm0, DWORD PTR __real@40800000
	jp	SHORT $LN75@test
	jne	SHORT $LN75@test
	mov	DWORD PTR tv443[rsp], 0
	jmp	SHORT $LN76@test
$LN75@test:
	mov	DWORD PTR tv443[rsp], 1
$LN76@test:
	mov	eax, DWORD PTR tv443[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 725  : 			float D = glm::roundEven(4.5f);

	movss	xmm0, DWORD PTR __real@40900000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR D$60[rsp], xmm0

; 726  : 			Error += D == 4.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$60[rsp]
	ucomiss	xmm0, DWORD PTR __real@40800000
	jp	SHORT $LN77@test
	jne	SHORT $LN77@test
	mov	DWORD PTR tv448[rsp], 0
	jmp	SHORT $LN78@test
$LN77@test:
	mov	DWORD PTR tv448[rsp], 1
$LN78@test:
	mov	eax, DWORD PTR tv448[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 727  : 			float E = glm::roundEven(5.5f);

	movss	xmm0, DWORD PTR __real@40b00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR E$61[rsp], xmm0

; 728  : 			Error += E == 6.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$61[rsp]
	ucomiss	xmm0, DWORD PTR __real@40c00000
	jp	SHORT $LN79@test
	jne	SHORT $LN79@test
	mov	DWORD PTR tv453[rsp], 0
	jmp	SHORT $LN80@test
$LN79@test:
	mov	DWORD PTR tv453[rsp], 1
$LN80@test:
	mov	eax, DWORD PTR tv453[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 729  : 			float F = glm::roundEven(6.5f);

	movss	xmm0, DWORD PTR __real@40d00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR F$62[rsp], xmm0

; 730  : 			Error += F == 6.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$62[rsp]
	ucomiss	xmm0, DWORD PTR __real@40c00000
	jp	SHORT $LN81@test
	jne	SHORT $LN81@test
	mov	DWORD PTR tv458[rsp], 0
	jmp	SHORT $LN82@test
$LN81@test:
	mov	DWORD PTR tv458[rsp], 1
$LN82@test:
	mov	eax, DWORD PTR tv458[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 731  : 			float G = glm::roundEven(7.5f);

	movss	xmm0, DWORD PTR __real@40f00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR G$63[rsp], xmm0

; 732  : 			Error += G == 8.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$63[rsp]
	ucomiss	xmm0, DWORD PTR __real@41000000
	jp	SHORT $LN83@test
	jne	SHORT $LN83@test
	mov	DWORD PTR tv463[rsp], 0
	jmp	SHORT $LN84@test
$LN83@test:
	mov	DWORD PTR tv463[rsp], 1
$LN84@test:
	mov	eax, DWORD PTR tv463[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 733  : 		}
; 734  : 	
; 735  : 		{
; 736  : 			float A = glm::roundEven(-1.5f);

	movss	xmm0, DWORD PTR __real@bfc00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR A$64[rsp], xmm0

; 737  : 			Error += A == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$64[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN85@test
	jne	SHORT $LN85@test
	mov	DWORD PTR tv468[rsp], 0
	jmp	SHORT $LN86@test
$LN85@test:
	mov	DWORD PTR tv468[rsp], 1
$LN86@test:
	mov	eax, DWORD PTR tv468[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 738  : 			float B = glm::roundEven(-2.5f);

	movss	xmm0, DWORD PTR __real@c0200000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR B$65[rsp], xmm0

; 739  : 			Error += B == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$65[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN87@test
	jne	SHORT $LN87@test
	mov	DWORD PTR tv473[rsp], 0
	jmp	SHORT $LN88@test
$LN87@test:
	mov	DWORD PTR tv473[rsp], 1
$LN88@test:
	mov	eax, DWORD PTR tv473[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 740  : 			float C = glm::roundEven(-3.5f);

	movss	xmm0, DWORD PTR __real@c0600000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR C$66[rsp], xmm0

; 741  : 			Error += C == -4.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$66[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0800000
	jp	SHORT $LN89@test
	jne	SHORT $LN89@test
	mov	DWORD PTR tv478[rsp], 0
	jmp	SHORT $LN90@test
$LN89@test:
	mov	DWORD PTR tv478[rsp], 1
$LN90@test:
	mov	eax, DWORD PTR tv478[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 742  : 			float D = glm::roundEven(-4.5f);

	movss	xmm0, DWORD PTR __real@c0900000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR D$67[rsp], xmm0

; 743  : 			Error += D == -4.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$67[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0800000
	jp	SHORT $LN91@test
	jne	SHORT $LN91@test
	mov	DWORD PTR tv483[rsp], 0
	jmp	SHORT $LN92@test
$LN91@test:
	mov	DWORD PTR tv483[rsp], 1
$LN92@test:
	mov	eax, DWORD PTR tv483[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 744  : 			float E = glm::roundEven(-5.5f);

	movss	xmm0, DWORD PTR __real@c0b00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR E$68[rsp], xmm0

; 745  : 			Error += E == -6.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$68[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0c00000
	jp	SHORT $LN93@test
	jne	SHORT $LN93@test
	mov	DWORD PTR tv488[rsp], 0
	jmp	SHORT $LN94@test
$LN93@test:
	mov	DWORD PTR tv488[rsp], 1
$LN94@test:
	mov	eax, DWORD PTR tv488[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 746  : 			float F = glm::roundEven(-6.5f);

	movss	xmm0, DWORD PTR __real@c0d00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR F$69[rsp], xmm0

; 747  : 			Error += F == -6.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$69[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0c00000
	jp	SHORT $LN95@test
	jne	SHORT $LN95@test
	mov	DWORD PTR tv493[rsp], 0
	jmp	SHORT $LN96@test
$LN95@test:
	mov	DWORD PTR tv493[rsp], 1
$LN96@test:
	mov	eax, DWORD PTR tv493[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 748  : 			float G = glm::roundEven(-7.5f);

	movss	xmm0, DWORD PTR __real@c0f00000
	call	??$roundEven@M@glm@@YAMM@Z		; glm::roundEven<float>
	movss	DWORD PTR G$70[rsp], xmm0

; 749  : 			Error += G == -8.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$70[rsp]
	ucomiss	xmm0, DWORD PTR __real@c1000000
	jp	SHORT $LN97@test
	jne	SHORT $LN97@test
	mov	DWORD PTR tv498[rsp], 0
	jmp	SHORT $LN98@test
$LN97@test:
	mov	DWORD PTR tv498[rsp], 1
$LN98@test:
	mov	eax, DWORD PTR tv498[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 750  : 		}
; 751  : 
; 752  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 753  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@roundEven@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 1152				; 00000480H
	pop	rdi
	ret	0
?test@roundEven@@YAHXZ ENDP				; roundEven::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A$1 = 36
B$2 = 40
C$3 = 44
D$4 = 48
E$5 = 52
F$6 = 56
G$7 = 60
A$8 = 64
B$9 = 68
C$10 = 72
D$11 = 76
E$12 = 80
F$13 = 84
G$14 = 88
tv67 = 92
tv72 = 96
tv77 = 100
tv82 = 104
tv87 = 108
tv92 = 112
tv129 = 116
tv134 = 120
tv139 = 124
tv144 = 128
tv149 = 132
tv154 = 136
tv159 = 140
tv164 = 144
?test@round_@@YAHXZ PROC				; round_::test

; 569  : 	{

$LN31:
	push	rdi
	sub	rsp, 160				; 000000a0H

; 570  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 571  : 
; 572  : 		{
; 573  : 			float A = glm::round(0.0f);

	xorps	xmm0, xmm0
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR A$1[rsp], xmm0

; 574  : 			Error += A == 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$1[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN3@test
	jne	SHORT $LN3@test
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv67[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv67[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 575  : 			float B = glm::round(0.5f);

	movss	xmm0, DWORD PTR __real@3f000000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR B$2[rsp], xmm0

; 576  : 			Error += B == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$2[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN5@test
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 577  : 			float C = glm::round(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR C$3[rsp], xmm0

; 578  : 			Error += C == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$3[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN7@test
	jne	SHORT $LN7@test
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv77[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 579  : 			float D = glm::round(0.1f);

	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR D$4[rsp], xmm0

; 580  : 			Error += D == 0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$4[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@test
	jne	SHORT $LN9@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv82[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 581  : 			float E = glm::round(0.9f);

	movss	xmm0, DWORD PTR __real@3f666666
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR E$5[rsp], xmm0

; 582  : 			Error += E == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$5[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN11@test
	jne	SHORT $LN11@test
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv87[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv87[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 583  : 			float F = glm::round(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR F$6[rsp], xmm0

; 584  : 			Error += F == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$6[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN13@test
	jne	SHORT $LN13@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv92[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 585  : 			float G = glm::round(1.9f);

	movss	xmm0, DWORD PTR __real@3ff33333
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR G$7[rsp], xmm0

; 586  : 			Error += G == 2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$7[rsp]
	ucomiss	xmm0, DWORD PTR __real@40000000
	jp	SHORT $LN15@test
	jne	SHORT $LN15@test
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv129[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv129[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 587  : 		}
; 588  : 	
; 589  : 		{
; 590  : 			float A = glm::round(-0.0f);

	movss	xmm0, DWORD PTR __real@80000000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR A$8[rsp], xmm0

; 591  : 			Error += A ==  0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR A$8[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN17@test
	jne	SHORT $LN17@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv134[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 592  : 			float B = glm::round(-0.5f);

	movss	xmm0, DWORD PTR __real@bf000000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR B$9[rsp], xmm0

; 593  : 			Error += B == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR B$9[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN19@test
	jne	SHORT $LN19@test
	mov	DWORD PTR tv139[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv139[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv139[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 594  : 			float C = glm::round(-1.0f);

	movss	xmm0, DWORD PTR __real@bf800000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR C$10[rsp], xmm0

; 595  : 			Error += C == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$10[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN21@test
	jne	SHORT $LN21@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv144[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 596  : 			float D = glm::round(-0.1f);

	movss	xmm0, DWORD PTR __real@bdcccccd
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR D$11[rsp], xmm0

; 597  : 			Error += D ==  0.0f ? 0 : 1;

	movss	xmm0, DWORD PTR D$11[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN23@test
	jne	SHORT $LN23@test
	mov	DWORD PTR tv149[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv149[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv149[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 598  : 			float E = glm::round(-0.9f);

	movss	xmm0, DWORD PTR __real@bf666666
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR E$12[rsp], xmm0

; 599  : 			Error += E == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR E$12[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN25@test
	jne	SHORT $LN25@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv154[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 600  : 			float F = glm::round(-1.5f);

	movss	xmm0, DWORD PTR __real@bfc00000
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR F$13[rsp], xmm0

; 601  : 			Error += F == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR F$13[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN27@test
	jne	SHORT $LN27@test
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv159[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv159[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 602  : 			float G = glm::round(-1.9f);

	movss	xmm0, DWORD PTR __real@bff33333
	call	?round@@YAMM@Z				; round
	movss	DWORD PTR G$14[rsp], xmm0

; 603  : 			Error += G == -2.0f ? 0 : 1;

	movss	xmm0, DWORD PTR G$14[rsp]
	ucomiss	xmm0, DWORD PTR __real@c0000000
	jp	SHORT $LN29@test
	jne	SHORT $LN29@test
	mov	DWORD PTR tv164[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv164[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv164[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 604  : 		}
; 605  : 	
; 606  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 607  : 	}

	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test@round_@@YAHXZ ENDP				; round_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
edge$ = 56
x$ = 64
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::step<glm::tvec4,float,0>, COMDAT

; 596  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 597  : 		return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(edge, x);

	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR edge$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 598  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::step<glm::tvec4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
edge$ = 72
x$ = 80
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z PROC ; glm::step<glm::tvec4,float,0>, COMDAT

; 590  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 591  : 		return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(vecType<T, P>(edge), x);

	movss	xmm1, DWORD PTR edge$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_step_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_step_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 592  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ENDP ; glm::step<glm::tvec4,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
i$5 = 40
Result$6 = 56
i$7 = 88
Result$8 = 104
$T9 = 132
$T10 = 136
$T11 = 140
$T12 = 144
tv88 = 148
tv146 = 152
?test@step_@@YAHXZ PROC					; step_::test

; 541  : 	{

$LN13:
	push	rdi
	sub	rsp, 160				; 000000a0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 542  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 543  : 
; 544  : 		// vec4 and float
; 545  : 		{
; 546  : 			for (std::size_t i = 0; i < sizeof(TestVec4Scalar) / sizeof(entry<float, glm::vec4>); ++i)

	mov	QWORD PTR i$5[rsp], 0
	jmp	SHORT $LN4@test
$LN2@test:
	mov	rax, QWORD PTR i$5[rsp]
	inc	rax
	mov	QWORD PTR i$5[rsp], rax
$LN4@test:
	cmp	QWORD PTR i$5[rsp], 3
	jae	$LN3@test

; 547  : 			{
; 548  : 				glm::vec4 Result = glm::step(TestVec4Scalar[i].edge, TestVec4Scalar[i].x);

	imul	rax, QWORD PTR i$5[rsp], 36		; 00000024H
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A ; step_::TestVec4Scalar
	lea	rax, QWORD PTR [rcx+rax+4]
	imul	rcx, QWORD PTR i$5[rsp], 36		; 00000024H
	lea	rdx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A ; step_::TestVec4Scalar
	mov	r8, rax
	movss	xmm1, DWORD PTR [rdx+rcx]
	lea	rcx, QWORD PTR Result$6[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@MAEBU10@@Z ; glm::step<glm::tvec4,float,0>

; 549  : 				Error += glm::all(glm::epsilonEqual(Result, TestVec4Scalar[i].result, glm::epsilon<float>())) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T9[rsp], xmm0
	imul	rax, QWORD PTR i$5[rsp], 36		; 00000024H
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A ; step_::TestVec4Scalar
	lea	rax, QWORD PTR [rcx+rax+20]
	lea	r9, QWORD PTR $T9[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR Result$6[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv88[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 550  : 			}

	jmp	$LN2@test
$LN3@test:

; 551  : 		}
; 552  : 
; 553  : 		// vec4 and vec4
; 554  : 		{
; 555  : 			for (std::size_t i = 0; i < sizeof(TestVec4Vector) / sizeof(entry<glm::vec4, glm::vec4>); ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN7@test
$LN5@test:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN7@test:
	cmp	QWORD PTR i$7[rsp], 4
	jae	$LN6@test

; 556  : 			{
; 557  : 				glm::vec4 Result = glm::step(TestVec4Vector[i].edge, TestVec4Vector[i].x);

	imul	rax, QWORD PTR i$7[rsp], 48		; 00000030H
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A ; step_::TestVec4Vector
	lea	rax, QWORD PTR [rcx+rax+16]
	imul	rcx, QWORD PTR i$7[rsp], 48		; 00000030H
	lea	rdx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A ; step_::TestVec4Vector
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR Result$8[rsp]
	call	??$step@Utvec4@glm@@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::step<glm::tvec4,float,0>

; 558  : 				Error += glm::all(glm::epsilonEqual(Result, TestVec4Vector[i].result, glm::epsilon<float>())) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T11[rsp], xmm0
	imul	rax, QWORD PTR i$7[rsp], 48		; 00000030H
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A ; step_::TestVec4Vector
	lea	rax, QWORD PTR [rcx+rax+32]
	lea	r9, QWORD PTR $T11[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR Result$8[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv146[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 559  : 			}

	jmp	$LN5@test
$LN6@test:

; 560  : 		}
; 561  : 
; 562  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 563  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@step_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
?test@step_@@YAHXZ ENDP					; step_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestVec4Vector@step_@@YAXXZ
text$di	SEGMENT
??__ETestVec4Vector@step_@@YAXXZ PROC			; step_::`dynamic initializer for 'TestVec4Vector'', COMDAT

; 538  : 	};

	push	rdi
	sub	rsp, 48					; 00000030H

; 534  : 		{ glm::vec4(-1.0f, -2.0f, -3.0f, -4.0f), glm::vec4(-2.0f, -3.0f, -4.0f, -5.0f), glm::vec4(0.0f) },

	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@c0400000
	movss	xmm2, DWORD PTR __real@c0000000
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A ; step_::TestVec4Vector
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@c0a00000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@c0800000
	movss	xmm2, DWORD PTR __real@c0400000
	movss	xmm1, DWORD PTR __real@c0000000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+16
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+32
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 535  : 		{ glm::vec4( 0.0f, 1.0f, 2.0f, 3.0f), glm::vec4( 1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+48
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+64
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+80
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 536  : 		{ glm::vec4( 2.0f, 3.0f, 4.0f, 5.0f), glm::vec4( 1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(0.0f) },

	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40800000
	movss	xmm2, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+96
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+112
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+128
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 537  : 		{ glm::vec4( 0.0f, 1.0f, 2.0f, 3.0f), glm::vec4(-1.0f,-2.0f,-3.0f,-4.0f), glm::vec4(0.0f) }

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+144
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@c0400000
	movss	xmm2, DWORD PTR __real@c0000000
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+160
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Vector@step_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U12@@1@A+176
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??__ETestVec4Vector@step_@@YAXXZ ENDP			; step_::`dynamic initializer for 'TestVec4Vector''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestVec4Scalar@step_@@YAXXZ
text$di	SEGMENT
??__ETestVec4Scalar@step_@@YAXXZ PROC			; step_::`dynamic initializer for 'TestVec4Scalar'', COMDAT

; 530  : 	};

	push	rdi
	sub	rsp, 48					; 00000030H

; 527  : 		{ 1.0f, glm::vec4(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR ?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A, xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+4
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+20
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 528  : 		{ 0.0f, glm::vec4(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(1.0f) },

	xorps	xmm0, xmm0
	movss	DWORD PTR ?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+36, xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+40
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+56
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 529  : 		{ 0.0f, glm::vec4(-1.0f, -2.0f, -3.0f, -4.0f), glm::vec4(0.0f) }

	xorps	xmm0, xmm0
	movss	DWORD PTR ?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+72, xmm0
	movss	xmm0, DWORD PTR __real@c0800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@c0400000
	movss	xmm2, DWORD PTR __real@c0000000
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+76
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Scalar@step_@@3PAU?$entry@MU?$tvec4@M$0A@@glm@@@1@A+92
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??__ETestVec4Scalar@step_@@YAXXZ ENDP			; step_::`dynamic initializer for 'TestVec4Scalar''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec4>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEBU?$tvec4@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z PROC ; glm::mix<float,bool,0,glm::tvec4>, COMDAT

; 571  : 	{

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 572  : 		return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	lea	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_scalar@M_N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 573  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z ENDP ; glm::mix<float,bool,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec3>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEBU?$tvec3@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z PROC ; glm::mix<float,bool,0,glm::tvec3>, COMDAT

; 571  : 	{

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 572  : 		return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	lea	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_scalar@M_N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 573  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z ENDP ; glm::mix<float,bool,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::mix<float,bool,0,glm::tvec2>, COMDAT

; 577  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 578  : 		return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	mov	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_vector@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEBU?$tvec2@_N$0A@@3@@Z ; glm::detail::compute_mix_vector<float,bool,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 579  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::mix<float,bool,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
a$ = 72
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z PROC ; glm::mix<float,bool,0,glm::tvec2>, COMDAT

; 571  : 	{

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 572  : 		return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);

	lea	r9, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mix_scalar@M_N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0AEB_N@Z ; glm::detail::compute_mix_scalar<float,bool,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 573  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z ENDP ; glm::mix<float,bool,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@MM@glm@@YAMMMM@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
a$ = 80
??$mix@MM@glm@@YAMMMM@Z PROC				; glm::mix<float,float>, COMDAT

; 565  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 566  : 		return detail::compute_mix<genTypeT, genTypeU>::call(x, y, a);

	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_mix@MM@detail@glm@@SAMAEBM00@Z ; glm::detail::compute_mix<float,float>::call

; 567  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mix@MM@glm@@YAMMMM@Z ENDP				; glm::mix<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\constants.inl
;	COMDAT ??$epsilon@M@glm@@YAMXZ
_TEXT	SEGMENT
??$epsilon@M@glm@@YAMXZ PROC				; glm::epsilon<float>, COMDAT

; 10   : 	{

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 11   : 		return std::numeric_limits<genType>::epsilon();

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon

; 12   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilon@M@glm@@YAMXZ ENDP				; glm::epsilon<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mix@M_N@glm@@YAMMM_N@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
a$ = 80
??$mix@M_N@glm@@YAMMM_N@Z PROC				; glm::mix<float,bool>, COMDAT

; 565  : 	{

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 566  : 		return detail::compute_mix<genTypeT, genTypeU>::call(x, y, a);

	lea	r8, QWORD PTR a$[rsp]
	lea	rdx, QWORD PTR y$[rsp]
	lea	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_mix@M_N@detail@glm@@SAMAEBM0AEB_N@Z ; glm::detail::compute_mix<float,bool>::call

; 567  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mix@M_N@glm@@YAMMM_N@Z ENDP				; glm::mix<float,bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
i$11 = 40
Result$12 = 52
i$13 = 72
Result$14 = 84
i$15 = 104
Result$16 = 120
i$17 = 136
Result$18 = 152
i$19 = 168
Result$20 = 184
i$21 = 216
Result$22 = 232
i$23 = 264
Result$24 = 280
i$25 = 312
Result$26 = 328
$T27 = 356
$T28 = 360
$T29 = 364
$T30 = 368
$T31 = 372
$T32 = 376
$T33 = 380
$T34 = 384
$T35 = 388
$T36 = 392
$T37 = 396
$T38 = 400
$T39 = 404
$T40 = 408
$T41 = 412
$T42 = 416
$T43 = 420
$T44 = 424
$T45 = 428
$T46 = 432
tv507 = 440
tv89 = 448
tv148 = 452
tv163 = 456
tv176 = 464
tv189 = 468
tv217 = 472
tv230 = 476
tv245 = 480
tv258 = 488
tv271 = 492
tv284 = 496
tv312 = 500
tv325 = 504
tv338 = 508
tv385 = 512
tv398 = 520
tv411 = 524
tv424 = 528
tv437 = 532
tv465 = 536
tv478 = 540
tv491 = 544
tv504 = 548
?test@mix_@@YAHXZ PROC					; mix_::test

; 424  : 	{

$LN67:
	push	rdi
	sub	rsp, 560				; 00000230H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 425  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 426  : 
; 427  : 		// Float with bool
; 428  : 		{
; 429  : 			for(std::size_t i = 0; i < sizeof(TestBool) / sizeof(entry<float, bool>); ++i)

	mov	QWORD PTR i$11[rsp], 0
	jmp	SHORT $LN4@test
$LN2@test:
	mov	rax, QWORD PTR i$11[rsp]
	inc	rax
	mov	QWORD PTR i$11[rsp], rax
$LN4@test:
	cmp	QWORD PTR i$11[rsp], 4
	jae	$LN3@test

; 430  : 			{
; 431  : 				float Result = glm::mix(TestBool[i].x, TestBool[i].y, TestBool[i].a);

	imul	rax, QWORD PTR i$11[rsp], 16
	lea	rcx, OFFSET FLAT:?TestBool@mix_@@3PAU?$entry@M_N@1@A ; mix_::TestBool
	imul	rdx, QWORD PTR i$11[rsp], 16
	lea	r8, OFFSET FLAT:?TestBool@mix_@@3PAU?$entry@M_N@1@A ; mix_::TestBool
	mov	QWORD PTR tv507[rsp], r8
	imul	r9, QWORD PTR i$11[rsp], 16
	lea	r10, OFFSET FLAT:?TestBool@mix_@@3PAU?$entry@M_N@1@A ; mix_::TestBool
	movzx	r8d, BYTE PTR [rcx+rax+8]
	mov	rax, QWORD PTR tv507[rsp]
	movss	xmm1, DWORD PTR [rax+rdx+4]
	movss	xmm0, DWORD PTR [r10+r9]
	call	??$mix@M_N@glm@@YAMMM_N@Z		; glm::mix<float,bool>
	movss	DWORD PTR Result$12[rsp], xmm0

; 432  : 				Error += glm::epsilonEqual(Result, TestBool[i].Result, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T27[rsp], xmm0
	imul	rax, QWORD PTR i$11[rsp], 16
	lea	rcx, OFFSET FLAT:?TestBool@mix_@@3PAU?$entry@M_N@1@A ; mix_::TestBool
	lea	rax, QWORD PTR [rcx+rax+12]
	lea	r8, QWORD PTR $T27[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$12[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@test
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv89[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv89[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 433  : 			}

	jmp	$LN2@test
$LN3@test:

; 434  : 		}
; 435  : 
; 436  : 		// Float with float
; 437  : 		{
; 438  : 			for(std::size_t i = 0; i < sizeof(TestFloat) / sizeof(entry<float, float>); ++i)

	mov	QWORD PTR i$13[rsp], 0
	jmp	SHORT $LN7@test
$LN5@test:
	mov	rax, QWORD PTR i$13[rsp]
	inc	rax
	mov	QWORD PTR i$13[rsp], rax
$LN7@test:
	cmp	QWORD PTR i$13[rsp], 4
	jae	$LN6@test

; 439  : 			{
; 440  : 				float Result = glm::mix(TestFloat[i].x, TestFloat[i].y, TestFloat[i].a);

	imul	rax, QWORD PTR i$13[rsp], 16
	lea	rcx, OFFSET FLAT:?TestFloat@mix_@@3PAU?$entry@MM@1@A ; mix_::TestFloat
	imul	rdx, QWORD PTR i$13[rsp], 16
	lea	r8, OFFSET FLAT:?TestFloat@mix_@@3PAU?$entry@MM@1@A ; mix_::TestFloat
	imul	r9, QWORD PTR i$13[rsp], 16
	lea	r10, OFFSET FLAT:?TestFloat@mix_@@3PAU?$entry@MM@1@A ; mix_::TestFloat
	movss	xmm2, DWORD PTR [rcx+rax+8]
	movss	xmm1, DWORD PTR [r8+rdx+4]
	movss	xmm0, DWORD PTR [r10+r9]
	call	??$mix@MM@glm@@YAMMMM@Z			; glm::mix<float,float>
	movss	DWORD PTR Result$14[rsp], xmm0

; 441  : 				Error += glm::epsilonEqual(Result, TestFloat[i].Result, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T28[rsp], xmm0
	imul	rax, QWORD PTR i$13[rsp], 16
	lea	rcx, OFFSET FLAT:?TestFloat@mix_@@3PAU?$entry@MM@1@A ; mix_::TestFloat
	lea	rax, QWORD PTR [rcx+rax+12]
	lea	r8, QWORD PTR $T28[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$14[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test
	mov	DWORD PTR tv148[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv148[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 442  : 			}

	jmp	$LN5@test
$LN6@test:

; 443  : 		}
; 444  : 
; 445  : 		// vec2 with bool
; 446  : 		{
; 447  : 			for(std::size_t i = 0; i < sizeof(TestVec2Bool) / sizeof(entry<glm::vec2, bool>); ++i)

	mov	QWORD PTR i$15[rsp], 0
	jmp	SHORT $LN10@test
$LN8@test:
	mov	rax, QWORD PTR i$15[rsp]
	inc	rax
	mov	QWORD PTR i$15[rsp], rax
$LN10@test:
	cmp	QWORD PTR i$15[rsp], 4
	jae	$LN9@test

; 448  : 			{
; 449  : 				glm::vec2 Result = glm::mix(TestVec2Bool[i].x, TestVec2Bool[i].y, TestVec2Bool[i].a);

	imul	rax, QWORD PTR i$15[rsp], 28
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	imul	rdx, QWORD PTR i$15[rsp], 28
	lea	r8, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	lea	rdx, QWORD PTR [r8+rdx+8]
	imul	r8, QWORD PTR i$15[rsp], 28
	lea	r9, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	add	r9, r8
	mov	r8, r9
	mov	QWORD PTR tv163[rsp], r8
	movzx	r9d, BYTE PTR [rcx+rax+16]
	mov	r8, rdx
	mov	rax, QWORD PTR tv163[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$16[rsp]
	call	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec2>

; 450  : 				Error += glm::epsilonEqual(Result.x, TestVec2Bool[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T29[rsp], xmm0
	imul	rax, QWORD PTR i$15[rsp], 28
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	lea	rax, QWORD PTR [rcx+rax+20]
	lea	r8, QWORD PTR $T29[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$16[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@test
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN32@test
$LN31@test:
	mov	DWORD PTR tv176[rsp], 1
$LN32@test:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 451  : 				Error += glm::epsilonEqual(Result.y, TestVec2Bool[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T30[rsp], xmm0
	imul	rax, QWORD PTR i$15[rsp], 28
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	lea	rax, QWORD PTR [rcx+rax+24]
	lea	r8, QWORD PTR $T30[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$16[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@test
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN34@test
$LN33@test:
	mov	DWORD PTR tv189[rsp], 1
$LN34@test:
	mov	eax, DWORD PTR tv189[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 452  : 			}

	jmp	$LN8@test
$LN9@test:

; 453  : 		}
; 454  : 
; 455  : 		// vec2 with bvec2
; 456  : 		{
; 457  : 			for(std::size_t i = 0; i < sizeof(TestBVec2) / sizeof(entry<glm::vec2, glm::bvec2>); ++i)

	mov	QWORD PTR i$17[rsp], 0
	jmp	SHORT $LN13@test
$LN11@test:
	mov	rax, QWORD PTR i$17[rsp]
	inc	rax
	mov	QWORD PTR i$17[rsp], rax
$LN13@test:
	cmp	QWORD PTR i$17[rsp], 5
	jae	$LN12@test

; 458  : 			{
; 459  : 				glm::vec2 Result = glm::mix(TestBVec2[i].x, TestBVec2[i].y, TestBVec2[i].a);

	imul	rax, QWORD PTR i$17[rsp], 28
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	lea	rax, QWORD PTR [rcx+rax+16]
	imul	rcx, QWORD PTR i$17[rsp], 28
	lea	rdx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	lea	rcx, QWORD PTR [rdx+rcx+8]
	imul	rdx, QWORD PTR i$17[rsp], 28
	lea	r8, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	add	r8, rdx
	mov	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	lea	rcx, QWORD PTR Result$18[rsp]
	call	??$mix@M_N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0AEBU?$tvec2@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec2>

; 460  : 				Error += glm::epsilonEqual(Result.x, TestBVec2[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T31[rsp], xmm0
	imul	rax, QWORD PTR i$17[rsp], 28
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	lea	rax, QWORD PTR [rcx+rax+20]
	lea	r8, QWORD PTR $T31[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$18[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@test
	mov	DWORD PTR tv217[rsp], 0
	jmp	SHORT $LN36@test
$LN35@test:
	mov	DWORD PTR tv217[rsp], 1
$LN36@test:
	mov	eax, DWORD PTR tv217[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 461  : 				Error += glm::epsilonEqual(Result.y, TestBVec2[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T32[rsp], xmm0
	imul	rax, QWORD PTR i$17[rsp], 28
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	lea	rax, QWORD PTR [rcx+rax+24]
	lea	r8, QWORD PTR $T32[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$18[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN37@test
	mov	DWORD PTR tv230[rsp], 0
	jmp	SHORT $LN38@test
$LN37@test:
	mov	DWORD PTR tv230[rsp], 1
$LN38@test:
	mov	eax, DWORD PTR tv230[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 462  : 			}

	jmp	$LN11@test
$LN12@test:

; 463  : 		}
; 464  : 
; 465  : 		// vec3 with bool
; 466  : 		{
; 467  : 			for(std::size_t i = 0; i < sizeof(TestVec3Bool) / sizeof(entry<glm::vec3, bool>); ++i)

	mov	QWORD PTR i$19[rsp], 0
	jmp	SHORT $LN16@test
$LN14@test:
	mov	rax, QWORD PTR i$19[rsp]
	inc	rax
	mov	QWORD PTR i$19[rsp], rax
$LN16@test:
	cmp	QWORD PTR i$19[rsp], 4
	jae	$LN15@test

; 468  : 			{
; 469  : 				glm::vec3 Result = glm::mix(TestVec3Bool[i].x, TestVec3Bool[i].y, TestVec3Bool[i].a);

	imul	rax, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	imul	rdx, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	r8, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	lea	rdx, QWORD PTR [r8+rdx+12]
	imul	r8, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	r9, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	add	r9, r8
	mov	r8, r9
	mov	QWORD PTR tv245[rsp], r8
	movzx	r9d, BYTE PTR [rcx+rax+24]
	mov	r8, rdx
	mov	rax, QWORD PTR tv245[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$20[rsp]
	call	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec3>

; 470  : 				Error += glm::epsilonEqual(Result.x, TestVec3Bool[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T33[rsp], xmm0
	imul	rax, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	lea	rax, QWORD PTR [rcx+rax+28]
	lea	r8, QWORD PTR $T33[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$20[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN39@test
	mov	DWORD PTR tv258[rsp], 0
	jmp	SHORT $LN40@test
$LN39@test:
	mov	DWORD PTR tv258[rsp], 1
$LN40@test:
	mov	eax, DWORD PTR tv258[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 471  : 				Error += glm::epsilonEqual(Result.y, TestVec3Bool[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T34[rsp], xmm0
	imul	rax, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	lea	rax, QWORD PTR [rcx+rax+32]
	lea	r8, QWORD PTR $T34[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$20[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@test
	mov	DWORD PTR tv271[rsp], 0
	jmp	SHORT $LN42@test
$LN41@test:
	mov	DWORD PTR tv271[rsp], 1
$LN42@test:
	mov	eax, DWORD PTR tv271[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 472  : 				Error += glm::epsilonEqual(Result.z, TestVec3Bool[i].Result.z, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T35[rsp], xmm0
	imul	rax, QWORD PTR i$19[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	lea	rax, QWORD PTR [rcx+rax+36]
	lea	r8, QWORD PTR $T35[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$20[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@test
	mov	DWORD PTR tv284[rsp], 0
	jmp	SHORT $LN44@test
$LN43@test:
	mov	DWORD PTR tv284[rsp], 1
$LN44@test:
	mov	eax, DWORD PTR tv284[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 473  : 			}

	jmp	$LN14@test
$LN15@test:

; 474  : 		}
; 475  : 
; 476  : 		// vec3 with bvec3
; 477  : 		{
; 478  : 			for(std::size_t i = 0; i < sizeof(TestBVec3) / sizeof(entry<glm::vec3, glm::bvec3>); ++i)

	mov	QWORD PTR i$21[rsp], 0
	jmp	SHORT $LN19@test
$LN17@test:
	mov	rax, QWORD PTR i$21[rsp]
	inc	rax
	mov	QWORD PTR i$21[rsp], rax
$LN19@test:
	cmp	QWORD PTR i$21[rsp], 5
	jae	$LN18@test

; 479  : 			{
; 480  : 				glm::vec3 Result = glm::mix(TestBVec3[i].x, TestBVec3[i].y, TestBVec3[i].a);

	imul	rax, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	lea	rax, QWORD PTR [rcx+rax+24]
	imul	rcx, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	rdx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	lea	rcx, QWORD PTR [rdx+rcx+12]
	imul	rdx, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	r8, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	add	r8, rdx
	mov	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	lea	rcx, QWORD PTR Result$22[rsp]
	call	??$mix@M_N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0AEBU?$tvec3@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec3>

; 481  : 				Error += glm::epsilonEqual(Result.x, TestBVec3[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T36[rsp], xmm0
	imul	rax, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	lea	rax, QWORD PTR [rcx+rax+28]
	lea	r8, QWORD PTR $T36[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$22[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN45@test
	mov	DWORD PTR tv312[rsp], 0
	jmp	SHORT $LN46@test
$LN45@test:
	mov	DWORD PTR tv312[rsp], 1
$LN46@test:
	mov	eax, DWORD PTR tv312[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 482  : 				Error += glm::epsilonEqual(Result.y, TestBVec3[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T37[rsp], xmm0
	imul	rax, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	lea	rax, QWORD PTR [rcx+rax+32]
	lea	r8, QWORD PTR $T37[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$22[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN47@test
	mov	DWORD PTR tv325[rsp], 0
	jmp	SHORT $LN48@test
$LN47@test:
	mov	DWORD PTR tv325[rsp], 1
$LN48@test:
	mov	eax, DWORD PTR tv325[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 483  : 				Error += glm::epsilonEqual(Result.z, TestBVec3[i].Result.z, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T38[rsp], xmm0
	imul	rax, QWORD PTR i$21[rsp], 40		; 00000028H
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	lea	rax, QWORD PTR [rcx+rax+36]
	lea	r8, QWORD PTR $T38[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$22[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN49@test
	mov	DWORD PTR tv338[rsp], 0
	jmp	SHORT $LN50@test
$LN49@test:
	mov	DWORD PTR tv338[rsp], 1
$LN50@test:
	mov	eax, DWORD PTR tv338[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 484  : 			}

	jmp	$LN17@test
$LN18@test:

; 485  : 		}
; 486  : 
; 487  : 		// vec4 with bool
; 488  : 		{
; 489  : 			for(std::size_t i = 0; i < sizeof(TestVec4Bool) / sizeof(entry<glm::vec4, bool>); ++i)

	mov	QWORD PTR i$23[rsp], 0
	jmp	SHORT $LN22@test
$LN20@test:
	mov	rax, QWORD PTR i$23[rsp]
	inc	rax
	mov	QWORD PTR i$23[rsp], rax
$LN22@test:
	cmp	QWORD PTR i$23[rsp], 4
	jae	$LN21@test

; 490  : 			{
; 491  : 				glm::vec4 Result = glm::mix(TestVec4Bool[i].x, TestVec4Bool[i].y, TestVec4Bool[i].a);

	imul	rax, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	imul	rdx, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	r8, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	lea	rdx, QWORD PTR [r8+rdx+16]
	imul	r8, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	r9, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	add	r9, r8
	mov	r8, r9
	mov	QWORD PTR tv385[rsp], r8
	movzx	r9d, BYTE PTR [rcx+rax+32]
	mov	r8, rdx
	mov	rax, QWORD PTR tv385[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$24[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0_N@Z ; glm::mix<float,bool,0,glm::tvec4>

; 492  : 				Error += glm::epsilonEqual(Result.x, TestVec4Bool[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T39[rsp], xmm0
	imul	rax, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	lea	rax, QWORD PTR [rcx+rax+36]
	lea	r8, QWORD PTR $T39[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$24[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@test
	mov	DWORD PTR tv398[rsp], 0
	jmp	SHORT $LN52@test
$LN51@test:
	mov	DWORD PTR tv398[rsp], 1
$LN52@test:
	mov	eax, DWORD PTR tv398[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 493  : 				Error += glm::epsilonEqual(Result.y, TestVec4Bool[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T40[rsp], xmm0
	imul	rax, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	lea	rax, QWORD PTR [rcx+rax+40]
	lea	r8, QWORD PTR $T40[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$24[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN53@test
	mov	DWORD PTR tv411[rsp], 0
	jmp	SHORT $LN54@test
$LN53@test:
	mov	DWORD PTR tv411[rsp], 1
$LN54@test:
	mov	eax, DWORD PTR tv411[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 494  : 				Error += glm::epsilonEqual(Result.z, TestVec4Bool[i].Result.z, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T41[rsp], xmm0
	imul	rax, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	lea	rax, QWORD PTR [rcx+rax+44]
	lea	r8, QWORD PTR $T41[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$24[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN55@test
	mov	DWORD PTR tv424[rsp], 0
	jmp	SHORT $LN56@test
$LN55@test:
	mov	DWORD PTR tv424[rsp], 1
$LN56@test:
	mov	eax, DWORD PTR tv424[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 495  : 				Error += glm::epsilonEqual(Result.w, TestVec4Bool[i].Result.w, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T42[rsp], xmm0
	imul	rax, QWORD PTR i$23[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	lea	rax, QWORD PTR [rcx+rax+48]
	lea	r8, QWORD PTR $T42[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$24[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@test
	mov	DWORD PTR tv437[rsp], 0
	jmp	SHORT $LN58@test
$LN57@test:
	mov	DWORD PTR tv437[rsp], 1
$LN58@test:
	mov	eax, DWORD PTR tv437[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 496  : 			}

	jmp	$LN20@test
$LN21@test:

; 497  : 		}
; 498  : 
; 499  : 		// vec4 with bvec4
; 500  : 		{
; 501  : 			for(std::size_t i = 0; i < sizeof(TestBVec4) / sizeof(entry<glm::vec4, glm::bvec4>); ++i)

	mov	QWORD PTR i$25[rsp], 0
	jmp	SHORT $LN25@test
$LN23@test:
	mov	rax, QWORD PTR i$25[rsp]
	inc	rax
	mov	QWORD PTR i$25[rsp], rax
$LN25@test:
	cmp	QWORD PTR i$25[rsp], 5
	jae	$LN24@test

; 502  : 			{
; 503  : 				glm::vec4 Result = glm::mix(TestBVec4[i].x, TestBVec4[i].y, TestBVec4[i].a);

	imul	rax, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rax, QWORD PTR [rcx+rax+32]
	imul	rcx, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rdx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rcx, QWORD PTR [rdx+rcx+16]
	imul	rdx, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	r8, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	add	r8, rdx
	mov	rdx, r8
	mov	r9, rax
	mov	r8, rcx
	lea	rcx, QWORD PTR Result$26[rsp]
	call	??$mix@M_N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0AEBU?$tvec4@_N$0A@@0@@Z ; glm::mix<float,bool,0,glm::tvec4>

; 504  : 				Error += glm::epsilonEqual(Result.x, TestBVec4[i].Result.x, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T43[rsp], xmm0
	imul	rax, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rax, QWORD PTR [rcx+rax+36]
	lea	r8, QWORD PTR $T43[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$26[rsp]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@test
	mov	DWORD PTR tv465[rsp], 0
	jmp	SHORT $LN60@test
$LN59@test:
	mov	DWORD PTR tv465[rsp], 1
$LN60@test:
	mov	eax, DWORD PTR tv465[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 505  : 				Error += glm::epsilonEqual(Result.y, TestBVec4[i].Result.y, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T44[rsp], xmm0
	imul	rax, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rax, QWORD PTR [rcx+rax+40]
	lea	r8, QWORD PTR $T44[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$26[rsp+4]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN61@test
	mov	DWORD PTR tv478[rsp], 0
	jmp	SHORT $LN62@test
$LN61@test:
	mov	DWORD PTR tv478[rsp], 1
$LN62@test:
	mov	eax, DWORD PTR tv478[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 506  : 				Error += glm::epsilonEqual(Result.z, TestBVec4[i].Result.z, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T45[rsp], xmm0
	imul	rax, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rax, QWORD PTR [rcx+rax+44]
	lea	r8, QWORD PTR $T45[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$26[rsp+8]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN63@test
	mov	DWORD PTR tv491[rsp], 0
	jmp	SHORT $LN64@test
$LN63@test:
	mov	DWORD PTR tv491[rsp], 1
$LN64@test:
	mov	eax, DWORD PTR tv491[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 507  : 				Error += glm::epsilonEqual(Result.w, TestBVec4[i].Result.w, glm::epsilon<float>()) ? 0 : 1;

	call	??$epsilon@M@glm@@YAMXZ			; glm::epsilon<float>
	movss	DWORD PTR $T46[rsp], xmm0
	imul	rax, QWORD PTR i$25[rsp], 52		; 00000034H
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	lea	rax, QWORD PTR [rcx+rax+48]
	lea	r8, QWORD PTR $T46[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR Result$26[rsp+12]
	call	??$epsilonEqual@M@glm@@YA_NAEBM00@Z	; glm::epsilonEqual<float>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN65@test
	mov	DWORD PTR tv504[rsp], 0
	jmp	SHORT $LN66@test
$LN65@test:
	mov	DWORD PTR tv504[rsp], 1
$LN66@test:
	mov	eax, DWORD PTR tv504[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 508  : 			}

	jmp	$LN23@test
$LN24@test:

; 509  : 		}
; 510  : 
; 511  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 512  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@mix_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 560				; 00000230H
	pop	rdi
	ret	0
?test@mix_@@YAHXZ ENDP					; mix_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestBVec4@mix_@@YAXXZ
text$di	SEGMENT
??__ETestBVec4@mix_@@YAXXZ PROC				; mix_::`dynamic initializer for 'TestBVec4'', COMDAT

; 421  : 	};

	push	rdi
	sub	rsp, 48					; 00000030H

; 416  : 		{glm::vec4(0.0f, 0.0f, 1.0f, 1.0f), glm::vec4(2.0f, 2.0f, 3.0f, 3.0f), glm::bvec4(false, true, false, true), glm::vec4(0.0f, 2.0f, 1.0f, 3.0f)},

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A ; mix_::TestBVec4
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+16
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8b, 1
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+32
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@40000000
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+36
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 417  : 		{glm::vec4(0.0f), glm::vec4(1.0f), glm::bvec4(true), glm::vec4(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+52
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+68
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+84
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+88
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 418  : 		{glm::vec4(-1.0f), glm::vec4(1.0f), glm::bvec4(false), glm::vec4(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+104
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+120
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+136
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+140
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 419  : 		{glm::vec4(-1.0f), glm::vec4(1.0f), glm::bvec4(true), glm::vec4(1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+156
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+172
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+188
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+192
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 420  : 		{glm::vec4(1.0f, 2.0f, 3.0f, 4.0f), glm::vec4(5.0f, 6.0f, 7.0f, 8.0f), glm::bvec4(true, false, true, false), glm::vec4(5.0f, 2.0f, 7.0f, 4.0f)}

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+208
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40e00000
	movss	xmm2, DWORD PTR __real@40c00000
	movss	xmm1, DWORD PTR __real@40a00000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+224
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR [rsp+32], 0
	mov	r9b, 1
	xor	r8d, r8d
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+240
	call	??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z	; glm::tvec4<bool,0>::tvec4<bool,0>
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40e00000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@40a00000
	lea	rcx, OFFSET FLAT:?TestBVec4@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@U?$tvec4@_N$0A@@2@@1@A+244
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??__ETestBVec4@mix_@@YAXXZ ENDP				; mix_::`dynamic initializer for 'TestBVec4''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestVec4Bool@mix_@@YAXXZ
text$di	SEGMENT
??__ETestVec4Bool@mix_@@YAXXZ PROC			; mix_::`dynamic initializer for 'TestVec4Bool'', COMDAT

; 412  : 	};

	push	rdi
	sub	rsp, 32					; 00000020H

; 408  : 		{glm::vec4(0.0f), glm::vec4(1.0f), false, glm::vec4(0.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A ; mix_::TestVec4Bool
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+16
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR ?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+32, 0
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+36
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 409  : 		{glm::vec4(0.0f), glm::vec4(1.0f), true, glm::vec4(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+52
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+68
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR ?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+84, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+88
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 410  : 		{glm::vec4(-1.0f), glm::vec4(1.0f), false, glm::vec4(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+104
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+120
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR ?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+136, 0
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+140
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 411  : 		{glm::vec4(-1.0f), glm::vec4(1.0f), true, glm::vec4(1.0f)}

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+156
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+172
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	BYTE PTR ?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+188, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec4Bool@mix_@@3PAU?$entry@U?$tvec4@M$0A@@glm@@_N@1@A+192
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__ETestVec4Bool@mix_@@YAXXZ ENDP			; mix_::`dynamic initializer for 'TestVec4Bool''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestBVec3@mix_@@YAXXZ
text$di	SEGMENT
??__ETestBVec3@mix_@@YAXXZ PROC				; mix_::`dynamic initializer for 'TestBVec3'', COMDAT

; 404  : 	};

	push	rdi
	sub	rsp, 32					; 00000020H

; 399  : 		{glm::vec3(0.0f), glm::vec3(1.0f), glm::bvec3(false), glm::vec3(0.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A ; mix_::TestBVec3
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+12
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+24
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+28
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 400  : 		{glm::vec3(0.0f), glm::vec3(1.0f), glm::bvec3(true), glm::vec3(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+40
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+52
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+64
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+68
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 401  : 		{glm::vec3(-1.0f), glm::vec3(1.0f), glm::bvec3(false), glm::vec3(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+80
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+92
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+104
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+108
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 402  : 		{glm::vec3(-1.0f), glm::vec3(1.0f), glm::bvec3(true), glm::vec3(1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+120
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+132
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+144
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+148
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 403  : 		{glm::vec3(1.0f, 2.0f, 3.0f), glm::vec3(4.0f, 5.0f, 6.0f), glm::bvec3(true, false, true), glm::vec3(4.0f, 2.0f, 6.0f)}

	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+160
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm3, DWORD PTR __real@40c00000
	movss	xmm2, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR __real@40800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+172
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	r9b, 1
	xor	r8d, r8d
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+184
	call	??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z	; glm::tvec3<bool,0>::tvec3<bool,0>
	movss	xmm3, DWORD PTR __real@40c00000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@40800000
	lea	rcx, OFFSET FLAT:?TestBVec3@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@U?$tvec3@_N$0A@@2@@1@A+188
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__ETestBVec3@mix_@@YAXXZ ENDP				; mix_::`dynamic initializer for 'TestBVec3''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestVec3Bool@mix_@@YAXXZ
text$di	SEGMENT
??__ETestVec3Bool@mix_@@YAXXZ PROC			; mix_::`dynamic initializer for 'TestVec3Bool'', COMDAT

; 395  : 	};

	push	rdi
	sub	rsp, 32					; 00000020H

; 391  : 		{glm::vec3(0.0f), glm::vec3(1.0f), false, glm::vec3(0.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A ; mix_::TestVec3Bool
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+12
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	BYTE PTR ?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+24, 0
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+28
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 392  : 		{glm::vec3(0.0f), glm::vec3(1.0f), true, glm::vec3(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+40
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+52
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	BYTE PTR ?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+64, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+68
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 393  : 		{glm::vec3(-1.0f), glm::vec3(1.0f), false, glm::vec3(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+80
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+92
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	BYTE PTR ?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+104, 0
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+108
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 394  : 		{glm::vec3(-1.0f), glm::vec3(1.0f), true, glm::vec3(1.0f)}

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+120
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+132
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	BYTE PTR ?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+144, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec3Bool@mix_@@3PAU?$entry@U?$tvec3@M$0A@@glm@@_N@1@A+148
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__ETestVec3Bool@mix_@@YAXXZ ENDP			; mix_::`dynamic initializer for 'TestVec3Bool''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestBVec2@mix_@@YAXXZ
text$di	SEGMENT
??__ETestBVec2@mix_@@YAXXZ PROC				; mix_::`dynamic initializer for 'TestBVec2'', COMDAT

; 387  : 	};

	push	rdi
	sub	rsp, 32					; 00000020H

; 382  : 		{glm::vec2(0.0f), glm::vec2(1.0f), glm::bvec2(false), glm::vec2(0.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A ; mix_::TestBVec2
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+8
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+16
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+20
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 383  : 		{glm::vec2(0.0f), glm::vec2(1.0f), glm::bvec2(true), glm::vec2(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+28
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+36
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+44
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+48
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 384  : 		{glm::vec2(-1.0f), glm::vec2(1.0f), glm::bvec2(false), glm::vec2(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+56
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+64
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+72
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+76
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 385  : 		{glm::vec2(-1.0f), glm::vec2(1.0f), glm::bvec2(true), glm::vec2(1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+84
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+92
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+100
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+104
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 386  : 		{glm::vec2(-1.0f), glm::vec2(1.0f), glm::bvec2(true, false), glm::vec2(1.0f, -1.0f)}

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+112
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+120
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	xor	r8d, r8d
	mov	dl, 1
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+128
	call	??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z	; glm::tvec2<bool,0>::tvec2<bool,0>
	movss	xmm2, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestBVec2@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@U?$tvec2@_N$0A@@2@@1@A+132
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__ETestBVec2@mix_@@YAXXZ ENDP				; mix_::`dynamic initializer for 'TestBVec2''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
;	COMDAT ??__ETestVec2Bool@mix_@@YAXXZ
text$di	SEGMENT
??__ETestVec2Bool@mix_@@YAXXZ PROC			; mix_::`dynamic initializer for 'TestVec2Bool'', COMDAT

; 378  : 	};

	push	rdi
	sub	rsp, 32					; 00000020H

; 374  : 		{glm::vec2(0.0f), glm::vec2(1.0f), false, glm::vec2(0.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A ; mix_::TestVec2Bool
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+8
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	BYTE PTR ?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+16, 0
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+20
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 375  : 		{glm::vec2(0.0f), glm::vec2(1.0f), true, glm::vec2(1.0f)},

	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+28
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+36
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	BYTE PTR ?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+44, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+48
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 376  : 		{glm::vec2(-1.0f), glm::vec2(1.0f), false, glm::vec2(-1.0f)},

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+56
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+64
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	BYTE PTR ?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+72, 0
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+76
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 377  : 		{glm::vec2(-1.0f), glm::vec2(1.0f), true, glm::vec2(1.0f)}

	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+84
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+92
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	BYTE PTR ?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+100, 1
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?TestVec2Bool@mix_@@3PAU?$entry@U?$tvec2@M$0A@@glm@@_N@1@A+104
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??__ETestVec2Bool@mix_@@YAXXZ ENDP			; mix_::`dynamic initializer for 'TestVec2Bool''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 0
?test@clamp_@@YAHXZ PROC				; clamp_::test

; 338  : 	{

$LN3:
	push	rdi
	sub	rsp, 16

; 339  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 340  : 
; 341  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 342  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?test@clamp_@@YAHXZ ENDP				; clamp_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 530  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 531  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 532  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 533  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC ; glm::max<float,0,glm::tvec3>, COMDAT

; 530  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 531  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 532  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 533  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP ; glm::max<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec3>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 530  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 531  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 532  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 533  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec1>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A0$ = 52
B0$ = 88
B1$ = 120
B2$ = 132
C0$ = 152
C1$ = 200
C2$ = 228
D0$ = 248
D1$ = 296
D2$ = 324
$T10 = 328
$T11 = 332
$T12 = 336
$T13 = 344
$T14 = 352
$T15 = 360
$T16 = 364
$T17 = 376
$T18 = 388
$T19 = 400
$T20 = 404
$T21 = 420
$T22 = 436
$T23 = 452
tv66 = 456
tv75 = 464
tv128 = 472
tv132 = 480
tv153 = 488
tv157 = 496
tv178 = 504
?test@max_@@YAHXZ PROC					; max_::test

; 311  : 	{

$LN9:
	push	rdi
	sub	rsp, 512				; 00000200H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 312  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 313  : 
; 314  : 		glm::vec1 A0 = glm::max(glm::vec1(1), glm::vec1(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A0$[rsp]
	call	??$max@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec1>

; 315  : 
; 316  : 		glm::vec2 B0 = glm::max(glm::vec2(1), glm::vec2(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv75[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B0$[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>

; 317  : 		glm::vec2 B1 = glm::max(glm::vec2(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR B1$[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec2>

; 318  : 		bool B2 = glm::all(glm::equal(B0, B1));

	lea	r8, QWORD PTR B1$[rsp]
	lea	rdx, QWORD PTR B0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	mov	BYTE PTR B2$[rsp], al

; 319  : 		Error += B2 ? 0 : 1;

	movzx	eax, BYTE PTR B2$[rsp]
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv128[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 320  : 
; 321  : 		glm::vec3 C0 = glm::max(glm::vec3(1), glm::vec3(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv132[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv132[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR C0$[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec3>

; 322  : 		glm::vec3 C1 = glm::max(glm::vec3(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR C1$[rsp]
	call	??$max@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec3>

; 323  : 		bool C2 = glm::all(glm::equal(C0, C1));

	lea	r8, QWORD PTR C1$[rsp]
	lea	rdx, QWORD PTR C0$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	mov	BYTE PTR C2$[rsp], al

; 324  : 		Error += C2 ? 0 : 1;

	movzx	eax, BYTE PTR C2$[rsp]
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv153[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 325  : 
; 326  : 		glm::vec4 D0 = glm::max(glm::vec4(1), glm::vec4(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv157[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv157[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR D0$[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>

; 327  : 		glm::vec4 D1 = glm::max(glm::vec4(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR D1$[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::max<float,0,glm::tvec4>

; 328  : 		bool D2 = glm::all(glm::equal(D0, D1));

	lea	r8, QWORD PTR D1$[rsp]
	lea	rdx, QWORD PTR D0$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	mov	BYTE PTR D2$[rsp], al

; 329  : 		Error += D2 ? 0 : 1;

	movzx	eax, BYTE PTR D2$[rsp]
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv178[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 330  : 
; 331  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 332  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@max_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 512				; 00000200H
	pop	rdi
	ret	0
?test@max_@@YAHXZ ENDP					; max_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec4>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 516  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 517  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 518  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 519  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec3>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC ; glm::min<float,0,glm::tvec3>, COMDAT

; 516  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 517  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 518  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 519  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP ; glm::min<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec3>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::equal<float,0,glm::tvec2>, COMDAT

; 55   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 56   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@equal
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@equal:

; 57   : 
; 58   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 59   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@equal
$LN2@equal:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@equal:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@equal

; 60   : 			Result[i] = x[i] == y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	rcx, QWORD PTR tv80[rsp]
	movss	xmm0, DWORD PTR [rcx]
	ucomiss	xmm0, DWORD PTR [rax]
	jp	SHORT $LN7@equal
	jne	SHORT $LN7@equal
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@equal
$LN7@equal:
	mov	DWORD PTR tv86[rsp], 0
$LN8@equal:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@equal
$LN3@equal:

; 61   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 62   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::equal<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
a$ = 72
b$ = 80
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC ; glm::min<float,0,glm::tvec2>, COMDAT

; 516  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 517  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 518  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));

	movss	xmm1, DWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 519  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP ; glm::min<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec1>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A0$ = 52
B0$ = 88
B1$ = 120
B2$ = 132
C0$ = 152
C1$ = 200
C2$ = 228
D0$ = 248
D1$ = 296
D2$ = 324
$T10 = 328
$T11 = 332
$T12 = 336
$T13 = 344
$T14 = 352
$T15 = 360
$T16 = 364
$T17 = 376
$T18 = 388
$T19 = 400
$T20 = 404
$T21 = 420
$T22 = 436
$T23 = 452
tv66 = 456
tv75 = 464
tv128 = 472
tv132 = 480
tv153 = 488
tv157 = 496
tv178 = 504
?test@min_@@YAHXZ PROC					; min_::test

; 284  : 	{

$LN9:
	push	rdi
	sub	rsp, 512				; 00000200H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 285  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 286  : 
; 287  : 		glm::vec1 A0 = glm::min(glm::vec1(1), glm::vec1(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR A0$[rsp]
	call	??$min@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec1>

; 288  : 
; 289  : 		glm::vec2 B0 = glm::min(glm::vec2(1), glm::vec2(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv75[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR B0$[rsp]
	call	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>

; 290  : 		glm::vec2 B1 = glm::min(glm::vec2(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR B1$[rsp]
	call	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec2>

; 291  : 		bool B2 = glm::all(glm::equal(B0, B1));

	lea	r8, QWORD PTR B1$[rsp]
	lea	rdx, QWORD PTR B0$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$equal@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	mov	BYTE PTR B2$[rsp], al

; 292  : 		Error += B2 ? 0 : 1;

	movzx	eax, BYTE PTR B2$[rsp]
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv128[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv128[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 293  : 
; 294  : 		glm::vec3 C0 = glm::min(glm::vec3(1), glm::vec3(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv132[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv132[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR C0$[rsp]
	call	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec3>

; 295  : 		glm::vec3 C1 = glm::min(glm::vec3(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T18[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR C1$[rsp]
	call	??$min@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec3>

; 296  : 		bool C2 = glm::all(glm::equal(C0, C1));

	lea	r8, QWORD PTR C1$[rsp]
	lea	rdx, QWORD PTR C0$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$equal@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	mov	BYTE PTR C2$[rsp], al

; 297  : 		Error += C2 ? 0 : 1;

	movzx	eax, BYTE PTR C2$[rsp]
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv153[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 298  : 
; 299  : 		glm::vec4 D0 = glm::min(glm::vec4(1), glm::vec4(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T20[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv157[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv157[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR D0$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>

; 300  : 		glm::vec4 D1 = glm::min(glm::vec4(1), 1.0f);

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	lea	rcx, QWORD PTR D1$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::min<float,0,glm::tvec4>

; 301  : 		bool D2 = glm::all(glm::equal(D0, D1));

	lea	r8, QWORD PTR D1$[rsp]
	lea	rdx, QWORD PTR D0$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$equal@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::equal<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	mov	BYTE PTR D2$[rsp], al

; 302  : 		Error += D2 ? 0 : 1;

	movzx	eax, BYTE PTR D2$[rsp]
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv178[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv178[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 303  : 
; 304  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 305  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@min_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 512				; 00000200H
	pop	rdi
	ret	0
?test@min_@@YAHXZ ENDP					; min_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z PROC ; glm::uintBitsToFloat<glm::tvec4,0>, COMDAT

; 737  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 738  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<uint, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 739  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z ENDP ; glm::uintBitsToFloat<glm::tvec4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::floatBitsToUint<glm::tvec4,0>, COMDAT

; 715  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 716  : 		return reinterpret_cast<vecType<uint, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 717  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::floatBitsToUint<glm::tvec4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z PROC ; glm::uintBitsToFloat<glm::tvec3,0>, COMDAT

; 737  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 738  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<uint, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 739  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z ENDP ; glm::uintBitsToFloat<glm::tvec3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::floatBitsToUint<glm::tvec3,0>, COMDAT

; 715  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 716  : 		return reinterpret_cast<vecType<uint, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 717  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::floatBitsToUint<glm::tvec3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z PROC ; glm::uintBitsToFloat<glm::tvec2,0>, COMDAT

; 737  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 738  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<uint, P>&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 739  : 	}

	pop	rdi
	ret	0
??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z ENDP ; glm::uintBitsToFloat<glm::tvec2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::floatBitsToUint<glm::tvec2,0>, COMDAT

; 715  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 716  : 		return reinterpret_cast<vecType<uint, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 717  : 	}

	pop	rdi
	ret	0
??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::floatBitsToUint<glm::tvec2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 48
A$13 = 68
B$14 = 84
C$15 = 88
A$16 = 104
B$17 = 136
C$18 = 168
A$19 = 200
B$20 = 248
C$21 = 296
A$22 = 344
B$23 = 392
C$24 = 440
$T25 = 468
tv69 = 472
tv72 = 476
tv82 = 480
tv85 = 484
tv92 = 488
tv135 = 492
tv138 = 496
tv141 = 500
tv148 = 504
tv192 = 508
tv195 = 512
tv198 = 516
tv201 = 520
tv208 = 524
?test@floatBitsToUint@@YAHXZ PROC			; floatBitsToUint::test

; 236  : 	{

$LN31:
	push	rdi
	sub	rsp, 528				; 00000210H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 120				; 00000078H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 237  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 238  : 	
; 239  : 		{
; 240  : 			float A = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR A$13[rsp], xmm0

; 241  : 			glm::uint B = glm::floatBitsToUint(A);

	lea	rcx, QWORD PTR A$13[rsp]
	call	?floatBitsToUint@glm@@YAIAEBM@Z		; glm::floatBitsToUint
	mov	DWORD PTR B$14[rsp], eax

; 242  : 			float C = glm::intBitsToFloat(B);

	mov	eax, DWORD PTR B$14[rsp]
	mov	DWORD PTR $T25[rsp], eax
	lea	rcx, QWORD PTR $T25[rsp]
	call	?intBitsToFloat@glm@@YAMAEBH@Z		; glm::intBitsToFloat
	movss	DWORD PTR C$15[rsp], xmm0

; 243  : 			Error += B == *(glm::uint*)&A ? 0 : 1;

	mov	eax, DWORD PTR A$13[rsp]
	cmp	DWORD PTR B$14[rsp], eax
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 244  : 			Error += A == C? 0 : 1;

	movss	xmm0, DWORD PTR A$13[rsp]
	ucomiss	xmm0, DWORD PTR C$15[rsp]
	jp	SHORT $LN5@test
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 245  : 		}
; 246  : 	
; 247  : 		{
; 248  : 			glm::vec2 A(1.0f, 2.0f);

	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$16[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 249  : 			glm::uvec2 B = glm::floatBitsToUint(A);

	lea	rdx, QWORD PTR A$16[rsp]
	lea	rcx, QWORD PTR B$17[rsp]
	call	??$floatBitsToUint@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@I$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec2,0>

; 250  : 			glm::vec2 C = glm::uintBitsToFloat(B);

	lea	rdx, QWORD PTR B$17[rsp]
	lea	rcx, QWORD PTR C$18[rsp]
	call	??$uintBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec2,0>

; 251  : 			Error += B.x == *(glm::uint*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$16[rsp]
	cmp	DWORD PTR B$17[rsp], eax
	jne	SHORT $LN7@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv82[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 252  : 			Error += B.y == *(glm::uint*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$16[rsp+4]
	cmp	DWORD PTR B$17[rsp+4], eax
	jne	SHORT $LN9@test
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv85[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 253  : 			Error += A == C ? 0 : 1;

	lea	rdx, QWORD PTR C$18[rsp]
	lea	rcx, QWORD PTR A$16[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv92[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 254  : 		}
; 255  : 	
; 256  : 		{
; 257  : 			glm::vec3 A(1.0f, 2.0f, 3.0f);

	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$19[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 258  : 			glm::uvec3 B = glm::floatBitsToUint(A);

	lea	rdx, QWORD PTR A$19[rsp]
	lea	rcx, QWORD PTR B$20[rsp]
	call	??$floatBitsToUint@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@I$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec3,0>

; 259  : 			glm::vec3 C = glm::uintBitsToFloat(B);

	lea	rdx, QWORD PTR B$20[rsp]
	lea	rcx, QWORD PTR C$21[rsp]
	call	??$uintBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec3,0>

; 260  : 			Error += B.x == *(glm::uint*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$19[rsp]
	cmp	DWORD PTR B$20[rsp], eax
	jne	SHORT $LN13@test
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv135[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 261  : 			Error += B.y == *(glm::uint*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$19[rsp+4]
	cmp	DWORD PTR B$20[rsp+4], eax
	jne	SHORT $LN15@test
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv138[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 262  : 			Error += B.z == *(glm::uint*)&(A.z) ? 0 : 1;

	mov	eax, DWORD PTR A$19[rsp+8]
	cmp	DWORD PTR B$20[rsp+8], eax
	jne	SHORT $LN17@test
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv141[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 263  : 			Error += A == C? 0 : 1;

	lea	rdx, QWORD PTR C$21[rsp]
	lea	rcx, QWORD PTR A$19[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv148[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv148[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 264  : 		}
; 265  : 	
; 266  : 		{
; 267  : 			glm::vec4 A(1.0f, 2.0f, 3.0f, 4.0f);

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$22[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 268  : 			glm::uvec4 B = glm::floatBitsToUint(A);

	lea	rdx, QWORD PTR A$22[rsp]
	lea	rcx, QWORD PTR B$23[rsp]
	call	??$floatBitsToUint@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@I$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::floatBitsToUint<glm::tvec4,0>

; 269  : 			glm::vec4 C = glm::uintBitsToFloat(B);

	lea	rdx, QWORD PTR B$23[rsp]
	lea	rcx, QWORD PTR C$24[rsp]
	call	??$uintBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@I$0A@@0@@Z ; glm::uintBitsToFloat<glm::tvec4,0>

; 270  : 			Error += B.x == *(glm::uint*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$22[rsp]
	cmp	DWORD PTR B$23[rsp], eax
	jne	SHORT $LN21@test
	mov	DWORD PTR tv192[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv192[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv192[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 271  : 			Error += B.y == *(glm::uint*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$22[rsp+4]
	cmp	DWORD PTR B$23[rsp+4], eax
	jne	SHORT $LN23@test
	mov	DWORD PTR tv195[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv195[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv195[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 272  : 			Error += B.z == *(glm::uint*)&(A.z) ? 0 : 1;

	mov	eax, DWORD PTR A$22[rsp+8]
	cmp	DWORD PTR B$23[rsp+8], eax
	jne	SHORT $LN25@test
	mov	DWORD PTR tv198[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv198[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv198[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 273  : 			Error += B.w == *(glm::uint*)&(A.w) ? 0 : 1;

	mov	eax, DWORD PTR A$22[rsp+12]
	cmp	DWORD PTR B$23[rsp+12], eax
	jne	SHORT $LN27@test
	mov	DWORD PTR tv201[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv201[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv201[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 274  : 			Error += A == C? 0 : 1;

	lea	rdx, QWORD PTR C$24[rsp]
	lea	rcx, QWORD PTR A$22[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test
	mov	DWORD PTR tv208[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv208[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv208[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 275  : 		}
; 276  : 	
; 277  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 278  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@floatBitsToUint@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 528				; 00000210H
	pop	rdi
	ret	0
?test@floatBitsToUint@@YAHXZ ENDP			; floatBitsToUint::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z PROC ; glm::intBitsToFloat<glm::tvec4,0>, COMDAT

; 726  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 727  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<int, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 728  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ENDP ; glm::intBitsToFloat<glm::tvec4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z PROC ; glm::floatBitsToInt<glm::tvec4,0>, COMDAT

; 704  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 705  : 		return reinterpret_cast<vecType<int, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 706  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::floatBitsToInt<glm::tvec4,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@H$0A@@glm@@QEAA@H@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR scalar$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@H@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec4@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 163  : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 161  : 				: x(0), y(0), z(0), w(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+12], 0

; 163  : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec4<int,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@H$0A@@glm@@SAHXZ	; glm::tvec4<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec4<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@H$0A@@glm@@SAHXZ PROC			; glm::tvec4<int,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@H$0A@@glm@@SAHXZ ENDP			; glm::tvec4<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 1001 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1002 : 		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1003 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z PROC ; glm::intBitsToFloat<glm::tvec3,0>, COMDAT

; 726  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 727  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<int, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 728  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ENDP ; glm::intBitsToFloat<glm::tvec3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 24
v$ = 32
??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z PROC ; glm::floatBitsToInt<glm::tvec3,0>, COMDAT

; 704  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi

; 705  : 		return reinterpret_cast<vecType<int, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 706  : 	}

	pop	rdi
	pop	rsi
	ret	0
??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::floatBitsToInt<glm::tvec3,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec3@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 40   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 				: x(0), y(0), z(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+8], 0

; 40   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec3<int,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@H$0A@@glm@@SAHXZ	; glm::tvec3<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec3<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@H$0A@@glm@@SAHXZ PROC			; glm::tvec3<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@H$0A@@glm@@SAHXZ ENDP			; glm::tvec3<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z PROC ; glm::intBitsToFloat<glm::tvec2,0>, COMDAT

; 726  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 727  : 		return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<int, P>&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 728  : 	}

	pop	rdi
	ret	0
??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ENDP ; glm::intBitsToFloat<glm::tvec2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 16
v$ = 24
??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z PROC ; glm::floatBitsToInt<glm::tvec2,0>, COMDAT

; 704  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 705  : 		return reinterpret_cast<vecType<int, P>&>(const_cast<vecType<float, P>&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 706  : 	}

	pop	rdi
	ret	0
??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::floatBitsToInt<glm::tvec2,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$tvec2@H$0A@@glm@@QEAA@XZ PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 27   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 25   : 				: x(0), y(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax+4], 0

; 27   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@XZ ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z PROC			; glm::tvec2<int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@H$0A@@glm@@SAHXZ	; glm::tvec2<int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@H$0A@@glm@@QEBAAEBHH@Z ENDP			; glm::tvec2<int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@H$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@H$0A@@glm@@SAHXZ PROC			; glm::tvec2<int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@H$0A@@glm@@SAHXZ ENDP			; glm::tvec2<int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 48
A$14 = 68
B$15 = 100
C$16 = 116
D$17 = 120
A$18 = 136
B$19 = 168
C$20 = 200
A$21 = 232
B$22 = 280
C$23 = 328
A$24 = 376
B$25 = 424
C$26 = 472
tv69 = 500
tv72 = 504
tv82 = 508
tv85 = 512
tv92 = 516
tv135 = 520
tv138 = 524
tv141 = 528
tv148 = 532
tv192 = 536
tv195 = 540
tv198 = 544
tv201 = 548
tv208 = 552
?test@floatBitsToInt@@YAHXZ PROC			; floatBitsToInt::test

; 187  : 	{

$LN31:
	push	rdi
	sub	rsp, 560				; 00000230H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 188  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 189  : 	
; 190  : 		{
; 191  : 			float A = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR A$14[rsp], xmm0

; 192  : 			int B = glm::floatBitsToInt(A);

	lea	rcx, QWORD PTR A$14[rsp]
	call	?floatBitsToInt@glm@@YAHAEBM@Z		; glm::floatBitsToInt
	mov	DWORD PTR B$15[rsp], eax

; 193  : 			float C = glm::intBitsToFloat(B);

	lea	rcx, QWORD PTR B$15[rsp]
	call	?intBitsToFloat@glm@@YAMAEBH@Z		; glm::intBitsToFloat
	movss	DWORD PTR C$16[rsp], xmm0

; 194  : 			int D = *(int*)&A;

	mov	eax, DWORD PTR A$14[rsp]
	mov	DWORD PTR D$17[rsp], eax

; 195  : 			Error += B == D ? 0 : 1;

	mov	eax, DWORD PTR D$17[rsp]
	cmp	DWORD PTR B$15[rsp], eax
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 196  : 			Error += A == C ? 0 : 1;

	movss	xmm0, DWORD PTR A$14[rsp]
	ucomiss	xmm0, DWORD PTR C$16[rsp]
	jp	SHORT $LN5@test
	jne	SHORT $LN5@test
	mov	DWORD PTR tv72[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv72[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv72[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 197  : 		}
; 198  : 
; 199  : 		{
; 200  : 			glm::vec2 A(1.0f, 2.0f);

	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$18[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 201  : 			glm::ivec2 B = glm::floatBitsToInt(A);

	lea	rdx, QWORD PTR A$18[rsp]
	lea	rcx, QWORD PTR B$19[rsp]
	call	??$floatBitsToInt@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@H$0A@@0@AEBU?$tvec2@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec2,0>

; 202  : 			glm::vec2 C = glm::intBitsToFloat(B);

	lea	rdx, QWORD PTR B$19[rsp]
	lea	rcx, QWORD PTR C$20[rsp]
	call	??$intBitsToFloat@Utvec2@glm@@$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU?$tvec2@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec2,0>

; 203  : 			Error += B.x == *(int*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$18[rsp]
	cmp	DWORD PTR B$19[rsp], eax
	jne	SHORT $LN7@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv82[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 204  : 			Error += B.y == *(int*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$18[rsp+4]
	cmp	DWORD PTR B$19[rsp+4], eax
	jne	SHORT $LN9@test
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv85[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 205  : 			Error += A == C? 0 : 1;

	lea	rdx, QWORD PTR C$20[rsp]
	lea	rcx, QWORD PTR A$18[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv92[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 206  : 		}
; 207  : 
; 208  : 		{
; 209  : 			glm::vec3 A(1.0f, 2.0f, 3.0f);

	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$21[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 210  : 			glm::ivec3 B = glm::floatBitsToInt(A);

	lea	rdx, QWORD PTR A$21[rsp]
	lea	rcx, QWORD PTR B$22[rsp]
	call	??$floatBitsToInt@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@H$0A@@0@AEBU?$tvec3@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec3,0>

; 211  : 			glm::vec3 C = glm::intBitsToFloat(B);

	lea	rdx, QWORD PTR B$22[rsp]
	lea	rcx, QWORD PTR C$23[rsp]
	call	??$intBitsToFloat@Utvec3@glm@@$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU?$tvec3@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec3,0>

; 212  : 			Error += B.x == *(int*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$21[rsp]
	cmp	DWORD PTR B$22[rsp], eax
	jne	SHORT $LN13@test
	mov	DWORD PTR tv135[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv135[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv135[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 213  : 			Error += B.y == *(int*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$21[rsp+4]
	cmp	DWORD PTR B$22[rsp+4], eax
	jne	SHORT $LN15@test
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv138[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 214  : 			Error += B.z == *(int*)&(A.z) ? 0 : 1;

	mov	eax, DWORD PTR A$21[rsp+8]
	cmp	DWORD PTR B$22[rsp+8], eax
	jne	SHORT $LN17@test
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv141[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 215  : 			Error += A == C? 0 : 1;

	lea	rdx, QWORD PTR C$23[rsp]
	lea	rcx, QWORD PTR A$21[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec3@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@test
	mov	DWORD PTR tv148[rsp], 0
	jmp	SHORT $LN20@test
$LN19@test:
	mov	DWORD PTR tv148[rsp], 1
$LN20@test:
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 216  : 		}
; 217  : 	
; 218  : 		{
; 219  : 			glm::vec4 A(1.0f, 2.0f, 3.0f, 4.0f);

	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@40400000
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$24[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 220  : 			glm::ivec4 B = glm::floatBitsToInt(A);

	lea	rdx, QWORD PTR A$24[rsp]
	lea	rcx, QWORD PTR B$25[rsp]
	call	??$floatBitsToInt@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@H$0A@@0@AEBU?$tvec4@M$0A@@0@@Z ; glm::floatBitsToInt<glm::tvec4,0>

; 221  : 			glm::vec4 C = glm::intBitsToFloat(B);

	lea	rdx, QWORD PTR B$25[rsp]
	lea	rcx, QWORD PTR C$26[rsp]
	call	??$intBitsToFloat@Utvec4@glm@@$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU?$tvec4@H$0A@@0@@Z ; glm::intBitsToFloat<glm::tvec4,0>

; 222  : 			Error += B.x == *(int*)&(A.x) ? 0 : 1;

	mov	eax, DWORD PTR A$24[rsp]
	cmp	DWORD PTR B$25[rsp], eax
	jne	SHORT $LN21@test
	mov	DWORD PTR tv192[rsp], 0
	jmp	SHORT $LN22@test
$LN21@test:
	mov	DWORD PTR tv192[rsp], 1
$LN22@test:
	mov	eax, DWORD PTR tv192[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 223  : 			Error += B.y == *(int*)&(A.y) ? 0 : 1;

	mov	eax, DWORD PTR A$24[rsp+4]
	cmp	DWORD PTR B$25[rsp+4], eax
	jne	SHORT $LN23@test
	mov	DWORD PTR tv195[rsp], 0
	jmp	SHORT $LN24@test
$LN23@test:
	mov	DWORD PTR tv195[rsp], 1
$LN24@test:
	mov	eax, DWORD PTR tv195[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 224  : 			Error += B.z == *(int*)&(A.z) ? 0 : 1;

	mov	eax, DWORD PTR A$24[rsp+8]
	cmp	DWORD PTR B$25[rsp+8], eax
	jne	SHORT $LN25@test
	mov	DWORD PTR tv198[rsp], 0
	jmp	SHORT $LN26@test
$LN25@test:
	mov	DWORD PTR tv198[rsp], 1
$LN26@test:
	mov	eax, DWORD PTR tv198[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 225  : 			Error += B.w == *(int*)&(A.w) ? 0 : 1;

	mov	eax, DWORD PTR A$24[rsp+12]
	cmp	DWORD PTR B$25[rsp+12], eax
	jne	SHORT $LN27@test
	mov	DWORD PTR tv201[rsp], 0
	jmp	SHORT $LN28@test
$LN27@test:
	mov	DWORD PTR tv201[rsp], 1
$LN28@test:
	mov	eax, DWORD PTR tv201[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 226  : 			Error += A == C? 0 : 1;

	lea	rdx, QWORD PTR C$26[rsp]
	lea	rcx, QWORD PTR A$24[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN29@test
	mov	DWORD PTR tv208[rsp], 0
	jmp	SHORT $LN30@test
$LN29@test:
	mov	DWORD PTR tv208[rsp], 1
$LN30@test:
	mov	eax, DWORD PTR tv208[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 227  : 		}
; 228  : 	
; 229  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 230  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@floatBitsToInt@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 560				; 00000230H
	pop	rdi
	ret	0
?test@floatBitsToInt@@YAHXZ ENDP			; floatBitsToInt::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::mod<float,0,glm::tvec4>, COMDAT

; 459  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 460  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 461  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::mod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC ; glm::mod<float,0,glm::tvec4>, COMDAT

; 453  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 454  : 		return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(y));

	movss	xmm1, DWORD PTR y$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_mod@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_mod<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 455  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP ; glm::mod<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$mod@M@glm@@YAMMM@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 52
x$ = 80
y$ = 88
??$mod@M@glm@@YAMMM@Z PROC				; glm::mod<float>, COMDAT

; 441  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 64					; 00000040H

; 442  : #		if GLM_COMPILER & GLM_COMPILER_CUDA
; 443  : 			// Another Cuda compiler bug https://github.com/g-truc/glm/issues/530
; 444  : 			tvec1<genType, defaultp> Result(mod(tvec1<genType, defaultp>(x), y));
; 445  : 			return Result.x;
; 446  : #		else
; 447  : 			return mod(tvec1<genType, defaultp>(x), y).x;

	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	movss	xmm2, DWORD PTR y$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$mod@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec1>
	movss	xmm0, DWORD PTR [rax]

; 448  : #		endif
; 449  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$mod@M@glm@@YAMMM@Z ENDP				; glm::mod<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A$8 = 36
B$9 = 40
C$10 = 44
A$11 = 48
B$12 = 52
C$13 = 56
A$14 = 60
B$15 = 64
C$16 = 68
A$17 = 88
B$18 = 116
C$19 = 136
A$20 = 184
B$21 = 232
C$22 = 280
$T23 = 308
$T24 = 312
$T25 = 328
$T26 = 332
$T27 = 336
$T28 = 352
tv71 = 356
tv80 = 360
tv89 = 364
tv140 = 368
tv161 = 372
?test@mod_@@YAHXZ PROC					; mod_::test

; 137  : 	{

$LN13:
	push	rdi
	sub	rsp, 384				; 00000180H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 138  : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 139  : 
; 140  : 		{
; 141  : 			float A(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR A$8[rsp], xmm0

; 142  : 			float B(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR B$9[rsp], xmm0

; 143  : 			float C = glm::mod(A, B);

	movss	xmm1, DWORD PTR B$9[rsp]
	movss	xmm0, DWORD PTR A$8[rsp]
	call	??$mod@M@glm@@YAMMM@Z			; glm::mod<float>
	movss	DWORD PTR C$10[rsp], xmm0

; 144  : 
; 145  : 			Error += glm::abs(C - 0.5f) < 0.00001f ? 0 : 1;

	movss	xmm0, DWORD PTR C$10[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3727c5ac
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@test
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv71[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 146  : 		}
; 147  : 
; 148  : 		{
; 149  : 			float A(-0.2f);

	movss	xmm0, DWORD PTR __real@be4ccccd
	movss	DWORD PTR A$11[rsp], xmm0

; 150  : 			float B(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR B$12[rsp], xmm0

; 151  : 			float C = glm::mod(A, B);

	movss	xmm1, DWORD PTR B$12[rsp]
	movss	xmm0, DWORD PTR A$11[rsp]
	call	??$mod@M@glm@@YAMMM@Z			; glm::mod<float>
	movss	DWORD PTR C$13[rsp], xmm0

; 152  : 
; 153  : 			Error += glm::abs(C - 0.8f) < 0.00001f ? 0 : 1;

	movss	xmm0, DWORD PTR C$13[rsp]
	subss	xmm0, DWORD PTR __real@3f4ccccd
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3727c5ac
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@test
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv80[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 154  : 		}
; 155  : 
; 156  : 		{
; 157  : 			float A(3.0);

	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR A$14[rsp], xmm0

; 158  : 			float B(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR B$15[rsp], xmm0

; 159  : 			float C = glm::mod(A, B);

	movss	xmm1, DWORD PTR B$15[rsp]
	movss	xmm0, DWORD PTR A$14[rsp]
	call	??$mod@M@glm@@YAMMM@Z			; glm::mod<float>
	movss	DWORD PTR C$16[rsp], xmm0

; 160  : 
; 161  : 			Error += glm::abs(C - 1.0f) < 0.00001f ? 0 : 1;

	movss	xmm0, DWORD PTR C$16[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3727c5ac
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@test
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv89[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv89[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 162  : 		}
; 163  : 
; 164  : 		{
; 165  : 			glm::vec4 A(3.0);

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR A$17[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 166  : 			float B(2.0f);

	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR B$18[rsp], xmm0

; 167  : 			glm::vec4 C = glm::mod(A, B);

	movss	xmm2, DWORD PTR B$18[rsp]
	lea	rdx, QWORD PTR A$17[rsp]
	lea	rcx, QWORD PTR C$19[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::mod<float,0,glm::tvec4>

; 168  : 
; 169  : 			Error += glm::all(glm::epsilonEqual(C, glm::vec4(1.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T23[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T24[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T23[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C$19[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv140[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 170  : 		}
; 171  : 
; 172  : 		{
; 173  : 			glm::vec4 A(3.0);

	movss	xmm1, DWORD PTR __real@40400000
	lea	rcx, QWORD PTR A$20[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 174  : 			glm::vec4 B(2.0f);

	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR B$21[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 175  : 			glm::vec4 C = glm::mod(A, B);

	lea	r8, QWORD PTR B$21[rsp]
	lea	rdx, QWORD PTR A$20[rsp]
	lea	rcx, QWORD PTR C$22[rsp]
	call	??$mod@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::mod<float,0,glm::tvec4>

; 176  : 
; 177  : 			Error += glm::all(glm::epsilonEqual(C, glm::vec4(1.0f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T26[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T26[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C$22[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv161[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv161[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 178  : 		}
; 179  : 
; 180  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 181  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@mod_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 384				; 00000180H
	pop	rdi
	ret	0
?test@mod_@@YAHXZ ENDP					; mod_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$modf@N@glm@@YANNAEAN@Z
_TEXT	SEGMENT
x$ = 64
i$ = 72
??$modf@N@glm@@YANNAEAN@Z PROC				; glm::modf<double>, COMDAT

; 466  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 467  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'modf' only accept floating-point inputs");
; 468  : 		return std::modf(x, &i);

	mov	rdx, QWORD PTR i$[rsp]
	movsd	xmm0, QWORD PTR x$[rsp]
	call	QWORD PTR __imp_modf

; 469  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$modf@N@glm@@YANNAEAN@Z ENDP				; glm::modf<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z PROC	; glm::operator==<double,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@N$0A@$0A@$0EA@$0A@@detail@glm@@SA_NAEBU?$tvec4@N$0A@@3@0@Z ; glm::detail::compute_vec4_equal<double,0,0,64,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z ENDP	; glm::operator==<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 56
tv78 = 64
__$ReturnUdt$ = 96
x$ = 104
i$ = 112
??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z PROC ; glm::modf<double,0>, COMDAT

; 497  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 498  : 		return tvec4<T, P>(

	mov	rax, QWORD PTR i$[rsp]
	add	rax, 24
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax+24]
	call	??$modf@N@glm@@YANNAEAN@Z		; glm::modf<double>
	movsd	QWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax+16]
	call	??$modf@N@glm@@YANNAEAN@Z		; glm::modf<double>
	movsd	QWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	call	??$modf@N@glm@@YANNAEAN@Z		; glm::modf<double>
	movsd	QWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	??$modf@N@glm@@YANNAEAN@Z		; glm::modf<double>
	movsd	xmm1, QWORD PTR tv66[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm1, QWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movsd	xmm1, QWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 499  : 			modf(x.x, i.x),
; 500  : 			modf(x.y, i.y),
; 501  : 			modf(x.z, i.z),
; 502  : 			modf(x.w, i.w));
; 503  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z ENDP ; glm::modf<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
x$ = 88
i$ = 96
??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z PROC ; glm::modf<float,0>, COMDAT

; 497  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 498  : 		return tvec4<T, P>(

	mov	rax, QWORD PTR i$[rsp]
	add	rax, 12
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	??$modf@M@glm@@YAMMAEAM@Z		; glm::modf<float>
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 8
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	??$modf@M@glm@@YAMMAEAM@Z		; glm::modf<float>
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 4
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$modf@M@glm@@YAMMAEAM@Z		; glm::modf<float>
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR i$[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR x$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$modf@M@glm@@YAMMAEAM@Z		; glm::modf<float>
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 499  : 			modf(x.x, i.x),
; 500  : 			modf(x.y, i.y),
; 501  : 			modf(x.z, i.z),
; 502  : 			modf(x.w, i.w));
; 503  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z ENDP ; glm::modf<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$modf@M@glm@@YAMMAEAM@Z
_TEXT	SEGMENT
x$ = 64
i$ = 72
??$modf@M@glm@@YAMMAEAM@Z PROC				; glm::modf<float>, COMDAT

; 466  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 467  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'modf' only accept floating-point inputs");
; 468  : 		return std::modf(x, &i);

	mov	rdx, QWORD PTR i$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	?modf@@YAMMPEAM@Z			; modf

; 469  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$modf@M@glm@@YAMMAEAM@Z ENDP				; glm::modf<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 48
X$11 = 52
I$12 = 68
A$13 = 84
X$14 = 104
I$15 = 152
A$16 = 200
X$17 = 248
I$18 = 312
A$19 = 376
X$20 = 424
I$21 = 440
A$22 = 456
$T23 = 464
$T24 = 480
$T25 = 484
$T26 = 500
$T27 = 504
$T28 = 536
$T29 = 544
$T30 = 576
tv68 = 580
tv71 = 584
tv91 = 588
tv140 = 592
tv160 = 596
tv177 = 600
tv183 = 604
tv186 = 608
?test@modf_@@YAHXZ PROC					; modf_::test

; 91   : 	{

$LN19:
	push	rdi
	sub	rsp, 624				; 00000270H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 92   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 93   : 
; 94   : 		{
; 95   : 			float X(1.5f);

	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR X$11[rsp], xmm0

; 96   : 			float I(0.0f);

	xorps	xmm0, xmm0
	movss	DWORD PTR I$12[rsp], xmm0

; 97   : 			float A = glm::modf(X, I);

	lea	rdx, QWORD PTR I$12[rsp]
	movss	xmm0, DWORD PTR X$11[rsp]
	call	??$modf@M@glm@@YAMMAEAM@Z		; glm::modf<float>
	movss	DWORD PTR A$13[rsp], xmm0

; 98   : 
; 99   : 			Error += I == 1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR I$12[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN3@test
	jne	SHORT $LN3@test
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv68[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 			Error += A == 0.5f ? 0 : 1;

	movss	xmm0, DWORD PTR A$13[rsp]
	ucomiss	xmm0, DWORD PTR __real@3f000000
	jp	SHORT $LN5@test
	jne	SHORT $LN5@test
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv71[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 101  : 		}
; 102  : 
; 103  : 		{
; 104  : 			glm::vec4 X(1.1f, 1.2f, 1.5f, 1.7f);

	movss	xmm0, DWORD PTR __real@3fd9999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3fc00000
	movss	xmm2, DWORD PTR __real@3f99999a
	movss	xmm1, DWORD PTR __real@3f8ccccd
	lea	rcx, QWORD PTR X$14[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>

; 105  : 			glm::vec4 I(0.0f);

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR I$15[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 106  : 			glm::vec4 A = glm::modf(X, I);

	lea	r8, QWORD PTR I$15[rsp]
	lea	rdx, QWORD PTR X$14[rsp]
	lea	rcx, QWORD PTR A$16[rsp]
	call	??$modf@M$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@AEAU10@@Z ; glm::modf<float,0>

; 107  : 
; 108  : 			Error += I == glm::vec4(1.0f) ? 0 : 1;

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR I$15[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv91[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv91[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv91[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 109  : 			Error += glm::all(glm::epsilonEqual(A, glm::vec4(0.1f, 0.2f, 0.5f, 0.7f), 0.00001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR $T24[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T25[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T24[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$16[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv140[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv140[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 110  : 		}
; 111  : 
; 112  : 		{
; 113  : 			glm::dvec4 X(1.1, 1.2, 1.5, 1.7);

	movsd	xmm0, QWORD PTR __real@3ffb333333333333
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3ff8000000000000
	movsd	xmm2, QWORD PTR __real@3ff3333333333333
	movsd	xmm1, QWORD PTR __real@3ff199999999999a
	lea	rcx, QWORD PTR X$17[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>

; 114  : 			glm::dvec4 I(0.0);

	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR I$18[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>

; 115  : 			glm::dvec4 A = glm::modf(X, I);

	lea	r8, QWORD PTR I$18[rsp]
	lea	rdx, QWORD PTR X$17[rsp]
	lea	rcx, QWORD PTR A$19[rsp]
	call	??$modf@N$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@AEAU10@@Z ; glm::modf<double,0>

; 116  : 
; 117  : 			Error += I == glm::dvec4(1.0) ? 0 : 1;

	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T27[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR I$18[rsp]
	call	??$?8N$0A@@glm@@YA_NAEBU?$tvec4@N$0A@@0@0@Z ; glm::operator==<double,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv160[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 118  : 			Error += glm::all(glm::epsilonEqual(A, glm::dvec4(0.1, 0.2, 0.5, 0.7), 0.000000001)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3e112e0be826d695
	movsd	QWORD PTR $T28[rsp], xmm0
	movsd	xmm0, QWORD PTR __real@3fe6666666666666
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	movsd	xmm2, QWORD PTR __real@3fc999999999999a
	movsd	xmm1, QWORD PTR __real@3fb999999999999a
	lea	rcx, QWORD PTR $T29[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z	; glm::tvec4<double,0>::tvec4<double,0>
	lea	r9, QWORD PTR $T28[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR A$19[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv177[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv177[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 119  : 		}
; 120  : 
; 121  : 		{
; 122  : 			double X(1.5);

	movsd	xmm0, QWORD PTR __real@3ff8000000000000
	movsd	QWORD PTR X$20[rsp], xmm0

; 123  : 			double I(0.0);

	xorps	xmm0, xmm0
	movsd	QWORD PTR I$21[rsp], xmm0

; 124  : 			double A = glm::modf(X, I);

	lea	rdx, QWORD PTR I$21[rsp]
	movsd	xmm0, QWORD PTR X$20[rsp]
	call	??$modf@N@glm@@YANNAEAN@Z		; glm::modf<double>
	movsd	QWORD PTR A$22[rsp], xmm0

; 125  : 
; 126  : 			Error += I == 1.0 ? 0 : 1;

	movsd	xmm0, QWORD PTR I$21[rsp]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	jp	SHORT $LN15@test
	jne	SHORT $LN15@test
	mov	DWORD PTR tv183[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv183[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv183[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 127  : 			Error += A == 0.5 ? 0 : 1;

	movsd	xmm0, QWORD PTR A$22[rsp]
	ucomisd	xmm0, QWORD PTR __real@3fe0000000000000
	jp	SHORT $LN17@test
	jne	SHORT $LN17@test
	mov	DWORD PTR tv186[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv186[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv186[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 128  : 		}
; 129  : 
; 130  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 131  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@modf_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 624				; 00000270H
	pop	rdi
	ret	0
?test@modf_@@YAHXZ ENDP					; modf_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
$T3 = 96
tv66 = 128
__$ReturnUdt$ = 160
x$ = 168
y$ = 176
epsilon$ = 184
??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z PROC ; glm::epsilonEqual<double,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z ENDP ; glm::epsilonEqual<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z PROC ; glm::floor<double,0,glm::tvec4>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@N$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ENDP ; glm::floor<double,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 193  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR a$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR b$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR c$[rsp]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@NNNN@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec4<double,0>::tvec4<double,0>, COMDAT

; 188  : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+24], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec4<double,0>::tvec4<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec4<double,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@N$0A@@glm@@SAHXZ	; glm::tvec4<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec4<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@N$0A@@glm@@SAHXZ PROC			; glm::tvec4<double,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@_N000@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 188  : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+2], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+3], cl

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec4>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
tv66 = 104
__$ReturnUdt$ = 128
x$ = 136
y$ = 144
epsilon$ = 152
??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z PROC ; glm::epsilonEqual<double,0,glm::tvec3>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec3>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z ENDP ; glm::epsilonEqual<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z PROC ; glm::floor<double,0,glm::tvec3>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@N$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ENDP ; glm::floor<double,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 70   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR a$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR b$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR c$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@NNN@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec3<double,0>::tvec3<double,0>, COMDAT

; 65   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+16], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec3<double,0>::tvec3<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec3<double,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@N$0A@@glm@@SAHXZ	; glm::tvec3<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec3<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@N$0A@@glm@@SAHXZ PROC			; glm::tvec3<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z PROC			; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@_N00@Z ENDP			; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 65   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+2], cl

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 44
$T3 = 56
tv66 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
epsilon$ = 120
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec3>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec3>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z PROC ; glm::epsilonEqual<double,0,glm::tvec2>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z ENDP ; glm::epsilonEqual<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z PROC ; glm::floor<double,0,glm::tvec2>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ENDP ; glm::floor<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 57   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s1$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s2$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 52   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec2<double,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@N$0A@@glm@@SAHXZ	; glm::tvec2<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec2<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@N$0A@@glm@@SAHXZ PROC			; glm::tvec2<double,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z PROC			; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s1$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR s2$[rsp]
	mov	BYTE PTR [rax+1], cl

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@_N0@Z ENDP			; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z PROC			; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 52   : 	{}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR scalar$[rsp]
	mov	BYTE PTR [rax+1], cl

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@_N@Z ENDP			; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec2>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec2>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z PROC ; glm::epsilonEqual<double,0,glm::tvec1>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::abs<double,0,glm::tvec1>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0@Z ; glm::lessThan<double,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z ENDP ; glm::epsilonEqual<double,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z PROC ; glm::floor<double,0,glm::tvec1>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@N$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@N$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<double,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ENDP ; glm::floor<double,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@N$0A@@glm@@QEAA@N@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@N$0A@@glm@@QEAA@N@Z PROC			; glm::tvec1<double,0>::tvec1<double,0>, COMDAT

; 39   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@N$0A@@glm@@QEAA@N@Z ENDP			; glm::tvec1<double,0>::tvec1<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z PROC			; glm::tvec1<double,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@N$0A@@glm@@SAHXZ	; glm::tvec1<double,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@N$0A@@glm@@QEBAAEBNH@Z ENDP			; glm::tvec1<double,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@N$0A@@glm@@SAHXZ PROC			; glm::tvec1<double,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<double,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec1>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec1<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec1<bool,0>::tvec1<bool,0>, COMDAT

; 34   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec1<bool,0>::tvec1<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec1<bool,0>::operator[], COMDAT

; 71   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 72   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@_N$0A@@glm@@SAHXZ	; glm::tvec1<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 73   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 74   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec1<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@_N$0A@@glm@@SAHXZ PROC			; glm::tvec1<bool,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec1<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
$T3 = 40
tv66 = 48
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec1>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec1>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec1>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z PROC ; glm::floor<float,0,glm::tvec1>, COMDAT

; 346  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 347  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
; 348  : 		return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_floor@M$0A@Utvec1@glm@@$0A@@detail@glm@@SA?AU?$tvec1@M$0A@@3@AEBU43@@Z ; glm::detail::compute_floor<float,0,glm::tvec1,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 349  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ENDP ; glm::floor<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec1<float,0>::operator[], COMDAT

; 78   : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec1@M$0A@@glm@@SAHXZ	; glm::tvec1<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 79					; 0000004fH
	lea	rdx, OFFSET FLAT:??_C@_1LG@CIKOIEGN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 80   : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 81   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec1@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec1<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.hpp
;	COMDAT ?length@?$tvec1@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec1@M$0A@@glm@@SAHXZ PROC			; glm::tvec1<float,0>::length, COMDAT

; 81   : 		GLM_FUNC_DECL static length_type length(){return 1;}

$LN3:
	push	rdi
	mov	eax, 1
	pop	rdi
	ret	0
?length@?$tvec1@M$0A@@glm@@SAHXZ ENDP			; glm::tvec1<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_common.cpp
_TEXT	SEGMENT
Error$ = 32
A$19 = 36
B$20 = 40
A$21 = 48
B$22 = 56
A$23 = 68
B$24 = 100
A$25 = 136
B$26 = 168
A$27 = 200
B$28 = 232
A$29 = 264
B$30 = 312
A$31 = 360
B$32 = 408
A$33 = 456
B$34 = 504
A$35 = 552
B$36 = 600
A$37 = 648
B$38 = 712
$T39 = 756
$T40 = 760
$T41 = 764
$T42 = 768
$T43 = 776
$T44 = 784
$T45 = 788
$T46 = 792
$T47 = 800
$T48 = 808
$T49 = 816
$T50 = 832
$T51 = 836
$T52 = 840
$T53 = 852
$T54 = 856
$T55 = 864
$T56 = 888
$T57 = 892
$T58 = 896
$T59 = 912
$T60 = 920
$T61 = 928
$T62 = 960
tv84 = 964
tv134 = 968
tv152 = 972
tv170 = 976
tv188 = 980
tv206 = 984
tv256 = 988
tv274 = 992
?test@floor_@@YAHXZ PROC				; floor_::test

; 15   : 	{

$LN19:
	push	rdi
	sub	rsp, 1008				; 000003f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 244				; 000000f4H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 16   : 		int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 17   : 
; 18   : 		{
; 19   : 			float A(1.1f);

	movss	xmm0, DWORD PTR __real@3f8ccccd
	movss	DWORD PTR A$19[rsp], xmm0

; 20   : 			float B = glm::floor(A);

	movss	xmm0, DWORD PTR A$19[rsp]
	call	?floor@@YAMM@Z				; floor
	movss	DWORD PTR B$20[rsp], xmm0

; 21   : 		}
; 22   : 
; 23   : 		{
; 24   : 			double A(1.1f);

	movsd	xmm0, QWORD PTR __real@3ff19999a0000000
	movsd	QWORD PTR A$21[rsp], xmm0

; 25   : 			double B = glm::floor(A);

	movsd	xmm0, QWORD PTR A$21[rsp]
	call	QWORD PTR __imp_floor
	movsd	QWORD PTR B$22[rsp], xmm0

; 26   : 		}
; 27   : 
; 28   : 		{
; 29   : 			glm::vec1 A(1.1f);

	movss	xmm1, DWORD PTR __real@3f8ccccd
	lea	rcx, QWORD PTR A$23[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>

; 30   : 			glm::vec1 B = glm::floor(A);

	lea	rdx, QWORD PTR A$23[rsp]
	lea	rcx, QWORD PTR B$24[rsp]
	call	??$floor@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec1>

; 31   : 
; 32   : 			Error += glm::all(glm::epsilonEqual(B, glm::vec1(1.0), 0.0001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T39[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T40[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	lea	r9, QWORD PTR $T39[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$24[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??$epsilonEqual@M$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv84[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 33   : 		}
; 34   : 
; 35   : 		{
; 36   : 			glm::dvec1 A(1.1f);

	movsd	xmm1, QWORD PTR __real@3ff19999a0000000
	lea	rcx, QWORD PTR A$25[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>

; 37   : 			glm::dvec1 B = glm::floor(A);

	lea	rdx, QWORD PTR A$25[rsp]
	lea	rcx, QWORD PTR B$26[rsp]
	call	??$floor@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec1>

; 38   : 
; 39   : 			Error += glm::all(glm::epsilonEqual(B, glm::dvec1(1.0), 0.0001)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T42[rsp], xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T43[rsp]
	call	??0?$tvec1@N$0A@@glm@@QEAA@N@Z		; glm::tvec1<double,0>::tvec1<double,0>
	lea	r9, QWORD PTR $T42[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$26[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	??$epsilonEqual@N$0A@Utvec1@glm@@@glm@@YA?AU?$tvec1@_N$0A@@0@AEBU?$tvec1@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec1>
	mov	rcx, rax
	call	??$all@$0A@Utvec1@glm@@@glm@@YA_NAEBU?$tvec1@_N$0A@@0@@Z ; glm::all<0,glm::tvec1>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv134[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 		}
; 41   : 
; 42   : 		{
; 43   : 			glm::vec2 A(1.1f);

	movss	xmm1, DWORD PTR __real@3f8ccccd
	lea	rcx, QWORD PTR A$27[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 44   : 			glm::vec2 B = glm::floor(A);

	lea	rdx, QWORD PTR A$27[rsp]
	lea	rcx, QWORD PTR B$28[rsp]
	call	??$floor@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec2>

; 45   : 
; 46   : 			Error += glm::all(glm::epsilonEqual(B, glm::vec2(1.0), 0.0001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T45[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T46[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	lea	r9, QWORD PTR $T45[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$28[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv152[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv152[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 47   : 		}
; 48   : 
; 49   : 		{
; 50   : 			glm::dvec2 A(1.1f);

	movsd	xmm1, QWORD PTR __real@3ff19999a0000000
	lea	rcx, QWORD PTR A$29[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>

; 51   : 			glm::dvec2 B = glm::floor(A);

	lea	rdx, QWORD PTR A$29[rsp]
	lea	rcx, QWORD PTR B$30[rsp]
	call	??$floor@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec2>

; 52   : 
; 53   : 			Error += glm::all(glm::epsilonEqual(B, glm::dvec2(1.0), 0.0001)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T48[rsp], xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T49[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@N@Z		; glm::tvec2<double,0>::tvec2<double,0>
	lea	r9, QWORD PTR $T48[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$30[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	call	??$epsilonEqual@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@test
	mov	DWORD PTR tv170[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv170[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv170[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 54   : 		}
; 55   : 
; 56   : 		{
; 57   : 			glm::vec3 A(1.1f);

	movss	xmm1, DWORD PTR __real@3f8ccccd
	lea	rcx, QWORD PTR A$31[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>

; 58   : 			glm::vec3 B = glm::floor(A);

	lea	rdx, QWORD PTR A$31[rsp]
	lea	rcx, QWORD PTR B$32[rsp]
	call	??$floor@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec3>

; 59   : 
; 60   : 			Error += glm::all(glm::epsilonEqual(B, glm::vec3(1.0), 0.0001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T51[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T52[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	lea	r9, QWORD PTR $T51[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$32[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	call	??$epsilonEqual@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@test
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN12@test
$LN11@test:
	mov	DWORD PTR tv188[rsp], 1
$LN12@test:
	mov	eax, DWORD PTR tv188[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 		}
; 62   : 
; 63   : 		{
; 64   : 			glm::dvec3 A(1.1f);

	movsd	xmm1, QWORD PTR __real@3ff19999a0000000
	lea	rcx, QWORD PTR A$33[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>

; 65   : 			glm::dvec3 B = glm::floor(A);

	lea	rdx, QWORD PTR A$33[rsp]
	lea	rcx, QWORD PTR B$34[rsp]
	call	??$floor@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec3>

; 66   : 
; 67   : 			Error += glm::all(glm::epsilonEqual(B, glm::dvec3(1.0), 0.0001)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T54[rsp], xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T55[rsp]
	call	??0?$tvec3@N$0A@@glm@@QEAA@N@Z		; glm::tvec3<double,0>::tvec3<double,0>
	lea	r9, QWORD PTR $T54[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$34[rsp]
	lea	rcx, QWORD PTR $T56[rsp]
	call	??$epsilonEqual@N$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@test
	mov	DWORD PTR tv206[rsp], 0
	jmp	SHORT $LN14@test
$LN13@test:
	mov	DWORD PTR tv206[rsp], 1
$LN14@test:
	mov	eax, DWORD PTR tv206[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 68   : 		}
; 69   : 
; 70   : 		{
; 71   : 			glm::vec4 A(1.1f);

	movss	xmm1, DWORD PTR __real@3f8ccccd
	lea	rcx, QWORD PTR A$35[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>

; 72   : 			glm::vec4 B = glm::floor(A);

	lea	rdx, QWORD PTR A$35[rsp]
	lea	rcx, QWORD PTR B$36[rsp]
	call	??$floor@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::floor<float,0,glm::tvec4>

; 73   : 
; 74   : 			Error += glm::all(glm::epsilonEqual(B, glm::vec4(1.0), 0.0001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T57[rsp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T58[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	lea	r9, QWORD PTR $T57[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$36[rsp]
	lea	rcx, QWORD PTR $T59[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@test
	mov	DWORD PTR tv256[rsp], 0
	jmp	SHORT $LN16@test
$LN15@test:
	mov	DWORD PTR tv256[rsp], 1
$LN16@test:
	mov	eax, DWORD PTR tv256[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 		}
; 76   : 
; 77   : 		{
; 78   : 			glm::dvec4 A(1.1f);

	movsd	xmm1, QWORD PTR __real@3ff19999a0000000
	lea	rcx, QWORD PTR A$37[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>

; 79   : 			glm::dvec4 B = glm::floor(A);

	lea	rdx, QWORD PTR A$37[rsp]
	lea	rcx, QWORD PTR B$38[rsp]
	call	??$floor@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@N$0A@@0@AEBU10@@Z ; glm::floor<double,0,glm::tvec4>

; 80   : 
; 81   : 			Error += glm::all(glm::epsilonEqual(B, glm::dvec4(1.0), 0.0001)) ? 0 : 1;

	movsd	xmm0, QWORD PTR __real@3f1a36e2eb1c432d
	movsd	QWORD PTR $T60[rsp], xmm0
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T61[rsp]
	call	??0?$tvec4@N$0A@@glm@@QEAA@N@Z		; glm::tvec4<double,0>::tvec4<double,0>
	lea	r9, QWORD PTR $T60[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR B$38[rsp]
	lea	rcx, QWORD PTR $T62[rsp]
	call	??$epsilonEqual@N$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@N$0A@@0@0AEBN@Z ; glm::epsilonEqual<double,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@test
	mov	DWORD PTR tv274[rsp], 0
	jmp	SHORT $LN18@test
$LN17@test:
	mov	DWORD PTR tv274[rsp], 1
$LN18@test:
	mov	eax, DWORD PTR tv274[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 82   : 		}
; 83   : 
; 84   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 85   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@floor_@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 1008				; 000003f0H
	pop	rdi
	ret	0
?test@floor_@@YAHXZ ENDP				; floor_::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEAAAEAMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@N@glm@@YANN@Z
_TEXT	SEGMENT
x$ = 64
??$abs@N@glm@@YANN@Z PROC				; glm::abs<double>, COMDAT

; 310  : 	{

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movsd	xmm0, QWORD PTR x$[rsp]
	call	?call@?$compute_abs@N$00@detail@glm@@SANN@Z ; glm::detail::compute_abs<double,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@N@glm@@YANN@Z ENDP				; glm::abs<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M@glm@@YA_NAEBM00@Z
_TEXT	SEGMENT
tv68 = 32
x$ = 64
y$ = 72
epsilon$ = 80
??$epsilonEqual@M@glm@@YA_NAEBM00@Z PROC		; glm::epsilonEqual<float>, COMDAT

; 21   : 	{

$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 22   : 		return abs(x - y) < epsilon;

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@epsilonEqu
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@epsilonEqu
$LN3@epsilonEqu:
	mov	DWORD PTR tv68[rsp], 0
$LN4@epsilonEqu:
	movzx	eax, BYTE PTR tv68[rsp]

; 23   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$epsilonEqual@M@glm@@YA_NAEBM00@Z ENDP		; glm::epsilonEqual<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 872  :     _NODISCARD static constexpr float epsilon() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 873  :         return FLT_EPSILON;

	movss	xmm0, DWORD PTR __real@34000000

; 874  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?max@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::max, COMDAT

; 731  :     _NODISCARD static constexpr unsigned int(max)() noexcept {

$LN3:
	push	rdi

; 732  :         return UINT_MAX;

	mov	eax, -1					; ffffffffH

; 733  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 552  :     _NODISCARD static constexpr int(max)() noexcept {

$LN3:
	push	rdi

; 553  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 554  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?min@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?min@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::min, COMDAT

; 548  :     _NODISCARD static constexpr int(min)() noexcept {

$LN3:
	push	rdi

; 549  :         return INT_MIN;

	mov	eax, -2147483648			; ffffffff80000000H

; 550  :     }

	pop	rdi
	ret	0
?min@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@E@std@@SAEXZ
_TEXT	SEGMENT
?max@?$numeric_limits@E@std@@SAEXZ PROC			; std::numeric_limits<unsigned char>::max, COMDAT

; 286  :     _NODISCARD static constexpr unsigned char(max)() noexcept {

$LN3:
	push	rdi

; 287  :         return UCHAR_MAX;

	mov	al, 255					; 000000ffH

; 288  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@E@std@@SAEXZ ENDP			; std::numeric_limits<unsigned char>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?intBitsToFloat@glm@@YAMAEBH@Z
_TEXT	SEGMENT
v$ = 32
?intBitsToFloat@glm@@YAMAEBH@Z PROC			; glm::intBitsToFloat, COMDAT

; 720  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 721  : 		return reinterpret_cast<float&>(const_cast<int&>(v));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]

; 722  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
?intBitsToFloat@glm@@YAMAEBH@Z ENDP			; glm::intBitsToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?floatBitsToUint@glm@@YAIAEBM@Z
_TEXT	SEGMENT
v$ = 16
?floatBitsToUint@glm@@YAIAEBM@Z PROC			; glm::floatBitsToUint, COMDAT

; 709  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 710  : 		return reinterpret_cast<uint&>(const_cast<float&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]

; 711  : 	}

	pop	rdi
	ret	0
?floatBitsToUint@glm@@YAIAEBM@Z ENDP			; glm::floatBitsToUint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?floatBitsToInt@glm@@YAHAEBM@Z
_TEXT	SEGMENT
v$ = 16
?floatBitsToInt@glm@@YAHAEBM@Z PROC			; glm::floatBitsToInt, COMDAT

; 698  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 699  : 		return reinterpret_cast<int&>(const_cast<float&>(v));

	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax]

; 700  : 	}

	pop	rdi
	ret	0
?floatBitsToInt@glm@@YAHAEBM@Z ENDP			; glm::floatBitsToInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?round@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?round@@YAMM@Z PROC					; round, COMDAT

; 238  : _NODISCARD _Check_return_ inline float round(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 239  : #if _HAS_CMATH_INTRINSICS
; 240  :     return __roundf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	roundf

; 241  : #elif defined(__clang__)
; 242  :     return __builtin_roundf(_Xx);
; 243  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 244  :     return _CSTD roundf(_Xx);
; 245  : #endif // ^^^ intrinsics unavailable ^^^
; 246  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?round@@YAMM@Z ENDP					; round
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?modf@@YAMMPEAM@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?modf@@YAMMPEAM@Z PROC					; modf, COMDAT

; 206  : inline float modf(_In_ float _Xx, _Out_ float* _Yx) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 207  :     return _CSTD modff(_Xx, _Yx);

	mov	rdx, QWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_modff

; 208  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?modf@@YAMMPEAM@Z ENDP					; modf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?ldexp@@YAMMH@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?ldexp@@YAMMH@Z PROC					; ldexp, COMDAT

; 162  : _NODISCARD _Check_return_ inline float ldexp(_In_ float _Xx, _In_ int _Yx) noexcept /* strengthened */ {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 163  :     return _CSTD ldexpf(_Xx, _Yx);

	mov	edx, DWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	ldexpf

; 164  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?ldexp@@YAMMH@Z ENDP					; ldexp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?frexp@@YAMMPEAH@Z
_TEXT	SEGMENT
_Xx$ = 64
_Yx$ = 72
?frexp@@YAMMPEAH@Z PROC					; frexp, COMDAT

; 150  : inline float frexp(_In_ float _Xx, _Out_ int* _Yx) noexcept /* strengthened */ {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 151  :     return _CSTD frexpf(_Xx, _Yx);

	mov	rdx, QWORD PTR _Yx$[rsp]
	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	frexpf

; 152  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?frexp@@YAMMPEAH@Z ENDP					; frexp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?floor@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?floor@@YAMM@Z PROC					; floor, COMDAT

; 124  : _NODISCARD _Check_return_ inline float floor(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 125  : #if _HAS_CMATH_INTRINSICS
; 126  :     return __floorf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	floorf

; 127  : #elif defined(__clang__)
; 128  :     return __builtin_floorf(_Xx);
; 129  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 130  :     return _CSTD floorf(_Xx);
; 131  : #endif // ^^^ intrinsics unavailable ^^^
; 132  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?floor@@YAMM@Z ENDP					; floor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ldexpf
_TEXT	SEGMENT
_X$ = 64
_Y$ = 72
ldexpf	PROC						; COMDAT

; 705  :     {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 706  :         return (float)ldexp(_X, _Y);

	cvtss2sd xmm0, DWORD PTR _X$[rsp]
	mov	edx, DWORD PTR _Y$[rsp]
	call	QWORD PTR __imp_ldexp
	cvtsd2ss xmm0, xmm0

; 707  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ldexpf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT frexpf
_TEXT	SEGMENT
_X$ = 64
_Y$ = 72
frexpf	PROC						; COMDAT

; 695  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 696  :         return (float)frexp(_X, _Y);

	cvtss2sd xmm0, DWORD PTR _X$[rsp]
	mov	rdx, QWORD PTR _Y$[rsp]
	call	QWORD PTR __imp_frexp
	cvtsd2ss xmm0, xmm0

; 697  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
frexpf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHN@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHN@Z PROC				; fpclassify, COMDAT

; 294  :     {

$LN3:
	movsd	QWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 295  :         return _dtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__dtest
	cwde

; 296  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHN@Z ENDP				; fpclassify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_math.h
;	COMDAT ?fpclassify@@YAHM@Z
_TEXT	SEGMENT
_X$ = 48
?fpclassify@@YAHM@Z PROC				; fpclassify, COMDAT

; 289  :     {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 290  :         return _fdtest(&_X);

	lea	rcx, QWORD PTR _X$[rsp]
	call	QWORD PTR __imp__fdtest
	cwde

; 291  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fpclassify@@YAHM@Z ENDP				; fpclassify
_TEXT	ENDS
END
