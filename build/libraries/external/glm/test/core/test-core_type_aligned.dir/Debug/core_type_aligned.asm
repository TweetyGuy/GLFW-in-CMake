; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?test_aligned@@YAHXZ				; test_aligned
PUBLIC	?test_unaligned@@YAHXZ				; test_unaligned
PUBLIC	main
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
pdata	SEGMENT
$pdata$?test_aligned@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+822
	DD	imagerel $unwind$?test_aligned@@YAHXZ
$pdata$?test_unaligned@@YAHXZ DD imagerel $LN31
	DD	imagerel $LN31+822
	DD	imagerel $unwind$?test_unaligned@@YAHXZ
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$?test_aligned@@YAHXZ DD 030901H
	DD	0160109H
	DD	07002H
$unwind$?test_unaligned@@YAHXZ DD 030901H
	DD	0160109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_aligned.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 121  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 122  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 123  : 
; 124  : 	Error += test_aligned();

	call	?test_aligned@@YAHXZ			; test_aligned
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 125  : 	Error += test_unaligned();

	call	?test_unaligned@@YAHXZ			; test_unaligned
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 126  : 
; 127  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 128  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_aligned.cpp
_TEXT	SEGMENT
Error$ = 0
size1_unaligned$ = 8
size2_unaligned$ = 16
size4_unaligned$ = 24
size8_unaligned$ = 32
size16_unaligned$ = 40
size32_unaligned$ = 48
size64_unaligned$ = 56
align1_unaligned$ = 64
align2_unaligned$ = 72
align4_unaligned$ = 80
align8_unaligned$ = 88
align16_unaligned$ = 96
align32_unaligned$ = 104
align64_unaligned$ = 112
tv65 = 120
tv68 = 124
tv71 = 128
tv74 = 132
tv77 = 136
tv80 = 140
tv83 = 144
tv86 = 148
tv89 = 152
tv92 = 156
tv95 = 160
tv130 = 164
tv133 = 168
tv136 = 172
?test_unaligned@@YAHXZ PROC				; test_unaligned

; 62   : {

$LN31:
	push	rdi
	sub	rsp, 176				; 000000b0H

; 63   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 64   : 
; 65   : 	size_t size1_unaligned = sizeof(glm::detail::storage<int, 1, false>::type);

	mov	QWORD PTR size1_unaligned$[rsp], 1

; 66   : 	Error += size1_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR size1_unaligned$[rsp], 1
	jne	SHORT $LN3@test_unali
	mov	DWORD PTR tv65[rsp], 0
	jmp	SHORT $LN4@test_unali
$LN3@test_unali:
	mov	DWORD PTR tv65[rsp], 1
$LN4@test_unali:
	mov	eax, DWORD PTR tv65[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 67   : 	size_t size2_unaligned = sizeof(glm::detail::storage<int, 2, false>::type);

	mov	QWORD PTR size2_unaligned$[rsp], 2

; 68   : 	Error += size2_unaligned == 2 ? 0 : 1;

	cmp	QWORD PTR size2_unaligned$[rsp], 2
	jne	SHORT $LN5@test_unali
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN6@test_unali
$LN5@test_unali:
	mov	DWORD PTR tv68[rsp], 1
$LN6@test_unali:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 69   : 	size_t size4_unaligned = sizeof(glm::detail::storage<int, 4, false>::type);

	mov	QWORD PTR size4_unaligned$[rsp], 4

; 70   : 	Error += size4_unaligned == 4 ? 0 : 1;

	cmp	QWORD PTR size4_unaligned$[rsp], 4
	jne	SHORT $LN7@test_unali
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN8@test_unali
$LN7@test_unali:
	mov	DWORD PTR tv71[rsp], 1
$LN8@test_unali:
	mov	eax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 71   : 	size_t size8_unaligned = sizeof(glm::detail::storage<int, 8, false>::type);

	mov	QWORD PTR size8_unaligned$[rsp], 8

; 72   : 	Error += size8_unaligned == 8 ? 0 : 1;

	cmp	QWORD PTR size8_unaligned$[rsp], 8
	jne	SHORT $LN9@test_unali
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN10@test_unali
$LN9@test_unali:
	mov	DWORD PTR tv74[rsp], 1
$LN10@test_unali:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 	size_t size16_unaligned = sizeof(glm::detail::storage<int, 16, false>::type);

	mov	QWORD PTR size16_unaligned$[rsp], 16

; 74   : 	Error += size16_unaligned == 16 ? 0 : 1;

	cmp	QWORD PTR size16_unaligned$[rsp], 16
	jne	SHORT $LN11@test_unali
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN12@test_unali
$LN11@test_unali:
	mov	DWORD PTR tv77[rsp], 1
$LN12@test_unali:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 	size_t size32_unaligned = sizeof(glm::detail::storage<int, 32, false>::type);

	mov	QWORD PTR size32_unaligned$[rsp], 32	; 00000020H

; 76   : 	Error += size32_unaligned == 32 ? 0 : 1;

	cmp	QWORD PTR size32_unaligned$[rsp], 32	; 00000020H
	jne	SHORT $LN13@test_unali
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN14@test_unali
$LN13@test_unali:
	mov	DWORD PTR tv80[rsp], 1
$LN14@test_unali:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 	size_t size64_unaligned = sizeof(glm::detail::storage<int, 64, false>::type);

	mov	QWORD PTR size64_unaligned$[rsp], 64	; 00000040H

; 78   : 	Error += size64_unaligned == 64 ? 0 : 1;

	cmp	QWORD PTR size64_unaligned$[rsp], 64	; 00000040H
	jne	SHORT $LN15@test_unali
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN16@test_unali
$LN15@test_unali:
	mov	DWORD PTR tv83[rsp], 1
$LN16@test_unali:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 79   : 
; 80   : #	if GLM_HAS_ALIGNOF
; 81   : 
; 82   : 	size_t align1_unaligned = alignof(glm::detail::storage<int, 1, false>::type);

	mov	QWORD PTR align1_unaligned$[rsp], 1

; 83   : 	Error += align1_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align1_unaligned$[rsp], 1
	jne	SHORT $LN17@test_unali
	mov	DWORD PTR tv86[rsp], 0
	jmp	SHORT $LN18@test_unali
$LN17@test_unali:
	mov	DWORD PTR tv86[rsp], 1
$LN18@test_unali:
	mov	eax, DWORD PTR tv86[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 84   : 	size_t align2_unaligned = alignof(glm::detail::storage<int, 2, false>::type);

	mov	QWORD PTR align2_unaligned$[rsp], 1

; 85   : 	Error += align2_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align2_unaligned$[rsp], 1
	jne	SHORT $LN19@test_unali
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN20@test_unali
$LN19@test_unali:
	mov	DWORD PTR tv89[rsp], 1
$LN20@test_unali:
	mov	eax, DWORD PTR tv89[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 86   : 	size_t align4_unaligned = alignof(glm::detail::storage<int, 4, false>::type);

	mov	QWORD PTR align4_unaligned$[rsp], 1

; 87   : 	Error += align4_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align4_unaligned$[rsp], 1
	jne	SHORT $LN21@test_unali
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN22@test_unali
$LN21@test_unali:
	mov	DWORD PTR tv92[rsp], 1
$LN22@test_unali:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 88   : 	size_t align8_unaligned = alignof(glm::detail::storage<int, 8, false>::type);

	mov	QWORD PTR align8_unaligned$[rsp], 1

; 89   : 	Error += align8_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align8_unaligned$[rsp], 1
	jne	SHORT $LN23@test_unali
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN24@test_unali
$LN23@test_unali:
	mov	DWORD PTR tv95[rsp], 1
$LN24@test_unali:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 90   : 	size_t align16_unaligned = alignof(glm::detail::storage<int, 16, false>::type);

	mov	QWORD PTR align16_unaligned$[rsp], 1

; 91   : 	Error += align16_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align16_unaligned$[rsp], 1
	jne	SHORT $LN25@test_unali
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN26@test_unali
$LN25@test_unali:
	mov	DWORD PTR tv130[rsp], 1
$LN26@test_unali:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 92   : 	size_t align32_unaligned = alignof(glm::detail::storage<int, 32, false>::type);

	mov	QWORD PTR align32_unaligned$[rsp], 1

; 93   : 	Error += align32_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align32_unaligned$[rsp], 1
	jne	SHORT $LN27@test_unali
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN28@test_unali
$LN27@test_unali:
	mov	DWORD PTR tv133[rsp], 1
$LN28@test_unali:
	mov	eax, DWORD PTR tv133[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 94   : 	size_t align64_unaligned = alignof(glm::detail::storage<int, 64, false>::type);

	mov	QWORD PTR align64_unaligned$[rsp], 1

; 95   : 	Error += align64_unaligned == 1 ? 0 : 1;

	cmp	QWORD PTR align64_unaligned$[rsp], 1
	jne	SHORT $LN29@test_unali
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN30@test_unali
$LN29@test_unali:
	mov	DWORD PTR tv136[rsp], 1
$LN30@test_unali:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 96   : 
; 97   : #	elif GLM_COMPILER & GLM_COMPILER_GCC
; 98   : 
; 99   : 	size_t align1_unaligned = __alignof__(glm::detail::storage<int, 1, false>::type);
; 100  : 	Error += align1_unaligned == 1 ? 0 : 1;
; 101  : 	size_t align2_unaligned = __alignof__(glm::detail::storage<int, 2, false>::type);
; 102  : 	Error += align2_unaligned == 1 ? 0 : 1;
; 103  : 	size_t align4_unaligned = __alignof__(glm::detail::storage<int, 4, false>::type);
; 104  : 	Error += align4_unaligned == 1 ? 0 : 1;
; 105  : 	size_t align8_unaligned = __alignof__(glm::detail::storage<int, 8, false>::type);
; 106  : 	Error += align8_unaligned == 1 ? 0 : 1;
; 107  : 	size_t align16_unaligned = __alignof__(glm::detail::storage<int, 16, false>::type);
; 108  : 	Error += align16_unaligned == 1 ? 0 : 1;
; 109  : 	size_t align32_unaligned = __alignof__(glm::detail::storage<int, 32, false>::type);
; 110  : 	Error += align32_unaligned == 1 ? 0 : 1;
; 111  : 	size_t align64_unaligned = __alignof__(glm::detail::storage<int, 64, false>::type);
; 112  : 	Error += align64_unaligned == 1 ? 0 : 1;
; 113  : 
; 114  : #	endif //GLM_HAS_ALIGNOF
; 115  : 
; 116  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 117  : }

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_unaligned@@YAHXZ ENDP				; test_unaligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_type_aligned.cpp
_TEXT	SEGMENT
Error$ = 0
size1_aligned$ = 8
size2_aligned$ = 16
size4_aligned$ = 24
size8_aligned$ = 32
size16_aligned$ = 40
size32_aligned$ = 48
size64_aligned$ = 56
align1_aligned$ = 64
align2_aligned$ = 72
align4_aligned$ = 80
align8_aligned$ = 88
align16_aligned$ = 96
align32_aligned$ = 104
align64_aligned$ = 112
tv65 = 120
tv68 = 124
tv71 = 128
tv74 = 132
tv77 = 136
tv80 = 140
tv83 = 144
tv86 = 148
tv89 = 152
tv92 = 156
tv95 = 160
tv130 = 164
tv133 = 168
tv136 = 172
?test_aligned@@YAHXZ PROC				; test_aligned

; 4    : {

$LN31:
	push	rdi
	sub	rsp, 176				; 000000b0H

; 5    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 6    : 
; 7    : 	size_t size1_aligned = sizeof(glm::detail::storage<int, 1, true>::type);

	mov	QWORD PTR size1_aligned$[rsp], 1

; 8    : 	Error += size1_aligned == 1 ? 0 : 1;

	cmp	QWORD PTR size1_aligned$[rsp], 1
	jne	SHORT $LN3@test_align
	mov	DWORD PTR tv65[rsp], 0
	jmp	SHORT $LN4@test_align
$LN3@test_align:
	mov	DWORD PTR tv65[rsp], 1
$LN4@test_align:
	mov	eax, DWORD PTR tv65[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 9    : 	size_t size2_aligned = sizeof(glm::detail::storage<int, 2, true>::type);

	mov	QWORD PTR size2_aligned$[rsp], 2

; 10   : 	Error += size2_aligned == 2 ? 0 : 1;

	cmp	QWORD PTR size2_aligned$[rsp], 2
	jne	SHORT $LN5@test_align
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN6@test_align
$LN5@test_align:
	mov	DWORD PTR tv68[rsp], 1
$LN6@test_align:
	mov	eax, DWORD PTR tv68[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 11   : 	size_t size4_aligned = sizeof(glm::detail::storage<int, 4, true>::type);

	mov	QWORD PTR size4_aligned$[rsp], 4

; 12   : 	Error += size4_aligned == 4 ? 0 : 1;

	cmp	QWORD PTR size4_aligned$[rsp], 4
	jne	SHORT $LN7@test_align
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN8@test_align
$LN7@test_align:
	mov	DWORD PTR tv71[rsp], 1
$LN8@test_align:
	mov	eax, DWORD PTR tv71[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 13   : 	size_t size8_aligned = sizeof(glm::detail::storage<int, 8, true>::type);

	mov	QWORD PTR size8_aligned$[rsp], 8

; 14   : 	Error += size8_aligned == 8 ? 0 : 1;

	cmp	QWORD PTR size8_aligned$[rsp], 8
	jne	SHORT $LN9@test_align
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN10@test_align
$LN9@test_align:
	mov	DWORD PTR tv74[rsp], 1
$LN10@test_align:
	mov	eax, DWORD PTR tv74[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 15   : 	size_t size16_aligned = sizeof(glm::detail::storage<int, 16, true>::type);

	mov	QWORD PTR size16_aligned$[rsp], 16

; 16   : 	Error += size16_aligned == 16 ? 0 : 1;

	cmp	QWORD PTR size16_aligned$[rsp], 16
	jne	SHORT $LN11@test_align
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN12@test_align
$LN11@test_align:
	mov	DWORD PTR tv77[rsp], 1
$LN12@test_align:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 	size_t size32_aligned = sizeof(glm::detail::storage<int, 32, true>::type);

	mov	QWORD PTR size32_aligned$[rsp], 32	; 00000020H

; 18   : 	Error += size32_aligned == 32 ? 0 : 1;

	cmp	QWORD PTR size32_aligned$[rsp], 32	; 00000020H
	jne	SHORT $LN13@test_align
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN14@test_align
$LN13@test_align:
	mov	DWORD PTR tv80[rsp], 1
$LN14@test_align:
	mov	eax, DWORD PTR tv80[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 	size_t size64_aligned = sizeof(glm::detail::storage<int, 64, true>::type);

	mov	QWORD PTR size64_aligned$[rsp], 64	; 00000040H

; 20   : 	Error += size64_aligned == 64 ? 0 : 1;

	cmp	QWORD PTR size64_aligned$[rsp], 64	; 00000040H
	jne	SHORT $LN15@test_align
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN16@test_align
$LN15@test_align:
	mov	DWORD PTR tv83[rsp], 1
$LN16@test_align:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 
; 22   : #	if GLM_HAS_ALIGNOF
; 23   : 
; 24   : 	size_t align1_aligned = alignof(glm::detail::storage<int, 1, true>::type);

	mov	QWORD PTR align1_aligned$[rsp], 1

; 25   : 	Error += align1_aligned == 1 ? 0 : 1;

	cmp	QWORD PTR align1_aligned$[rsp], 1
	jne	SHORT $LN17@test_align
	mov	DWORD PTR tv86[rsp], 0
	jmp	SHORT $LN18@test_align
$LN17@test_align:
	mov	DWORD PTR tv86[rsp], 1
$LN18@test_align:
	mov	eax, DWORD PTR tv86[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 26   : 	size_t align2_aligned = alignof(glm::detail::storage<int, 2, true>::type);

	mov	QWORD PTR align2_aligned$[rsp], 2

; 27   : 	Error += align2_aligned == 2 ? 0 : 1;

	cmp	QWORD PTR align2_aligned$[rsp], 2
	jne	SHORT $LN19@test_align
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN20@test_align
$LN19@test_align:
	mov	DWORD PTR tv89[rsp], 1
$LN20@test_align:
	mov	eax, DWORD PTR tv89[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 28   : 	size_t align4_aligned = alignof(glm::detail::storage<int, 4, true>::type);

	mov	QWORD PTR align4_aligned$[rsp], 4

; 29   : 	Error += align4_aligned == 4 ? 0 : 1;

	cmp	QWORD PTR align4_aligned$[rsp], 4
	jne	SHORT $LN21@test_align
	mov	DWORD PTR tv92[rsp], 0
	jmp	SHORT $LN22@test_align
$LN21@test_align:
	mov	DWORD PTR tv92[rsp], 1
$LN22@test_align:
	mov	eax, DWORD PTR tv92[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 	size_t align8_aligned = alignof(glm::detail::storage<int, 8, true>::type);

	mov	QWORD PTR align8_aligned$[rsp], 8

; 31   : 	Error += align8_aligned == 8 ? 0 : 1;

	cmp	QWORD PTR align8_aligned$[rsp], 8
	jne	SHORT $LN23@test_align
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN24@test_align
$LN23@test_align:
	mov	DWORD PTR tv95[rsp], 1
$LN24@test_align:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 32   : 	size_t align16_aligned = alignof(glm::detail::storage<int, 16, true>::type);

	mov	QWORD PTR align16_aligned$[rsp], 16

; 33   : 	Error += align16_aligned == 16 ? 0 : 1;

	cmp	QWORD PTR align16_aligned$[rsp], 16
	jne	SHORT $LN25@test_align
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN26@test_align
$LN25@test_align:
	mov	DWORD PTR tv130[rsp], 1
$LN26@test_align:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 34   : 	size_t align32_aligned = alignof(glm::detail::storage<int, 32, true>::type);

	mov	QWORD PTR align32_aligned$[rsp], 32	; 00000020H

; 35   : 	Error += align32_aligned == 32 ? 0 : 1;

	cmp	QWORD PTR align32_aligned$[rsp], 32	; 00000020H
	jne	SHORT $LN27@test_align
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN28@test_align
$LN27@test_align:
	mov	DWORD PTR tv133[rsp], 1
$LN28@test_align:
	mov	eax, DWORD PTR tv133[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 36   : 	size_t align64_aligned = alignof(glm::detail::storage<int, 64, true>::type);

	mov	QWORD PTR align64_aligned$[rsp], 64	; 00000040H

; 37   : 	Error += align64_aligned == 64 ? 0 : 1;

	cmp	QWORD PTR align64_aligned$[rsp], 64	; 00000040H
	jne	SHORT $LN29@test_align
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN30@test_align
$LN29@test_align:
	mov	DWORD PTR tv136[rsp], 1
$LN30@test_align:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 38   : 
; 39   : #	elif GLM_COMPILER & GLM_COMPILER_GCC
; 40   : 
; 41   : 	size_t align1_aligned = __alignof__(glm::detail::storage<int, 1, true>::type);
; 42   : 	Error += align1_aligned == 1 ? 0 : 1;
; 43   : 	size_t align2_aligned = __alignof__(glm::detail::storage<int, 2, true>::type);
; 44   : 	Error += align2_aligned == 2 ? 0 : 1;
; 45   : 	size_t align4_aligned = __alignof__(glm::detail::storage<int, 4, true>::type);
; 46   : 	Error += align4_aligned == 4 ? 0 : 1;
; 47   : 	size_t align8_aligned = __alignof__(glm::detail::storage<int, 8, true>::type);
; 48   : 	Error += align8_aligned == 8 ? 0 : 1;
; 49   : 	size_t align16_aligned = __alignof__(glm::detail::storage<int, 16, true>::type);
; 50   : 	Error += align16_aligned == 16 ? 0 : 1;
; 51   : 	size_t align32_aligned = __alignof__(glm::detail::storage<int, 32, true>::type);
; 52   : 	Error += align32_aligned == 32 ? 0 : 1;
; 53   : 	size_t align64_aligned = __alignof__(glm::detail::storage<int, 64, true>::type);
; 54   : 	Error += align64_aligned == 64 ? 0 : 1;
; 55   : 
; 56   : #	endif //GLM_HAS_ALIGNOF
; 57   : 
; 58   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 59   : }

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
?test_aligned@@YAHXZ ENDP				; test_aligned
_TEXT	ENDS
END
