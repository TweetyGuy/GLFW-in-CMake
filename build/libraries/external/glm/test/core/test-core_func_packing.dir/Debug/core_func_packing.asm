; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

CONST	SEGMENT
$SG57636 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG61229 DB	'%s', 00H
	ORG $+1
$SG57637 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG61228 DB	'invalid argument', 00H
	ORG $+7
$SG57657 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
$SG61232 DB	00H, 00H
	ORG $+2
$SG57658 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+2
$SG61233 DB	'"', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H
	ORG $+2
$SG57679 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+4
$SG57680 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG58233 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+4
$SG58234 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG61230 DB	'C:\Program Files\Microsoft Visual Studio\2022\Community\'
	DB	'VC\Tools\MSVC\14.32.31326\include\xmemory', 00H
	ORG $+6
$SG56816 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+10
$SG61231 DB	'C', 00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H
	DB	'g', 00H, 'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't'
	DB	00H, ' ', 00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H
	DB	'\', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\'
	DB	00H, 'M', 00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H
	DB	'4', 00H, '.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1'
	DB	00H, '3', 00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x'
	DB	00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	00H, 00H
	ORG $+12
$SG56815 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+12
$SG56837 DB	'C', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e'
	DB	00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B'
	DB	00H, 'i', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H
	DB	'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's'
	DB	00H, '\', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'n', 00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 't', 00H, 'e', 00H, 's', 00H, 't', 00H, '\', 00H
	DB	'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '\', 00H, 'c', 00H, 'o'
	DB	00H, 'r', 00H, 'e', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, '_', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+4
$SG56838 DB	'!', 00H, 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H
	DB	00H, 00H
CONST	ENDS
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?round@@YAMM@Z					; round
PUBLIC	?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z	; glm::packUnorm2x16
PUBLIC	?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z	; glm::packSnorm2x16
PUBLIC	?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z	; glm::packUnorm4x8
PUBLIC	?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z	; glm::packSnorm4x8
PUBLIC	?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z	; glm::unpackUnorm2x16
PUBLIC	?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z	; glm::unpackSnorm2x16
PUBLIC	?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z	; glm::unpackUnorm4x8
PUBLIC	?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z	; glm::unpackSnorm4x8
PUBLIC	?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z	; glm::packDouble2x32
PUBLIC	?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z	; glm::unpackDouble2x32
PUBLIC	?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z	; glm::packHalf2x16
PUBLIC	?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z	; glm::unpackHalf2x16
PUBLIC	?toFloat32@detail@glm@@YAMF@Z			; glm::detail::toFloat32
PUBLIC	?toFloat16@detail@glm@@YAFAEBM@Z		; glm::detail::toFloat16
PUBLIC	?overflow@detail@glm@@YAMXZ			; glm::detail::overflow
PUBLIC	??0uif32@detail@glm@@QEAA@XZ			; glm::detail::uif32::uif32
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@G$0A@@glm@@SAHXZ		; glm::tvec2<unsigned short,0>::length
PUBLIC	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z		; glm::tvec2<unsigned short,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>
PUBLIC	??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
PUBLIC	?length@?$tvec2@F$0A@@glm@@SAHXZ		; glm::tvec2<short,0>::length
PUBLIC	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z		; glm::tvec2<short,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><float,0>
PUBLIC	??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z		; glm::tvec2<float,0>::tvec2<float,0><short,short>
PUBLIC	?length@?$tvec4@M$0A@@glm@@SAHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@E$0A@@glm@@SAHXZ		; glm::tvec4<unsigned char,0>::length
PUBLIC	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z		; glm::tvec4<unsigned char,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
PUBLIC	??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z	; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
PUBLIC	?length@?$tvec4@C$0A@@glm@@SAHXZ		; glm::tvec4<signed char,0>::length
PUBLIC	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z		; glm::tvec4<signed char,0>::operator[]
PUBLIC	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
PUBLIC	??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z	; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
PUBLIC	?length@?$tvec2@I$0A@@glm@@SAHXZ		; glm::tvec2<unsigned int,0>::length
PUBLIC	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z		; glm::tvec2<unsigned int,0>::operator[]
PUBLIC	??0?$tvec2@I$0A@@glm@@QEAA@II@Z			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?test_packUnorm2x16@@YAHXZ			; test_packUnorm2x16
PUBLIC	??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
PUBLIC	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
PUBLIC	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	?test_packSnorm2x16@@YAHXZ			; test_packSnorm2x16
PUBLIC	?test_packUnorm4x8@@YAHXZ			; test_packUnorm4x8
PUBLIC	??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>
PUBLIC	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
PUBLIC	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
PUBLIC	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
PUBLIC	?length@?$tvec4@_N$0A@@glm@@SAHXZ		; glm::tvec4<bool,0>::length
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec4<bool,0>::operator[]
PUBLIC	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec4<bool,0>::tvec4<bool,0>
PUBLIC	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
PUBLIC	?test_packSnorm4x8@@YAHXZ			; test_packSnorm4x8
PUBLIC	?test_packHalf2x16@@YAHXZ			; test_packHalf2x16
PUBLIC	?test_packDouble2x32@@YAHXZ			; test_packDouble2x32
PUBLIC	??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
PUBLIC	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate
PUBLIC	?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
PUBLIC	??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back
PUBLIC	?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
PUBLIC	?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
PUBLIC	?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::capacity
PUBLIC	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
PUBLIC	?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Change_array
PUBLIC	?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy
PUBLIC	?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range
PUBLIC	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
PUBLIC	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
PUBLIC	??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>
PUBLIC	??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z	; glm::operator==<unsigned int,0>
PUBLIC	main
PUBLIC	??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<unsigned int,0> &>
PUBLIC	??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::emplace_back<glm::tvec2<unsigned int,0> >
PUBLIC	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec2<unsigned int,0> >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
PUBLIC	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
PUBLIC	??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >
PUBLIC	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
PUBLIC	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
PUBLIC	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
PUBLIC	??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >
PUBLIC	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
PUBLIC	??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
PUBLIC	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
PUBLIC	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
PUBLIC	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<unsigned int,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
PUBLIC	??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
PUBLIC	??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
PUBLIC	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
PUBLIC	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
PUBLIC	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
PUBLIC	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
PUBLIC	??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >
PUBLIC	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
PUBLIC	??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >
PUBLIC	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
PUBLIC	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
PUBLIC	??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >
PUBLIC	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
PUBLIC	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >
PUBLIC	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
PUBLIC	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
PUBLIC	??$min@M@glm@@YAMMM@Z				; glm::min<float>
PUBLIC	??$max@M@glm@@YAMMM@Z				; glm::max<float>
PUBLIC	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$07@std@@YA_K_K@Z		; std::_Get_size_of_n<8>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<unsigned int,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<unsigned int,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<unsigned int,0> *,glm::tvec2<unsigned int,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<glm::tvec2<unsigned int,0> >
PUBLIC	??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
PUBLIC	??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<float,0> >
PUBLIC	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
PUBLIC	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
PUBLIC	??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
PUBLIC	??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >
PUBLIC	??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_To_address<glm::tvec2<unsigned int,0> *>
PUBLIC	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
PUBLIC	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@37800080
PUBLIC	__real@38000100
PUBLIC	__real@38800100
PUBLIC	__real@3b808081
PUBLIC	__real@3c010204
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e99999a
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@40000000
PUBLIC	__real@42fe0000
PUBLIC	__real@437f0000
PUBLIC	__real@46fffe00
PUBLIC	__real@477fff00
PUBLIC	__real@501502f9
PUBLIC	__real@bdcccccd
PUBLIC	__real@bf000000
PUBLIC	__real@bf333333
PUBLIC	__real@bf800000
PUBLIC	__real@bf8ccccd
PUBLIC	__real@c0000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__wassert:PROC
EXTRN	memmove:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	roundf:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?round@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?round@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+201
	DD	imagerel $unwind$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+206
	DD	imagerel $unwind$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+267
	DD	imagerel $unwind$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+272
	DD	imagerel $unwind$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+180
	DD	imagerel $unwind$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+119
	DD	imagerel $unwind$?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toFloat32@detail@glm@@YAMF@Z DD imagerel $LN12
	DD	imagerel $LN12+407
	DD	imagerel $unwind$?toFloat32@detail@glm@@YAMF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?toFloat16@detail@glm@@YAFAEBM@Z DD imagerel $LN16
	DD	imagerel $LN16+432
	DD	imagerel $unwind$?toFloat16@detail@glm@@YAFAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@detail@glm@@YAMXZ DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$?overflow@detail@glm@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0uif32@detail@glm@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??0uif32@detail@glm@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@G$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@F$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@E$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@C$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@I$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+404
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+107
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm2x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+476
	DD	imagerel $unwind$?test_packUnorm2x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm2x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+476
	DD	imagerel $unwind$?test_packSnorm2x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packUnorm4x8@@YAHXZ DD imagerel $LN12
	DD	imagerel $LN12+677
	DD	imagerel $unwind$?test_packUnorm4x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+180
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+252
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packSnorm4x8@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+499
	DD	imagerel $unwind$?test_packSnorm4x8@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packHalf2x16@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+481
	DD	imagerel $unwind$?test_packHalf2x16@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?test_packDouble2x32@@YAHXZ DD imagerel $LN10
	DD	imagerel $LN10+429
	DD	imagerel $unwind$?test_packDouble2x32@@YAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA DD imagerel ?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA
	DD	imagerel ?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA+35
	DD	imagerel $unwind$?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+183
	DD	imagerel $unwind$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z DD imagerel $LN4
	DD	imagerel $LN4+246
	DD	imagerel $unwind$?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+210
	DD	imagerel $unwind$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD imagerel $LN8
	DD	imagerel $LN8+161
	DD	imagerel $unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA DD imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+18
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+266
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+519
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+530
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD imagerel $LN13
	DD	imagerel $LN13+519
	DD	imagerel $unwind$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA+78
	DD	imagerel $unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+278
	DD	imagerel $unwind$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA+35
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$min@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@M@glm@@YAMMM@Z DD imagerel $LN5
	DD	imagerel $LN5+68
	DD	imagerel $unwind$??$max@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+67
	DD	imagerel $unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+13
	DD	imagerel $unwind$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z DD imagerel $LN3
	DD	imagerel $LN3+161
	DD	imagerel $unwind$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf8ccccd
CONST	SEGMENT
__real@bf8ccccd DD 0bf8ccccdr			; -1.1
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf333333
CONST	SEGMENT
__real@bf333333 DD 0bf333333r			; -0.7
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@501502f9
CONST	SEGMENT
__real@501502f9 DD 0501502f9r			; 1e+10
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42fe0000
CONST	SEGMENT
__real@42fe0000 DD 042fe0000r			; 127
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c010204
CONST	SEGMENT
__real@3c010204 DD 03c010204r			; 0.00787402
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@38800100
CONST	SEGMENT
__real@38800100 DD 038800100r			; 6.1037e-05
CONST	ENDS
;	COMDAT __real@38000100
CONST	SEGMENT
__real@38000100 DD 038000100r			; 3.05185e-05
CONST	ENDS
;	COMDAT __real@37800080
CONST	SEGMENT
__real@37800080 DD 037800080r			; 1.5259e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'4', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '3', 00H, '2', 00H, '.', 00H, '3', 00H, '1', 00H, '3'
	DB	00H, '2', 00H, '6', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'32.31326\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z DD 021401H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$07@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M@glm@@YAMMM@Z DD 021101H
	DD	0700d3211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z DD 031001H
	DD	0700c6210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
	DD	imagerel $ip2state$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD 022f11H
	DD	07015b219H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcName$0 DB 05fH ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcVarDesc DD 038H ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	018H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcName$0
	ORG $+48
??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcFrameData DD 01H ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	'Y', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f5H, 03H
	DB	02H
	DB	'u', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	'Y', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $tryMap$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
	DD	imagerel $ip2state$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z DD 021719H
	DD	07010f217H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec4>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec4>
	DD	04H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec4>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z DD 031101H
	DD	0700d8211H
	DD	0600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 020f19H
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DB	053H
	DB	031H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z DD 021901H
	DD	07015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DB	053H
	DB	032H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 06H
	DB	00H
	DB	00H
	DB	'v'
	DB	02H
	DB	'*'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DB 028H
	DD	imagerel $stateUnwindMap$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
	DD	imagerel $ip2state$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 022a11H
	DD	070107214H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcName$0 DB 05fH ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcVarDesc DD 024H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DD	04H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcName$0
	ORG $+48
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcFrameData DD 01H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
	DD	00H
	DQ	FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ DD 020a19H
	DD	07006920aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z DD 021901H
	DD	070159219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DB	053H
	DB	033H
	DB	00H
	ORG $+12
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc DD 034H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DD	01H
	DQ	FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	DD	00H
	DQ	FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ DD 020a19H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
	DD	00H
	DD	05H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
	DD	00H
	DD	05H
voltbl	ENDS
xdata	SEGMENT
$unwind$?test_packUnorm2x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm2x16@@YAHXZ
$cppxdata$?test_packUnorm2x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm2x16@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm2x16@@YAHXZ
$stateUnwindMap$?test_packUnorm2x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA
$ip2state$?test_packUnorm2x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	09H, 06H
	DB	00H
$cppxdata$?test_packSnorm2x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm2x16@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm2x16@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm2x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm2x16@@YAHXZ
$stateUnwindMap$?test_packSnorm2x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA
$ip2state$?test_packSnorm2x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	09H, 06H
	DB	00H
$cppxdata$?test_packUnorm4x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packUnorm4x8@@YAHXZ
	DD	imagerel $ip2state$?test_packUnorm4x8@@YAHXZ
$ip2state$?test_packUnorm4x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'E', 03H
	DB	02H
	DB	099H, 06H
	DB	00H
$unwind$?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packUnorm4x8@@YAHXZ DD 041b11H
	DD	029010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packUnorm4x8@@YAHXZ
$stateUnwindMap$?test_packUnorm4x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA
$cppxdata$?test_packSnorm4x8@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packSnorm4x8@@YAHXZ
	DD	imagerel $ip2state$?test_packSnorm4x8@@YAHXZ
$cppxdata$?test_packHalf2x16@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packHalf2x16@@YAHXZ
	DD	imagerel $ip2state$?test_packHalf2x16@@YAHXZ
$unwind$?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packSnorm4x8@@YAHXZ DD 041b11H
	DD	023010aH
	DD	060027003H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packSnorm4x8@@YAHXZ
$stateUnwindMap$?test_packSnorm4x8@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA
$ip2state$?test_packSnorm4x8@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'\'
	DB	02H
	DB	']', 06H
	DB	00H
$stateUnwindMap$?test_packHalf2x16@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA
$unwind$?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packHalf2x16@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packHalf2x16@@YAHXZ
$ip2state$?test_packHalf2x16@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	01dH, 06H
	DB	00H
$unwind$?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$?test_packDouble2x32@@YAHXZ DD 031a11H
	DD	01a0109H
	DD	07002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?test_packDouble2x32@@YAHXZ
$cppxdata$?test_packDouble2x32@@YAHXZ DB 028H
	DD	imagerel $stateUnwindMap$?test_packDouble2x32@@YAHXZ
	DD	imagerel $ip2state$?test_packDouble2x32@@YAHXZ
$stateUnwindMap$?test_packDouble2x32@@YAHXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA
$ip2state$?test_packDouble2x32@@YAHXZ DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	'M', 05H
	DB	00H
	ORG $+1
$unwind$?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
?test_packUnorm2x16@@YAHXZ$rtcName$0 DB 041H		; test_packUnorm2x16
	DB	00H
	ORG $+2
?test_packUnorm2x16@@YAHXZ$rtcName$1 DB 042H		; test_packUnorm2x16
	DB	00H
	ORG $+2
?test_packUnorm2x16@@YAHXZ$rtcName$2 DB 044H		; test_packUnorm2x16
	DB	00H
	ORG $+6
?test_packUnorm2x16@@YAHXZ$rtcFrameData DD 03H		; test_packUnorm2x16
	DD	00H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcVarDesc
?test_packSnorm2x16@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm2x16
	DB	00H
	ORG $+6
?test_packUnorm2x16@@YAHXZ$rtcVarDesc DD 098H		; test_packUnorm2x16
	DD	08H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packUnorm2x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm2x16@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm2x16
	DB	00H
	ORG $+2
?test_packSnorm2x16@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm2x16
	DB	00H
	ORG $+2
?test_packSnorm2x16@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm2x16
	DD	00H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcVarDesc
?test_packUnorm4x8@@YAHXZ$rtcName$0 DB 056H		; test_packUnorm4x8
	DB	065H
	DB	063H
	DB	00H
	ORG $+4
?test_packSnorm2x16@@YAHXZ$rtcVarDesc DD 098H		; test_packSnorm2x16
	DD	08H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packSnorm2x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packUnorm4x8@@YAHXZ$rtcName$1 DB 041H		; test_packUnorm4x8
	DB	00H
	ORG $+2
?test_packUnorm4x8@@YAHXZ$rtcName$2 DB 042H		; test_packUnorm4x8
	DB	00H
	ORG $+2
?test_packUnorm4x8@@YAHXZ$rtcName$3 DB 044H		; test_packUnorm4x8
	DB	00H
	ORG $+6
?test_packUnorm4x8@@YAHXZ$rtcVarDesc DD 0d8H		; test_packUnorm4x8
	DD	010H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$3
	DD	0a8H
	DD	010H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$2
	DD	068H
	DD	020H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcName$0
	ORG $+192
?test_packUnorm4x8@@YAHXZ$rtcFrameData DD 04H		; test_packUnorm4x8
	DD	00H
	DQ	FLAT:?test_packUnorm4x8@@YAHXZ$rtcVarDesc
?test_packSnorm4x8@@YAHXZ$rtcName$0 DB 041H		; test_packSnorm4x8
	DB	00H
	ORG $+2
?test_packSnorm4x8@@YAHXZ$rtcName$1 DB 042H		; test_packSnorm4x8
	DB	00H
	ORG $+2
?test_packSnorm4x8@@YAHXZ$rtcName$2 DB 044H		; test_packSnorm4x8
	DB	00H
	ORG $+6
?test_packSnorm4x8@@YAHXZ$rtcVarDesc DD 0b8H		; test_packSnorm4x8
	DD	010H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcName$0
	ORG $+144
?test_packSnorm4x8@@YAHXZ$rtcFrameData DD 03H		; test_packSnorm4x8
	DD	00H
	DQ	FLAT:?test_packSnorm4x8@@YAHXZ$rtcVarDesc
?test_packHalf2x16@@YAHXZ$rtcName$0 DB 041H		; test_packHalf2x16
	DB	00H
	ORG $+2
?test_packHalf2x16@@YAHXZ$rtcName$1 DB 042H		; test_packHalf2x16
	DB	00H
	ORG $+2
?test_packHalf2x16@@YAHXZ$rtcName$2 DB 044H		; test_packHalf2x16
	DB	00H
	ORG $+6
?test_packHalf2x16@@YAHXZ$rtcVarDesc DD 098H		; test_packHalf2x16
	DD	08H
	DQ	FLAT:?test_packHalf2x16@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packHalf2x16@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packHalf2x16@@YAHXZ$rtcName$0
	ORG $+144
?test_packHalf2x16@@YAHXZ$rtcFrameData DD 03H		; test_packHalf2x16
	DD	00H
	DQ	FLAT:?test_packHalf2x16@@YAHXZ$rtcVarDesc
?test_packDouble2x32@@YAHXZ$rtcName$0 DB 041H		; test_packDouble2x32
	DB	00H
	ORG $+2
?test_packDouble2x32@@YAHXZ$rtcName$1 DB 042H		; test_packDouble2x32
	DB	00H
	ORG $+2
?test_packDouble2x32@@YAHXZ$rtcName$2 DB 044H		; test_packDouble2x32
	DB	00H
	ORG $+6
?test_packDouble2x32@@YAHXZ$rtcVarDesc DD 098H		; test_packDouble2x32
	DD	08H
	DQ	FLAT:?test_packDouble2x32@@YAHXZ$rtcName$2
	DD	078H
	DD	08H
	DQ	FLAT:?test_packDouble2x32@@YAHXZ$rtcName$1
	DD	038H
	DD	020H
	DQ	FLAT:?test_packDouble2x32@@YAHXZ$rtcName$0
	ORG $+144
?test_packDouble2x32@@YAHXZ$rtcFrameData DD 03H		; test_packDouble2x32
	DD	00H
	DQ	FLAT:?test_packDouble2x32@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 020f01H
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 020601H
	DD	070027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 020a01H
	DD	07006120aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 020a01H
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@I$0A@@glm@@QEAA@II@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@I$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@C$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@E$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z DD 031601H
	DD	070126216H
	DD	06011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017921bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec4@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@F$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z DD 011101H
	DD	07011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@G$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z DD 021b01H
	DD	07017721bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0uif32@detail@glm@@QEAA@XZ DD 010601H
	DD	07006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	0eH
	DB	02fH
	DB	035H
	DB	03fH
	DB	047H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@detail@glm@@YAMXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toFloat16@detail@glm@@YAFAEBM@Z DD 022001H
	DD	07006920aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?toFloat16@detail@glm@@YAFAEBM@Z$rtcName$0 DB 045H	; glm::detail::toFloat16
	DB	06eH
	DB	074H
	DB	072H
	DB	079H
	DB	00H
	ORG $+10
?toFloat16@detail@glm@@YAFAEBM@Z$rtcVarDesc DD 024H	; glm::detail::toFloat16
	DD	04H
	DQ	FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcName$0
	ORG $+48
?toFloat16@detail@glm@@YAFAEBM@Z$rtcFrameData DD 01H	; glm::detail::toFloat16
	DD	00H
	DQ	FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?toFloat32@detail@glm@@YAMF@Z DD 032601H
	DD	018010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?toFloat32@detail@glm@@YAMF@Z$rtcName$0 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$1 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$2 DB 072H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcName$3 DB 052H		; glm::detail::toFloat32
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+1
?toFloat32@detail@glm@@YAMF@Z$rtcVarDesc DD 0a4H	; glm::detail::toFloat32
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$3
	DD	084H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$1
	DD	044H
	DD	04H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcName$0
	ORG $+192
?toFloat32@detail@glm@@YAMF@Z$rtcFrameData DD 04H	; glm::detail::toFloat32
	DD	00H
	DQ	FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD 022401H
	DD	0700a720eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackHalf2x16
	DB	00H
	ORG $+14
?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackHalf2x16
	DD	04H
	DQ	FLAT:?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackHalf2x16
	DD	00H
	DQ	FLAT:?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD 022001H
	DD	07006720aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packHalf2x16
	DB	00H
	ORG $+14
?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 024H ; glm::packHalf2x16
	DD	04H
	DQ	FLAT:?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+48
?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 01H ; glm::packHalf2x16
	DD	00H
	DQ	FLAT:?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	030H
	DB	080H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z DD 023519H
	DD	0700c9210H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcName$0 DB 075H ; glm::unpackDouble2x32
	DB	00H
	ORG $+14
?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcVarDesc DD 028H ; glm::unpackDouble2x32
	DD	08H
	DQ	FLAT:?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcName$0
	ORG $+48
?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcFrameData DD 01H ; glm::unpackDouble2x32
	DD	00H
	DQ	FLAT:?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
	DB	089H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z DD 022f19H
	DD	07006b20aH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcName$0 DB 075H ; glm::packDouble2x32
	DB	00H
	ORG $+14
?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcVarDesc DD 038H ; glm::packDouble2x32
	DD	08H
	DQ	FLAT:?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcName$0
	ORG $+48
?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcFrameData DD 01H ; glm::packDouble2x32
	DD	00H
	DQ	FLAT:?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 022701H
	DD	0700ad20eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackSnorm4x8
	DB	00H
	ORG $+14
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackSnorm4x8
	DD	04H
	DQ	FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackSnorm4x8
	DD	00H
	DQ	FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z DD 022401H
	DD	0700ab20eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackUnorm4x8
	DB	00H
	ORG $+14
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc DD 034H ; glm::unpackUnorm4x8
	DD	04H
	DQ	FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackUnorm4x8
	DD	00H
	DQ	FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD 022401H
	DD	0700a920eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackSnorm2x16
	DB	00H
	ORG $+14
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackSnorm2x16
	DD	04H
	DQ	FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackSnorm2x16
	DD	00H
	DQ	FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z DD 022401H
	DD	0700a720eH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0 DB 075H ; glm::unpackUnorm2x16
	DB	00H
	ORG $+14
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc DD 024H ; glm::unpackUnorm2x16
	DD	04H
	DQ	FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcName$0
	ORG $+48
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData DD 01H ; glm::unpackUnorm2x16
	DD	00H
	DQ	FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packSnorm4x8
	DB	00H
	ORG $+2
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packSnorm4x8
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packSnorm4x8
	DD	04H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm4x8
	DD	00H
	DQ	FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z DD 032601H
	DD	012010dH
	DD	07006H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packUnorm4x8
	DB	00H
	ORG $+2
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packUnorm4x8
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm4x8
	DD	04H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm4x8
	DD	00H
	DQ	FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packSnorm2x16
	DB	00H
	ORG $+2
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packSnorm2x16
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packSnorm2x16
	DD	04H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packSnorm2x16
	DD	00H
	DQ	FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z DD 022301H
	DD	07006d20aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0 DB 075H ; glm::packUnorm2x16
	DB	00H
	ORG $+2
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1 DB 072H ; glm::packUnorm2x16
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+5
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc DD 044H ; glm::packUnorm2x16
	DD	04H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcName$0
	ORG $+96
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData DD 02H ; glm::packUnorm2x16
	DD	00H
	DQ	FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?round@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec2<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec4<float,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
_Val$ = 16
??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_To_address<glm::tvec2<unsigned int,0> *>, COMDAT

; 3946 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 3947 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 3948 :     return _Val;

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]

; 3949 : }

	pop	rdi
	ret	0
??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_To_address<glm::tvec2<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec2@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_To_address<glm::tvec2<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec2<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec2<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec2<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 16
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec4@M$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_To_address<glm::tvec4<float,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec4<float,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec4<float,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec4<float,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
tv64 = 32
this$ = 64
<_Vals_0>$ = 72
??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<glm::tvec2<unsigned int,0> >, COMDAT

; 1655 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1656 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	rcx, QWORD PTR <_Vals_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	QWORD PTR tv64[rsp], rax
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
	mov	rcx, QWORD PTR tv64[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >

; 1657 :         ++_Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+8], rax

; 1658 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ
_TEXT	SEGMENT
this$ = 16
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release, COMDAT

; 1660 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1661 :         _First = _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx

; 1662 :         return _Last;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]

; 1663 :     }

	pop	rdi
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1650 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1651 :         _Destroy_range(_First, _Last, _Al);

	mov	rax, QWORD PTR this$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR this$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 1652 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
_Dest$ = 24
_Al_$ = 32
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1645 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Dest$[rsp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Al_$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z
_TEXT	SEGMENT
_FirstPtr$ = 32
_LastPtr$ = 40
_DestPtr$ = 48
_First_ch$ = 56
_Last_ch$ = 64
_Dest_ch$ = 72
_Count$ = 80
_First$ = 112
_Last$ = 120
_Dest$ = 128
??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z PROC ; std::_Copy_memmove<glm::tvec2<unsigned int,0> *,glm::tvec2<unsigned int,0> *>, COMDAT

; 4035 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 4036 :     auto _FirstPtr              = _To_address(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_To_address<glm::tvec2<unsigned int,0> *>
	mov	QWORD PTR _FirstPtr$[rsp], rax

; 4037 :     auto _LastPtr               = _To_address(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_To_address<glm::tvec2<unsigned int,0> *>
	mov	QWORD PTR _LastPtr$[rsp], rax

; 4038 :     auto _DestPtr               = _To_address(_Dest);

	lea	rcx, QWORD PTR _Dest$[rsp]
	call	??$_To_address@PEAU?$tvec2@I$0A@@glm@@@std@@YA?A_PAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_To_address<glm::tvec2<unsigned int,0> *>
	mov	QWORD PTR _DestPtr$[rsp], rax

; 4039 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	rax, QWORD PTR _FirstPtr$[rsp]
	mov	QWORD PTR _First_ch$[rsp], rax

; 4040 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	rax, QWORD PTR _LastPtr$[rsp]
	mov	QWORD PTR _Last_ch$[rsp], rax

; 4041 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	rax, QWORD PTR _DestPtr$[rsp]
	mov	QWORD PTR _Dest_ch$[rsp], rax

; 4042 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	rax, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Last_ch$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Count$[rsp], rax

; 4043 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	r8, QWORD PTR _Count$[rsp]
	mov	rdx, QWORD PTR _First_ch$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	call	memmove

; 4044 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4045 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	mov	rcx, QWORD PTR _Dest_ch$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 4046 :     } else {
; 4047 :         return _Dest + (_LastPtr - _FirstPtr);
; 4048 :     }
; 4049 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z ENDP ; std::_Copy_memmove<glm::tvec2<unsigned int,0> *,glm::tvec2<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_Get_unwrapped<glm::tvec2<unsigned int,0> * const &>, COMDAT

; 1270 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1271 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1272 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1273 :         return _It + 0;

	mov	rax, QWORD PTR _It$[rsp]
	mov	rax, QWORD PTR [rax]

; 1274 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1275 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1276 :     } else {
; 1277 :         return static_cast<_Iter&&>(_It);
; 1278 :     }
; 1279 : }

	pop	rdi
	ret	0
??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_Get_unwrapped<glm::tvec2<unsigned int,0> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z PROC ; std::addressof<glm::tvec2<unsigned int,0> >, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ENDP ; std::addressof<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$07@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<8>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 2305843009213693951		; 1fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$07@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 0
tv65 = 8
_Left$ = 32
_Right$ = 40
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 64   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 65   :     // return smaller of _Left and _Right
; 66   :     return _Right < _Left ? _Right : _Left;

	mov	rax, QWORD PTR _Right$[rsp]
	mov	rcx, QWORD PTR _Left$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN3@min
	mov	rax, QWORD PTR _Right$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	rax, QWORD PTR _Left$[rsp]
	mov	QWORD PTR tv65[rsp], rax
$LN4@min:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR $T1[rsp]

; 67   : }

	add	rsp, 16
	pop	rdi
	ret	0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv78 = 56
__$ReturnUdt$ = 80
Func$ = 88
a$ = 96
b$ = 104
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec4>::call, COMDAT

; 87   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 88   : 			return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv78[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv72[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv78[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 89   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$max@M@glm@@YAMMM@Z PROC				; glm::max<float>, COMDAT

; 24   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 25   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'max' only accept floating-point or integer inputs");
; 26   : 
; 27   : 		return x > y ? x : y;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@max
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@max
$LN3@max:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@max:
	movss	xmm0, DWORD PTR tv65[rsp]

; 28   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M@glm@@YAMMM@Z ENDP				; glm::max<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M@glm@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 16
x$ = 48
y$ = 56
??$min@M@glm@@YAMMM@Z PROC				; glm::min<float>, COMDAT

; 16   : 	{

$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 17   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'min' only accept floating-point or integer inputs");
; 18   : 		return x < y ? x : y;

	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@min
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@min
$LN3@min:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@min:
	movss	xmm0, DWORD PTR tv65[rsp]

; 19   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M@glm@@YAMMM@Z ENDP				; glm::min<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
a$ = 80
b$ = 88
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z PROC ; glm::detail::functor2<float,0,glm::tvec2>::call, COMDAT

; 69   : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 70   : 			return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));

	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 71   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ENDP ; glm::detail::functor2<float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 48
_Ptr_container$ = 56
_Ptr$ = 64
_Bytes$ = 96
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	rax, QWORD PTR _Bytes$[rsp]
	add	rax, 47					; 0000002fH
	mov	QWORD PTR _Block_size$[rsp], rax

; 130  :     if (_Block_size <= _Bytes) {

	mov	rax, QWORD PTR _Bytes$[rsp]
	cmp	QWORD PTR _Block_size$[rsp], rax
	ja	SHORT $LN8@Allocate_m

; 131  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	rcx, QWORD PTR _Block_size$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	QWORD PTR _Ptr_container$[rsp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
	lea	rax, OFFSET FLAT:$SG61228
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG61229
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 135				; 00000087H
	lea	rdx, OFFSET FLAT:$SG61230
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
	xor	eax, eax
$LN12@Allocate_m:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG61231
	lea	rdx, OFFSET FLAT:$SG61232
	lea	rcx, OFFSET FLAT:$SG61233
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Allocate_m
$LN10@Allocate_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	rax, QWORD PTR _Ptr_container$[rsp]
	add	rax, 47					; 0000002fH
	and	rax, -32				; ffffffffffffffe0H
	mov	QWORD PTR _Ptr$[rsp], rax

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	mov	QWORD PTR [rcx+rax], rdx

; 141  : #endif // _DEBUG
; 142  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]
$LN11@Allocate_m:

; 143  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call, COMDAT

; 264  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 265  : 			return detail::functor2<T, P, vecType>::call(min, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$min@M@glm@@YAMMM@Z	; glm::min<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 266  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call, COMDAT

; 273  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 274  : 			return detail::functor2<T, P, vecType>::call(max, x, y);

	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$max@M@glm@@YAMMM@Z	; glm::max<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor2@M$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMMM@ZAEBU43@1@Z ; glm::detail::functor2<float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 275  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec2@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<float,0> *,glm::tvec2<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@M$0A@@glm@@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 8
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec2@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Emplace_back<glm::tvec2<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec2<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec2@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<float,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec4@M$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec4@M$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec4<float,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec4@M$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec4<float,0> *,glm::tvec4<float,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR _Dest$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec4@M$0A@@glm@@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 16
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec4@M$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Emplace_back<glm::tvec4<float,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 681  :         }
; 682  :     }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec4<float,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 80
<_Args_0>$ = 88
??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec4<float,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec4@M$0A@@glm@@@std@@YAPEAXPEAU?$tvec4@M$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec4<float,0> *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdi, QWORD PTR $T1[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 150  :     }
; 151  : }

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 16
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 123  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 124  :     if constexpr (is_pointer_v<_Iter>) {
; 125  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

	mov	rax, QWORD PTR _It$[rsp]

; 126  :     } else {
; 127  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 128  :     }
; 129  : }

	pop	rdi
	ret	0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 16
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 252  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 253  :     return __builtin_addressof(_Val);

	mov	rax, QWORD PTR _Val$[rsp]

; 254  : }

	pop	rdi
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 659  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 669  :         }
; 670  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z PROC ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 1734 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 1735 :     // move [_First, _Last) to raw _Dest, using _Al
; 1736 :     // note: only called internally from elsewhere in the STL
; 1737 :     using _Ptrval     = typename _Alloc::value_type*;
; 1738 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	rcx, QWORD PTR _First$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<unsigned int,0> * const &>
	mov	QWORD PTR _UFirst$[rsp], rax

; 1739 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	rcx, QWORD PTR _Last$[rsp]
	call	??$_Get_unwrapped@AEBQEAU?$tvec2@I$0A@@glm@@@std@@YA?A_TAEBQEAU?$tvec2@I$0A@@glm@@@Z ; std::_Get_unwrapped<glm::tvec2<unsigned int,0> * const &>
	mov	QWORD PTR _ULast$[rsp], rax

; 1740 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1741 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1742 : #if _HAS_CXX20
; 1743 :         if (!_STD is_constant_evaluated())
; 1744 : #endif // _HAS_CXX20
; 1745 :         {
; 1746 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	rcx, QWORD PTR _Dest$[rsp]
	call	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
	mov	r8, rax
	mov	rdx, QWORD PTR _ULast$[rsp]
	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$_Copy_memmove@PEAU?$tvec2@I$0A@@glm@@PEAU12@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@00@Z ; std::_Copy_memmove<glm::tvec2<unsigned int,0> *,glm::tvec2<unsigned int,0> *>

; 1747 :             return _Dest + (_ULast - _UFirst);

	mov	rax, QWORD PTR _UFirst$[rsp]
	mov	rcx, QWORD PTR _ULast$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	rcx, QWORD PTR _Dest$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	jmp	SHORT $LN1@Uninitiali

; 1748 :         }
; 1749 :     }
; 1750 : 
; 1751 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rdx, QWORD PTR _Dest$[rsp]
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@PEAU?$tvec2@I$0A@@glm@@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >

; 1752 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	rax, QWORD PTR _UFirst$[rsp]
	add	rax, 8
	mov	QWORD PTR _UFirst$[rsp], rax
$LN4@Uninitiali:
	mov	rax, QWORD PTR _ULast$[rsp]
	cmp	QWORD PTR _UFirst$[rsp], rax
	je	SHORT $LN3@Uninitiali

; 1753 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	rcx, QWORD PTR _UFirst$[rsp]
	call	??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<unsigned int,0> &>
	mov	rdx, rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??$_Emplace_back@U?$tvec2@I$0A@@glm@@@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back<glm::tvec2<unsigned int,0> >

; 1754 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1755 : 
; 1756 :     return _Backout._Release();

	lea	rcx, QWORD PTR _Backout$[rsp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::_Release
	mov	QWORD PTR $T4[rsp], rax
	lea	rcx, QWORD PTR _Backout$[rsp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
	mov	rax, QWORD PTR $T4[rsp]
$LN1@Uninitiali:

; 1757 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ENDP ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_UFirst$ = 32
_ULast$ = 40
_Backout$ = 56
$T4 = 88
_First$ = 112
_Last$ = 120
_Dest$ = 128
_Al$ = 136
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA PROC ; `std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Backout$[rbp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >::~_Uninitialized_backout_al<std::allocator<glm::tvec2<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z@4HA ENDP ; `std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z
_TEXT	SEGMENT
$T1 = 32
__formal$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 681  :         }
; 682  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z PROC ; std::_Unfancy<glm::tvec2<unsigned int,0> >, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ENDP ; std::_Unfancy<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z PROC ; std::_Construct_in_place<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::addressof<glm::tvec2<unsigned int,0> >
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU?$tvec2@I$0A@@glm@@@std@@YAPEAXPEAU?$tvec2@I$0A@@glm@@@Z ; std::_Voidify_iter<glm::tvec2<unsigned int,0> *>
	mov	rdx, rax
	mov	ecx, 8
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rcx], rax

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z ENDP ; std::_Construct_in_place<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 221  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 222  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 223  : #if defined(_M_IX86) || defined(_M_X64)
; 224  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 225  :     if (!_STD is_constant_evaluated())
; 226  : #endif // _HAS_CXX20
; 227  :     {
; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

	cmp	QWORD PTR _Bytes$[rsp], 0
	je	SHORT $LN3@Allocate

; 235  :         return _Traits::_Allocate(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

	xor	eax, eax
$LN1@Allocate:

; 239  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 32
_Max_possible$1 = 40
_Count$ = 64
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 55   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR _Overflow_is_possible$[rsp], 1

; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	mov	QWORD PTR _Max_possible$1[rsp], rax

; 60   :         if (_Count > _Max_possible) {

	mov	rax, 1152921504606846975		; 0fffffffffffffffH
	cmp	QWORD PTR _Count$[rsp], rax
	jbe	SHORT $LN2@Get_size_o

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

	imul	rax, QWORD PTR _Count$[rsp], 16
$LN3@Get_size_o:

; 66   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec2>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec2>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::min<float,0,glm::tvec4>, COMDAT

; 523  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 524  : 		return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_min_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_min_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 525  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::min<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
a$ = 56
b$ = 64
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC ; glm::max<float,0,glm::tvec4>, COMDAT

; 537  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 538  : 		return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);

	mov	r8, QWORD PTR b$[rsp]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_max_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_max_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 539  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP ; glm::max<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 48
tv70 = 52
tv74 = 56
__$ReturnUdt$ = 80
Func$ = 88
v$ = 96
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec4>::call, COMDAT

; 48   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 49   : 			return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv74[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv74[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 50   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec4>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereoff$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	call	??$_Unfancy@U?$tvec2@M$0A@@glm@@@std@@YAPEAU?$tvec2@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec2@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@M$0A@@glm@@@1@QEAU?$tvec2@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::construct<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<float,0> *,std::allocator<glm::tvec2<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec2@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<float,0>,glm::tvec2<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	QWORD PTR tv90[rsp], rax
	imul	rcx, QWORD PTR _Whereoff$[rsp], 16
	mov	rdx, QWORD PTR _Newvec$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	call	??$_Unfancy@U?$tvec4@M$0A@@glm@@@std@@YAPEAU?$tvec4@M$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec4<float,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec4@M$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec4@M$0A@@glm@@@1@QEAU?$tvec4@M$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::construct<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAPEAU?$tvec4@M$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec4<float,0> *,std::allocator<glm::tvec4<float,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	imul	rax, QWORD PTR _Whereoff$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec4@M$0A@@glm@@U12@@std@@YAXAEAU?$tvec4@M$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec4<float,0>,glm::tvec4<float,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 16
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Obj$ = 64
<_Args_0>$ = 72
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 142  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 143  : #if _HAS_CXX20
; 144  :     if (_STD is_constant_evaluated()) {
; 145  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 146  :     } else
; 147  : #endif // _HAS_CXX20
; 148  :     {
; 149  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	rcx, QWORD PTR _Obj$[rsp]
	call	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
	mov	rcx, rax
	call	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
	mov	rdx, rax
	mov	ecx, 16
	call	??2@YAPEAX_KPEAX@Z			; operator new
	mov	QWORD PTR $T1[rsp], rax
	mov	rcx, QWORD PTR <_Args_0>$[rsp]
	call	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR $T1[rsp]
	call	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 150  :     }
; 151  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 16
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 265  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 266  :     return _Ptr;

	mov	rax, QWORD PTR _Ptr$[rsp]

; 267  : }

	pop	rdi
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 972  : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 973  :     // deallocate a plain pointer using an allocator
; 974  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 975  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 976  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	mov	r8d, 1
	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	npad	1

; 977  :     } else {
; 978  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 979  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 980  :     }
; 981  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >, COMDAT

; 836  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 837  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 838  :         _Alty& _Al        = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 839  :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 840  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 841  :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 842  : 
; 843  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 844  : 
; 845  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Whereoff$[rsp], rax

; 846  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	QWORD PTR _Oldsize$[rsp], rax

; 847  : 
; 848  :         if (_Oldsize == max_size()) {

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
	cmp	QWORD PTR _Oldsize$[rsp], rax
	jne	SHORT $LN2@Emplace_re

; 849  :             _Xlength();

	call	?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
$LN2@Emplace_re:

; 850  :         }
; 851  : 
; 852  :         const size_type _Newsize     = _Oldsize + 1;

	mov	rax, QWORD PTR _Oldsize$[rsp]
	inc	rax
	mov	QWORD PTR _Newsize$[rsp], rax

; 853  :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	rdx, QWORD PTR _Newsize$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Calculate_growth
	mov	QWORD PTR _Newcapacity$[rsp], rax

; 854  : 
; 855  :         const pointer _Newvec           = _Al.allocate(_Newcapacity);

	mov	rdx, QWORD PTR _Newcapacity$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
	mov	QWORD PTR _Newvec$[rsp], rax

; 856  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	QWORD PTR _Constructed_last$[rsp], rax

; 857  :         pointer _Constructed_first      = _Constructed_last;

	mov	rax, QWORD PTR _Constructed_last$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 858  : 
; 859  :         _TRY_BEGIN
; 860  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	QWORD PTR tv90[rsp], rax
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereoff$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	call	??$_Unfancy@U?$tvec2@I$0A@@glm@@@std@@YAPEAU?$tvec2@I$0A@@glm@@PEAU12@@Z ; std::_Unfancy<glm::tvec2<unsigned int,0> >
	mov	rcx, QWORD PTR tv90[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$construct@U?$tvec2@I$0A@@glm@@U12@@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SAXAEAV?$allocator@U?$tvec2@I$0A@@glm@@@1@QEAU?$tvec2@I$0A@@glm@@$$QEAU34@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::construct<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >

; 861  :         _Constructed_first = _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 862  : 
; 863  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR _Whereptr$[rsp], rax
	jne	SHORT $LN4@Emplace_re

; 864  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 865  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >

; 866  :             } else {
; 867  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 868  :             }
; 869  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 870  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, QWORD PTR _Newvec$[rsp]
	mov	rdx, QWORD PTR _Whereptr$[rsp]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >

; 871  :             _Constructed_first = _Newvec;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR _Constructed_first$[rsp], rax

; 872  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8+8]
	mov	r9, QWORD PTR _Al$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Whereptr$[rsp]
	call	??$_Uninitialized_move@PEAU?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAPEAU?$tvec2@I$0A@@glm@@QEAU12@0PEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Uninitialized_move<glm::tvec2<unsigned int,0> *,std::allocator<glm::tvec2<unsigned int,0> > >
	npad	1
$LN5@Emplace_re:
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
$LN9@Emplace_re:

; 873  :         }
; 874  :         _CATCH_ALL
; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 876  :         _Al.deallocate(_Newvec, _Newcapacity);
; 877  :         _RERAISE;
; 878  :         _CATCH_END
; 879  : 
; 880  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	r9, QWORD PTR _Newcapacity$[rsp]
	mov	r8, QWORD PTR _Newsize$[rsp]
	mov	rdx, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Change_array

; 881  :         return _Newvec + _Whereoff;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Whereoff$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 882  :     }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
$LN11@Emplace_re:
??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Whereoff$ = 64
_Oldsize$ = 72
_Newsize$ = 80
_Newcapacity$ = 88
_Newvec$ = 96
_Constructed_last$ = 104
_Constructed_first$ = 112
tv90 = 120
this$ = 144
_Whereptr$ = 152
<_Val_0>$ = 160
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA PROC ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >'::`1'::catch$0

; 874  :         _CATCH_ALL

	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
__catch$??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z$0:

; 875  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	r8, QWORD PTR _Al$[rbp]
	mov	rdx, QWORD PTR _Constructed_last$[rbp]
	mov	rcx, QWORD PTR _Constructed_first$[rbp]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 876  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	r8, QWORD PTR _Newcapacity$[rbp]
	mov	rdx, QWORD PTR _Newvec$[rbp]
	mov	rcx, QWORD PTR _Al$[rbp]
	call	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate

; 877  :         _RERAISE;

	xor	edx, edx
	xor	ecx, ecx
	call	_CxxThrowException
	npad	1

; 878  :         _CATCH_END

	lea	rax, $LN10@catch$0
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
	int	3
?catch$0@?0???$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z@4HA ENDP ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
_Result$ = 48
this$ = 80
<_Val_0>$ = 88
??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<unsigned int,0> >, COMDAT

; 813  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 814  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 815  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 816  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 817  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 818  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 819  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 820  :             _ASAN_VECTOR_MODIFY(1);
; 821  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	rdx, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Construct_in_place@U?$tvec2@I$0A@@glm@@U12@@std@@YAXAEAU?$tvec2@I$0A@@glm@@$$QEAU12@@Z ; std::_Construct_in_place<glm::tvec2<unsigned int,0>,glm::tvec2<unsigned int,0> >

; 822  :         } else {
; 823  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 824  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 825  :             _ASAN_VECTOR_RELEASE_GUARD;
; 826  :         }
; 827  : 
; 828  :         _Orphan_range(_Mylast, _Mylast);

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range

; 829  :         _Ty& _Result = *_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Result$[rsp], rax

; 830  :         ++_Mylast;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 831  : 
; 832  :         return _Result;

	mov	rax, QWORD PTR _Result$[rsp]

; 833  :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec4>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec4<bool,0>::tvec4<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	mov	ecx, DWORD PTR Result$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec4>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_round<float,0,glm::tvec4,0>::call, COMDAT

; 245  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 246  : 			return detail::functor1<T, T, P, vecType>::call(round, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?round@@YAMM@Z		; round
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec4@glm@@@detail@glm@@SA?AU?$tvec4@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec4>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 247  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
scalar$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z PROC		; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 411  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 412  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));

	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 413  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ENDP		; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec4>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_round<float,0,glm::tvec2,0>::call, COMDAT

; 245  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 246  : 			return detail::functor1<T, T, P, vecType>::call(round, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:?round@@YAMM@Z		; round
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 247  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
x$ = 72
minVal$ = 80
maxVal$ = 88
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call, COMDAT

; 282  : 		{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 283  : 			return min(max(x, minVal), maxVal);

	mov	r8, QWORD PTR minVal$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$max@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::max<float,0,glm::tvec2>
	mov	r8, QWORD PTR maxVal$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$min@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::min<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 284  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 48
_Bytes$ = 56
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 242  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 243  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 244  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 245  :     if (_STD is_constant_evaluated()) {
; 246  :         ::operator delete(_Ptr);
; 247  :     } else
; 248  : #endif // _HAS_CXX20
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

	cmp	QWORD PTR _Bytes$[rsp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 252  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	rdx, QWORD PTR _Bytes$[rsp]
	lea	rcx, QWORD PTR _Ptr$[rsp]
	call	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 253  :         }
; 254  : #endif // defined(_M_IX86) || defined(_M_X64)
; 255  :         ::operator delete(_Ptr, _Bytes);

	mov	rdx, QWORD PTR _Bytes$[rsp]
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
	npad	1

; 256  :     }
; 257  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Last$ = 24
_Al$ = 32
??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z PROC ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 939  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 940  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 941  :     using _Ty = typename _Alloc::value_type;
; 942  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 943  :         for (; _First != _Last; ++_First) {
; 944  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 945  :         }
; 946  :     }
; 947  : }

	pop	rdi
	ret	0
??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_reallocate<glm::tvec2<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec2<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Emplace_one_at_back<glm::tvec2<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec2<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec2<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_back_with_unused_capacity<glm::tvec4<float,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec4@M$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_reallocate<glm::tvec4<float,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec4<float,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec4<float,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec4@M$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Emplace_one_at_back<glm::tvec4<float,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec4<float,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec4<float,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 32
$T1 = 40
this$ = 64
_Al$ = 72
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	mov	edx, 1
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	rcx, rax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	mov	QWORD PTR _New_proxy$[rsp], rax

; 1058 :         _Construct_in_place(*_New_proxy, this);

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	call	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1059 :         _Myproxy            = _New_proxy;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _New_proxy$[rsp]
	mov	QWORD PTR [rax], rcx

; 1060 :         _New_proxy->_Mycont = this;

	mov	rax, QWORD PTR _New_proxy$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], rcx

; 1061 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><>, COMDAT

; 1370 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 984  : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 985  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 986  :     using _Ty = typename _Alloc::value_type;
; 987  :     _Ptr->~_Ty();
; 988  :     _Deallocate_plain(_Al, _Ptr);

	mov	rdx, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 989  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\utility
;	COMDAT ??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z
_TEXT	SEGMENT
_Old_val$ = 0
_Val$ = 32
_New_val$ = 40
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 605  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 606  :     // assign _New_val to _Val, return previous _Val
; 607  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Old_val$[rsp], rax

; 608  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	rax, QWORD PTR _Val$[rsp]
	mov	rcx, QWORD PTR _New_val$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 609  :     return _Old_val;

	mov	rax, QWORD PTR _Old_val$[rsp]

; 610  : }

	add	rsp, 16
	pop	rdi
	ret	0
??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >, COMDAT

; 823  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z
_TEXT	SEGMENT
_My_data$ = 32
_Mylast$ = 40
this$ = 64
<_Val_0>$ = 72
??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec2<unsigned int,0> >, COMDAT

; 800  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 801  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 802  :         auto& _My_data   = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 803  :         pointer& _Mylast = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 804  : 
; 805  :         if (_Mylast != _My_data._Myend) {

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN2@Emplace_on

; 806  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_back_with_unused_capacity@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_back_with_unused_capacity<glm::tvec2<unsigned int,0> >
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 807  :         }
; 808  : 
; 809  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	r8, rax
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_reallocate@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAPEAU?$tvec2@I$0A@@glm@@QEAU23@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_reallocate<glm::tvec2<unsigned int,0> >
$LN1@Emplace_on:

; 810  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z PROC ; std::forward<glm::tvec2<unsigned int,0> >, COMDAT

; 1341 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1342 :     return static_cast<_Ty&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1343 : }

	pop	rdi
	ret	0
??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ENDP ; std::forward<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
_Result$ = 32
this$ = 64
<_Val_0>$ = 72
??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::emplace_back<glm::tvec2<unsigned int,0> >, COMDAT

; 886  :     _CONSTEXPR20 decltype(auto) emplace_back(_Valty&&... _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 887  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 888  :         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);

	mov	rcx, QWORD PTR <_Val_0>$[rsp]
	call	??$forward@U?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::forward<glm::tvec2<unsigned int,0> >
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$_Emplace_one_at_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAU?$tvec2@I$0A@@glm@@$$QEAU23@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Emplace_one_at_back<glm::tvec2<unsigned int,0> >
	mov	QWORD PTR _Result$[rsp], rax

; 889  : #if _HAS_CXX17
; 890  :         return _Result;
; 891  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 892  :         (void) _Result;
; 893  : #endif // _HAS_CXX17
; 894  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::emplace_back<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\type_traits
;	COMDAT ??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z
_TEXT	SEGMENT
_Arg$ = 16
??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z PROC ; std::move<glm::tvec2<unsigned int,0> &>, COMDAT

; 1352 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1353 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rsp]

; 1354 : }

	pop	rdi
	ret	0
??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ENDP ; std::move<glm::tvec2<unsigned int,0> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 144  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 145  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 146  : 	
; 147  : 	Error += test_packSnorm4x8();

	call	?test_packSnorm4x8@@YAHXZ		; test_packSnorm4x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 148  : 	Error += test_packUnorm4x8();

	call	?test_packUnorm4x8@@YAHXZ		; test_packUnorm4x8
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 149  : 	Error += test_packSnorm2x16();

	call	?test_packSnorm2x16@@YAHXZ		; test_packSnorm2x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 150  : 	Error += test_packUnorm2x16();

	call	?test_packUnorm2x16@@YAHXZ		; test_packUnorm2x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 151  : 	Error += test_packHalf2x16();

	call	?test_packHalf2x16@@YAHXZ		; test_packHalf2x16
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 152  : 	Error += test_packDouble2x32();

	call	?test_packDouble2x32@@YAHXZ		; test_packDouble2x32
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 153  : 
; 154  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 155  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z PROC	; glm::operator==<unsigned int,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z ENDP	; glm::operator==<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx

; 65   : 		, y(static_cast<T>(b))

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@I$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@I$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@I$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<unsigned int,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@I$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 3

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec2@I$0A@@glm@@@std@@YA$$QEAU?$tvec2@I$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<unsigned int,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec2@I$0A@@glm@@@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::emplace_back<glm::tvec2<unsigned int,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S1$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S1$[rsp]
	call	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
	lea	rax, QWORD PTR $S1$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@I$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<unsigned int,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<unsigned int,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@I$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec2@I$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@I$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<unsigned int,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@I$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<unsigned int,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<unsigned int,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAPEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<unsigned int,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAAXQEAU?$tvec2@I$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<unsigned int,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec2@I$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec2<unsigned int,0> >::allocator<glm::tvec2<unsigned int,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 136
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
tv134 = 192
?test_packDouble2x32@@YAHXZ PROC			; test_packDouble2x32

; 123  : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 124  : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 125  : 	
; 126  : 	std::vector<glm::uvec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	npad	1

; 127  : 	A.push_back(glm::uvec2( 1, 2));

	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back

; 128  : 	A.push_back(glm::uvec2(-1,-2));

	mov	r8d, -2
	mov	edx, -1
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back

; 129  : 	A.push_back(glm::uvec2(-1000, 1100));

	mov	r8d, 1100				; 0000044cH
	mov	edx, -1000				; fffffffffffffc18H
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0HH@?$tvec2@I$0A@@glm@@QEAA@HH@Z	; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0><int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@I$0A@@glm@@@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::push_back

; 130  : 	
; 131  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packD
$LN2@test_packD:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packD:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packD

; 132  : 	{
; 133  : 		glm::uvec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@I$0A@@glm@@_K@Z ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 134  : 		double C = glm::packDouble2x32(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z ; glm::packDouble2x32
	movsd	QWORD PTR C$8[rsp], xmm0

; 135  : 		glm::uvec2 D = glm::unpackDouble2x32(C);

	movsd	xmm1, QWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z ; glm::unpackDouble2x32

; 136  : 		Error += B == D ? 0 : 1;

	lea	rdx, QWORD PTR D$9[rsp]
	lea	rcx, QWORD PTR B$7[rsp]
	call	??$?8I$0A@@glm@@YA_NAEBU?$tvec2@I$0A@@0@0@Z ; glm::operator==<unsigned int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packD
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN7@test_packD
$LN6@test_packD:
	mov	DWORD PTR tv134[rsp], 1
$LN7@test_packD:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 137  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packD
	mov	r8d, 137				; 00000089H
	lea	rdx, OFFSET FLAT:$SG58233
	lea	rcx, OFFSET FLAT:$SG58234
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packD:

; 138  : 	}

	jmp	$LN2@test_packD
$LN3@test_packD:

; 139  : 	
; 140  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T13[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	mov	eax, DWORD PTR $T13[rsp]

; 141  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packDouble2x32@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packDouble2x32@@YAHXZ ENDP			; test_packDouble2x32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 136
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
tv134 = 192
?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA PROC		; `test_packDouble2x32'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@I$0A@@glm@@V?$allocator@U?$tvec2@I$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >::~vector<glm::tvec2<unsigned int,0>,std::allocator<glm::tvec2<unsigned int,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packDouble2x32@@YAHXZ@4HA ENDP		; `test_packDouble2x32'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?test_packHalf2x16@@YAHXZ PROC				; test_packHalf2x16

; 96   : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 97   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 98   : /*
; 99   : 	std::vector<glm::hvec2> A;
; 100  : 	A.push_back(glm::hvec2(glm::half( 1.0f), glm::half( 2.0f)));
; 101  : 	A.push_back(glm::hvec2(glm::half(-1.0f), glm::half(-2.0f)));
; 102  : 	A.push_back(glm::hvec2(glm::half(-1.1f), glm::half( 1.1f)));
; 103  : */
; 104  : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 105  : 	A.push_back(glm::vec2( 1.0f, 2.0f));

	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 106  : 	A.push_back(glm::vec2(-1.0f,-2.0f));

	movss	xmm2, DWORD PTR __real@c0000000
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 107  : 	A.push_back(glm::vec2(-1.1f, 1.1f));

	movss	xmm2, DWORD PTR __real@3f8ccccd
	movss	xmm1, DWORD PTR __real@bf8ccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 108  : 
; 109  : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packH
$LN2@test_packH:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packH:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packH

; 110  : 	{
; 111  : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 112  : 		glm::uint C = glm::packHalf2x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ; glm::packHalf2x16
	mov	DWORD PTR C$8[rsp], eax

; 113  : 		glm::vec2 D = glm::unpackHalf2x16(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ; glm::unpackHalf2x16

; 114  : 		//Error += B == D ? 0 : 1;
; 115  : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 127.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c010204
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packH
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packH
$LN6@test_packH:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packH:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 116  : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packH
	mov	r8d, 116				; 00000074H
	lea	rdx, OFFSET FLAT:$SG57679
	lea	rcx, OFFSET FLAT:$SG57680
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packH:

; 117  : 	}

	jmp	$LN2@test_packH
$LN3@test_packH:

; 118  : 	
; 119  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 120  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packHalf2x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packHalf2x16@@YAHXZ ENDP				; test_packHalf2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA PROC		; `test_packHalf2x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packHalf2x16@@YAHXZ@4HA ENDP		; `test_packHalf2x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?test_packSnorm4x8@@YAHXZ PROC				; test_packSnorm4x8

; 76   : {

$LN10:
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 77   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 78   : 	
; 79   : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 80   : 	A.push_back(glm::vec4( 1.0f, 0.0f,-0.5f,-1.0f));

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@bf000000
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 81   : 	A.push_back(glm::vec4(-0.7f,-0.1f, 0.1f, 0.7f));

	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	movss	xmm2, DWORD PTR __real@bdcccccd
	movss	xmm1, DWORD PTR __real@bf333333
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 82   : 	
; 83   : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 84   : 	{
; 85   : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 86   : 		glm::uint32 C = glm::packSnorm4x8(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packSnorm4x8
	mov	DWORD PTR C$8[rsp], eax

; 87   : 		glm::vec4 D = glm::unpackSnorm4x8(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackSnorm4x8

; 88   : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 127.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3c010204
	movss	DWORD PTR $T12[rsp], xmm0
	lea	r9, QWORD PTR $T12[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv136[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv136[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv136[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 89   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 89					; 00000059H
	lea	rdx, OFFSET FLAT:$SG57657
	lea	rcx, OFFSET FLAT:$SG57658
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 90   : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 91   : 	
; 92   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T14[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T14[rsp]

; 93   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm4x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
?test_packSnorm4x8@@YAHXZ ENDP				; test_packSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
A$ = 72
i$6 = 120
B$7 = 136
C$8 = 164
D$9 = 184
$T10 = 212
$T11 = 228
$T12 = 244
$T13 = 248
$T14 = 252
tv136 = 256
?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA PROC		; `test_packSnorm4x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm4x8@@YAHXZ@4HA ENDP		; `test_packSnorm4x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec4>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec4<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec4<bool,0>::tvec4<bool,0>, COMDAT

; 183  : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec4<bool,0>::tvec4<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec4<bool,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@_N$0A@@glm@@SAHXZ	; glm::tvec4<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec4<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@_N$0A@@glm@@SAHXZ PROC			; glm::tvec4<bool,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec4<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
tv66 = 80
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
epsilon$ = 136
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec4>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec4>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec4@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec4@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec4@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec4<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 4
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec4<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	imul	rax, QWORD PTR _Newsize$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	imul	rax, QWORD PTR _Newcapacity$[rsp], 16
	mov	rcx, QWORD PTR _Newvec$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec4@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	imul	rax, QWORD PTR _Pos$[rsp], 16
	mov	rcx, QWORD PTR _My_data$[rsp]
	add	rax, QWORD PTR [rcx+8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 4

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 4

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec4@M$0A@@glm@@@std@@YA$$QEAU?$tvec4@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec4<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec4@M$0A@@glm@@@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::emplace_back<glm::tvec4<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S2$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S2$[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	lea	rax, QWORD PTR $S2$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec4@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec4<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec4<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec4@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec4@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec4@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec4<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 1152921504606846975		; 0fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec4@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec4<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z	; std::_Get_size_of_n<16>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAPEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec4<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	rax, QWORD PTR _Count$[rsp], 16
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAAXQEAU?$tvec4@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec4<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec4@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec4<float,0> >::allocator<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rax], cl

; 201  : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rax+1], cl

; 202  : 		z(static_cast<T>(c)),

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rax+2], cl

; 203  : 		w(static_cast<T>(d))

	mov	rax, QWORD PTR this$[rsp]
	movzx	ecx, BYTE PTR d$[rsp]
	mov	BYTE PTR [rax+3], cl

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 48
Packed$ = 52
Vec$ = 68
Ref$ = 88
A$ = 104
i$7 = 152
B$8 = 168
C$9 = 196
D$10 = 216
$T11 = 244
$T12 = 260
$T13 = 276
$T14 = 292
$T15 = 296
$T16 = 300
tv81 = 304
tv155 = 308
?test_packUnorm4x8@@YAHXZ PROC				; test_packUnorm4x8

; 50   : {

$LN12:
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 52   : 
; 53   : 	glm::uint32 Packed = glm::packUnorm4x8(glm::vec4(1.0f, 0.5f, 0.0f, 1.0f));

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, rax
	call	?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm4x8
	mov	DWORD PTR Packed$[rsp], eax

; 54   : 	glm::u8vec4 Vec(255, 128, 0, 255);

	mov	DWORD PTR [rsp+32], 255			; 000000ffH
	xor	r9d, r9d
	mov	r8d, 128				; 00000080H
	mov	edx, 255				; 000000ffH
	lea	rcx, QWORD PTR Vec$[rsp]
	call	??$?0HHHH@?$tvec4@E$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><int,int,int,int>

; 55   : 	glm::uint32 & Ref = *reinterpret_cast<glm::uint32*>(&Vec[0]);

	xor	edx, edx
	lea	rcx, QWORD PTR Vec$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	QWORD PTR Ref$[rsp], rax

; 56   : 
; 57   : 	Error += Packed == Ref ? 0 : 1;

	mov	rax, QWORD PTR Ref$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR Packed$[rsp], eax
	jne	SHORT $LN6@test_packU
	mov	DWORD PTR tv81[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv81[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv81[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 
; 59   : 	std::vector<glm::vec4> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	npad	1

; 60   : 	A.push_back(glm::vec4(1.0f, 0.7f, 0.3f, 0.0f));

	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 61   : 	A.push_back(glm::vec4(0.5f, 0.1f, 0.2f, 0.3f));

	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T13[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec4@M$0A@@glm@@@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::push_back

; 62   : 	
; 63   : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$7[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$7[rsp]
	inc	rax
	mov	QWORD PTR i$7[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::size
	cmp	QWORD PTR i$7[rsp], rax
	jae	$LN3@test_packU

; 64   : 	{
; 65   : 		glm::vec4 B(A[i]);

	mov	rdx, QWORD PTR i$7[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec4@M$0A@@glm@@_K@Z ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::operator[]
	lea	rcx, QWORD PTR B$8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb

; 66   : 		glm::uint32 C = glm::packUnorm4x8(B);

	lea	rcx, QWORD PTR B$8[rsp]
	call	?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ; glm::packUnorm4x8
	mov	DWORD PTR C$9[rsp], eax

; 67   : 		glm::vec4 D = glm::unpackUnorm4x8(C);

	mov	edx, DWORD PTR C$9[rsp]
	lea	rcx, QWORD PTR D$10[rsp]
	call	?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ; glm::unpackUnorm4x8

; 68   : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 255.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@3b808081
	movss	DWORD PTR $T14[rsp], xmm0
	lea	r9, QWORD PTR $T14[rsp]
	lea	r8, QWORD PTR D$10[rsp]
	lea	rdx, QWORD PTR B$8[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$epsilonEqual@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@_N$0A@@0@AEBU?$tvec4@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec4>
	mov	rcx, rax
	call	??$all@$0A@Utvec4@glm@@@glm@@YA_NAEBU?$tvec4@_N$0A@@0@@Z ; glm::all<0,glm::tvec4>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@test_packU
	mov	DWORD PTR tv155[rsp], 0
	jmp	SHORT $LN9@test_packU
$LN8@test_packU:
	mov	DWORD PTR tv155[rsp], 1
$LN9@test_packU:
	mov	eax, DWORD PTR tv155[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 69   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN10@test_packU
	mov	r8d, 69					; 00000045H
	lea	rdx, OFFSET FLAT:$SG57636
	lea	rcx, OFFSET FLAT:$SG57637
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@test_packU:

; 70   : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 71   : 	
; 72   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T16[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	mov	eax, DWORD PTR $T16[rsp]

; 73   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm4x8@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?test_packUnorm4x8@@YAHXZ ENDP				; test_packUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 48
Packed$ = 52
Vec$ = 68
Ref$ = 88
A$ = 104
i$7 = 152
B$8 = 168
C$9 = 196
D$10 = 216
$T11 = 244
$T12 = 260
$T13 = 276
$T14 = 292
$T15 = 296
$T16 = 300
tv81 = 304
tv155 = 308
?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA PROC		; `test_packUnorm4x8'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec4@M$0A@@glm@@V?$allocator@U?$tvec4@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >::~vector<glm::tvec4<float,0>,std::allocator<glm::tvec4<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm4x8@@YAHXZ@4HA ENDP		; `test_packUnorm4x8'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?test_packSnorm2x16@@YAHXZ PROC				; test_packSnorm2x16

; 29   : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 30   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 31   : 
; 32   : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 33   : 	A.push_back(glm::vec2( 1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 34   : 	A.push_back(glm::vec2(-0.5f,-0.7f));

	movss	xmm2, DWORD PTR __real@bf333333
	movss	xmm1, DWORD PTR __real@bf000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 35   : 	A.push_back(glm::vec2(-0.1f, 0.1f));

	movss	xmm2, DWORD PTR __real@3dcccccd
	movss	xmm1, DWORD PTR __real@bdcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 36   : 
; 37   : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packS
$LN2@test_packS:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packS:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packS

; 38   : 	{
; 39   : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 40   : 		glm::uint32 C = glm::packSnorm2x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ; glm::packSnorm2x16
	mov	DWORD PTR C$8[rsp], eax

; 41   : 		glm::vec2 D = glm::unpackSnorm2x16(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ; glm::unpackSnorm2x16

; 42   : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 32767.0f * 2.0f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38800100
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packS
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packS
$LN6@test_packS:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packS:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 43   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packS
	mov	r8d, 43					; 0000002bH
	lea	rdx, OFFSET FLAT:$SG56837
	lea	rcx, OFFSET FLAT:$SG56838
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packS:

; 44   : 	}

	jmp	$LN2@test_packS
$LN3@test_packS:

; 45   : 	
; 46   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 47   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packSnorm2x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packSnorm2x16@@YAHXZ ENDP				; test_packSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA PROC		; `test_packSnorm2x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packSnorm2x16@@YAHXZ@4HA ENDP		; `test_packSnorm2x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec2>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first, COMDAT

; 1381 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1382 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1383 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 16
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first, COMDAT

; 1377 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1378 :         return *this;

	mov	rax, QWORD PTR this$[rsp]

; 1379 :     }

	pop	rdi
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >, COMDAT

; 392  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??0_Container_base12@std@@QEAA@XZ	; std::_Container_base12::_Container_base12
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal, COMDAT

; 2031 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2032 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first

; 2033 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal, COMDAT

; 2027 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2028 :         return _Mypair._Get_first();

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, rax
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Get_first

; 2029 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range, COMDAT

; 2012 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2013 :         // orphan iterators within specified (inclusive) range
; 2014 : #if _HAS_CXX20
; 2015 :         if (_STD is_constant_evaluated()) {
; 2016 :             _Orphan_range_unlocked(_First, _Last);
; 2017 :         } else
; 2018 : #endif // _HAS_CXX20
; 2019 :         {
; 2020 :             _Orphan_range_locked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked

; 2021 :         }
; 2022 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked, COMDAT

; 2007 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2008 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z
	npad	1

; 2009 :         _Orphan_range_unlocked(_First, _Last);

	mov	r8, QWORD PTR _Last$[rsp]
	mov	rdx, QWORD PTR _First$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
	npad	1

; 2010 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT text$x
text$x	SEGMENT
_Lock$ = 36
this$ = 80
_First$ = 88
_Last$ = 96
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA PROC ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR _Lock$[rbp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??_Orphan_range_locked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z@4HA ENDP ; `std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_locked'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z
_TEXT	SEGMENT
_Pnext$ = 0
_Pnextptr$1 = 8
_Temp$2 = 16
_Temp$3 = 24
this$ = 48
_First$ = 56
_Last$ = 64
?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked, COMDAT

; 1992 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1993 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax
$LN2@Orphan_ran:

; 1994 :         while (*_Pnext) {

	mov	rax, QWORD PTR _Pnext$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_ran

; 1995 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR _Pnextptr$1[rsp], rax

; 1996 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	rax, QWORD PTR _First$[rsp]
	cmp	QWORD PTR _Pnextptr$1[rsp], rax
	jb	SHORT $LN6@Orphan_ran
	mov	rax, QWORD PTR _Pnextptr$1[rsp]
	cmp	QWORD PTR _Last$[rsp], rax
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 1997 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$2[rsp], rax

; 1998 :                 _Pnext           = &_Temp->_Mynextiter;

	mov	rax, QWORD PTR _Temp$2[rsp]
	add	rax, 8
	mov	QWORD PTR _Pnext$[rsp], rax

; 1999 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2000 :                 const auto _Temp = *_Pnext; // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Temp$3[rsp], rax

; 2001 :                 _Temp->_Myproxy  = nullptr;

	mov	rax, QWORD PTR _Temp$3[rsp]
	mov	QWORD PTR [rax], 0

; 2002 :                 *_Pnext          = _Temp->_Mynextiter;

	mov	rax, QWORD PTR _Pnext$[rsp]
	mov	rcx, QWORD PTR _Temp$3[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
$LN5@Orphan_ran:

; 2003 :             }
; 2004 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2005 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_range_unlocked@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAXPEAU?$tvec2@M$0A@@glm@@0@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength, COMDAT

; 1983 :     [[noreturn]] static void _Xlength() {

$LN3:
	push	rdi
	sub	rsp, 32					; 00000020H

; 1984 :         _Xlength_error("vector too long");

	lea	rcx, OFFSET FLAT:??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPEBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1985 :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Xlength@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@CAXXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy, COMDAT

; 1881 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1882 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1883 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1884 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1885 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1886 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1887 : 
; 1888 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1889 : 
; 1890 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Tidy

; 1891 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1892 :             _ASAN_VECTOR_REMOVE;
; 1893 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate

; 1894 : 
; 1895 :             _Myfirst = nullptr;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	QWORD PTR [rax], 0

; 1896 :             _Mylast  = nullptr;

	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rax], 0

; 1897 :             _Myend   = nullptr;

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rax], 0
$LN2@Tidy:

; 1898 :         }
; 1899 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z
_TEXT	SEGMENT
_Al$ = 32
_My_data$ = 40
_Myfirst$ = 48
_Mylast$ = 56
_Myend$ = 64
this$ = 96
_Newvec$ = 104
_Newsize$ = 112
_Newcapacity$ = 120
?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array, COMDAT

; 1859 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 1860 :         // orphan all iterators, discard old array, acquire new array
; 1861 :         auto& _Al         = _Getal();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	QWORD PTR _Al$[rsp], rax

; 1862 :         auto& _My_data    = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1863 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 8
	mov	QWORD PTR _Myfirst$[rsp], rax

; 1864 :         pointer& _Mylast  = _My_data._Mylast;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 16
	mov	QWORD PTR _Mylast$[rsp], rax

; 1865 :         pointer& _Myend   = _My_data._Myend;

	mov	rax, QWORD PTR _My_data$[rsp]
	add	rax, 24
	mov	QWORD PTR _Myend$[rsp], rax

; 1866 : 
; 1867 :         _My_data._Orphan_all();

	mov	rcx, QWORD PTR _My_data$[rsp]
	call	?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 1868 : 
; 1869 :         if (_Myfirst) { // destroy and deallocate old array

	mov	rax, QWORD PTR _Myfirst$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@Change_arr

; 1870 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	r8, QWORD PTR _Al$[rsp]
	mov	rax, QWORD PTR _Mylast$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	??$_Destroy_range@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@YAXPEAU?$tvec2@M$0A@@glm@@QEAU12@AEAV?$allocator@U?$tvec2@M$0A@@glm@@@0@@Z ; std::_Destroy_range<std::allocator<glm::tvec2<float,0> > >

; 1871 :             _ASAN_VECTOR_REMOVE;
; 1872 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	rax, QWORD PTR _Myend$[rsp]
	mov	rcx, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	sar	rax, 3
	mov	r8, rax
	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Al$[rsp]
	call	?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ; std::allocator<glm::tvec2<float,0> >::deallocate
$LN2@Change_arr:

; 1873 :         }
; 1874 : 
; 1875 :         _Myfirst = _Newvec;

	mov	rax, QWORD PTR _Myfirst$[rsp]
	mov	rcx, QWORD PTR _Newvec$[rsp]
	mov	QWORD PTR [rax], rcx

; 1876 :         _Mylast  = _Newvec + _Newsize;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newsize$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Mylast$[rsp]
	mov	QWORD PTR [rcx], rax

; 1877 :         _Myend   = _Newvec + _Newcapacity;

	mov	rax, QWORD PTR _Newvec$[rsp]
	mov	rcx, QWORD PTR _Newcapacity$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR _Myend$[rsp]
	mov	QWORD PTR [rcx], rax

; 1878 :         _ASAN_VECTOR_CREATE;
; 1879 :     }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Change_array@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXQEAU?$tvec2@M$0A@@glm@@_K1@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
_Oldcapacity$ = 32
_Max$ = 40
_Geometric$ = 48
this$ = 80
_Newsize$ = 88
?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth, COMDAT

; 1807 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1808 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1809 :         const size_type _Oldcapacity = capacity();

	mov	rcx, QWORD PTR this$[rsp]
	call	?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
	mov	QWORD PTR _Oldcapacity$[rsp], rax

; 1810 :         const auto _Max              = max_size();

	mov	rcx, QWORD PTR this$[rsp]
	call	?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
	mov	QWORD PTR _Max$[rsp], rax

; 1811 : 
; 1812 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR _Oldcapacity$[rsp], rax
	jbe	SHORT $LN2@Calculate_

; 1813 :             return _Max; // geometric growth would overflow

	mov	rax, QWORD PTR _Max$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1814 :         }
; 1815 : 
; 1816 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	xor	edx, edx
	mov	rax, QWORD PTR _Oldcapacity$[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR _Oldcapacity$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR _Geometric$[rsp], rax

; 1817 : 
; 1818 :         if (_Geometric < _Newsize) {

	mov	rax, QWORD PTR _Newsize$[rsp]
	cmp	QWORD PTR _Geometric$[rsp], rax
	jae	SHORT $LN3@Calculate_

; 1819 :             return _Newsize; // geometric growth would be insufficient

	mov	rax, QWORD PTR _Newsize$[rsp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1820 :         }
; 1821 : 
; 1822 :         return _Geometric; // geometric growth is sufficient

	mov	rax, QWORD PTR _Geometric$[rsp]
$LN1@Calculate_:

; 1823 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Calculate_growth@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBA_K_K@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
_My_data$ = 48
this$ = 80
_Pos$ = 88
??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[], COMDAT

; 1728 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 1729 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax
$LN4@operator:

; 1730 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1731 :         _STL_VERIFY(

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3
	cmp	QWORD PTR _Pos$[rsp], rax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN9@operator
$LN7@operator:
	lea	rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 1732				; 000006c4H
	lea	rdx, OFFSET FLAT:??_C@_0GB@GDCALCPO@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
	xor	eax, eax
$LN11@operator:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 1732				; 000006c4H
	lea	r8, OFFSET FLAT:??_C@_1MC@BJDJHFOD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@operator
$LN9@operator:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@operator

; 1732 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1733 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1734 : 
; 1735 :         return _My_data._Myfirst[_Pos];

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR _Pos$[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]

; 1736 :     }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity, COMDAT

; 1723 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1724 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1725 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	sar	rax, 3

; 1726 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?capacity@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size, COMDAT

; 1718 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1719 :         return (_STD min)(

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEBAAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rcx, rax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
	mov	QWORD PTR $T1[rsp], rax
	call	?max@?$numeric_limits@_J@std@@SA_JXZ	; std::numeric_limits<__int64>::max
	mov	QWORD PTR $T2[rsp], rax
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$min@_K@std@@YAAEB_KAEB_K0@Z		; std::min<unsigned __int64>
	mov	rax, QWORD PTR [rax]

; 1720 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1721 :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?max_size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
_My_data$ = 0
this$ = 32
?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size, COMDAT

; 1713 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1714 :         auto& _My_data = _Mypair._Myval2;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR _My_data$[rsp], rax

; 1715 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	rax, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR _My_data$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	sar	rax, 3

; 1716 :     }

	add	rsp, 16
	pop	rdi
	ret	0
?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back, COMDAT

; 900  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 901  :         // insert by moving into element at end, provide strong guarantee
; 902  :         emplace_back(_STD move(_Val));

	mov	rcx, QWORD PTR _Val$[rsp]
	call	??$move@AEAU?$tvec2@M$0A@@glm@@@std@@YA$$QEAU?$tvec2@M$0A@@glm@@AEAU12@@Z ; std::move<glm::tvec2<float,0> &>
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rsp]
	call	??$emplace_back@U?$tvec2@M$0A@@glm@@@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA?A_T$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::emplace_back<glm::tvec2<float,0> >

; 903  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 32
$S3$ = 52
$T4 = 68
this$ = 96
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 790  :     _CONSTEXPR20 ~vector() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 791  :         _Tidy();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Tidy@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAXXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Tidy

; 792  : #if _ITERATOR_DEBUG_LEVEL != 0
; 793  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $S3$[rsp]
	call	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
	lea	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR _Alproxy$[rsp], rax

; 794  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	QWORD PTR $T4[rsp], 0
	mov	rax, QWORD PTR this$[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	mov	rcx, rax
	call	??$exchange@PEAU_Container_proxy@std@@$$T@std@@YAPEAU_Container_proxy@0@AEAPEAU10@$$QEA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	mov	rdx, rax
	mov	rcx, QWORD PTR _Alproxy$[rsp]
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 795  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 796  :     }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector
;	COMDAT ??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
this$ = 64
??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ PROC ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >, COMDAT

; 659  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movzx	edx, BYTE PTR $T1[rsp]
	mov	rcx, rax
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@V?$_Vector_val@U?$_Simple_types@U?$tvec2@M$0A@@glm@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1>::_Compressed_pair<std::allocator<glm::tvec2<float,0> >,std::_Vector_val<std::_Simple_types<glm::tvec2<float,0> > >,1><>

; 660  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Getal@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@AEAAAEAV?$allocator@U?$tvec2@M$0A@@glm@@@2@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::_Getal
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0U?$tvec2@M$0A@@glm@@@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@U?$tvec2@M$0A@@glm@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><glm::tvec2<float,0> >
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdx, rax
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 661  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ENDP ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z
_TEXT	SEGMENT
__formal$ = 16
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size, COMDAT

; 693  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	rax, 2305843009213693951		; 1fffffffffffffffH

; 695  :     }

	pop	rdi
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@SA_KAEBV?$allocator@U?$tvec2@M$0A@@glm@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<glm::tvec2<float,0> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<float,0> >::allocate, COMDAT

; 833  :     _NODISCARD _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 834  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	rcx, QWORD PTR _Count$[rsp]
	call	??$_Get_size_of_n@$07@std@@YA_K_K@Z	; std::_Get_size_of_n<8>
	mov	rcx, rax
	call	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 835  :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?allocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAPEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<float,0> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z
_TEXT	SEGMENT
this$ = 64
_Ptr$ = 72
_Count$ = 80
?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z PROC ; std::allocator<glm::tvec2<float,0> >::deallocate, COMDAT

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
$LN4@deallocate:

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	QWORD PTR _Ptr$[rsp], 0
	jne	SHORT $LN10@deallocate
	cmp	QWORD PTR _Count$[rsp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN9@deallocate
$LN8@deallocate:
$LN7@deallocate:
	lea	rax, OFFSET FLAT:??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 828				; 0000033cH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
	xor	eax, eax
$LN12@deallocate:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 828				; 0000033cH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@deallocate
$LN9@deallocate:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@deallocate

; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	rax, QWORD PTR _Count$[rsp]
	shl	rax, 3
	mov	rdx, rax
	mov	rcx, QWORD PTR _Ptr$[rsp]
	call	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 831  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?deallocate@?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAAXQEAU?$tvec2@M$0A@@glm@@_K@Z ENDP ; std::allocator<glm::tvec2<float,0> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ PROC	; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >, COMDAT

; 819  :     constexpr allocator() noexcept {}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$allocator@U?$tvec2@M$0A@@glm@@@std@@QEAA@XZ ENDP	; std::allocator<glm::tvec2<float,0> >::allocator<glm::tvec2<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_packing.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?test_packUnorm2x16@@YAHXZ PROC				; test_packUnorm2x16

; 8    : {

$LN10:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 10   : 
; 11   : 	std::vector<glm::vec2> A;

	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	npad	1

; 12   : 	A.push_back(glm::vec2(1.0f, 0.0f));

	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 13   : 	A.push_back(glm::vec2(0.5f, 0.7f));

	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 14   : 	A.push_back(glm::vec2(0.1f, 0.2f));

	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T12[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR A$[rsp]
	call	?push_back@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAX$$QEAU?$tvec2@M$0A@@glm@@@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::push_back

; 15   : 
; 16   : 	for(std::size_t i = 0; i < A.size(); ++i)

	mov	QWORD PTR i$6[rsp], 0
	jmp	SHORT $LN4@test_packU
$LN2@test_packU:
	mov	rax, QWORD PTR i$6[rsp]
	inc	rax
	mov	QWORD PTR i$6[rsp], rax
$LN4@test_packU:
	lea	rcx, QWORD PTR A$[rsp]
	call	?size@?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEBA_KXZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::size
	cmp	QWORD PTR i$6[rsp], rax
	jae	$LN3@test_packU

; 17   : 	{
; 18   : 		glm::vec2 B(A[i]);

	mov	rdx, QWORD PTR i$6[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??A?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAAAEAU?$tvec2@M$0A@@glm@@_K@Z ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR B$7[rsp], rax

; 19   : 		glm::uint32 C = glm::packUnorm2x16(B);

	lea	rcx, QWORD PTR B$7[rsp]
	call	?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ; glm::packUnorm2x16
	mov	DWORD PTR C$8[rsp], eax

; 20   : 		glm::vec2 D = glm::unpackUnorm2x16(C);

	mov	edx, DWORD PTR C$8[rsp]
	lea	rcx, QWORD PTR D$9[rsp]
	call	?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ; glm::unpackUnorm2x16

; 21   : 		Error += glm::all(glm::epsilonEqual(B, D, 1.0f / 65535.f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@37800080
	movss	DWORD PTR $T13[rsp], xmm0
	lea	r9, QWORD PTR $T13[rsp]
	lea	r8, QWORD PTR D$9[rsp]
	lea	rdx, QWORD PTR B$7[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@test_packU
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN7@test_packU
$LN6@test_packU:
	mov	DWORD PTR tv138[rsp], 1
$LN7@test_packU:
	mov	eax, DWORD PTR tv138[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 22   : 		assert(!Error);

	cmp	DWORD PTR Error$[rsp], 0
	je	SHORT $LN8@test_packU
	mov	r8d, 22
	lea	rdx, OFFSET FLAT:$SG56815
	lea	rcx, OFFSET FLAT:$SG56816
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@test_packU:

; 23   : 	}

	jmp	$LN2@test_packU
$LN3@test_packU:

; 24   : 	
; 25   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]
	mov	DWORD PTR $T15[rsp], eax
	lea	rcx, QWORD PTR A$[rsp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	mov	eax, DWORD PTR $T15[rsp]

; 26   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_packUnorm2x16@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_packUnorm2x16@@YAHXZ ENDP				; test_packUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
text$x	SEGMENT
Error$ = 32
A$ = 56
i$6 = 104
B$7 = 120
C$8 = 132
D$9 = 152
$T10 = 164
$T11 = 172
$T12 = 180
$T13 = 188
$T14 = 192
$T15 = 196
tv138 = 200
?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA PROC		; `test_packUnorm2x16'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rbp, rdx
	lea	rcx, QWORD PTR A$[rbp]
	call	??1?$vector@U?$tvec2@M$0A@@glm@@V?$allocator@U?$tvec2@M$0A@@glm@@@std@@@std@@QEAA@XZ ; std::vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >::~vector<glm::tvec2<float,0>,std::allocator<glm::tvec2<float,0> > >
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??test_packUnorm2x16@@YAHXZ@4HA ENDP		; `test_packUnorm2x16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 36
this$ = 80
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1078 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1079 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	edx, 3
	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1080 :         _Orphan_all_unlocked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1081 :     }

	lea	rcx, QWORD PTR _Lock$[rsp]
	call	QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 0
this$ = 32
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1219 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1220 :     if (!_Myproxy) { // no proxy, already done

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN5@Orphan_all

; 1221 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1222 :     }
; 1223 : 
; 1224 :     // proxy allocated, drain it
; 1225 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	QWORD PTR _Pnext$1[rsp], rax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx], rax
$LN4@Orphan_all:
	mov	rax, QWORD PTR _Pnext$1[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@Orphan_all

; 1226 :         _Pnext->_Myproxy = nullptr;

	mov	rax, QWORD PTR _Pnext$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax], 0

; 1227 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1228 :     _Myproxy->_Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1229 : }

	add	rsp, 16
	pop	rdi
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1231 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1232 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1233 : #if _HAS_CXX20
; 1234 :     if (_STD is_constant_evaluated()) {
; 1235 :         _Orphan_all_unlocked_v3();
; 1236 :     } else
; 1237 : #endif // _HAS_CXX20
; 1238 :     {
; 1239 :         _Orphan_all_locked_v3();

	mov	rcx, QWORD PTR this$[rsp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1240 :     }
; 1241 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1242 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 1048 : 
; 1049 :     _Container_base12(const _Container_base12&) = delete;
; 1050 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1051 : 
; 1052 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1053 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1054 : 
; 1055 :     template <class _Alloc>
; 1056 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1057 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1058 :         _Construct_in_place(*_New_proxy, this);
; 1059 :         _Myproxy            = _New_proxy;
; 1060 :         _New_proxy->_Mycont = this;
; 1061 :     }
; 1062 : 
; 1063 :     template <class _Alloc>
; 1064 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1065 :         // pre: no iterators refer to the existing proxy
; 1066 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1067 :         _Construct_in_place(*_New_proxy, this);
; 1068 :         _New_proxy->_Mycont = this;
; 1069 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1070 :     }
; 1071 : 
; 1072 :     _Container_proxy* _Myproxy = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax], 0

; 1047 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 16
_Mycont_$ = 24
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Mycont_$[rsp]
	mov	QWORD PTR [rax], rcx

; 1040 : 
; 1041 :     const _Container_base12* _Mycont       = nullptr;
; 1042 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	rax, QWORD PTR this$[rsp]
	mov	QWORD PTR [rax+8], 0

; 1039 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 48
_Ptr_container$ = 56
_Min_back_shift$ = 64
_Back_shift$ = 72
_Ptr$ = 96
_Bytes$ = 104
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 145  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 146  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 147  :     _Bytes += _Non_user_size;

	mov	rax, QWORD PTR _Bytes$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 47					; 0000002fH
	mov	rcx, QWORD PTR _Bytes$[rsp]
	mov	QWORD PTR [rcx], rax

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Ptr_user$[rsp], rax

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 8
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR _Ptr_container$[rsp], rax
$LN4@Adjust_man:

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 8
	imul	rax, rax, -2
	mov	rcx, QWORD PTR _Ptr_user$[rsp]
	mov	rdx, -361700864190383366		; fafafafafafafafaH
	cmp	QWORD PTR [rcx+rax], rdx
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 154				; 0000009aH
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
	xor	eax, eax
$LN19@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@Adjust_man
$LN15@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@Adjust_man

; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	QWORD PTR _Min_back_shift$[rsp], 16

; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, rcx
	mov	QWORD PTR _Back_shift$[rsp], rax
$LN10@Adjust_man:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	QWORD PTR _Back_shift$[rsp], 16
	jb	SHORT $LN16@Adjust_man
	cmp	QWORD PTR _Back_shift$[rsp], 47		; 0000002fH
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
	lea	rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:??_C@_0GC@DJFHHHKN@C?3?2Program?5Files?2Microsoft?5Visu@
	mov	ecx, 2
	call	QWORD PTR __imp__CrtDbgReport
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
	xor	eax, eax
$LN20@Adjust_man:
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:??_C@_1ME@GEFGDEOM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	lea	rdx, OFFSET FLAT:??_C@_11LOCGONAA@@
	lea	rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	QWORD PTR __imp__invalid_parameter
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN17@Adjust_man:
	xor	eax, eax
	test	eax, eax
	jne	$LN10@Adjust_man

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	rax, QWORD PTR _Ptr$[rsp]
	mov	rcx, QWORD PTR _Ptr_container$[rsp]
	mov	QWORD PTR [rax], rcx

; 166  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 48
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 78   :         void* _Allocate(const size_t _Bytes) {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 79   :         return ::operator new(_Bytes);

	mov	rcx, QWORD PTR _Bytes$[rsp]
	call	??2@YAPEAX_K@Z				; operator new

; 80   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 32
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 317  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
	push	rdi
	sub	rsp, 64					; 00000040H

; 318  :     _THROW(bad_array_new_length{});

	lea	rcx, QWORD PTR $T1[rsp]
	call	??0bad_array_new_length@std@@QEAA@XZ	; std::bad_array_new_length::bad_array_new_length
	lea	rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
	lea	rcx, QWORD PTR $T1[rsp]
	call	_CxxThrowException
$LN2@Throw_bad_:

; 319  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_array_new_length@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@QEAA@AEBV01@@Z
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 140  :         : bad_alloc("bad array new length")

	lea	rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	rcx, QWORD PTR this$[rsp]
	call	??0bad_alloc@std@@AEAA@QEBD@Z		; std::bad_alloc::bad_alloc

; 141  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
	mov	QWORD PTR [rax], rcx

; 142  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1bad_alloc@std@@UEAA@XZ
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdx, QWORD PTR __that$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@AEBV01@@Z	; std::exception::exception
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 129  :         : exception(_Message, 1)

	mov	r8d, 1
	mov	rdx, QWORD PTR _Message$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	call	??0exception@std@@QEAA@QEBDH@Z		; std::exception::exception

; 130  :     {

	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
	mov	QWORD PTR [rax], rcx

; 131  :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rsp]
	call	??1exception@std@@UEAA@XZ		; std::exception::~exception
	mov	eax, DWORD PTR __flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 24
	mov	rcx, QWORD PTR this$[rsp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	rax, QWORD PTR this$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@what
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN4@what
$LN3@what:
	lea	rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
	mov	QWORD PTR tv69[rsp], rax
$LN4@what:
	mov	rax, QWORD PTR tv69[rsp]

; 96   :     }

	add	rsp, 16
	pop	rdi
	ret	0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	__std_exception_destroy

; 91   :     }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 71   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR _Other$[rsp]
	add	rcx, 8
	mov	rdx, rax
	call	__std_exception_copy

; 74   :     }

	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	lea	rcx, OFFSET FLAT:??_7exception@std@@6B@
	mov	QWORD PTR [rax], rcx

; 65   :         : _Data()

	mov	rax, QWORD PTR this$[rsp]
	add	rax, 8
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb

; 67   :         _Data._What = _Message;

	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR _Message$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 68   :     }

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@I$0A@@glm@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@I$0A@@glm@@QEAA@II@Z PROC			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@I$0A@@glm@@QEAA@II@Z ENDP			; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z PROC			; glm::tvec2<unsigned int,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@I$0A@@glm@@SAHXZ	; glm::tvec2<unsigned int,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z ENDP			; glm::tvec2<unsigned int,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@I$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@I$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned int,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@I$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned int,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>, COMDAT

; 204  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	movsx	eax, BYTE PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	movsx	eax, BYTE PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	movsx	eax, BYTE PTR c$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	movsx	eax, BYTE PTR d$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z PROC			; glm::tvec4<signed char,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@C$0A@@glm@@SAHXZ	; glm::tvec4<signed char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z ENDP			; glm::tvec4<signed char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@C$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@C$0A@@glm@@SAHXZ PROC			; glm::tvec4<signed char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@C$0A@@glm@@SAHXZ ENDP			; glm::tvec4<signed char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>, COMDAT

; 204  : 	{}

$LN3:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	movzx	eax, BYTE PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	movzx	eax, BYTE PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	movzx	eax, BYTE PTR c$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	movzx	eax, BYTE PTR d$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z PROC ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>, COMDAT

; 323  : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 319  : 		x(static_cast<T>(v.x)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx], al

; 320  : 		y(static_cast<T>(v.y)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+1], al

; 321  : 		z(static_cast<T>(v.z)),

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+2], al

; 322  : 		w(static_cast<T>(v.w))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR this$[rsp]
	mov	BYTE PTR [rcx+3], al

; 323  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ENDP ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z PROC			; glm::tvec4<unsigned char,0>::operator[], COMDAT

; 329  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 330  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@E$0A@@glm@@SAHXZ	; glm::tvec4<unsigned char,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 330				; 0000014aH
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 331  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 332  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z ENDP			; glm::tvec4<unsigned char,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@E$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@E$0A@@glm@@SAHXZ PROC			; glm::tvec4<unsigned char,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@E$0A@@glm@@SAHXZ ENDP			; glm::tvec4<unsigned char,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z PROC ; glm::round<float,0,glm::tvec4>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
; 362  : 		return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_round@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ENDP ; glm::round<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v$ = 88
scalar$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 694  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 695  : 		return tvec4<T, P>(v) *= scalar;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm1, DWORD PTR scalar$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@M@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 696  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
tv66 = 64
__$ReturnUdt$ = 96
x$ = 104
minVal$ = 112
maxVal$ = 120
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec4>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec4@glm@@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec4,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT

; 336  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 337  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec4@M$0A@@glm@@SAHXZ	; glm::tvec4<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 337				; 00000151H
	lea	rdx, OFFSET FLAT:??_C@_1LG@LAANPDHN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 338  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 339  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec4@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?length@?$tvec4@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec4@M$0A@@glm@@SAHXZ PROC			; glm::tvec4<float,0>::length, COMDAT

; 85   : 		GLM_FUNC_DECL static length_type length(){return 4;}

$LN3:
	push	rdi
	mov	eax, 4
	pop	rdi
	ret	0
?length@?$tvec4@M$0A@@glm@@SAHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><short,short>, COMDAT

; 66   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	movsx	eax, WORD PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	movsx	eax, WORD PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><short,short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<short,0>::tvec2<short,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<short,0>::tvec2<short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z PROC			; glm::tvec2<short,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@F$0A@@glm@@SAHXZ	; glm::tvec2<short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z ENDP			; glm::tvec2<short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@F$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@F$0A@@glm@@SAHXZ PROC			; glm::tvec2<short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@F$0A@@glm@@SAHXZ ENDP			; glm::tvec2<short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>, COMDAT

; 66   : 	{}

$LN3:
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	movzx	eax, WORD PTR a$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	movzx	eax, WORD PTR b$[rsp]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
this$ = 16
v$ = 24
??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z PROC ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>, COMDAT

; 82   : 	{}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 80   : 		: x(static_cast<T>(v.x))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx], ax

; 81   : 		, y(static_cast<T>(v.y))

	mov	rax, QWORD PTR v$[rsp]
	cvttss2si eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR this$[rsp]
	mov	WORD PTR [rcx+2], ax

; 82   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ENDP ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z PROC			; glm::tvec2<unsigned short,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@G$0A@@glm@@SAHXZ	; glm::tvec2<unsigned short,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z ENDP			; glm::tvec2<unsigned short,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@G$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@G$0A@@glm@@SAHXZ PROC			; glm::tvec2<unsigned short,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@G$0A@@glm@@SAHXZ ENDP			; glm::tvec2<unsigned short,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::round<float,0,glm::tvec2>, COMDAT

; 360  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 361  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
; 362  : 		return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_round@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_round<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 363  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::round<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv66 = 48
__$ReturnUdt$ = 80
x$ = 88
minVal$ = 96
maxVal$ = 104
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z PROC ; glm::clamp<float,0,glm::tvec2>, COMDAT

; 551  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 552  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || GLM_UNRESTRICTED_GENTYPE, "'clamp' only accept floating-point or integer inputs");
; 553  : 		return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));

	movss	xmm1, DWORD PTR maxVal$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR minVal$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_clamp_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_clamp_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 554  : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ENDP ; glm::clamp<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ??0uif32@detail@glm@@QEAA@XZ
_TEXT	SEGMENT
this$ = 16
??0uif32@detail@glm@@QEAA@XZ PROC			; glm::detail::uif32::uif32, COMDAT

; 20   : 		{}

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 19   : 			i(0)

	mov	rax, QWORD PTR this$[rsp]
	mov	DWORD PTR [rax], 0

; 20   : 		{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0uif32@detail@glm@@QEAA@XZ ENDP			; glm::detail::uif32::uif32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?overflow@detail@glm@@YAMXZ
_TEXT	SEGMENT
f$ = 16
i$1 = 20
?overflow@detail@glm@@YAMXZ PROC			; glm::detail::overflow, COMDAT

; 8    : 	{

$LN6:
	push	rdi
	sub	rsp, 32					; 00000020H

; 9    : 		volatile float f = 1e10;

	movss	xmm0, DWORD PTR __real@501502f9
	movss	DWORD PTR f$[rsp], xmm0

; 10   : 
; 11   : 		for(int i = 0; i < 10; ++i)	

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@overflow
$LN2@overflow:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@overflow:
	cmp	DWORD PTR i$1[rsp], 10
	jge	SHORT $LN3@overflow

; 12   : 			f *= f; // this will overflow before the for loop terminates

	movss	xmm0, DWORD PTR f$[rsp]
	movss	xmm1, DWORD PTR f$[rsp]
	mulss	xmm0, xmm1
	movss	DWORD PTR f$[rsp], xmm0
	jmp	SHORT $LN2@overflow
$LN3@overflow:

; 13   : 		return f;

	movss	xmm0, DWORD PTR f$[rsp]

; 14   : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?overflow@detail@glm@@YAMXZ ENDP			; glm::detail::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?toFloat16@detail@glm@@YAFAEBM@Z
_TEXT	SEGMENT
Entry$ = 36
i$ = 52
s$ = 56
e$ = 60
m$ = 64
tv90 = 68
f$ = 96
?toFloat16@detail@glm@@YAFAEBM@Z PROC			; glm::detail::toFloat16, COMDAT

; 109  : 	{

$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 110  : 		uif32 Entry;

	lea	rcx, QWORD PTR Entry$[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 111  : 		Entry.f = f;

	mov	rax, QWORD PTR f$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR Entry$[rsp], xmm0

; 112  : 		int i = (int)Entry.i;

	mov	eax, DWORD PTR Entry$[rsp]
	mov	DWORD PTR i$[rsp], eax

; 113  : 
; 114  : 		//
; 115  : 		// Our floating point number, f, is represented by the bit
; 116  : 		// pattern in integer i.  Disassemble that bit pattern into
; 117  : 		// the sign, s, the exponent, e, and the significand, m.
; 118  : 		// Shift s into the position where it will go in in the
; 119  : 		// resulting half number.
; 120  : 		// Adjust e, accounting for the different exponent bias
; 121  : 		// of float and half (127 versus 15).
; 122  : 		//
; 123  : 
; 124  : 		int s =  (i >> 16) & 0x00008000;

	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 16
	and	eax, 32768				; 00008000H
	mov	DWORD PTR s$[rsp], eax

; 125  : 		int e = ((i >> 23) & 0x000000ff) - (127 - 15);

	mov	eax, DWORD PTR i$[rsp]
	sar	eax, 23
	and	eax, 255				; 000000ffH
	sub	eax, 112				; 00000070H
	mov	DWORD PTR e$[rsp], eax

; 126  : 		int m =   i        & 0x007fffff;

	mov	eax, DWORD PTR i$[rsp]
	and	eax, 8388607				; 007fffffH
	mov	DWORD PTR m$[rsp], eax

; 127  : 
; 128  : 		//
; 129  : 		// Now reassemble s, e and m into a half:
; 130  : 		//
; 131  : 
; 132  : 		if(e <= 0)

	cmp	DWORD PTR e$[rsp], 0
	jg	SHORT $LN2@toFloat16

; 133  : 		{
; 134  : 			if(e < -10)

	cmp	DWORD PTR e$[rsp], -10
	jge	SHORT $LN4@toFloat16

; 135  : 			{
; 136  : 				//
; 137  : 				// E is less than -10.  The absolute value of f is
; 138  : 				// less than half_MIN (f may be a small normalized
; 139  : 				// float, a denormalized float or a zero).
; 140  : 				//
; 141  : 				// We convert f to a half zero.
; 142  : 				//
; 143  : 
; 144  : 				return hdata(s);

	movzx	eax, WORD PTR s$[rsp]
	jmp	$LN1@toFloat16
$LN4@toFloat16:

; 145  : 			}
; 146  : 
; 147  : 			//
; 148  : 			// E is between -10 and 0.  F is a normalized float,
; 149  : 			// whose magnitude is less than __half_NRM_MIN.
; 150  : 			//
; 151  : 			// We convert f to a denormalized half.
; 152  : 			// 
; 153  : 
; 154  : 			m = (m | 0x00800000) >> (1 - e);

	mov	eax, DWORD PTR m$[rsp]
	bts	eax, 23
	mov	ecx, 1
	sub	ecx, DWORD PTR e$[rsp]
	sar	eax, cl
	mov	DWORD PTR m$[rsp], eax

; 155  : 
; 156  : 			//
; 157  : 			// Round to nearest, round "0.5" up.
; 158  : 			//
; 159  : 			// Rounding may cause the significand to overflow and make
; 160  : 			// our number normalized.  Because of the way a half's bits
; 161  : 			// are laid out, we don't have to treat this case separately;
; 162  : 			// the code below will handle it correctly.
; 163  : 			// 
; 164  : 
; 165  : 			if(m & 0x00001000) 

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN5@toFloat16

; 166  : 				m += 0x00002000;

	mov	eax, DWORD PTR m$[rsp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR m$[rsp], eax
$LN5@toFloat16:

; 167  : 
; 168  : 			//
; 169  : 			// Assemble the half from s, e (zero) and m.
; 170  : 			//
; 171  : 
; 172  : 			return hdata(s | (m >> 13));

	mov	eax, DWORD PTR m$[rsp]
	sar	eax, 13
	mov	ecx, DWORD PTR s$[rsp]
	or	ecx, eax
	mov	eax, ecx
	jmp	$LN1@toFloat16

; 173  : 		}

	jmp	$LN3@toFloat16
$LN2@toFloat16:

; 174  : 		else if(e == 0xff - (127 - 15))

	cmp	DWORD PTR e$[rsp], 143			; 0000008fH
	jne	SHORT $LN6@toFloat16

; 175  : 		{
; 176  : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN8@toFloat16

; 177  : 			{
; 178  : 				//
; 179  : 				// F is an infinity; convert f to a half
; 180  : 				// infinity with the same sign as f.
; 181  : 				//
; 182  : 
; 183  : 				return hdata(s | 0x7c00);

	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	jmp	$LN1@toFloat16

; 184  : 			}

	jmp	SHORT $LN9@toFloat16
$LN8@toFloat16:

; 185  : 			else
; 186  : 			{
; 187  : 				//
; 188  : 				// F is a NAN; we produce a half NAN that preserves
; 189  : 				// the sign bit and the 10 leftmost bits of the
; 190  : 				// significand of f, with one exception: If the 10
; 191  : 				// leftmost bits are all zero, the NAN would turn 
; 192  : 				// into an infinity, so we have to set at least one
; 193  : 				// bit in the significand.
; 194  : 				//
; 195  : 
; 196  : 				m >>= 13;

	mov	eax, DWORD PTR m$[rsp]
	sar	eax, 13
	mov	DWORD PTR m$[rsp], eax

; 197  : 
; 198  : 				return hdata(s | 0x7c00 | m | (m == 0));

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN14@toFloat16
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN15@toFloat16
$LN14@toFloat16:
	mov	DWORD PTR tv90[rsp], 0
$LN15@toFloat16:
	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	or	eax, DWORD PTR m$[rsp]
	or	eax, DWORD PTR tv90[rsp]
	jmp	SHORT $LN1@toFloat16
$LN9@toFloat16:

; 199  : 			}
; 200  : 		}

	jmp	SHORT $LN7@toFloat16
$LN6@toFloat16:

; 201  : 		else
; 202  : 		{
; 203  : 			//
; 204  : 			// E is greater than zero.  F is a normalized float.
; 205  : 			// We try to convert f to a normalized half.
; 206  : 			//
; 207  : 
; 208  : 			//
; 209  : 			// Round to nearest, round "0.5" up
; 210  : 			//
; 211  : 
; 212  : 			if(m &  0x00001000)

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN10@toFloat16

; 213  : 			{
; 214  : 				m += 0x00002000;

	mov	eax, DWORD PTR m$[rsp]
	add	eax, 8192				; 00002000H
	mov	DWORD PTR m$[rsp], eax

; 215  : 
; 216  : 				if(m & 0x00800000)

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 8388608				; 00800000H
	test	eax, eax
	je	SHORT $LN11@toFloat16

; 217  : 				{
; 218  : 					m =  0;     // overflow in significand,

	mov	DWORD PTR m$[rsp], 0

; 219  : 					e += 1;     // adjust exponent

	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
$LN11@toFloat16:
$LN10@toFloat16:

; 220  : 				}
; 221  : 			}
; 222  : 
; 223  : 			//
; 224  : 			// Handle exponent overflow
; 225  : 			//
; 226  : 
; 227  : 			if (e > 30)

	cmp	DWORD PTR e$[rsp], 30
	jle	SHORT $LN12@toFloat16

; 228  : 			{
; 229  : 				overflow();        // Cause a hardware floating point overflow;

	call	?overflow@detail@glm@@YAMXZ		; glm::detail::overflow

; 230  : 
; 231  : 				return hdata(s | 0x7c00);

	mov	eax, DWORD PTR s$[rsp]
	or	eax, 31744				; 00007c00H
	jmp	SHORT $LN1@toFloat16
$LN12@toFloat16:

; 232  : 				// if this returns, the half becomes an
; 233  : 			}   // infinity with the same sign as f.
; 234  : 
; 235  : 			//
; 236  : 			// Assemble the half from s, e and m.
; 237  : 			//
; 238  : 
; 239  : 			return hdata(s | (e << 10) | (m >> 13));

	mov	eax, DWORD PTR e$[rsp]
	shl	eax, 10
	mov	ecx, DWORD PTR s$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR m$[rsp]
	sar	ecx, 13
	or	eax, ecx
$LN7@toFloat16:
$LN3@toFloat16:
$LN1@toFloat16:

; 240  : 		}
; 241  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?toFloat16@detail@glm@@YAFAEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?toFloat16@detail@glm@@YAFAEBM@Z ENDP			; glm::detail::toFloat16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_half.inl
;	COMDAT ?toFloat32@detail@glm@@YAMF@Z
_TEXT	SEGMENT
s$ = 48
e$ = 52
m$ = 56
result$7 = 68
result$8 = 100
result$9 = 132
Result$ = 164
value$ = 208
?toFloat32@detail@glm@@YAMF@Z PROC			; glm::detail::toFloat32, COMDAT

; 35   : 	{

$LN12:
	mov	WORD PTR [rsp+8], cx
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, WORD PTR [rsp+208]

; 36   : 		int s = (value >> 15) & 0x00000001;

	movsx	eax, WORD PTR value$[rsp]
	sar	eax, 15
	and	eax, 1
	mov	DWORD PTR s$[rsp], eax

; 37   : 		int e = (value >> 10) & 0x0000001f;

	movsx	eax, WORD PTR value$[rsp]
	sar	eax, 10
	and	eax, 31
	mov	DWORD PTR e$[rsp], eax

; 38   : 		int m =  value        & 0x000003ff;

	movsx	eax, WORD PTR value$[rsp]
	and	eax, 1023				; 000003ffH
	mov	DWORD PTR m$[rsp], eax

; 39   : 
; 40   : 		if(e == 0)

	cmp	DWORD PTR e$[rsp], 0
	jne	SHORT $LN4@toFloat32

; 41   : 		{
; 42   : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN6@toFloat32

; 43   : 			{
; 44   : 				//
; 45   : 				// Plus or minus zero
; 46   : 				//
; 47   : 
; 48   : 				detail::uif32 result;

	lea	rcx, QWORD PTR result$7[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 49   : 				result.i = (unsigned int)(s << 31);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	mov	DWORD PTR result$7[rsp], eax

; 50   : 				return result.f;

	movss	xmm0, DWORD PTR result$7[rsp]
	jmp	$LN1@toFloat32

; 51   : 			}

	jmp	SHORT $LN7@toFloat32
$LN6@toFloat32:
$LN2@toFloat32:

; 52   : 			else
; 53   : 			{
; 54   : 				//
; 55   : 				// Denormalized number -- renormalize it
; 56   : 				//
; 57   : 
; 58   : 				while(!(m & 0x00000400))

	mov	eax, DWORD PTR m$[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN3@toFloat32

; 59   : 				{
; 60   : 					m <<= 1;

	mov	eax, DWORD PTR m$[rsp]
	shl	eax, 1
	mov	DWORD PTR m$[rsp], eax

; 61   : 					e -=  1;

	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax

; 62   : 				}

	jmp	SHORT $LN2@toFloat32
$LN3@toFloat32:

; 63   : 
; 64   : 				e += 1;

	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax

; 65   : 				m &= ~0x00000400;

	mov	eax, DWORD PTR m$[rsp]
	btr	eax, 10
	mov	DWORD PTR m$[rsp], eax
$LN7@toFloat32:

; 66   : 			}
; 67   : 		}

	jmp	SHORT $LN5@toFloat32
$LN4@toFloat32:

; 68   : 		else if(e == 31)

	cmp	DWORD PTR e$[rsp], 31
	jne	SHORT $LN8@toFloat32

; 69   : 		{
; 70   : 			if(m == 0)

	cmp	DWORD PTR m$[rsp], 0
	jne	SHORT $LN9@toFloat32

; 71   : 			{
; 72   : 				//
; 73   : 				// Positive or negative infinity
; 74   : 				//
; 75   : 
; 76   : 				uif32 result;

	lea	rcx, QWORD PTR result$8[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 77   : 				result.i = (unsigned int)((s << 31) | 0x7f800000);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	or	eax, 2139095040				; 7f800000H
	mov	DWORD PTR result$8[rsp], eax

; 78   : 				return result.f;

	movss	xmm0, DWORD PTR result$8[rsp]
	jmp	SHORT $LN1@toFloat32

; 79   : 			}

	jmp	SHORT $LN10@toFloat32
$LN9@toFloat32:

; 80   : 			else
; 81   : 			{
; 82   : 				//
; 83   : 				// Nan -- preserve sign and significand bits
; 84   : 				//
; 85   : 
; 86   : 				uif32 result;

	lea	rcx, QWORD PTR result$9[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 87   : 				result.i = (unsigned int)((s << 31) | 0x7f800000 | (m << 13));

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	or	eax, 2139095040				; 7f800000H
	mov	ecx, DWORD PTR m$[rsp]
	shl	ecx, 13
	or	eax, ecx
	mov	DWORD PTR result$9[rsp], eax

; 88   : 				return result.f;

	movss	xmm0, DWORD PTR result$9[rsp]
	jmp	SHORT $LN1@toFloat32
$LN10@toFloat32:
$LN8@toFloat32:
$LN5@toFloat32:

; 89   : 			}
; 90   : 		}
; 91   : 
; 92   : 		//
; 93   : 		// Normalized number
; 94   : 		//
; 95   : 
; 96   : 		e = e + (127 - 15);

	mov	eax, DWORD PTR e$[rsp]
	add	eax, 112				; 00000070H
	mov	DWORD PTR e$[rsp], eax

; 97   : 		m = m << 13;

	mov	eax, DWORD PTR m$[rsp]
	shl	eax, 13
	mov	DWORD PTR m$[rsp], eax

; 98   : 
; 99   : 		//
; 100  : 		// Assemble s, e and m.
; 101  : 		//
; 102  : 
; 103  : 		uif32 Result;

	lea	rcx, QWORD PTR Result$[rsp]
	call	??0uif32@detail@glm@@QEAA@XZ		; glm::detail::uif32::uif32

; 104  : 		Result.i = (unsigned int)((s << 31) | (e << 23) | m);

	mov	eax, DWORD PTR s$[rsp]
	shl	eax, 31
	mov	ecx, DWORD PTR e$[rsp]
	shl	ecx, 23
	or	eax, ecx
	or	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR Result$[rsp], eax

; 105  : 		return Result.f;

	movss	xmm0, DWORD PTR Result$[rsp]
$LN1@toFloat32:

; 106  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?toFloat32@detail@glm@@YAMF@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?toFloat32@detail@glm@@YAMF@Z ENDP			; glm::detail::toFloat32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 36
tv66 = 52
__$ReturnUdt$ = 80
v$ = 88
?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z PROC	; glm::unpackHalf2x16, COMDAT

; 172  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 173  : 		union
; 174  : 		{
; 175  : 			uint in;
; 176  : 			i16  out[2];
; 177  : 		} u;
; 178  : 
; 179  : 		u.in = v;

	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 180  : 
; 181  : 		return vec2(

	mov	eax, 2
	imul	rax, rax, 1
	movzx	ecx, WORD PTR u$[rsp+rax]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	DWORD PTR tv66[rsp], xmm0
	mov	eax, 2
	imul	rax, rax, 0
	movzx	ecx, WORD PTR u$[rsp+rax]
	call	?toFloat32@detail@glm@@YAMF@Z		; glm::detail::toFloat32
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 			detail::toFloat32(u.out[0]),
; 183  : 			detail::toFloat32(u.out[1]));
; 184  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?unpackHalf2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ENDP	; glm::unpackHalf2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
v$ = 80
?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packHalf2x16, COMDAT

; 158  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 159  : 		union
; 160  : 		{
; 161  : 			i16  in[2];
; 162  : 			uint out;
; 163  : 		} u;
; 164  : 
; 165  : 		u.in[0] = detail::toFloat16(v.x);

	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, rax
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	WORD PTR u$[rsp+rcx], ax

; 166  : 		u.in[1] = detail::toFloat16(v.y);

	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?toFloat16@detail@glm@@YAFAEBM@Z	; glm::detail::toFloat16
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	WORD PTR u$[rsp+rcx], ax

; 167  : 
; 168  : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 169  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?packHalf2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packHalf2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z
_TEXT	SEGMENT
u$ = 40
__$ArrayPad$ = 64
__$ReturnUdt$ = 96
v$ = 104
?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z PROC	; glm::unpackDouble2x32, COMDAT

; 145  : 	{

$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 146  : 		union
; 147  : 		{
; 148  : 			double in;
; 149  : 			uint   out[2];
; 150  : 		} u;
; 151  : 
; 152  : 		u.in = v;

	movsd	xmm0, QWORD PTR v$[rsp]
	movsd	QWORD PTR u$[rsp], xmm0

; 153  : 
; 154  : 		return uvec2(u.out[0], u.out[1]);

	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	r8d, DWORD PTR u$[rsp+rax]
	mov	edx, DWORD PTR u$[rsp+rcx]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@I$0A@@glm@@QEAA@II@Z		; glm::tvec2<unsigned int,0>::tvec2<unsigned int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 155  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackDouble2x32@glm@@YA?AU?$tvec2@I$0A@@1@N@Z ENDP	; glm::unpackDouble2x32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z
_TEXT	SEGMENT
u$ = 56
__$ArrayPad$ = 80
v$ = 112
?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z PROC	; glm::packDouble2x32, COMDAT

; 131  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 132  : 		union
; 133  : 		{
; 134  : 			uint   in[2];
; 135  : 			double out;
; 136  : 		} u;
; 137  : 
; 138  : 		u.in[0] = v[0];

	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR u$[rsp+rcx], eax

; 139  : 		u.in[1] = v[1];

	mov	edx, 1
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@I$0A@@glm@@QEBAAEBIH@Z	; glm::tvec2<unsigned int,0>::operator[]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR u$[rsp+rcx], eax

; 140  : 
; 141  : 		return u.out;

	movsd	xmm0, QWORD PTR u$[rsp]

; 142  : 	}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?packDouble2x32@glm@@YANAEBU?$tvec2@I$0A@@1@@Z ENDP	; glm::packDouble2x32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 52
$T4 = 68
$T5 = 84
tv80 = 104
__$ReturnUdt$ = 128
p$ = 136
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackSnorm4x8, COMDAT

; 118  : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 119  : 		union
; 120  : 		{
; 121  : 			uint in;
; 122  : 			i8   out[4];
; 123  : 		} u;
; 124  : 
; 125  : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 126  : 
; 127  : 		return clamp(vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0078740157480315f, -1.0f, 1.0f);

	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8d, 1
	imul	r8, r8, 0
	mov	QWORD PTR tv80[rsp], r8
	movzx	eax, BYTE PTR u$[rsp+rax]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR u$[rsp+rcx]
	movzx	r8d, BYTE PTR u$[rsp+rdx]
	mov	rax, QWORD PTR tv80[rsp]
	movzx	edx, BYTE PTR u$[rsp+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0CCCC@?$tvec4@M$0A@@glm@@QEAA@CCCC@Z ; glm::tvec4<float,0>::tvec4<float,0><signed char,signed char,signed char,signed char>
	movss	xmm2, DWORD PTR __real@3c010204
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 128  : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?unpackSnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 52
$T4 = 68
tv77 = 88
__$ReturnUdt$ = 112
p$ = 120
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z PROC	; glm::unpackUnorm4x8, COMDAT

; 87   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 88   : 		union
; 89   : 		{
; 90   : 			uint in;
; 91   : 			u8   out[4];
; 92   : 		} u;
; 93   : 
; 94   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 95   : 
; 96   : 		return vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0039215686274509803921568627451f;

	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8d, 1
	imul	r8, r8, 0
	mov	QWORD PTR tv77[rsp], r8
	movzx	eax, BYTE PTR u$[rsp+rax]
	mov	BYTE PTR [rsp+32], al
	movzx	r9d, BYTE PTR u$[rsp+rcx]
	movzx	r8d, BYTE PTR u$[rsp+rdx]
	mov	rax, QWORD PTR tv77[rsp]
	movzx	edx, BYTE PTR u$[rsp+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0EEEE@?$tvec4@M$0A@@glm@@QEAA@EEEE@Z ; glm::tvec4<float,0>::tvec4<float,0><unsigned char,unsigned char,unsigned char,unsigned char>
	movss	xmm2, DWORD PTR __real@3b808081
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 97   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?unpackUnorm4x8@glm@@YA?AU?$tvec4@M$0A@@1@I@Z ENDP	; glm::unpackUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 36
$T4 = 52
$T5 = 60
__$ReturnUdt$ = 96
p$ = 104
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z PROC	; glm::unpackSnorm2x16, COMDAT

; 56   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 57   : 		union
; 58   : 		{
; 59   : 			uint in;
; 60   : 			i16  out[2];
; 61   : 		} u;
; 62   : 
; 63   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 64   : 
; 65   : 		return clamp(vec2(u.out[0], u.out[1]) * 3.0518509475997192297128208258309e-5f, -1.0f, 1.0f);

	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	r8d, WORD PTR u$[rsp+rax]
	movzx	edx, WORD PTR u$[rsp+rcx]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0FF@?$tvec2@M$0A@@glm@@QEAA@FF@Z	; glm::tvec2<float,0>::tvec2<float,0><short,short>
	movss	xmm2, DWORD PTR __real@38000100
	mov	rdx, rax
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 66   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?unpackSnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ENDP	; glm::unpackSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z
_TEXT	SEGMENT
u$ = 36
$T4 = 52
__$ReturnUdt$ = 80
p$ = 88
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z PROC	; glm::unpackUnorm2x16, COMDAT

; 27   : 	{

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 28   : 		union
; 29   : 		{
; 30   : 			uint in;
; 31   : 			u16  out[2];
; 32   : 		} u;
; 33   : 
; 34   : 		u.in = p;

	mov	eax, DWORD PTR p$[rsp]
	mov	DWORD PTR u$[rsp], eax

; 35   : 
; 36   : 		return vec2(u.out[0], u.out[1]) * 1.5259021896696421759365224689097e-5f;

	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	r8d, WORD PTR u$[rsp+rax]
	movzx	edx, WORD PTR u$[rsp+rcx]
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0GG@?$tvec2@M$0A@@glm@@QEAA@GG@Z	; glm::tvec2<float,0>::tvec2<float,0><unsigned short,unsigned short>
	movss	xmm2, DWORD PTR __real@37800080
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 37   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?unpackUnorm2x16@glm@@YA?AU?$tvec2@M$0A@@1@I@Z ENDP	; glm::unpackUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packSnorm4x8, COMDAT

; 100  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 101  : 		union
; 102  : 		{
; 103  : 			i8   in[4];
; 104  : 			uint out;
; 105  : 		} u;
; 106  : 
; 107  : 		i8vec4 result(round(clamp(v, -1.0f, 1.0f) * 127.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@42fe0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec4@C$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<signed char,0>::tvec4<signed char,0><float,0>

; 108  : 
; 109  : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 110  : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 111  : 		u.in[2] = result[2];

	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 112  : 		u.in[3] = result[3];

	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@C$0A@@glm@@QEAAAEACH@Z	; glm::tvec4<signed char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 113  : 
; 114  : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 115  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packSnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packSnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 100
$T7 = 116
v$ = 160
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z PROC	; glm::packUnorm4x8, COMDAT

; 69   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+160]

; 70   : 		union
; 71   : 		{
; 72   : 			u8   in[4];
; 73   : 			uint out;
; 74   : 		} u;
; 75   : 
; 76   : 		u8vec4 result(round(clamp(v, 0.0f, 1.0f) * 255.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec4>
	movss	xmm2, DWORD PTR __real@437f0000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec4@glm@@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec4>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec4@E$0A@@glm@@QEAA@AEBU?$tvec4@M$0A@@1@@Z ; glm::tvec4<unsigned char,0>::tvec4<unsigned char,0><float,0>

; 77   : 
; 78   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 79   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 80   : 		u.in[2] = result[2];

	mov	edx, 2
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 81   : 		u.in[3] = result[3];

	mov	edx, 3
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec4@E$0A@@glm@@QEAAAEAEH@Z	; glm::tvec4<unsigned char,0>::operator[]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR u$[rsp+rcx], al

; 82   : 
; 83   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 84   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?packUnorm4x8@glm@@YAIAEBU?$tvec4@M$0A@@1@@Z ENDP	; glm::packUnorm4x8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packSnorm2x16, COMDAT

; 40   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 41   : 		union
; 42   : 		{
; 43   : 			i16  in[2];
; 44   : 			uint out;
; 45   : 		} u;
; 46   : 
; 47   : 		i16vec2 result(round(clamp(v, -1.0f, 1.0f) * 32767.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@bf800000
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@46fffe00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec2@F$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<short,0>::tvec2<short,0><float,0>

; 48   : 
; 49   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z	; glm::tvec2<short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 50   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@F$0A@@glm@@QEAAAEAFH@Z	; glm::tvec2<short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 51   : 
; 52   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 53   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packSnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packSnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_packing.inl
;	COMDAT ?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z
_TEXT	SEGMENT
u$ = 36
result$ = 68
$T5 = 84
$T6 = 92
$T7 = 100
v$ = 128
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z PROC	; glm::packUnorm2x16, COMDAT

; 11   : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]

; 12   : 		union
; 13   : 		{
; 14   : 			u16  in[2];
; 15   : 			uint out;
; 16   : 		} u;
; 17   : 
; 18   : 		u16vec2 result(round(clamp(v, 0.0f, 1.0f) * 65535.0f));

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR v$[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$clamp@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@MM@Z ; glm::clamp<float,0,glm::tvec2>
	movss	xmm2, DWORD PTR __real@477fff00
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$round@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::round<float,0,glm::tvec2>
	mov	rdx, rax
	lea	rcx, QWORD PTR result$[rsp]
	call	??$?0M$0A@@?$tvec2@G$0A@@glm@@QEAA@AEBU?$tvec2@M$0A@@1@@Z ; glm::tvec2<unsigned short,0>::tvec2<unsigned short,0><float,0>

; 19   : 
; 20   : 		u.in[0] = result[0];

	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 21   : 		u.in[1] = result[1];

	mov	edx, 1
	lea	rcx, QWORD PTR result$[rsp]
	call	??A?$tvec2@G$0A@@glm@@QEAAAEAGH@Z	; glm::tvec2<unsigned short,0>::operator[]
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR u$[rsp+rcx], ax

; 22   : 
; 23   : 		return u.out;

	mov	eax, DWORD PTR u$[rsp]

; 24   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?packUnorm2x16@glm@@YAIAEBU?$tvec2@M$0A@@1@@Z ENDP	; glm::packUnorm2x16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?round@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?round@@YAMM@Z PROC					; round, COMDAT

; 238  : _NODISCARD _Check_return_ inline float round(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 239  : #if _HAS_CMATH_INTRINSICS
; 240  :     return __roundf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	roundf

; 241  : #elif defined(__clang__)
; 242  :     return __builtin_roundf(_Xx);
; 243  : #else // ^^^ defined(__clang__) ^^^ / vvv intrinsics unavailable vvv
; 244  :     return _CSTD roundf(_Xx);
; 245  : #endif // ^^^ intrinsics unavailable ^^^
; 246  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?round@@YAMM@Z ENDP					; round
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 16
_Where$ = 24
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 168  :         (void)_Size;
; 169  :         return _Where;

	mov	rax, QWORD PTR _Where$[rsp]

; 170  :     }

	pop	rdi
	ret	0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 641  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
	push	rdi

; 642  :         return LLONG_MAX;

	mov	rax, 9223372036854775807		; 7fffffffffffffffH

; 643  :     }

	pop	rdi
	ret	0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
END
