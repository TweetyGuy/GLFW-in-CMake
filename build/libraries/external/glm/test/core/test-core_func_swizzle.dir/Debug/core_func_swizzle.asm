; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ		; glm::tvec4<float,0>::xyzw
PUBLIC	?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ		; glm::tvec4<float,0>::wzyx
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?test_ivec2_swizzle@@YAHXZ			; test_ivec2_swizzle
PUBLIC	?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ		; glm::tvec2<int,0>::yx
PUBLIC	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z			; glm::tvec2<int,0>::tvec2<int,0>
PUBLIC	??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z	; glm::operator!=<int,0>
PUBLIC	??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z	; glm::operator==<int,0>
PUBLIC	?test_ivec3_swizzle@@YAHXZ			; test_ivec3_swizzle
PUBLIC	?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ		; glm::tvec3<int,0>::zyx
PUBLIC	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<int,0>::tvec3<int,0>
PUBLIC	??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z	; glm::operator!=<int,0>
PUBLIC	??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z	; glm::operator==<int,0>
PUBLIC	?test_ivec4_swizzle@@YAHXZ			; test_ivec4_swizzle
PUBLIC	?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ		; glm::tvec4<int,0>::wzyx
PUBLIC	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z		; glm::tvec4<int,0>::tvec4<int,0>
PUBLIC	??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z	; glm::operator!=<int,0>
PUBLIC	??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z	; glm::operator==<int,0>
PUBLIC	?test_vec4_swizzle@@YAHXZ			; test_vec4_swizzle
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator!=<float,0>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	main
PUBLIC	?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<int,0,-1,32,0>::call
PUBLIC	?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ; glm::detail::compute_vec4_equal<int,0,-1,32,0>::call
PUBLIC	?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call
PUBLIC	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
PUBLIC	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	__real@00000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@41a00000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec2_swizzle@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+247
	DD	imagerel $unwind$?test_ivec2_swizzle@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec3_swizzle@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+259
	DD	imagerel $unwind$?test_ivec3_swizzle@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_ivec4_swizzle@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+267
	DD	imagerel $unwind$?test_ivec4_swizzle@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test_vec4_swizzle@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+423
	DD	imagerel $unwind$?test_vec4_swizzle@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@H$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ DD 020f01H
	DD	0700b320fH
xdata	ENDS
xdata	SEGMENT
$unwind$?test_ivec2_swizzle@@YAHXZ DD 031a01H
	DD	0120109H
	DD	07002H
$unwind$?test_ivec3_swizzle@@YAHXZ DD 031a01H
	DD	0180109H
	DD	07002H
$unwind$?test_ivec4_swizzle@@YAHXZ DD 031a01H
	DD	01a0109H
	DD	07002H
$unwind$?test_vec4_swizzle@@YAHXZ DD 031a01H
	DD	0200109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
CONST	SEGMENT
?test_ivec2_swizzle@@YAHXZ$rtcName$0 DB 041H		; test_ivec2_swizzle
	DB	00H
	ORG $+2
?test_ivec2_swizzle@@YAHXZ$rtcName$1 DB 042H		; test_ivec2_swizzle
	DB	00H
	ORG $+2
?test_ivec2_swizzle@@YAHXZ$rtcName$2 DB 043H		; test_ivec2_swizzle
	DB	00H
	ORG $+6
?test_ivec2_swizzle@@YAHXZ$rtcVarDesc DD 078H		; test_ivec2_swizzle
	DD	08H
	DQ	FLAT:?test_ivec2_swizzle@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test_ivec2_swizzle@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test_ivec2_swizzle@@YAHXZ$rtcName$0
	ORG $+144
?test_ivec2_swizzle@@YAHXZ$rtcFrameData DD 03H		; test_ivec2_swizzle
	DD	00H
	DQ	FLAT:?test_ivec2_swizzle@@YAHXZ$rtcVarDesc
?test_ivec3_swizzle@@YAHXZ$rtcName$0 DB 041H		; test_ivec3_swizzle
	DB	00H
	ORG $+2
?test_ivec3_swizzle@@YAHXZ$rtcName$1 DB 042H		; test_ivec3_swizzle
	DB	00H
	ORG $+2
?test_ivec3_swizzle@@YAHXZ$rtcName$2 DB 043H		; test_ivec3_swizzle
	DB	00H
	ORG $+6
?test_ivec3_swizzle@@YAHXZ$rtcVarDesc DD 098H		; test_ivec3_swizzle
	DD	0cH
	DQ	FLAT:?test_ivec3_swizzle@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test_ivec3_swizzle@@YAHXZ$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?test_ivec3_swizzle@@YAHXZ$rtcName$0
	ORG $+144
?test_ivec3_swizzle@@YAHXZ$rtcFrameData DD 03H		; test_ivec3_swizzle
	DD	00H
	DQ	FLAT:?test_ivec3_swizzle@@YAHXZ$rtcVarDesc
?test_ivec4_swizzle@@YAHXZ$rtcName$0 DB 041H		; test_ivec4_swizzle
	DB	00H
	ORG $+2
?test_ivec4_swizzle@@YAHXZ$rtcName$1 DB 042H		; test_ivec4_swizzle
	DB	00H
	ORG $+2
?test_ivec4_swizzle@@YAHXZ$rtcName$2 DB 043H		; test_ivec4_swizzle
	DB	00H
	ORG $+6
?test_ivec4_swizzle@@YAHXZ$rtcVarDesc DD 0a8H		; test_ivec4_swizzle
	DD	010H
	DQ	FLAT:?test_ivec4_swizzle@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?test_ivec4_swizzle@@YAHXZ$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?test_ivec4_swizzle@@YAHXZ$rtcName$0
	ORG $+144
?test_ivec4_swizzle@@YAHXZ$rtcFrameData DD 03H		; test_ivec4_swizzle
	DD	00H
	DQ	FLAT:?test_ivec4_swizzle@@YAHXZ$rtcVarDesc
?test_vec4_swizzle@@YAHXZ$rtcName$0 DB 041H		; test_vec4_swizzle
	DB	00H
	ORG $+2
?test_vec4_swizzle@@YAHXZ$rtcName$1 DB 042H		; test_vec4_swizzle
	DB	00H
	ORG $+2
?test_vec4_swizzle@@YAHXZ$rtcName$2 DB 043H		; test_vec4_swizzle
	DB	00H
	ORG $+6
?test_vec4_swizzle@@YAHXZ$rtcVarDesc DD 0a8H		; test_vec4_swizzle
	DD	010H
	DQ	FLAT:?test_vec4_swizzle@@YAHXZ$rtcName$2
	DD	078H
	DD	010H
	DQ	FLAT:?test_vec4_swizzle@@YAHXZ$rtcName$1
	DD	048H
	DD	010H
	DQ	FLAT:?test_vec4_swizzle@@YAHXZ$rtcName$0
	ORG $+144
?test_vec4_swizzle@@YAHXZ$rtcFrameData DD 03H		; test_vec4_swizzle
	DD	00H
	DQ	FLAT:?test_vec4_swizzle@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ DD 020f01H
	DD	0700b520fH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call, COMDAT

; 67   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 68   : 			tvec4<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 69   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 70   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call, COMDAT

; 140  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 141  : 			return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z) || (v1.w != v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+8]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN3@call
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 1
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 142  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z PROC ; glm::detail::compute_vec4_equal<int,0,-1,32,0>::call, COMDAT

; 131  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 132  : 			return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 0
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 133  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_equal<int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z
_TEXT	SEGMENT
tv76 = 0
v1$ = 32
v2$ = 40
?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z PROC ; glm::detail::compute_vec4_nequal<int,0,-1,32,0>::call, COMDAT

; 140  : 		{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 141  : 			return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z) || (v1.w != v2.w);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN3@call
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN3@call
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv76[rsp], 1
$LN4@call:
	movzx	eax, BYTE PTR tv76[rsp]

; 142  : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ENDP ; glm::detail::compute_vec4_nequal<int,0,-1,32,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_swizzle.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 68   : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 69   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 70   : 
; 71   : #	if !GLM_HAS_ONLY_XYZW
; 72   : 		Error += test_ivec2_swizzle();

	call	?test_ivec2_swizzle@@YAHXZ		; test_ivec2_swizzle
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 73   : 		Error += test_ivec3_swizzle();

	call	?test_ivec3_swizzle@@YAHXZ		; test_ivec3_swizzle
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 74   : 		Error += test_ivec4_swizzle();

	call	?test_ivec4_swizzle@@YAHXZ		; test_ivec4_swizzle
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 75   : 
; 76   : 		Error += test_vec4_swizzle();

	call	?test_vec4_swizzle@@YAHXZ		; test_vec4_swizzle
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : #	endif//!GLM_HAS_ONLY_XYZW
; 78   : 
; 79   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 80   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec4>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_equal<float,0,0,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z PROC	; glm::operator!=<float,0>, COMDAT

; 950  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 951  : 		return detail::compute_vec4_nequal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_nequal@M$0A@$0A@$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<float,0,0,32,0>::call

; 952  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ENDP	; glm::operator!=<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_swizzle.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
B$ = 120
C$ = 168
f$ = 196
$T6 = 200
$T7 = 216
tv78 = 232
tv85 = 236
tv89 = 240
tv132 = 248
?test_vec4_swizzle@@YAHXZ PROC				; test_vec4_swizzle

; 50   : {

$LN9:
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 51   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 52   : 
; 53   : 	glm::vec4 A(1, 2, 3, 4);

	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>

; 54   : 	glm::vec4 B = A.wzyx();

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<float,0>::wzyx

; 55   : 	glm::vec4 C = B.wzyx();

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<float,0>::wzyx

; 56   : 
; 57   : 	Error += A != B ? 0 : 1;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator!=<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_vec4_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_vec4_
$LN3@test_vec4_:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_vec4_:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 58   : 	Error += A == C ? 0 : 1;

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec4@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_vec4_
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN6@test_vec4_
$LN5@test_vec4_:
	mov	DWORD PTR tv85[rsp], 1
$LN6@test_vec4_:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 
; 60   : 	float f = glm::dot(C.wzyx(), C.xyzw());

	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<float,0>::xyzw
	mov	QWORD PTR tv89[rsp], rax
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR C$[rsp]
	call	?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<float,0>::wzyx
	mov	rcx, QWORD PTR tv89[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR f$[rsp], xmm0

; 61   : 	Error += glm::abs(f - 20.f) < 0.01f ? 0 : 1;

	movss	xmm0, DWORD PTR f$[rsp]
	subss	xmm0, DWORD PTR __real@41a00000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	xmm1, DWORD PTR __real@3c23d70a
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@test_vec4_
	mov	DWORD PTR tv132[rsp], 0
	jmp	SHORT $LN8@test_vec4_
$LN7@test_vec4_:
	mov	DWORD PTR tv132[rsp], 1
$LN8@test_vec4_:
	mov	eax, DWORD PTR tv132[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 62   : 
; 63   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 64   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_vec4_swizzle@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?test_vec4_swizzle@@YAHXZ ENDP				; test_vec4_swizzle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z PROC	; glm::operator==<int,0>, COMDAT

; 944  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 945  : 		return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_equal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ; glm::detail::compute_vec4_equal<int,0,-1,32,0>::call

; 946  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z ENDP	; glm::operator==<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z
_TEXT	SEGMENT
v1$ = 48
v2$ = 56
??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z PROC	; glm::operator!=<int,0>, COMDAT

; 950  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 951  : 		return detail::compute_vec4_nequal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);

	mov	rdx, QWORD PTR v2$[rsp]
	mov	rcx, QWORD PTR v1$[rsp]
	call	?call@?$compute_vec4_nequal@H$0A@$0?0$0CA@$0A@@detail@glm@@SA_NAEBU?$tvec4@H$0A@@3@0@Z ; glm::detail::compute_vec4_nequal<int,0,-1,32,0>::call

; 952  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z ENDP	; glm::operator!=<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z PROC			; glm::tvec4<int,0>::tvec4<int,0>, COMDAT

; 193  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z ENDP			; glm::tvec4<int,0>::tvec4<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ PROC		; glm::tvec4<int,0>::wzyx, COMDAT

; 77   : 				GLM_SWIZZLE_GEN_VEC_FROM_VEC4(T, P, tvec4, tvec2, tvec3, tvec4)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR this$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ ENDP		; glm::tvec4<int,0>::wzyx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_swizzle.cpp
_TEXT	SEGMENT
Error$ = 48
A$ = 72
B$ = 120
C$ = 168
tv78 = 196
tv85 = 200
?test_ivec4_swizzle@@YAHXZ PROC				; test_ivec4_swizzle

; 36   : {

$LN7:
	push	rdi
	sub	rsp, 208				; 000000d0H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 38   : 
; 39   : 	glm::ivec4 A(1, 2, 3, 4);

	mov	DWORD PTR [rsp+32], 4
	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tvec4@H$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<int,0>::tvec4<int,0>

; 40   : 	glm::ivec4 B = A.wzyx();

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<int,0>::wzyx

; 41   : 	glm::ivec4 C = B.wzyx();

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	?wzyx@?$tvec4@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec4<int,0>::wzyx

; 42   : 
; 43   : 	Error += A != B ? 0 : 1;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z ; glm::operator!=<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_ivec4
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN4@test_ivec4
$LN3@test_ivec4:
	mov	DWORD PTR tv78[rsp], 1
$LN4@test_ivec4:
	mov	eax, DWORD PTR tv78[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 44   : 	Error += A == C ? 0 : 1;

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8H$0A@@glm@@YA_NAEBU?$tvec4@H$0A@@0@0@Z ; glm::operator==<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_ivec4
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN6@test_ivec4
$LN5@test_ivec4:
	mov	DWORD PTR tv85[rsp], 1
$LN6@test_ivec4:
	mov	eax, DWORD PTR tv85[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 45   : 
; 46   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 47   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ivec4_swizzle@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test_ivec4_swizzle@@YAHXZ ENDP				; test_ivec4_swizzle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z PROC	; glm::operator==<int,0>, COMDAT

; 1001 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1002 : 		return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1003 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z ENDP	; glm::operator==<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z
_TEXT	SEGMENT
tv73 = 0
v1$ = 32
v2$ = 40
??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z PROC	; glm::operator!=<int,0>, COMDAT

; 1007 : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 1008 : 		return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv73[rsp], 1
$LN4@operator:
	movzx	eax, BYTE PTR tv73[rsp]

; 1009 : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z ENDP	; glm::operator!=<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z PROC			; glm::tvec3<int,0>::tvec3<int,0>, COMDAT

; 70   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z ENDP			; glm::tvec3<int,0>::tvec3<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ PROC		; glm::tvec3<int,0>::zyx, COMDAT

; 74   : 				GLM_SWIZZLE_GEN_VEC_FROM_VEC3(T, P, tvec3, tvec2, tvec3, tvec4)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ ENDP		; glm::tvec3<int,0>::zyx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_swizzle.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 104
C$ = 152
tv77 = 180
tv84 = 184
?test_ivec3_swizzle@@YAHXZ PROC				; test_ivec3_swizzle

; 22   : {

$LN7:
	push	rdi
	sub	rsp, 192				; 000000c0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 24   : 
; 25   : 	glm::ivec3 A(1, 2, 3);

	mov	r9d, 3
	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tvec3@H$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<int,0>::tvec3<int,0>

; 26   : 	glm::ivec3 B = A.zyx();

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec3<int,0>::zyx

; 27   : 	glm::ivec3 C = B.zyx();

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	?zyx@?$tvec3@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec3<int,0>::zyx

; 28   : 
; 29   : 	Error += A != B ? 0 : 1;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z ; glm::operator!=<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_ivec3
	mov	DWORD PTR tv77[rsp], 0
	jmp	SHORT $LN4@test_ivec3
$LN3@test_ivec3:
	mov	DWORD PTR tv77[rsp], 1
$LN4@test_ivec3:
	mov	eax, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 30   : 	Error += A == C ? 0 : 1;

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8H$0A@@glm@@YA_NAEBU?$tvec3@H$0A@@0@0@Z ; glm::operator==<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_ivec3
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN6@test_ivec3
$LN5@test_ivec3:
	mov	DWORD PTR tv84[rsp], 1
$LN6@test_ivec3:
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 31   : 
; 32   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 33   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ivec3_swizzle@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 192				; 000000c0H
	pop	rdi
	ret	0
?test_ivec3_swizzle@@YAHXZ ENDP				; test_ivec3_swizzle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z PROC	; glm::operator==<int,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z ENDP	; glm::operator==<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z PROC	; glm::operator!=<int,0>, COMDAT

; 879  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 880  : 		return (v1.x != v2.x) || (v1.y != v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 1
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 881  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z ENDP	; glm::operator!=<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@H$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z PROC			; glm::tvec2<int,0>::tvec2<int,0>, COMDAT

; 57   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s1$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rsp]
	mov	ecx, DWORD PTR s2$[rsp]
	mov	DWORD PTR [rax+4], ecx

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@H$0A@@glm@@QEAA@HH@Z ENDP			; glm::tvec2<int,0>::tvec2<int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ PROC		; glm::tvec2<int,0>::yx, COMDAT

; 74   : 				GLM_SWIZZLE_GEN_VEC_FROM_VEC2(T, P, tvec2, tvec2, tvec3, tvec4)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR this$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR this$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ ENDP		; glm::tvec2<int,0>::yx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_swizzle.cpp
_TEXT	SEGMENT
Error$ = 32
A$ = 56
B$ = 88
C$ = 120
tv76 = 132
tv83 = 136
?test_ivec2_swizzle@@YAHXZ PROC				; test_ivec2_swizzle

; 8    : {

$LN7:
	push	rdi
	sub	rsp, 144				; 00000090H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9    : 	int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 10   : 
; 11   : 	glm::ivec2 A(1, 2);

	mov	r8d, 2
	mov	edx, 1
	lea	rcx, QWORD PTR A$[rsp]
	call	??0?$tvec2@H$0A@@glm@@QEAA@HH@Z		; glm::tvec2<int,0>::tvec2<int,0>

; 12   : 	glm::ivec2 B = A.yx();

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec2<int,0>::yx

; 13   : 	glm::ivec2 C = B.yx();

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR B$[rsp]
	call	?yx@?$tvec2@H$0A@@glm@@QEBA?AU12@XZ	; glm::tvec2<int,0>::yx

; 14   : 
; 15   : 	Error += A != B ? 0 : 1;

	lea	rdx, QWORD PTR B$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?9H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z ; glm::operator!=<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test_ivec2
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@test_ivec2
$LN3@test_ivec2:
	mov	DWORD PTR tv76[rsp], 1
$LN4@test_ivec2:
	mov	eax, DWORD PTR tv76[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 16   : 	Error += A == C ? 0 : 1;

	lea	rdx, QWORD PTR C$[rsp]
	lea	rcx, QWORD PTR A$[rsp]
	call	??$?8H$0A@@glm@@YA_NAEBU?$tvec2@H$0A@@0@0@Z ; glm::operator==<int,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test_ivec2
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@test_ivec2
$LN5@test_ivec2:
	mov	DWORD PTR tv83[rsp], 1
$LN6@test_ivec2:
	mov	eax, DWORD PTR tv83[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 17   : 
; 18   : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 19   : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test_ivec2_swizzle@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?test_ivec2_swizzle@@YAHXZ ENDP				; test_ivec2_swizzle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ PROC		; glm::tvec4<float,0>::wzyx, COMDAT

; 77   : 				GLM_SWIZZLE_GEN_VEC_FROM_VEC4(T, P, tvec4, tvec2, tvec3, tvec4)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?wzyx@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ ENDP		; glm::tvec4<float,0>::wzyx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.hpp
;	COMDAT ?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ PROC		; glm::tvec4<float,0>::xyzw, COMDAT

; 77   : 				GLM_SWIZZLE_GEN_VEC_FROM_VEC4(T, P, tvec4, tvec2, tvec3, tvec4)

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm3, DWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?xyzw@?$tvec4@M$0A@@glm@@QEBA?AU12@XZ ENDP		; glm::tvec4<float,0>::xyzw
_TEXT	ENDS
END
