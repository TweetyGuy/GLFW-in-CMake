; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?epsilon@?$numeric_limits@M@std@@SAMXZ		; std::numeric_limits<float>::epsilon
PUBLIC	??$abs@M@glm@@YAMM@Z				; glm::abs<float>
PUBLIC	?length@?$tvec2@M$0A@@glm@@SAHXZ		; glm::tvec2<float,0>::length
PUBLIC	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec2<float,0>::operator[]
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@M@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z			; glm::tvec2<float,0>::tvec2<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@M@Z			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z		; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	?test@length@@YAHXZ				; length::test
PUBLIC	??0?$tvec1@M$0A@@glm@@QEAA@M@Z			; glm::tvec1<float,0>::tvec1<float,0>
PUBLIC	??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z ; glm::length<float,0,glm::tvec1>
PUBLIC	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z		; glm::tvec2<float,0>::tvec2<float,0><int,int>
PUBLIC	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
PUBLIC	?length@?$tvec3@M$0A@@glm@@SAHXZ		; glm::tvec3<float,0>::length
PUBLIC	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z		; glm::tvec3<float,0>::operator[]
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@M@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
PUBLIC	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
PUBLIC	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
PUBLIC	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>
PUBLIC	?test@distance@@YAHXZ				; distance::test
PUBLIC	??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec1>
PUBLIC	??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec2>
PUBLIC	??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec3>
PUBLIC	??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec4>
PUBLIC	?test@dot@@YAHXZ				; dot::test
PUBLIC	??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec1>
PUBLIC	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
PUBLIC	?test@cross@@YAHXZ				; cross::test
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
PUBLIC	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
PUBLIC	?length@?$tvec3@_N$0A@@glm@@SAHXZ		; glm::tvec3<bool,0>::length
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec3<bool,0>::operator[]
PUBLIC	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec3<bool,0>::tvec3<bool,0>
PUBLIC	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
PUBLIC	?test@normalize@@YAHXZ				; normalize::test
PUBLIC	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>
PUBLIC	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
PUBLIC	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
PUBLIC	?test@faceforward@@YAHXZ			; faceforward::test
PUBLIC	??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ; glm::faceforward<float,0,glm::tvec3>
PUBLIC	?test@reflect@@YAHXZ				; reflect::test
PUBLIC	??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::reflect<float,0,glm::tvec2>
PUBLIC	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z		; glm::tvec2<float,0>::tvec2<float,0><double,double>
PUBLIC	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z	; glm::operator==<float,0>
PUBLIC	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z			; glm::tvec2<double,0>::tvec2<double,0>
PUBLIC	??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z		; glm::tvec2<double,0>::tvec2<double,0><float,float>
PUBLIC	??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::reflect<double,0,glm::tvec2>
PUBLIC	??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z	; glm::operator==<double,0>
PUBLIC	?test@refract@@YAHXZ				; refract::test
PUBLIC	??$refract@M@glm@@YAMAEBM0M@Z			; glm::refract<float>
PUBLIC	??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::refract<float,0,glm::tvec2>
PUBLIC	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
PUBLIC	?length@?$tvec2@_N$0A@@glm@@SAHXZ		; glm::tvec2<bool,0>::length
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z		; glm::tvec2<bool,0>::operator[]
PUBLIC	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z		; glm::tvec2<bool,0>::tvec2<bool,0>
PUBLIC	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
PUBLIC	??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z ; glm::refract<double,0,glm::tvec2>
PUBLIC	main
PUBLIC	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z	; glm::detail::compute_abs<float,1>::call
PUBLIC	?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec1,float,0,0>::call
PUBLIC	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec1,float,0,0>::call
PUBLIC	?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec1,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
PUBLIC	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
PUBLIC	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_faceforward<float,0,glm::tvec3,0>::call
PUBLIC	?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_reflect<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_reflect<double,0,glm::tvec2,0>::call
PUBLIC	??$dot@M@glm@@YAMMM@Z				; glm::dot<float>
PUBLIC	?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z ; glm::detail::compute_refract<float,0,glm::tvec2,0>::call
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
PUBLIC	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
PUBLIC	?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z ; glm::detail::compute_refract<double,0,glm::tvec2,0>::call
PUBLIC	??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec2>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z	; glm::operator*<double,0>
PUBLIC	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator-<double,0>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z	; glm::operator*<double,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z	; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z	; glm::operator*<float,0>
PUBLIC	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z	; glm::operator-<float,0>
PUBLIC	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
PUBLIC	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
PUBLIC	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
PUBLIC	?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
PUBLIC	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator*=<float>
PUBLIC	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z	; glm::tvec4<float,0>::operator-=<float>
PUBLIC	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z	; glm::operator*<double,0>
PUBLIC	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
PUBLIC	??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ ; `string'
PUBLIC	??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@34000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@be4ccccd
PUBLIC	__real@bf800000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@bfe3333333333333
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	sqrt:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?cos@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?cos@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sin@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sin@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?epsilon@?$numeric_limits@M@std@@SAMXZ DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??$abs@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@length@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+496
	DD	imagerel $unwind$?test@length@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@M$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@distance@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+665
	DD	imagerel $unwind$?test@distance@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@dot@@YAHXZ DD imagerel $LN11
	DD	imagerel $LN11+666
	DD	imagerel $unwind$?test@dot@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@cross@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+573
	DD	imagerel $unwind$?test@cross@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+280
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@normalize@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+807
	DD	imagerel $unwind$?test@normalize@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@faceforward@@YAHXZ DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$?test@faceforward@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@reflect@@YAHXZ DD imagerel $LN7
	DD	imagerel $LN7+402
	DD	imagerel $unwind$?test@reflect@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?test@refract@@YAHXZ DD imagerel $LN9
	DD	imagerel $LN9+568
	DD	imagerel $unwind$?test@refract@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$refract@M@glm@@YAMAEBM0M@Z DD imagerel $LN5
	DD	imagerel $LN5+248
	DD	imagerel $unwind$??$refract@M@glm@@YAMAEBM0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+9
	DD	imagerel $unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+17
	DD	imagerel $unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+116
	DD	imagerel $unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+118
	DD	imagerel $unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD imagerel $LN5
	DD	imagerel $LN5+146
	DD	imagerel $unwind$?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@M@glm@@YAMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$??$dot@M@glm@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z DD imagerel $LN5
	DD	imagerel $LN5+314
	DD	imagerel $unwind$?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD imagerel $LN9
	DD	imagerel $LN9+268
	DD	imagerel $unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z DD imagerel $LN5
	DD	imagerel $LN5+333
	DD	imagerel $unwind$?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$inversesqrt@M@glm@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$??$inversesqrt@M@glm@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD imagerel $LN3
	DD	imagerel $LN3+143
	DD	imagerel $unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@bfe3333333333333
CONST	SEGMENT
__real@bfe3333333333333 DQ 0bfe3333333333333r	; -0.6
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be4ccccd
CONST	SEGMENT
__real@be4ccccd DD 0be4ccccdr			; -0.2
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'3', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
CONST	SEGMENT
??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@ DB 'x'
	DB	00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'y', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H
	DB	't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, '('
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
CONST	SEGMENT
??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 'k', 00H, 's', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, '\', 00H, 'O', 00H, 'n', 00H, 'e', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, '\', 00H, 'D', 00H, 'e', 00H, 's'
	DB	00H, 'k', 00H, 't', 00H, 'o', 00H, 'p', 00H, '\', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'p', 00H, 'p', 00H, 'y', 00H, 'B', 00H, 'i'
	DB	00H, 'r', 00H, 'd', 00H, '\', 00H, 'l', 00H, 'i', 00H, 'b', 00H
	DB	'r', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm', 00H, '\'
	DB	00H, 'g', 00H, 'l', 00H, 'm', 00H, '\', 00H, 'd', 00H, 'e', 00H
	DB	't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, '\', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	'2', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$inversesqrt@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z DD 021d01H
	DD	07016f21dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z DD 022a01H
	DD	070109214H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec2>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec2>
	DD	02H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec2>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z DD 021a01H
	DD	07016b21aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M@glm@@YAMMM@Z DD 021101H
	DD	0700d1211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z DD 021401H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z DD 031a01H
	DD	07016a21aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	010H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 022501H
	DD	0700bb20fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 022501H
	DD	0700b920fH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	08H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z DD 020f01H
	DD	0700b720fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_abs@M$00@detail@glm@@SAMM@Z DD 020b01H
	DD	07007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z DD 021a01H
	DD	07016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z DD 021901H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z DD 021a01H
	DD	07016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$refract@M@glm@@YAMAEBM0M@Z DD 021501H
	DD	070119215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@N$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z DD 021901H
	DD	070153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z DD 011501H
	DD	07015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z DD 010a01H
	DD	0700aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@_N$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z DD 032b01H
	DD	07011a215H
	DD	06010H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0 DB 052H ; glm::lessThan<float,0,glm::tvec3>
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+9
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc DD 024H ; glm::lessThan<float,0,glm::tvec3>
	DD	03H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcName$0
	ORG $+48
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData DD 01H ; glm::lessThan<float,0,glm::tvec3>
	DD	00H
	DQ	FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z DD 021401H
	DD	070103214H
xdata	ENDS
CONST	SEGMENT
?test@cross@@YAHXZ$rtcName$0 DB 043H			; cross::test
	DB	072H
	DB	06fH
	DB	073H
	DB	073H
	DB	031H
	DB	00H
	ORG $+1
?test@cross@@YAHXZ$rtcName$1 DB 043H			; cross::test
	DB	072H
	DB	06fH
	DB	073H
	DB	073H
	DB	032H
	DB	00H
	ORG $+1
?test@cross@@YAHXZ$rtcVarDesc DD 058H			; cross::test
	DD	0cH
	DQ	FLAT:?test@cross@@YAHXZ$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?test@cross@@YAHXZ$rtcName$0
	ORG $+96
?test@cross@@YAHXZ$rtcFrameData DD 02H			; cross::test
	DD	00H
	DQ	FLAT:?test@cross@@YAHXZ$rtcVarDesc
?test@normalize@@YAHXZ$rtcName$0 DB 04eH		; normalize::test
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	069H
	DB	07aH
	DB	065H
	DB	031H
	DB	00H
	ORG $+1
?test@normalize@@YAHXZ$rtcName$3 DB 072H		; normalize::test
	DB	06fH
	DB	00H
	ORG $+1
?test@normalize@@YAHXZ$rtcName$1 DB 04eH		; normalize::test
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	069H
	DB	07aH
	DB	065H
	DB	032H
	DB	00H
	ORG $+1
?test@normalize@@YAHXZ$rtcName$4 DB 077H		; normalize::test
	DB	00H
	ORG $+2
?test@normalize@@YAHXZ$rtcName$2 DB 04eH		; normalize::test
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	069H
	DB	07aH
	DB	065H
	DB	033H
	DB	00H
	ORG $+1
?test@normalize@@YAHXZ$rtcName$5 DB 075H		; normalize::test
	DB	00H
	ORG $+2
?test@normalize@@YAHXZ$rtcName$6 DB 076H		; normalize::test
	DB	00H
	ORG $+6
?test@normalize@@YAHXZ$rtcFrameData DD 07H		; normalize::test
	DD	00H
	DQ	FLAT:?test@normalize@@YAHXZ$rtcVarDesc
?test@faceforward@@YAHXZ$rtcName$0 DB 04eH		; faceforward::test
	DB	00H
	ORG $+6
?test@normalize@@YAHXZ$rtcVarDesc DD 0148H		; normalize::test
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$6
	DD	0118H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$5
	DD	0e8H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$4
	DD	0b8H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$3
	DD	088H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$2
	DD	058H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?test@normalize@@YAHXZ$rtcName$0
	ORG $+336
?test@faceforward@@YAHXZ$rtcName$1 DB 049H		; faceforward::test
	DB	00H
	ORG $+2
?test@faceforward@@YAHXZ$rtcName$2 DB 04eH		; faceforward::test
	DB	072H
	DB	065H
	DB	066H
	DB	00H
	ORG $+3
?test@faceforward@@YAHXZ$rtcName$3 DB 046H		; faceforward::test
	DB	00H
	ORG $+2
?test@faceforward@@YAHXZ$rtcVarDesc DD 0c8H		; faceforward::test
	DD	0cH
	DQ	FLAT:?test@faceforward@@YAHXZ$rtcName$3
	DD	098H
	DD	0cH
	DQ	FLAT:?test@faceforward@@YAHXZ$rtcName$2
	DD	068H
	DD	0cH
	DQ	FLAT:?test@faceforward@@YAHXZ$rtcName$1
	DD	038H
	DD	0cH
	DQ	FLAT:?test@faceforward@@YAHXZ$rtcName$0
	ORG $+192
?test@faceforward@@YAHXZ$rtcFrameData DD 04H		; faceforward::test
	DD	00H
	DQ	FLAT:?test@faceforward@@YAHXZ$rtcVarDesc
?test@reflect@@YAHXZ$rtcName$0 DB 041H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcName$1 DB 042H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcName$2 DB 043H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcName$3 DB 041H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcName$4 DB 042H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcName$5 DB 043H			; reflect::test
	DB	00H
	ORG $+2
?test@reflect@@YAHXZ$rtcFrameData DD 06H		; reflect::test
	DD	00H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcVarDesc
?test@refract@@YAHXZ$rtcName$0 DB 041H			; refract::test
	DB	00H
	ORG $+6
?test@reflect@@YAHXZ$rtcVarDesc DD 0f8H			; reflect::test
	DD	010H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$5
	DD	0c8H
	DD	010H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$4
	DD	098H
	DD	010H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$2
	DD	058H
	DD	08H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?test@reflect@@YAHXZ$rtcName$0
	ORG $+288
?test@refract@@YAHXZ$rtcName$1 DB 042H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$2 DB 041H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$3 DB 042H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$4 DB 043H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$5 DB 041H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$6 DB 042H			; refract::test
	DB	00H
	ORG $+2
?test@refract@@YAHXZ$rtcName$7 DB 043H			; refract::test
	DB	00H
	ORG $+6
?test@refract@@YAHXZ$rtcVarDesc DD 0138H		; refract::test
	DD	010H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$7
	DD	0108H
	DD	010H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$6
	DD	0d8H
	DD	010H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$5
	DD	0b8H
	DD	08H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$4
	DD	098H
	DD	08H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$3
	DD	078H
	DD	08H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:?test@refract@@YAHXZ$rtcName$0
	ORG $+384
?test@refract@@YAHXZ$rtcFrameData DD 08H		; refract::test
	DD	00H
	DQ	FLAT:?test@refract@@YAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z DD 011401H
	DD	07014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec3@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec3@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z DD 010f01H
	DD	0700fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z DD 020a01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec1@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
xdata	SEGMENT
$unwind$?test@length@@YAHXZ DD 030901H
	DD	0120109H
	DD	07002H
$unwind$?test@distance@@YAHXZ DD 030901H
	DD	01c0109H
	DD	07002H
$unwind$?test@dot@@YAHXZ DD 030901H
	DD	01a0109H
	DD	07002H
$unwind$?test@cross@@YAHXZ DD 031a01H
	DD	0280109H
	DD	07002H
$unwind$?test@normalize@@YAHXZ DD 031a01H
	DD	04a0109H
	DD	07002H
$unwind$?test@faceforward@@YAHXZ DD 031a01H
	DD	01e0109H
	DD	07002H
$unwind$?test@reflect@@YAHXZ DD 031a01H
	DD	0280109H
	DD	07002H
$unwind$?test@refract@@YAHXZ DD 031a01H
	DD	0320109H
	DD	07002H
$unwind$main DD	020601H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z DD 011801H
	DD	07018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec4@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z DD 021501H
	DD	070113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@MM@Z DD 011201H
	DD	07012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$tvec2@M$0A@@glm@@QEAA@M@Z DD 010c01H
	DD	0700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z DD 020e01H
	DD	0700a320eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$tvec2@M$0A@@glm@@SAHXZ DD 010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$abs@M@glm@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?epsilon@?$numeric_limits@M@std@@SAMXZ DD 020601H
	DD	070021206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sin@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?cos@@YAMM@Z DD 020b01H
	DD	07007520bH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_sub<float,0,0>::call, COMDAT

; 50   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 51   : 			return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 52   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_sub<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator*<double,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	mulsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator-=<float>, COMDAT

; 404  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 405  : 		return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_sub@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_sub<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 406  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
this$ = 96
v$ = 104
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z PROC	; glm::tvec4<float,0>::operator*=<float>, COMDAT

; 425  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H

; 426  : 		return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	mov	rdx, QWORD PTR this$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_vec4_mul<float,0,0>::call
	mov	rdi, QWORD PTR this$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rsp]

; 427  : 	}

	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ENDP	; glm::tvec4<float,0>::operator*=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator*<double,0>

; 49   : 			return tmp.x + tmp.y;

	movsd	xmm0, QWORD PTR tmp$[rsp]
	addsd	xmm0, QWORD PTR tmp$[rsp+8]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec2>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv80 = 48
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_vec4_mul<float,0,0>::call, COMDAT

; 59   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 60   : 			return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv80[rsp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv80[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z	; glm::tvec4<float,0>::tvec4<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 61   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_vec4_mul@M$0A@$0A@@detail@glm@@SA?AU?$tvec4@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_vec4_mul<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec2>::call, COMDAT

; 30   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 31   : 			return tvec2<R, P>(Func(v.x), Func(v.y));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 32   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec2@glm@@@detail@glm@@SA?AU?$tvec2@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec2>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 351  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 352  : 		return tvec1<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 353  : 			v1.x - v2.x);
; 354  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 688  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 689  : 		return tvec4<T, P>(v1) -= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?ZM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator-=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 690  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 573  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 574  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 575  : 			v1.x * v2.x,
; 576  : 			v1.y * v2.y);
; 577  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 665  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 666  : 			v1.x * v2.x,
; 667  : 			v1.y * v2.y,
; 668  : 			v1.z * v2.z);
; 669  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 80
v1$ = 88
v2$ = 96
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 718  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H

; 719  : 		return tvec4<T, P>(v1) *= v2;

	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR v1$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rdx, QWORD PTR v2$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?XM@?$tvec4@M$0A@@glm@@QEAAAEAU01@AEBU01@@Z ; glm::tvec4<float,0>::operator*=<float>
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 720  : 	}

	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\_vectorize.hpp
;	COMDAT ?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z
_TEXT	SEGMENT
tv66 = 32
tv70 = 36
__$ReturnUdt$ = 64
Func$ = 72
v$ = 80
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z PROC ; glm::detail::functor1<float,float,0,glm::tvec3>::call, COMDAT

; 39   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 40   : 			return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	call	QWORD PTR Func$[rsp]
	movss	DWORD PTR tv70[rsp], xmm0
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	QWORD PTR Func$[rsp]
	movss	xmm1, DWORD PTR tv66[rsp]
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR tv70[rsp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 41   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ENDP ; glm::detail::functor1<float,float,0,glm::tvec3>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
scalar$ = 80
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 628  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 629  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR scalar$[rsp]
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 630  : 			v.x * scalar,
; 631  : 			v.y * scalar,
; 632  : 			v.z * scalar);
; 633  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 131  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 132  : 		return static_cast<genType>(1) / sqrt(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1

; 133  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
tv73 = 32
__$ReturnUdt$ = 64
v$ = 72
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 527  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 528  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm2, DWORD PTR [rax]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv73[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 529  : 			-v.x, 
; 530  : 			-v.y, 
; 531  : 			-v.z);
; 532  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 557  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 558  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	mulss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR scalar$[rsp]
	mulss	xmm1, DWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 559  : 			scalar * v.x,
; 560  : 			scalar * v.y);
; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z PROC	; glm::operator*<double,0>, COMDAT

; 541  : 	{

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	mulsd	xmm0, QWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	mulsd	xmm1, QWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC	; glm::operator-<double,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	subsd	xmm0, QWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm1, QWORD PTR [rax]
	subsd	xmm1, QWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
scalar$ = 56
v$ = 64
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z PROC	; glm::operator*<double,0>, COMDAT

; 557  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 558  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm0, QWORD PTR scalar$[rsp]
	mulsd	xmm0, QWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rsp]
	movsd	xmm1, QWORD PTR scalar$[rsp]
	mulsd	xmm1, QWORD PTR [rax]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 559  : 			scalar * v.x,
; 560  : 			scalar * v.y);
; 561  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z ENDP	; glm::operator*<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z PROC ; glm::dot<double,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@N$0A@$0A@@detail@glm@@SANAEBU?$tvec2@N$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,double,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ENDP ; glm::dot<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z
_TEXT	SEGMENT
dotValue$ = 32
k$ = 40
$T1 = 48
$T2 = 64
$T3 = 80
tv74 = 96
tv75 = 104
tv80 = 112
tv78 = 120
__$ReturnUdt$ = 144
I$ = 152
N$ = 160
eta$ = 168
?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z PROC ; glm::detail::compute_refract<double,0,glm::tvec2,0>::call, COMDAT

; 122  : 		{

$LN5:
	movsd	QWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H

; 123  : 			T const dotValue(dot(N, I));

	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR N$[rsp]
	call	??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec2>
	movsd	QWORD PTR dotValue$[rsp], xmm0

; 124  : 			T const k(static_cast<T>(1) - eta * eta * (static_cast<T>(1) - dotValue * dotValue));

	movsd	xmm0, QWORD PTR eta$[rsp]
	mulsd	xmm0, QWORD PTR eta$[rsp]
	movsd	xmm1, QWORD PTR dotValue$[rsp]
	mulsd	xmm1, QWORD PTR dotValue$[rsp]
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	subsd	xmm2, xmm1
	movaps	xmm1, xmm2
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR k$[rsp], xmm0

; 125  : 			return (eta * I - (eta * dotValue + std::sqrt(k)) * N) * static_cast<T>(k >= static_cast<T>(0));

	movsd	xmm0, QWORD PTR k$[rsp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN3@call
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv74[rsp], 0
$LN4@call:
	cvtsi2sd xmm0, DWORD PTR tv74[rsp]
	movsd	QWORD PTR tv75[rsp], xmm0
	movsd	xmm1, QWORD PTR eta$[rsp]
	mulsd	xmm1, QWORD PTR dotValue$[rsp]
	movsd	QWORD PTR tv80[rsp], xmm1
	movsd	xmm0, QWORD PTR k$[rsp]
	call	sqrt
	movsd	xmm1, QWORD PTR tv80[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	r8, QWORD PTR N$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z ; glm::operator*<double,0>
	mov	QWORD PTR tv78[rsp], rax
	mov	r8, QWORD PTR I$[rsp]
	movsd	xmm1, QWORD PTR eta$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@NAEBU10@@Z ; glm::operator*<double,0>
	mov	rcx, QWORD PTR tv78[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	movsd	xmm0, QWORD PTR tv75[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 		}

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z ENDP ; glm::detail::compute_refract<double,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 96
x$ = 104
y$ = 112
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec2>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec2<bool,0>::tvec2<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec2<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	mov	rax, QWORD PTR __$ReturnUdt$[rsp]
	movzx	ecx, WORD PTR Result$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec2>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v1$ = 56
v2$ = 64
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 533  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 534  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 535  : 			v1.x - v2.x,
; 536  : 			v1.y - v2.y);
; 537  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z
_TEXT	SEGMENT
dotValue$ = 32
k$ = 36
$T1 = 40
$T2 = 48
$T3 = 56
tv74 = 64
tv75 = 68
tv80 = 72
tv78 = 80
__$ReturnUdt$ = 112
I$ = 120
N$ = 128
eta$ = 136
?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z PROC ; glm::detail::compute_refract<float,0,glm::tvec2,0>::call, COMDAT

; 122  : 		{

$LN5:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H

; 123  : 			T const dotValue(dot(N, I));

	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR N$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR dotValue$[rsp], xmm0

; 124  : 			T const k(static_cast<T>(1) - eta * eta * (static_cast<T>(1) - dotValue * dotValue));

	movss	xmm0, DWORD PTR eta$[rsp]
	mulss	xmm0, DWORD PTR eta$[rsp]
	movss	xmm1, DWORD PTR dotValue$[rsp]
	mulss	xmm1, DWORD PTR dotValue$[rsp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR k$[rsp], xmm0

; 125  : 			return (eta * I - (eta * dotValue + std::sqrt(k)) * N) * static_cast<T>(k >= static_cast<T>(0));

	movss	xmm0, DWORD PTR k$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@call
$LN3@call:
	mov	DWORD PTR tv74[rsp], 0
$LN4@call:
	cvtsi2ss xmm0, DWORD PTR tv74[rsp]
	movss	DWORD PTR tv75[rsp], xmm0
	movss	xmm1, DWORD PTR eta$[rsp]
	mulss	xmm1, DWORD PTR dotValue$[rsp]
	movss	DWORD PTR tv80[rsp], xmm1
	movss	xmm0, DWORD PTR k$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR tv80[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	r8, QWORD PTR N$[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	QWORD PTR tv78[rsp], rax
	mov	r8, QWORD PTR I$[rsp]
	movss	xmm1, DWORD PTR eta$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR tv78[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	movss	xmm0, DWORD PTR tv75[rsp]
	movaps	xmm2, xmm0
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 126  : 		}

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z ENDP ; glm::detail::compute_refract<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M@glm@@YAMMM@Z
_TEXT	SEGMENT
x$ = 32
y$ = 40
??$dot@M@glm@@YAMMM@Z PROC				; glm::dot<float>, COMDAT

; 165  : 	{

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 16

; 166  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 167  : 		return x * y;

	movss	xmm0, DWORD PTR x$[rsp]
	mulss	xmm0, DWORD PTR y$[rsp]

; 168  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$dot@M@glm@@YAMMM@Z ENDP				; glm::dot<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
__$ReturnUdt$ = 80
I$ = 88
N$ = 96
?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_reflect<double,0,glm::tvec2,0>::call, COMDAT

; 113  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 114  : 			return I - N * dot(N, I) * static_cast<T>(2);

	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR N$[rsp]
	call	??$dot@N$0A@Utvec2@glm@@@glm@@YANAEBU?$tvec2@N$0A@@0@0@Z ; glm::dot<double,0,glm::tvec2>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	movsd	xmm2, QWORD PTR __real@4000000000000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@N@Z ; glm::operator*<double,0>
	mov	r8, rax
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GN$0A@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::operator-<double,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 115  : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_reflect<double,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
__$ReturnUdt$ = 64
I$ = 72
N$ = 80
?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_reflect<float,0,glm::tvec2,0>::call, COMDAT

; 113  : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 114  : 			return I - N * dot(N, I) * static_cast<T>(2);

	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR N$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	r8, rax
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 115  : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_reflect<float,0,glm::tvec2,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 52
tv72 = 64
__$ReturnUdt$ = 112
N$ = 120
I$ = 128
Nref$ = 136
?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z PROC ; glm::detail::compute_faceforward<float,0,glm::tvec3,0>::call, COMDAT

; 102  : 		{

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H

; 103  : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 104  : 
; 105  : 			return dot(Nref, I) < static_cast<T>(0) ? N : -N;

	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR Nref$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@call
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR N$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv72[rsp], rax
	jmp	SHORT $LN4@call
$LN3@call:
	mov	rdx, QWORD PTR N$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv72[rsp], rax
$LN4@call:
	mov	rax, QWORD PTR tv72[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 106  : 		}

	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ENDP ; glm::detail::compute_faceforward<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call, COMDAT

; 91   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 92   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 93   : 
; 94   : 			return v * inversesqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@M@Z ; glm::operator*<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 95   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z PROC ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call, COMDAT

; 114  : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 115  : 			return detail::functor1<T, T, P, vecType>::call(abs, x);

	mov	r8, QWORD PTR x$[rsp]
	lea	rdx, OFFSET FLAT:??$abs@M@glm@@YAMM@Z	; glm::abs<float>
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$functor1@MM$0A@Utvec3@glm@@@detail@glm@@SA?AU?$tvec3@M$0A@@3@P6AMM@ZAEBU43@@Z ; glm::detail::functor1<float,float,0,glm::tvec3>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 116  : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ENDP ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z
_TEXT	SEGMENT
tv88 = 32
__$ReturnUdt$ = 64
x$ = 72
y$ = 80
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z PROC ; glm::detail::compute_cross<float,0,0>::call, COMDAT

; 77   : 		{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 78   : 			GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");
; 79   : 
; 80   : 			return tvec3<T, P>(

	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx+4]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm2, DWORD PTR [rax+8]
	mulss	xmm2, DWORD PTR [rcx]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	movss	xmm3, DWORD PTR [rax+4]
	mulss	xmm3, DWORD PTR [rcx+8]
	subss	xmm2, xmm3
	movss	DWORD PTR tv88[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv88[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 81   : 				x.y * y.z - y.y * x.z,
; 82   : 				x.z * y.x - y.z * x.x,
; 83   : 				x.x * y.y - y.x * x.y);
; 84   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ENDP ; glm::detail::compute_cross<float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call, COMDAT

; 67   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 68   : 			tvec4<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 69   : 			return (tmp.x + tmp.y) + (tmp.z + tmp.w);

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	movss	xmm1, DWORD PTR tmp$[rsp+8]
	addss	xmm1, DWORD PTR tmp$[rsp+12]
	addss	xmm0, xmm1

; 70   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 112
y$ = 120
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call, COMDAT

; 57   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 58   : 			tvec3<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 59   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]
	addss	xmm0, DWORD PTR tmp$[rsp+8]

; 60   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 56
x$ = 96
y$ = 104
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call, COMDAT

; 47   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 48   : 			tvec2<T, P> tmp(x * y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR tmp$[rsp]
	call	??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 49   : 			return tmp.x + tmp.y;

	movss	xmm0, DWORD PTR tmp$[rsp]
	addss	xmm0, DWORD PTR tmp$[rsp+4]

; 50   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z
_TEXT	SEGMENT
a$ = 32
b$ = 40
?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec1,float,0,0>::call, COMDAT

; 38   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 39   : 			return a.x * b.x;

	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]

; 40   : 		}

	add	rsp, 16
	pop	rdi
	ret	0
?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec1,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z
_TEXT	SEGMENT
$T1 = 48
p0$ = 80
p1$ = 88
?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z PROC ; glm::detail::compute_distance<glm::tvec4,float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return length(p1 - p0);

	mov	r8, QWORD PTR p0$[rsp]
	mov	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec4@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ENDP ; glm::detail::compute_distance<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
$T1 = 48
p0$ = 80
p1$ = 88
?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_distance<glm::tvec3,float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return length(p1 - p0);

	mov	r8, QWORD PTR p0$[rsp]
	mov	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_distance<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z
_TEXT	SEGMENT
$T1 = 48
p0$ = 80
p1$ = 88
?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z PROC ; glm::detail::compute_distance<glm::tvec2,float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return length(p1 - p0);

	mov	r8, QWORD PTR p0$[rsp]
	mov	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ENDP ; glm::detail::compute_distance<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z
_TEXT	SEGMENT
$T1 = 48
p0$ = 80
p1$ = 88
?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z PROC ; glm::detail::compute_distance<glm::tvec1,float,0,0>::call, COMDAT

; 26   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 27   : 			return length(p1 - p0);

	mov	r8, QWORD PTR p0$[rsp]
	mov	rdx, QWORD PTR p1$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec1@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z ; glm::length<float,0,glm::tvec1>

; 28   : 		}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ENDP ; glm::detail::compute_distance<glm::tvec1,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec4,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec4,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec3,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec2,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec2,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 64
?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z PROC ; glm::detail::compute_length<glm::tvec1,float,0,0>::call, COMDAT

; 17   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 18   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec1>
	call	?sqrt@@YAMM@Z				; sqrt

; 19   : 		}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z ENDP ; glm::detail::compute_length<glm::tvec1,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ?call@?$compute_abs@M$00@detail@glm@@SAMM@Z
_TEXT	SEGMENT
tv66 = 16
x$ = 48
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z PROC	; glm::detail::compute_abs<float,1>::call, COMDAT

; 77   : 		{

$LN5:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 32					; 00000020H

; 78   : 			GLM_STATIC_ASSERT(
; 79   : 				std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || GLM_UNRESTRICTED_GENTYPE,
; 80   : 				"'abs' only accept floating-point and integer scalar or vector inputs");
; 81   : 
; 82   : 			return x >= genFIType(0) ? x : -x;

	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@call
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@call
$LN3@call:
	movss	xmm0, DWORD PTR x$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rsp], xmm0
$LN4@call:
	movss	xmm0, DWORD PTR tv66[rsp]

; 83   : 			// TODO, perf comp with: *(((int *) &x) + 1) &= 0x7fffffff;
; 84   : 		}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ENDP	; glm::detail::compute_abs<float,1>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Error$ = 32
main	PROC

; 179  : {

$LN3:
	push	rdi
	sub	rsp, 48					; 00000030H

; 180  : 	int Error(0);

	mov	DWORD PTR Error$[rsp], 0

; 181  : 
; 182  : 	Error += length::test();

	call	?test@length@@YAHXZ			; length::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 183  : 	Error += distance::test();

	call	?test@distance@@YAHXZ			; distance::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 184  : 	Error += dot::test();

	call	?test@dot@@YAHXZ			; dot::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 185  : 	Error += cross::test();

	call	?test@cross@@YAHXZ			; cross::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 186  : 	Error += normalize::test();

	call	?test@normalize@@YAHXZ			; normalize::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 187  : 	Error += faceforward::test();

	call	?test@faceforward@@YAHXZ		; faceforward::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 188  : 	Error += reflect::test();

	call	?test@reflect@@YAHXZ			; reflect::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 189  : 	Error += refract::test();

	call	?test@refract@@YAHXZ			; refract::test
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 190  : 
; 191  : 	return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 192  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
I$ = 56
N$ = 64
eta$ = 72
??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z PROC ; glm::refract<double,0,glm::tvec2>, COMDAT

; 239  : 	{

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 240  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'refract' accepts only floating-point inputs");
; 241  : 		return detail::compute_refract<T, P, vecType, detail::is_aligned<P>::value>::call(I, N, eta);

	movsd	xmm3, QWORD PTR eta$[rsp]
	mov	r8, QWORD PTR N$[rsp]
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_refract@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0N@Z ; glm::detail::compute_refract<double,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 242  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z ENDP ; glm::refract<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec2>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec2<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec2<bool,0>::tvec2<bool,0>, COMDAT

; 47   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec2<bool,0>::tvec2<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec2<bool,0>::operator[], COMDAT

; 102  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 103  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@_N$0A@@glm@@SAHXZ	; glm::tvec2<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 103				; 00000067H
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 104  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 105  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec2<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@_N$0A@@glm@@SAHXZ PROC			; glm::tvec2<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec2<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\gtc\epsilon.inl
;	COMDAT ??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
$T3 = 48
tv66 = 56
__$ReturnUdt$ = 80
x$ = 88
y$ = 96
epsilon$ = 104
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z PROC ; glm::epsilonEqual<float,0,glm::tvec2>, COMDAT

; 65   : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H

; 66   : 		return lessThan(abs(x - y), vecType<T, P>(epsilon));

	mov	rax, QWORD PTR epsilon$[rsp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv66[rsp], rax
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$abs@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec2>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??$lessThan@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec2>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 67   : 	}

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ENDP ; glm::epsilonEqual<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
I$ = 56
N$ = 64
eta$ = 72
??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z PROC ; glm::refract<float,0,glm::tvec2>, COMDAT

; 239  : 	{

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 240  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'refract' accepts only floating-point inputs");
; 241  : 		return detail::compute_refract<T, P, vecType, detail::is_aligned<P>::value>::call(I, N, eta);

	movss	xmm3, DWORD PTR eta$[rsp]
	mov	r8, QWORD PTR N$[rsp]
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_refract@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0M@Z ; glm::detail::compute_refract<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 242  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ENDP ; glm::refract<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$refract@M@glm@@YAMAEBM0M@Z
_TEXT	SEGMENT
dotValue$ = 48
k$ = 52
tv80 = 56
tv72 = 60
tv73 = 64
I$ = 96
N$ = 104
eta$ = 112
??$refract@M@glm@@YAMAEBM0M@Z PROC			; glm::refract<float>, COMDAT

; 230  : 	{

$LN5:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H

; 231  : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'refract' accepts only floating-point inputs");
; 232  : 		genType const dotValue(dot(N, I));

	mov	rax, QWORD PTR I$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR N$[rsp]
	movss	xmm0, DWORD PTR [rax]
	call	??$dot@M@glm@@YAMMM@Z			; glm::dot<float>
	movss	DWORD PTR dotValue$[rsp], xmm0

; 233  : 		genType const k(static_cast<genType>(1) - eta * eta * (static_cast<genType>(1) - dotValue * dotValue));

	movss	xmm0, DWORD PTR eta$[rsp]
	mulss	xmm0, DWORD PTR eta$[rsp]
	movss	xmm1, DWORD PTR dotValue$[rsp]
	mulss	xmm1, DWORD PTR dotValue$[rsp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR k$[rsp], xmm0

; 234  : 		return (eta * I - (eta * dotValue + sqrt(k)) * N) * static_cast<genType>(k >= static_cast<genType>(0));

	movss	xmm0, DWORD PTR k$[rsp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN3@refract
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN4@refract
$LN3@refract:
	mov	DWORD PTR tv80[rsp], 0
$LN4@refract:
	mov	rax, QWORD PTR I$[rsp]
	movss	xmm0, DWORD PTR eta$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv72[rsp], xmm0
	movss	xmm1, DWORD PTR eta$[rsp]
	mulss	xmm1, DWORD PTR dotValue$[rsp]
	movss	DWORD PTR tv73[rsp], xmm1
	movss	xmm0, DWORD PTR k$[rsp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	xmm1, DWORD PTR tv73[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR N$[rsp]
	mulss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv72[rsp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR tv80[rsp]
	mulss	xmm0, xmm1

; 235  : 	}

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
??$refract@M@glm@@YAMAEBM0M@Z ENDP			; glm::refract<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Error$ = 32
A$11 = 52
B$12 = 84
C$13 = 100
A$14 = 120
B$15 = 152
C$16 = 184
A$17 = 216
B$18 = 264
C$19 = 312
$T20 = 340
$T21 = 344
$T22 = 352
$T23 = 360
tv69 = 376
tv94 = 380
tv147 = 384
?test@refract@@YAHXZ PROC				; refract::test

; 150  : 	{

$LN9:
	push	rdi
	sub	rsp, 400				; 00000190H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 151  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 152  : 
; 153  : 		{
; 154  : 			float A(-1.0f);

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR A$11[rsp], xmm0

; 155  : 			float B(1.0f);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR B$12[rsp], xmm0

; 156  : 			float C = glm::refract(A, B, 0.5f);

	movss	xmm2, DWORD PTR __real@3f000000
	lea	rdx, QWORD PTR B$12[rsp]
	lea	rcx, QWORD PTR A$11[rsp]
	call	??$refract@M@glm@@YAMAEBM0M@Z		; glm::refract<float>
	movss	DWORD PTR C$13[rsp], xmm0

; 157  : 			Error += C == -1.0f ? 0 : 1;

	movss	xmm0, DWORD PTR C$13[rsp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN3@test
	jne	SHORT $LN3@test
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv69[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv69[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 158  : 		}
; 159  : 
; 160  : 		{
; 161  : 			glm::vec2 A(0.0f,-1.0f);

	movss	xmm2, DWORD PTR __real@bf800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR A$14[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 162  : 			glm::vec2 B(0.0f, 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR B$15[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 163  : 			glm::vec2 C = glm::refract(A, B, 0.5f);

	movss	xmm3, DWORD PTR __real@3f000000
	lea	r8, QWORD PTR B$15[rsp]
	lea	rdx, QWORD PTR A$14[rsp]
	lea	rcx, QWORD PTR C$16[rsp]
	call	??$refract@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0M@Z ; glm::refract<float,0,glm::tvec2>

; 164  : 			Error += glm::all(glm::epsilonEqual(C, glm::vec2(0.0, -1.0), 0.0001f)) ? 0 : 1;

	movss	xmm0, DWORD PTR __real@38d1b717
	movss	DWORD PTR $T20[rsp], xmm0
	movsd	xmm2, QWORD PTR __real@bff0000000000000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z	; glm::tvec2<float,0>::tvec2<float,0><double,double>
	lea	r9, QWORD PTR $T20[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR C$16[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	??$epsilonEqual@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@_N$0A@@0@AEBU?$tvec2@M$0A@@0@0AEBM@Z ; glm::epsilonEqual<float,0,glm::tvec2>
	mov	rcx, rax
	call	??$all@$0A@Utvec2@glm@@@glm@@YA_NAEBU?$tvec2@_N$0A@@0@@Z ; glm::all<0,glm::tvec2>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv94[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv94[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv94[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 165  : 		}
; 166  : 
; 167  : 		{
; 168  : 			glm::dvec2 A(0.0f,-1.0f);

	movss	xmm2, DWORD PTR __real@bf800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR A$17[rsp]
	call	??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z	; glm::tvec2<double,0>::tvec2<double,0><float,float>

; 169  : 			glm::dvec2 B(0.0f, 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR B$18[rsp]
	call	??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z	; glm::tvec2<double,0>::tvec2<double,0><float,float>

; 170  : 			glm::dvec2 C = glm::refract(A, B, 0.5);

	movsd	xmm3, QWORD PTR __real@3fe0000000000000
	lea	r8, QWORD PTR B$18[rsp]
	lea	rdx, QWORD PTR A$17[rsp]
	lea	rcx, QWORD PTR C$19[rsp]
	call	??$refract@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0N@Z ; glm::refract<double,0,glm::tvec2>

; 171  : 			Error += C == glm::dvec2(0.0, -1.0) ? 0 : 1;

	movsd	xmm2, QWORD PTR __real@bff0000000000000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$19[rsp]
	call	??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z ; glm::operator==<double,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@test
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv147[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv147[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 172  : 		}
; 173  : 
; 174  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 175  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@refract@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 400				; 00000190H
	pop	rdi
	ret	0
?test@refract@@YAHXZ ENDP				; refract::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z PROC	; glm::operator==<double,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movsd	xmm0, QWORD PTR [rax+8]
	ucomisd	xmm0, QWORD PTR [rcx+8]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z ENDP	; glm::operator==<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
I$ = 56
N$ = 64
??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z PROC ; glm::reflect<double,0,glm::tvec2>, COMDAT

; 223  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 224  : 		return detail::compute_reflect<T, P, vecType, detail::is_aligned<P>::value>::call(I, N);

	mov	r8, QWORD PTR N$[rsp]
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_reflect@N$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@N$0A@@3@AEBU43@0@Z ; glm::detail::compute_reflect<double,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 225  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ENDP ; glm::reflect<double,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z PROC		; glm::tvec2<double,0>::tvec2<double,0><float,float>, COMDAT

; 66   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtss2sd xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtss2sd xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z ENDP		; glm::tvec2<double,0>::tvec2<double,0><float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@N$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z PROC			; glm::tvec2<double,0>::tvec2<double,0>, COMDAT

; 57   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s1$[rsp]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movsd	xmm0, QWORD PTR s2$[rsp]
	movsd	QWORD PTR [rax+8], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@N$0A@@glm@@QEAA@NN@Z ENDP			; glm::tvec2<double,0>::tvec2<double,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
tv70 = 0
v1$ = 32
v2$ = 40
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z PROC	; glm::operator==<float,0>, COMDAT

; 873  : 	{

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16

; 874  : 		return (v1.x == v2.x) && (v1.y == v2.y);

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN3@operator
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[rsp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv70[rsp]

; 875  : 	}

	add	rsp, 16
	pop	rdi
	ret	0
??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ENDP	; glm::operator==<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><double,double>, COMDAT

; 66   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
I$ = 56
N$ = 64
??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z PROC ; glm::reflect<float,0,glm::tvec2>, COMDAT

; 223  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 224  : 		return detail::compute_reflect<T, P, vecType, detail::is_aligned<P>::value>::call(I, N);

	mov	r8, QWORD PTR N$[rsp]
	mov	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_reflect@M$0A@Utvec2@glm@@$0A@@detail@glm@@SA?AU?$tvec2@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_reflect<float,0,glm::tvec2,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 225  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ENDP ; glm::reflect<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Error$ = 32
A$9 = 56
B$10 = 88
C$11 = 120
A$12 = 152
B$13 = 200
C$14 = 248
$T15 = 276
$T16 = 288
tv82 = 304
tv134 = 308
?test@reflect@@YAHXZ PROC				; reflect::test

; 126  : 	{

$LN7:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 127  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 128  : 
; 129  : 		{
; 130  : 			glm::vec2 A(1.0f,-1.0f);

	movss	xmm2, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$9[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 131  : 			glm::vec2 B(0.0f, 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR B$10[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>

; 132  : 			glm::vec2 C = glm::reflect(A, B);

	lea	r8, QWORD PTR B$10[rsp]
	lea	rdx, QWORD PTR A$9[rsp]
	lea	rcx, QWORD PTR C$11[rsp]
	call	??$reflect@M$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@0@Z ; glm::reflect<float,0,glm::tvec2>

; 133  : 			Error += C == glm::vec2(1.0, 1.0) ? 0 : 1;

	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0NN@?$tvec2@M$0A@@glm@@QEAA@NN@Z	; glm::tvec2<float,0>::tvec2<float,0><double,double>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$11[rsp]
	call	??$?8M$0A@@glm@@YA_NAEBU?$tvec2@M$0A@@0@0@Z ; glm::operator==<float,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv82[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv82[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 134  : 		}
; 135  : 
; 136  : 		{
; 137  : 			glm::dvec2 A(1.0f,-1.0f);

	movss	xmm2, DWORD PTR __real@bf800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR A$12[rsp]
	call	??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z	; glm::tvec2<double,0>::tvec2<double,0><float,float>

; 138  : 			glm::dvec2 B(0.0f, 1.0f);

	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR B$13[rsp]
	call	??$?0MM@?$tvec2@N$0A@@glm@@QEAA@MM@Z	; glm::tvec2<double,0>::tvec2<double,0><float,float>

; 139  : 			glm::dvec2 C = glm::reflect(A, B);

	lea	r8, QWORD PTR B$13[rsp]
	lea	rdx, QWORD PTR A$12[rsp]
	lea	rcx, QWORD PTR C$14[rsp]
	call	??$reflect@N$0A@Utvec2@glm@@@glm@@YA?AU?$tvec2@N$0A@@0@AEBU10@0@Z ; glm::reflect<double,0,glm::tvec2>

; 140  : 			Error += C == glm::dvec2(1.0, 1.0) ? 0 : 1;

	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	lea	rcx, QWORD PTR $T16[rsp]
	call	??0?$tvec2@N$0A@@glm@@QEAA@NN@Z		; glm::tvec2<double,0>::tvec2<double,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR C$14[rsp]
	call	??$?8N$0A@@glm@@YA_NAEBU?$tvec2@N$0A@@0@0@Z ; glm::operator==<double,0>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv134[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 141  : 		}
; 142  : 
; 143  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 144  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@reflect@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test@reflect@@YAHXZ ENDP				; reflect::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
N$ = 56
I$ = 64
Nref$ = 72
??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z PROC ; glm::faceforward<float,0,glm::tvec3>, COMDAT

; 210  : 	{

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 211  : 		return detail::compute_faceforward<T, P, vecType, detail::is_aligned<P>::value>::call(N, I, Nref);

	mov	r9, QWORD PTR Nref$[rsp]
	mov	r8, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR N$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_faceforward@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@00@Z ; glm::detail::compute_faceforward<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 212  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ENDP ; glm::faceforward<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Error$ = 32
N$7 = 56
I$8 = 104
Nref$9 = 152
F$10 = 200
?test@faceforward@@YAHXZ PROC				; faceforward::test

; 109  : 	{

$LN3:
	push	rdi
	sub	rsp, 240				; 000000f0H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 110  : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 111  : 
; 112  : 		{
; 113  : 			glm::vec3 N(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR N$7[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 114  : 			glm::vec3 I(1.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR I$8[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 115  : 			glm::vec3 Nref(0.0f, 0.0f, 1.0f);

	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR Nref$9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 116  : 			glm::vec3 F = glm::faceforward(N, I, Nref);

	lea	r9, QWORD PTR Nref$9[rsp]
	lea	r8, QWORD PTR I$8[rsp]
	lea	rdx, QWORD PTR N$7[rsp]
	lea	rcx, QWORD PTR F$10[rsp]
	call	??$faceforward@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@00@Z ; glm::faceforward<float,0,glm::tvec3>

; 117  : 		}
; 118  : 
; 119  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 120  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@faceforward@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 240				; 000000f0H
	pop	rdi
	ret	0
?test@faceforward@@YAHXZ ENDP				; faceforward::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>, COMDAT

; 80   : 	{}

$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsd2ss xmm0, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsd2ss xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsd2ss xmm0, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::normalize<float,0,glm::tvec3>, COMDAT

; 195  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 196  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");
; 197  : 
; 198  : 		return detail::compute_normalize<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_normalize@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_normalize<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 199  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::normalize<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Normalize1$ = 40
Normalize2$ = 88
Normalize3$ = 136
ro$ = 184
w$ = 232
u$ = 280
v$ = 328
Error$ = 356
$T10 = 360
$T11 = 372
$T12 = 384
$T13 = 396
$T14 = 408
$T15 = 420
$T16 = 432
$T17 = 444
$T18 = 456
$T19 = 468
$T20 = 480
$T21 = 492
$T22 = 496
$T23 = 508
$T24 = 520
$T25 = 532
$T26 = 544
tv89 = 548
tv155 = 552
tv176 = 560
tv181 = 568
tv202 = 576
?test@normalize@@YAHXZ PROC				; normalize::test

; 86   : 	{

$LN7:
	push	rdi
	sub	rsp, 592				; 00000250H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 87   : 		glm::vec3 Normalize1 = glm::normalize(glm::vec3(1, 0, 0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR Normalize1$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 88   : 		glm::vec3 Normalize2 = glm::normalize(glm::vec3(2, 0, 0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 2
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rdx, rax
	lea	rcx, QWORD PTR Normalize2$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 89   : 
; 90   : 		glm::vec3 Normalize3 = glm::normalize(glm::vec3(-0.6, 0.7, -0.5));

	movsd	xmm3, QWORD PTR __real@bfe0000000000000
	movsd	xmm2, QWORD PTR __real@3fe6666666666666
	movsd	xmm1, QWORD PTR __real@bfe3333333333333
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$?0NNN@?$tvec3@M$0A@@glm@@QEAA@NNN@Z	; glm::tvec3<float,0>::tvec3<float,0><double,double,double>
	mov	rdx, rax
	lea	rcx, QWORD PTR Normalize3$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 91   : 
; 92   : 		glm::vec3 ro = glm::vec3(glm::cos(5.f) * 3.f, 2.f, glm::sin(5.f) * 3.f);

	movss	xmm0, DWORD PTR __real@40a00000
	call	?sin@@YAMM@Z				; sin
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv89[rsp], xmm0
	movss	xmm0, DWORD PTR __real@40a00000
	call	?cos@@YAMM@Z				; cos
	mulss	xmm0, DWORD PTR __real@40400000
	movss	xmm1, DWORD PTR tv89[rsp]
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR __real@40000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR ro$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>

; 93   : 		glm::vec3 w = glm::normalize(glm::vec3(0, -0.2f, 0) - ro);

	xor	r9d, r9d
	movss	xmm2, DWORD PTR __real@be4ccccd
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$?0HMH@?$tvec3@M$0A@@glm@@QEAA@HMH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,float,int>
	lea	r8, QWORD PTR ro$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR w$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 94   : 		glm::vec3 u = glm::normalize(glm::cross(w, glm::vec3(0, 1, 0)));

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR w$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR u$[rsp]
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::normalize<float,0,glm::tvec3>

; 95   : 		glm::vec3 v = glm::cross(u, w);

	lea	r8, QWORD PTR w$[rsp]
	lea	rdx, QWORD PTR u$[rsp]
	lea	rcx, QWORD PTR v$[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>

; 96   : 
; 97   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 98   : 
; 99   : 		Error += glm::all(glm::lessThan(glm::abs(Normalize1 - glm::vec3(1, 0, 0)), glm::vec3(std::numeric_limits<float>::epsilon()))) ? 0 : 1;

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T17[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv155[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR Normalize1$[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv155[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T21[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv176[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv176[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv176[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 100  : 		Error += glm::all(glm::lessThan(glm::abs(Normalize2 - glm::vec3(1, 0, 0)), glm::vec3(std::numeric_limits<float>::epsilon()))) ? 0 : 1;

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T22[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv181[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T23[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR Normalize2$[rsp]
	lea	rcx, QWORD PTR $T24[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T25[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv181[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv202[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv202[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv202[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 101  : 
; 102  : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 103  : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@normalize@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 592				; 00000250H
	pop	rdi
	ret	0
?test@normalize@@YAHXZ ENDP				; normalize::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z
_TEXT	SEGMENT
Result$ = 32
i$1 = 36
tv74 = 40
v$ = 64
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z PROC ; glm::all<0,glm::tvec3>, COMDAT

; 86   : 	{

$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 87   : 		bool Result = true;

	mov	BYTE PTR Result$[rsp], 1

; 88   : 		for(length_t i = 0; i < v.length(); ++i)

	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@all
$LN2@all:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@all:
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@all

; 89   : 			Result = Result && v[i];

	movzx	eax, BYTE PTR Result$[rsp]
	test	eax, eax
	je	SHORT $LN6@all
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@all
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN7@all
$LN6@all:
	mov	DWORD PTR tv74[rsp], 0
$LN7@all:
	movzx	eax, BYTE PTR tv74[rsp]
	mov	BYTE PTR Result$[rsp], al
	jmp	SHORT $LN2@all
$LN3@all:

; 90   : 		return Result;

	movzx	eax, BYTE PTR Result$[rsp]

; 91   : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ENDP ; glm::all<0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z
_TEXT	SEGMENT
this$ = 16
__formal$ = 24
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z PROC		; glm::tvec3<bool,0>::tvec3<bool,0>, COMDAT

; 60   : 	{}

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z ENDP		; glm::tvec3<bool,0>::tvec3<bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEBAAEB_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z PROC		; glm::tvec3<bool,0>::operator[], COMDAT

; 144  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 145  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@_N$0A@@glm@@SAHXZ	; glm::tvec3<bool,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 145				; 00000091H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 146  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	add	rcx, rax
	mov	rax, rcx

; 147  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z ENDP		; glm::tvec3<bool,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@_N$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@_N$0A@@glm@@SAHXZ PROC			; glm::tvec3<bool,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@_N$0A@@glm@@SAHXZ ENDP			; glm::tvec3<bool,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_vector_relational.inl
;	COMDAT ??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
Result$ = 36
i$4 = 52
tv64 = 56
tv80 = 64
tv86 = 72
__$ReturnUdt$ = 112
x$ = 120
y$ = 128
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::lessThan<float,0,glm::tvec3>, COMDAT

; 10   : 	{

$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 11   : 		assert(x.length() == y.length());

	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	DWORD PTR tv64[rsp], eax
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	mov	ecx, DWORD PTR tv64[rsp]
	cmp	ecx, eax
	je	SHORT $LN6@lessThan
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:??_C@_1NA@OPABFNEN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DC@HHLCGOLC@?$AAx?$AA?4?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@lessThan:

; 12   : 
; 13   : 		vecType<bool, P> Result(uninitialize);

	xor	edx, edx
	lea	rcx, QWORD PTR Result$[rsp]
	call	??0?$tvec3@_N$0A@@glm@@QEAA@W4ctor@1@@Z	; glm::tvec3<bool,0>::tvec3<bool,0>

; 14   : 		for(length_t i = 0; i < x.length(); ++i)

	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@lessThan
$LN2@lessThan:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@lessThan:
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$4[rsp], eax
	jge	SHORT $LN3@lessThan

; 15   : 			Result[i] = x[i] < y[i];

	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	mov	QWORD PTR tv80[rsp], rax
	mov	edx, DWORD PTR i$4[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	call	??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z	; glm::tvec3<float,0>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv80[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN7@lessThan
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN8@lessThan
$LN7@lessThan:
	mov	DWORD PTR tv86[rsp], 0
$LN8@lessThan:
	mov	edx, DWORD PTR i$4[rsp]
	lea	rcx, QWORD PTR Result$[rsp]
	call	??A?$tvec3@_N$0A@@glm@@QEAAAEA_NH@Z	; glm::tvec3<bool,0>::operator[]
	movzx	ecx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN2@lessThan
$LN3@lessThan:

; 16   : 
; 17   : 		return Result;

	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnUdt$[rsp]
	mov	rsi, rax
	mov	ecx, 3
	rep movsb
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 18   : 	}

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::lessThan<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z PROC ; glm::abs<float,0,glm::tvec3>, COMDAT

; 316  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 317  : 		return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);

	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_abs_vector@M$0A@Utvec3@glm@@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@@Z ; glm::detail::compute_abs_vector<float,0,glm::tvec3,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 318  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ENDP ; glm::abs<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 32
__$ReturnUdt$ = 64
v1$ = 72
v2$ = 80
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 620  : 		return tvec3<T, P>(

	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rsp]
	mov	rcx, QWORD PTR v2$[rsp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rsp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 621  : 			v1.x - v2.x,
; 622  : 			v1.y - v2.y,
; 623  : 			v1.z - v2.z);
; 624  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
x$ = 56
y$ = 64
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z PROC ; glm::cross<float,0>, COMDAT

; 180  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 181  : 		return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	?call@?$compute_cross@M$0A@$0A@@detail@glm@@SA?AU?$tvec3@M$0A@@3@AEBU43@0@Z ; glm::detail::compute_cross<float,0,0>::call
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 182  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ENDP ; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Cross1$ = 40
Cross2$ = 88
Error$ = 116
$T5 = 120
$T6 = 132
$T7 = 144
$T8 = 156
$T9 = 168
$T10 = 180
$T11 = 192
$T12 = 204
$T13 = 216
$T14 = 220
$T15 = 232
$T16 = 244
$T17 = 256
$T18 = 268
tv66 = 272
tv79 = 280
tv93 = 288
tv146 = 296
tv151 = 304
tv172 = 312
?test@cross@@YAHXZ PROC					; cross::test

; 70   : 	{

$LN7:
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 71   : 		glm::vec3 Cross1 = glm::cross(glm::vec3(1, 0, 0), glm::vec3(0, 1, 0));

	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv66[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Cross1$[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>

; 72   : 		glm::vec3 Cross2 = glm::cross(glm::vec3(0, 1, 0), glm::vec3(1, 0, 0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv79[rsp], rax
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv79[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR Cross2$[rsp]
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::cross<float,0>

; 73   : 
; 74   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 75   : 
; 76   : 		Error += glm::all(glm::lessThan(glm::abs(Cross1 - glm::vec3(0, 0, 1)), glm::vec3(std::numeric_limits<float>::epsilon()))) ? 0 : 1;

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T9[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv93[rsp], rax
	mov	r9d, 1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR Cross1$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv93[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@test
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv146[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv146[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 77   : 		Error += glm::all(glm::lessThan(glm::abs(Cross2 - glm::vec3(0, 0,-1)), glm::vec3(std::numeric_limits<float>::epsilon()))) ? 0 : 1;

	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv151[rsp], rax
	mov	r9d, -1
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	r8, rax
	lea	rdx, QWORD PTR Cross2$[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	??$abs@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@AEBU10@@Z ; glm::abs<float,0,glm::tvec3>
	mov	rcx, QWORD PTR tv151[rsp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T18[rsp]
	call	??$lessThan@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@_N$0A@@0@AEBU?$tvec3@M$0A@@0@0@Z ; glm::lessThan<float,0,glm::tvec3>
	mov	rcx, rax
	call	??$all@$0A@Utvec3@glm@@@glm@@YA_NAEBU?$tvec3@_N$0A@@0@@Z ; glm::all<0,glm::tvec3>
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@test
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv172[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv172[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 78   : 
; 79   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 80   : 	}

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?test@cross@@YAHXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 320				; 00000140H
	pop	rdi
	ret	0
?test@cross@@YAHXZ ENDP					; cross::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec4>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec4,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec2>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec2,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 64
y$ = 72
??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec1>, COMDAT

; 172  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 173  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 174  : 		return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	call	?call@?$compute_dot@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec1,float,0,0>::call

; 175  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Dot1$ = 32
Dot2$ = 36
Dot3$ = 40
Dot4$ = 44
Error$ = 48
$T1 = 52
$T2 = 56
$T3 = 60
$T4 = 68
$T5 = 76
$T6 = 88
$T7 = 100
$T8 = 116
tv66 = 136
tv75 = 144
tv84 = 152
tv93 = 160
tv132 = 168
tv137 = 172
tv139 = 176
tv144 = 180
tv146 = 184
tv151 = 188
tv153 = 192
tv158 = 196
?test@dot@@YAHXZ PROC					; dot::test

; 50   : 	{

$LN11:
	push	rdi
	sub	rsp, 208				; 000000d0H

; 51   : 		float Dot1 = glm::dot(glm::vec1(1), glm::vec1(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec1>
	movss	DWORD PTR Dot1$[rsp], xmm0

; 52   : 		float Dot2 = glm::dot(glm::vec2(1), glm::vec2(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T3[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	QWORD PTR tv75[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T4[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@M@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec2>
	movss	DWORD PTR Dot2$[rsp], xmm0

; 53   : 		float Dot3 = glm::dot(glm::vec3(1), glm::vec3(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T5[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	QWORD PTR tv84[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T6[rsp]
	call	??0?$tvec3@M$0A@@glm@@QEAA@M@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	rcx, QWORD PTR tv84[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	movss	DWORD PTR Dot3$[rsp], xmm0

; 54   : 		float Dot4 = glm::dot(glm::vec4(1), glm::vec4(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T7[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	QWORD PTR tv93[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T8[rsp]
	call	??0?$tvec4@M$0A@@glm@@QEAA@M@Z		; glm::tvec4<float,0>::tvec4<float,0>
	mov	rcx, QWORD PTR tv93[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$dot@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec4>
	movss	DWORD PTR Dot4$[rsp], xmm0

; 55   : 
; 56   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 57   : 
; 58   : 		Error += glm::abs(Dot1 - 1.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Dot1$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv132[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv132[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@test
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv137[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 59   : 		Error += glm::abs(Dot2 - 2.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Dot2$[rsp]
	subss	xmm0, DWORD PTR __real@40000000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv139[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv139[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@test
	mov	DWORD PTR tv144[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv144[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv144[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 60   : 		Error += glm::abs(Dot3 - 3.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Dot3$[rsp]
	subss	xmm0, DWORD PTR __real@40400000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv146[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv146[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@test
	mov	DWORD PTR tv151[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv151[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv151[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 61   : 		Error += glm::abs(Dot4 - 4.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Dot4$[rsp]
	subss	xmm0, DWORD PTR __real@40800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv153[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv153[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@test
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv158[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv158[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 62   : 
; 63   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 64   : 	}

	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
?test@dot@@YAHXZ ENDP					; dot::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z
_TEXT	SEGMENT
p0$ = 64
p1$ = 72
??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z PROC ; glm::distance<float,0,glm::tvec4>, COMDAT

; 158  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 159  : 		return detail::compute_distance<vecType, T, P, detail::is_aligned<P>::value>::call(p0, p1);

	mov	rdx, QWORD PTR p1$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	call	?call@?$compute_distance@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec4,float,0,0>::call

; 160  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ENDP ; glm::distance<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
p0$ = 64
p1$ = 72
??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z PROC ; glm::distance<float,0,glm::tvec3>, COMDAT

; 158  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 159  : 		return detail::compute_distance<vecType, T, P, detail::is_aligned<P>::value>::call(p0, p1);

	mov	rdx, QWORD PTR p1$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	call	?call@?$compute_distance@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec3,float,0,0>::call

; 160  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ENDP ; glm::distance<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z
_TEXT	SEGMENT
p0$ = 64
p1$ = 72
??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z PROC ; glm::distance<float,0,glm::tvec2>, COMDAT

; 158  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 159  : 		return detail::compute_distance<vecType, T, P, detail::is_aligned<P>::value>::call(p0, p1);

	mov	rdx, QWORD PTR p1$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	call	?call@?$compute_distance@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec2,float,0,0>::call

; 160  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ENDP ; glm::distance<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z
_TEXT	SEGMENT
p0$ = 64
p1$ = 72
??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z PROC ; glm::distance<float,0,glm::tvec1>, COMDAT

; 158  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 159  : 		return detail::compute_distance<vecType, T, P, detail::is_aligned<P>::value>::call(p0, p1);

	mov	rdx, QWORD PTR p1$[rsp]
	mov	rcx, QWORD PTR p0$[rsp]
	call	?call@?$compute_distance@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@0@Z ; glm::detail::compute_distance<glm::tvec1,float,0,0>::call

; 160  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ENDP ; glm::distance<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Distance1$ = 48
Distance2$ = 52
Distance3$ = 56
Distance4$ = 60
Error$ = 64
$T1 = 68
$T2 = 72
$T3 = 76
$T4 = 84
$T5 = 92
$T6 = 104
$T7 = 116
$T8 = 132
tv66 = 152
tv75 = 160
tv86 = 168
tv131 = 176
tv144 = 184
tv148 = 188
tv150 = 192
tv154 = 196
tv156 = 200
tv160 = 204
tv162 = 208
tv166 = 212
?test@distance@@YAHXZ PROC				; distance::test

; 30   : 	{

$LN11:
	push	rdi
	sub	rsp, 224				; 000000e0H

; 31   : 		float Distance1 = glm::distance(glm::vec1(1), glm::vec1(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	QWORD PTR tv66[rsp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T2[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, QWORD PTR tv66[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$distance@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec1>
	movss	DWORD PTR Distance1$[rsp], xmm0

; 32   : 		float Distance2 = glm::distance(glm::vec2(1, 0), glm::vec2(1, 0));

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	QWORD PTR tv75[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, QWORD PTR tv75[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$distance@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec2>
	movss	DWORD PTR Distance2$[rsp], xmm0

; 33   : 		float Distance3 = glm::distance(glm::vec3(1, 0, 0), glm::vec3(1, 0, 0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T5[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	QWORD PTR tv86[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T6[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, QWORD PTR tv86[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$distance@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec3>
	movss	DWORD PTR Distance3$[rsp], xmm0

; 34   : 		float Distance4 = glm::distance(glm::vec4(1, 0, 0, 0), glm::vec4(1, 0, 0, 0));

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	QWORD PTR tv131[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, QWORD PTR tv131[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	??$distance@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@0@Z ; glm::distance<float,0,glm::tvec4>
	movss	DWORD PTR Distance4$[rsp], xmm0

; 35   : 
; 36   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 37   : 
; 38   : 		Error += glm::abs(Distance1) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Distance1$[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv144[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv144[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@test
	mov	DWORD PTR tv148[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv148[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 39   : 		Error += glm::abs(Distance2) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Distance2$[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv150[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv150[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@test
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv154[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv154[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 40   : 		Error += glm::abs(Distance3) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Distance3$[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv156[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv156[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@test
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv160[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv160[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 41   : 		Error += glm::abs(Distance4) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Distance4$[rsp]
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv162[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv162[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@test
	mov	DWORD PTR tv166[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv166[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv166[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 42   : 
; 43   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 44   : 	}

	add	rsp, 224				; 000000e0H
	pop	rdi
	ret	0
?test@distance@@YAHXZ ENDP				; distance::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec4>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec4@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec4@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec4,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>, COMDAT

; 204  : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 200  : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 201  : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 202  : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 203  : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR d$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 204  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec3>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec3@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec3@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec3,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z PROC		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>, COMDAT

; 80   : 	{}

$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 77   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 78   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 79   : 		z(static_cast<T>(c))

	cvtsi2ss xmm0, DWORD PTR c$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 80   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z ENDP		; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 70   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 69   : 		: x(a), y(b), z(c)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 70   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec3@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT

; 65   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(scalar), y(scalar), z(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0

; 65   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec3@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.inl
;	COMDAT ??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec3<float,0>::operator[], COMDAT

; 151  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 152  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec3@M$0A@@glm@@SAHXZ	; glm::tvec3<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 152				; 00000098H
	lea	rdx, OFFSET FLAT:??_C@_1LG@MEJFBKPC@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 153  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 154  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec3@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec3<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec3.hpp
;	COMDAT ?length@?$tvec3@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec3@M$0A@@glm@@SAHXZ PROC			; glm::tvec3<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 3;}

$LN3:
	push	rdi
	mov	eax, 3
	pop	rdi
	ret	0
?length@?$tvec3@M$0A@@glm@@SAHXZ ENDP			; glm::tvec3<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec2>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec2@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec2@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec2,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z PROC		; glm::tvec2<float,0>::tvec2<float,0><int,int>, COMDAT

; 66   : 	{}

$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 64   : 		: x(static_cast<T>(a))

	cvtsi2ss xmm0, DWORD PTR a$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax], xmm0

; 65   : 		, y(static_cast<T>(b))

	cvtsi2ss xmm0, DWORD PTR b$[rsp]
	mov	rax, QWORD PTR this$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 66   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z ENDP		; glm::tvec2<float,0>::tvec2<float,0><int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 64
??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z PROC ; glm::length<float,0,glm::tvec1>, COMDAT

; 141  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 142  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 143  : 
; 144  : 		return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);

	mov	rcx, QWORD PTR v$[rsp]
	call	?call@?$compute_length@Utvec1@glm@@M$0A@$0A@@detail@glm@@SAMAEBU?$tvec1@M$0A@@3@@Z ; glm::detail::compute_length<glm::tvec1,float,0,0>::call

; 145  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z ENDP ; glm::length<float,0,glm::tvec1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec1.inl
;	COMDAT ??0?$tvec1@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec1@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec1<float,0>::tvec1<float,0>, COMDAT

; 39   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 38   : 		: x(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0

; 39   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec1@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec1<float,0>::tvec1<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_geometric.cpp
_TEXT	SEGMENT
Length1$ = 48
Length2$ = 52
Length3$ = 56
Length4$ = 60
Error$ = 64
$T1 = 68
$T2 = 72
$T3 = 80
$T4 = 92
tv90 = 108
tv95 = 112
tv129 = 116
tv134 = 120
tv136 = 124
tv141 = 128
tv143 = 132
tv148 = 136
?test@length@@YAHXZ PROC				; length::test

; 10   : 	{

$LN11:
	push	rdi
	sub	rsp, 144				; 00000090H

; 11   : 		float Length1 = glm::length(glm::vec1(1));

	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rsp]
	call	??0?$tvec1@M$0A@@glm@@QEAA@M@Z		; glm::tvec1<float,0>::tvec1<float,0>
	mov	rcx, rax
	call	??$length@M$0A@Utvec1@glm@@@glm@@YAMAEBU?$tvec1@M$0A@@0@@Z ; glm::length<float,0,glm::tvec1>
	movss	DWORD PTR Length1$[rsp], xmm0

; 12   : 		float Length2 = glm::length(glm::vec2(1, 0));

	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T2[rsp]
	call	??$?0HH@?$tvec2@M$0A@@glm@@QEAA@HH@Z	; glm::tvec2<float,0>::tvec2<float,0><int,int>
	mov	rcx, rax
	call	??$length@M$0A@Utvec2@glm@@@glm@@YAMAEBU?$tvec2@M$0A@@0@@Z ; glm::length<float,0,glm::tvec2>
	movss	DWORD PTR Length2$[rsp], xmm0

; 13   : 		float Length3 = glm::length(glm::vec3(1, 0, 0));

	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T3[rsp]
	call	??$?0HHH@?$tvec3@M$0A@@glm@@QEAA@HHH@Z	; glm::tvec3<float,0>::tvec3<float,0><int,int,int>
	mov	rcx, rax
	call	??$length@M$0A@Utvec3@glm@@@glm@@YAMAEBU?$tvec3@M$0A@@0@@Z ; glm::length<float,0,glm::tvec3>
	movss	DWORD PTR Length3$[rsp], xmm0

; 14   : 		float Length4 = glm::length(glm::vec4(1, 0, 0, 0));

	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	??$?0HHHH@?$tvec4@M$0A@@glm@@QEAA@HHHH@Z ; glm::tvec4<float,0>::tvec4<float,0><int,int,int,int>
	mov	rcx, rax
	call	??$length@M$0A@Utvec4@glm@@@glm@@YAMAEBU?$tvec4@M$0A@@0@@Z ; glm::length<float,0,glm::tvec4>
	movss	DWORD PTR Length4$[rsp], xmm0

; 15   : 
; 16   : 		int Error = 0;

	mov	DWORD PTR Error$[rsp], 0

; 17   : 
; 18   : 		Error += glm::abs(Length1 - 1.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Length1$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv90[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv90[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN3@test
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN4@test
$LN3@test:
	mov	DWORD PTR tv95[rsp], 1
$LN4@test:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 19   : 		Error += glm::abs(Length2 - 1.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Length2$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv129[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv129[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@test
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN6@test
$LN5@test:
	mov	DWORD PTR tv134[rsp], 1
$LN6@test:
	mov	eax, DWORD PTR tv134[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 20   : 		Error += glm::abs(Length3 - 1.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Length3$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv136[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv136[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@test
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN8@test
$LN7@test:
	mov	DWORD PTR tv141[rsp], 1
$LN8@test:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 21   : 		Error += glm::abs(Length4 - 1.0f) < std::numeric_limits<float>::epsilon() ? 0 : 1;

	movss	xmm0, DWORD PTR Length4$[rsp]
	subss	xmm0, DWORD PTR __real@3f800000
	call	??$abs@M@glm@@YAMM@Z			; glm::abs<float>
	movss	DWORD PTR tv143[rsp], xmm0
	call	?epsilon@?$numeric_limits@M@std@@SAMXZ	; std::numeric_limits<float>::epsilon
	movss	xmm1, DWORD PTR tv143[rsp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN9@test
	mov	DWORD PTR tv148[rsp], 0
	jmp	SHORT $LN10@test
$LN9@test:
	mov	DWORD PTR tv148[rsp], 1
$LN10@test:
	mov	eax, DWORD PTR tv148[rsp]
	mov	ecx, DWORD PTR Error$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR Error$[rsp], eax

; 22   : 
; 23   : 		return Error;

	mov	eax, DWORD PTR Error$[rsp]

; 24   : 	}

	add	rsp, 144				; 00000090H
	pop	rdi
	ret	0
?test@length@@YAHXZ ENDP				; length::test
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 16
a$ = 24
b$ = 32
c$ = 40
d$ = 48
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 193  : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 192  : 		: x(a), y(b), z(c), w(d)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR c$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR d$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 193  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@MMMM@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec4@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT

; 188  : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 187  : 		: x(scalar), y(scalar), z(scalar), w(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+12], xmm0

; 188  : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec4@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
v$ = 56
scalar$ = 64
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z PROC	; glm::operator*<float,0>, COMDAT

; 541  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 542  : 		return tvec2<T, P>(

	mov	rax, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scalar$[rsp]
	mov	rax, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR scalar$[rsp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rsp]
	call	??0?$tvec2@M$0A@@glm@@QEAA@MM@Z		; glm::tvec2<float,0>::tvec2<float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rsp]

; 543  : 			v.x * scalar,
; 544  : 			v.y * scalar);
; 545  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec2@M$0A@@0@AEBU10@M@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 16
s1$ = 24
s2$ = 32
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 57   : 	{}

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 56   : 		: x(s1), y(s2)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s1$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR s2$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 57   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@MM@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??0?$tvec2@M$0A@@glm@@QEAA@M@Z
_TEXT	SEGMENT
this$ = 16
scalar$ = 24
??0?$tvec2@M$0A@@glm@@QEAA@M@Z PROC			; glm::tvec2<float,0>::tvec2<float,0>, COMDAT

; 52   : 	{}

$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 51   : 		: x(scalar), y(scalar)

	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rsp]
	movss	xmm0, DWORD PTR scalar$[rsp]
	movss	DWORD PTR [rax+4], xmm0

; 52   : 	{}

	mov	rax, QWORD PTR this$[rsp]
	pop	rdi
	ret	0
??0?$tvec2@M$0A@@glm@@QEAA@M@Z ENDP			; glm::tvec2<float,0>::tvec2<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.inl
;	COMDAT ??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z PROC			; glm::tvec2<float,0>::operator[], COMDAT

; 109  : 	{

$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H

; 110  : 		assert(i >= 0 && i < this->length());

	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@operator
	call	?length@?$tvec2@M$0A@@glm@@SAHXZ	; glm::tvec2<float,0>::length
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 110				; 0000006eH
	lea	rdx, OFFSET FLAT:??_C@_1LG@FPDAFGJN@?$AAC?$AA?3?$AA?2?$AAU?$AAs?$AAe?$AAr?$AAs?$AA?2?$AAk?$AAs?$AAa?$AAr?$AAt?$AA?2@
	lea	rcx, OFFSET FLAT:??_C@_1DK@BGNCJAPL@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:

; 111  : 		return (&x)[i];

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]

; 112  : 	}

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??A?$tvec2@M$0A@@glm@@QEBAAEBMH@Z ENDP			; glm::tvec2<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\type_vec2.hpp
;	COMDAT ?length@?$tvec2@M$0A@@glm@@SAHXZ
_TEXT	SEGMENT
?length@?$tvec2@M$0A@@glm@@SAHXZ PROC			; glm::tvec2<float,0>::length, COMDAT

; 82   : 		GLM_FUNC_DECL static length_type length(){return 2;}

$LN3:
	push	rdi
	mov	eax, 2
	pop	rdi
	ret	0
?length@?$tvec2@M$0A@@glm@@SAHXZ ENDP			; glm::tvec2<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\glm\detail\func_common.inl
;	COMDAT ??$abs@M@glm@@YAMM@Z
_TEXT	SEGMENT
x$ = 64
??$abs@M@glm@@YAMM@Z PROC				; glm::abs<float>, COMDAT

; 310  : 	{

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 311  : 		return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);

	movss	xmm0, DWORD PTR x$[rsp]
	call	?call@?$compute_abs@M$00@detail@glm@@SAMM@Z ; glm::detail::compute_abs<float,1>::call

; 312  : 	}

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
??$abs@M@glm@@YAMM@Z ENDP				; glm::abs<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\limits
;	COMDAT ?epsilon@?$numeric_limits@M@std@@SAMXZ
_TEXT	SEGMENT
?epsilon@?$numeric_limits@M@std@@SAMXZ PROC		; std::numeric_limits<float>::epsilon, COMDAT

; 872  :     _NODISCARD static constexpr float epsilon() noexcept {

$LN3:
	push	rdi
	sub	rsp, 16

; 873  :         return FLT_EPSILON;

	movss	xmm0, DWORD PTR __real@34000000

; 874  :     }

	add	rsp, 16
	pop	rdi
	ret	0
?epsilon@?$numeric_limits@M@std@@SAMXZ ENDP		; std::numeric_limits<float>::epsilon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sqrtf

; 266  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?sin@@YAMM@Z PROC					; sin, COMDAT

; 256  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 257  :     return _CSTD sinf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_sinf

; 258  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 64
?cos@@YAMM@Z PROC					; cos, COMDAT

; 88   : _NODISCARD _Check_return_ inline float cos(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rdi
	sub	rsp, 48					; 00000030H

; 89   :     return _CSTD cosf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rsp]
	call	QWORD PTR __imp_cosf

; 90   : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
END
