; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?errors@@3HA					; errors
_BSS	SEGMENT
?errors@@3HA DD	01H DUP (?)				; errors
_BSS	ENDS
CONST	SEGMENT
$SG5502	DB	'n = %d', 0aH, 00H
$SG5508	DB	'Error for x = %08x, got %d', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?nlz@@YAHI@Z					; nlz
PUBLIC	?pop@@YAHI@Z					; pop
PUBLIC	?ntz1@@YAHI@Z					; ntz1
PUBLIC	?ntz2@@YAHI@Z					; ntz2
PUBLIC	?ntz3@@YAHI@Z					; ntz3
PUBLIC	?ntz4@@YAHI@Z					; ntz4
PUBLIC	?ntz4a@@YAHI@Z					; ntz4a
PUBLIC	?ntz5@@YAHD@Z					; ntz5
PUBLIC	?ntz6@@YAHI@Z					; ntz6
PUBLIC	?ntz6a@@YAHI@Z					; ntz6a
PUBLIC	?ntz7@@YAHI@Z					; ntz7
PUBLIC	?ntz7_christophe@@YAHI@Z			; ntz7_christophe
PUBLIC	?ntz8@@YAHI@Z					; ntz8
PUBLIC	?ntz8a@@YAHI@Z					; ntz8a
PUBLIC	?ntz9@@YAHI@Z					; ntz9
PUBLIC	?ntz10@@YAHI@Z					; ntz10
PUBLIC	?ntz11@@YAHI@Z					; ntz11
PUBLIC	?error@@YAXHH@Z					; error
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	?pop@@YAHI@Z:PROC				; pop
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$?nlz@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?nlz@@YAHI@Z
$pdata$?pop@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?pop@@YAHI@Z
$pdata$?ntz1@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?ntz1@@YAHI@Z
$pdata$?ntz2@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$?ntz2@@YAHI@Z
$pdata$?ntz3@@YAHI@Z DD imagerel $LN8
	DD	imagerel $LN8+181
	DD	imagerel $unwind$?ntz3@@YAHI@Z
$pdata$?ntz4@@YAHI@Z DD imagerel $LN9
	DD	imagerel $LN9+205
	DD	imagerel $unwind$?ntz4@@YAHI@Z
$pdata$?ntz4a@@YAHI@Z DD imagerel $LN8
	DD	imagerel $LN8+201
	DD	imagerel $unwind$?ntz4a@@YAHI@Z
$pdata$?ntz5@@YAHD@Z DD imagerel $LN19
	DD	imagerel $LN19+174
	DD	imagerel $unwind$?ntz5@@YAHD@Z
$pdata$?ntz6@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$?ntz6@@YAHI@Z
$pdata$?ntz6a@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+58
	DD	imagerel $unwind$?ntz6a@@YAHI@Z
$pdata$?ntz7@@YAHI@Z DD imagerel $LN15
	DD	imagerel $LN15+282
	DD	imagerel $unwind$?ntz7@@YAHI@Z
$pdata$?ntz7_christophe@@YAHI@Z DD imagerel $LN27
	DD	imagerel $LN27+417
	DD	imagerel $unwind$?ntz7_christophe@@YAHI@Z
$pdata$?ntz8@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?ntz8@@YAHI@Z
$pdata$?ntz8a@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?ntz8a@@YAHI@Z
$pdata$?ntz9@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?ntz9@@YAHI@Z
$pdata$?ntz10@@YAHI@Z DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$?ntz10@@YAHI@Z
$pdata$?ntz11@@YAHI@Z DD imagerel $LN5
	DD	imagerel $LN5+154
	DD	imagerel $unwind$?ntz11@@YAHI@Z
$pdata$?error@@YAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?error@@YAXHH@Z
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?tab@?1??ntz11@@YAHI@Z@4PAEA
_DATA	SEGMENT
?tab@?1??ntz11@@YAHI@Z@4PAEA DB 00H			; `ntz11'::`2'::tab
	DB	01H
	DB	02H
	DB	018H
	DB	03H
	DB	013H
	DB	06H
	DB	019H
	DB	016H
	DB	04H
	DB	014H
	DB	0aH
	DB	010H
	DB	07H
	DB	0cH
	DB	01aH
	DB	01fH
	DB	017H
	DB	012H
	DB	05H
	DB	015H
	DB	09H
	DB	0fH
	DB	0bH
	DB	01eH
	DB	011H
	DB	08H
	DB	0eH
	DB	01dH
	DB	0dH
	DB	01cH
	DB	01bH
_DATA	ENDS
;	COMDAT ?table@?1??ntz10@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??ntz10@@YAHI@Z@4PADA DB 00H			; `ntz10'::`2'::table
	DB	01H
	DB	02H
	DB	018H
	DB	03H
	DB	013H
	DB	06H
	DB	019H
	DB	016H
	DB	04H
	DB	014H
	DB	0aH
	DB	010H
	DB	07H
	DB	0cH
	DB	01aH
	DB	01fH
	DB	017H
	DB	012H
	DB	05H
	DB	015H
	DB	09H
	DB	0fH
	DB	0bH
	DB	01eH
	DB	011H
	DB	08H
	DB	0eH
	DB	01dH
	DB	0dH
	DB	01cH
	DB	01bH
_DATA	ENDS
;	COMDAT ?table@?1??ntz9@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??ntz9@@YAHI@Z@4PADA DB 020H			; `ntz9'::`2'::table
	DB	00H
	DB	01H
	DB	01aH
	DB	02H
	DB	017H
	DB	01bH
	DB	063H
	DB	03H
	DB	010H
	DB	018H
	DB	01eH
	DB	01cH
	DB	0bH
	DB	063H
	DB	0dH
	DB	04H
	DB	07H
	DB	011H
	DB	063H
	DB	019H
	DB	016H
	DB	01fH
	DB	0fH
	DB	01dH
	DB	0aH
	DB	0cH
	DB	06H
	DB	063H
	DB	015H
	DB	0eH
	DB	09H
	DB	05H
	DB	014H
	DB	08H
	DB	013H
	DB	012H
_DATA	ENDS
;	COMDAT ?table@?1??ntz8a@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??ntz8a@@YAHI@Z@4PADA DB 020H			; `ntz8a'::`2'::table
	DB	00H
	DB	01H
	DB	0cH
	DB	02H
	DB	06H
	DB	063H
	DB	0dH
	DB	03H
	DB	063H
	DB	07H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	0eH
	DB	0aH
	DB	04H
	DB	063H
	DB	063H
	DB	08H
	DB	063H
	DB	063H
	DB	019H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	015H
	DB	01bH
	DB	0fH
	DB	01fH
	DB	0bH
	DB	05H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	09H
	DB	063H
	DB	063H
	DB	018H
	DB	063H
	DB	063H
	DB	014H
	DB	01aH
	DB	01eH
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	017H
	DB	063H
	DB	013H
	DB	01dH
	DB	063H
	DB	016H
	DB	012H
	DB	01cH
	DB	011H
	DB	010H
	DB	063H
_DATA	ENDS
;	COMDAT ?table@?1??ntz8@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??ntz8@@YAHI@Z@4PADA DB 020H			; `ntz8'::`2'::table
	DB	00H
	DB	01H
	DB	0cH
	DB	02H
	DB	06H
	DB	063H
	DB	0dH
	DB	03H
	DB	063H
	DB	07H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	0eH
	DB	0aH
	DB	04H
	DB	063H
	DB	063H
	DB	08H
	DB	063H
	DB	063H
	DB	019H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	015H
	DB	01bH
	DB	0fH
	DB	01fH
	DB	0bH
	DB	05H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	09H
	DB	063H
	DB	063H
	DB	018H
	DB	063H
	DB	063H
	DB	014H
	DB	01aH
	DB	01eH
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	017H
	DB	063H
	DB	013H
	DB	01dH
	DB	063H
	DB	016H
	DB	012H
	DB	01cH
	DB	011H
	DB	010H
	DB	063H
_DATA	ENDS
xdata	SEGMENT
$unwind$?nlz@@YAHI@Z DD 020901H
	DD	070053209H
$unwind$?pop@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?ntz1@@YAHI@Z DD 020901H
	DD	070053209H
$unwind$?ntz2@@YAHI@Z DD 020901H
	DD	070053209H
$unwind$?ntz3@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?ntz4@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?ntz4a@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?ntz5@@YAHD@Z DD 010501H
	DD	07005H
$unwind$?ntz6@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?ntz6a@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?ntz7@@YAHI@Z DD 020901H
	DD	070057209H
$unwind$?ntz7_christophe@@YAHI@Z DD 020901H
	DD	070059209H
$unwind$?ntz8@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?ntz8a@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?ntz9@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?ntz10@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?ntz11@@YAHI@Z DD 020901H
	DD	070055209H
$unwind$?error@@YAXHH@Z DD 020d01H
	DD	07009320dH
$unwind$main DD	010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
main	PROC

; 263  : {

$LN3:
	push	rdi

; 264  : #	ifdef NDEBUG
; 265  : 
; 266  : 	int i, m, n;
; 267  : 	static unsigned test[] = {0,32, 1,0, 2,1, 3,0, 4,2, 5,0, 6,1,  7,0,
; 268  : 		8,3, 9,0, 16,4, 32,5, 64,6, 128,7, 255,0, 256,8, 512,9, 1024,10,
; 269  : 		2048,11, 4096,12, 8192,13, 16384,14, 32768,15, 65536,16,
; 270  : 		0x20000,17, 0x40000,18, 0x80000,19, 0x100000,20, 0x200000,21,
; 271  : 		0x400000,22, 0x800000,23, 0x1000000,24, 0x2000000,25,
; 272  : 		0x4000000,26, 0x8000000,27, 0x10000000,28, 0x20000000,29,
; 273  : 		0x40000000,30, 0x80000000,31, 0xFFFFFFF0,4, 0x3000FF00,8,
; 274  : 		0xC0000000,30, 0x60000000,29, 0x00011000, 12};
; 275  : 
; 276  : 	std::size_t const Count = 1000;
; 277  : 
; 278  : 	n = sizeof(test)/4;
; 279  : 
; 280  : 	std::clock_t TimestampBeg = 0;
; 281  : 	std::clock_t TimestampEnd = 0;
; 282  : 
; 283  : 	TimestampBeg = std::clock();
; 284  : 	for (std::size_t k = 0; k < Count; ++k)
; 285  : 	for (i = 0; i < n; i += 2) {
; 286  : 		if (ntz1(test[i]) != test[i+1]) error(test[i], ntz1(test[i]));}
; 287  : 	TimestampEnd = std::clock();
; 288  : 
; 289  : 	printf("ntz1: %d clocks\n", TimestampEnd - TimestampBeg);
; 290  : 
; 291  : 	TimestampBeg = std::clock();
; 292  : 	for (std::size_t k = 0; k < Count; ++k)
; 293  : 	for (i = 0; i < n; i += 2) {
; 294  : 		if (ntz2(test[i]) != test[i+1]) error(test[i], ntz2(test[i]));}
; 295  : 	TimestampEnd = std::clock();
; 296  : 
; 297  : 	printf("ntz2: %d clocks\n", TimestampEnd - TimestampBeg);
; 298  : 
; 299  : 	TimestampBeg = std::clock();
; 300  : 	for (std::size_t k = 0; k < Count; ++k)
; 301  : 	for (i = 0; i < n; i += 2) {
; 302  : 		if (ntz3(test[i]) != test[i+1]) error(test[i], ntz3(test[i]));}
; 303  : 	TimestampEnd = std::clock();
; 304  : 
; 305  : 	printf("ntz3: %d clocks\n", TimestampEnd - TimestampBeg);
; 306  : 
; 307  : 	TimestampBeg = std::clock();
; 308  : 	for (std::size_t k = 0; k < Count; ++k)
; 309  : 	for (i = 0; i < n; i += 2) {
; 310  : 		if (ntz4(test[i]) != test[i+1]) error(test[i], ntz4(test[i]));}
; 311  : 	TimestampEnd = std::clock();
; 312  : 
; 313  : 	printf("ntz4: %d clocks\n", TimestampEnd - TimestampBeg);
; 314  : 
; 315  : 	TimestampBeg = std::clock();
; 316  : 	for (std::size_t k = 0; k < Count; ++k)
; 317  : 	for (i = 0; i < n; i += 2) {
; 318  : 		if (ntz4a(test[i]) != test[i+1]) error(test[i], ntz4a(test[i]));}
; 319  : 	TimestampEnd = std::clock();
; 320  : 
; 321  : 	printf("ntz4a: %d clocks\n", TimestampEnd - TimestampBeg);
; 322  : 
; 323  : 	TimestampBeg = std::clock();
; 324  : 	for (std::size_t k = 0; k < Count; ++k)
; 325  : 	for (i = 0; i < n; i += 2) {
; 326  : 		m = test[i+1]; if (m > 8) m = 8;
; 327  : 		if (ntz5(test[i]) != m) error(test[i], ntz5(test[i]));}
; 328  : 	TimestampEnd = std::clock();
; 329  : 
; 330  : 	printf("ntz5: %d clocks\n", TimestampEnd - TimestampBeg);
; 331  : 
; 332  : 	TimestampBeg = std::clock();
; 333  : 	for (std::size_t k = 0; k < Count; ++k)
; 334  : 	for (i = 0; i < n; i += 2) {
; 335  : 		if (ntz6(test[i]) != test[i+1]) error(test[i], ntz6(test[i]));}
; 336  : 	TimestampEnd = std::clock();
; 337  : 
; 338  : 	printf("ntz6: %d clocks\n", TimestampEnd - TimestampBeg);
; 339  : 
; 340  : 	TimestampBeg = std::clock();
; 341  : 	for (std::size_t k = 0; k < Count; ++k)
; 342  : 	for (i = 0; i < n; i += 2) {
; 343  : 		if (ntz6a(test[i]) != test[i+1]) error(test[i], ntz6a(test[i]));}
; 344  : 	TimestampEnd = std::clock();
; 345  : 
; 346  : 	printf("ntz6a: %d clocks\n", TimestampEnd - TimestampBeg);
; 347  : 
; 348  : 	TimestampBeg = std::clock();
; 349  : 	for (std::size_t k = 0; k < Count; ++k)
; 350  : 	for (i = 0; i < n; i += 2) {
; 351  : 		if (ntz7(test[i]) != test[i+1]) error(test[i], ntz7(test[i]));}
; 352  : 	TimestampEnd = std::clock();
; 353  : 
; 354  : 	printf("ntz7: %d clocks\n", TimestampEnd - TimestampBeg);
; 355  : 
; 356  : 	TimestampBeg = std::clock();
; 357  : 	for (std::size_t k = 0; k < Count; ++k)
; 358  : 	for (i = 0; i < n; i += 2) {
; 359  : 		if (ntz7_christophe(test[i]) != test[i+1]) error(test[i], ntz7(test[i]));}
; 360  : 	TimestampEnd = std::clock();
; 361  : 
; 362  : 	printf("ntz7_christophe: %d clocks\n", TimestampEnd - TimestampBeg);
; 363  : 
; 364  : 	TimestampBeg = std::clock();
; 365  : 	for (std::size_t k = 0; k < Count; ++k)
; 366  : 	for (i = 0; i < n; i += 2) {
; 367  : 		if (ntz8(test[i]) != test[i+1]) error(test[i], ntz8(test[i]));}
; 368  : 	TimestampEnd = std::clock();
; 369  : 
; 370  : 	printf("ntz8: %d clocks\n", TimestampEnd - TimestampBeg);
; 371  : 
; 372  : 	TimestampBeg = std::clock();
; 373  : 	for (std::size_t k = 0; k < Count; ++k)
; 374  : 	for (i = 0; i < n; i += 2) {
; 375  : 		if (ntz8a(test[i]) != test[i+1]) error(test[i], ntz8a(test[i]));}
; 376  : 	TimestampEnd = std::clock();
; 377  : 
; 378  : 	printf("ntz8a: %d clocks\n", TimestampEnd - TimestampBeg);
; 379  : 
; 380  : 	TimestampBeg = std::clock();
; 381  : 	for (std::size_t k = 0; k < Count; ++k)
; 382  : 	for (i = 0; i < n; i += 2) {
; 383  : 		if (ntz9(test[i]) != test[i+1]) error(test[i], ntz9(test[i]));}
; 384  : 	TimestampEnd = std::clock();
; 385  : 
; 386  : 	printf("ntz9: %d clocks\n", TimestampEnd - TimestampBeg);
; 387  : 
; 388  : 	TimestampBeg = std::clock();
; 389  : 	for (std::size_t k = 0; k < Count; ++k)
; 390  : 	for (i = 0; i < n; i += 2) {
; 391  : 		if (ntz10(test[i]) != test[i+1]) error(test[i], ntz10(test[i]));}
; 392  : 	TimestampEnd = std::clock();
; 393  : 
; 394  : 	printf("ntz10: %d clocks\n", TimestampEnd - TimestampBeg);
; 395  : 
; 396  : 	if (errors == 0)
; 397  : 		printf("Passed all %d cases.\n", sizeof(test)/8);
; 398  : 
; 399  : #	endif//NDEBUG
; 400  : }

	xor	eax, eax
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 48
y$ = 56
?error@@YAXHH@Z PROC					; error

; 255  : void error(int x, int y) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 256  :    errors = errors + 1;

	mov	eax, DWORD PTR ?errors@@3HA		; errors
	inc	eax
	mov	DWORD PTR ?errors@@3HA, eax		; errors

; 257  :    printf("Error for x = %08x, got %d\n", x, y);

	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, OFFSET FLAT:$SG5508
	call	printf

; 258  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?error@@YAXHH@Z ENDP					; error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
k$ = 32
tv82 = 36
n$ = 64
?ntz11@@YAHI@Z PROC					; ntz11

; 232  : int ntz11 (unsigned int n) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H

; 233  : 
; 234  :    static unsigned char tab[32] =
; 235  :    {   0,  1,  2, 24,  3, 19, 6,  25,
; 236  :       22,  4, 20, 10, 16,  7, 12, 26,
; 237  :       31, 23, 18,  5, 21,  9, 15, 11,
; 238  :       30, 17,  8, 14, 29, 13, 28, 27
; 239  :    };
; 240  :    unsigned int k;
; 241  :    n = n & (-n);        /* isolate lsb */

	mov	eax, DWORD PTR n$[rsp]
	neg	eax
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 242  :    printf("n = %d\n", n);

	mov	edx, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:$SG5502
	call	printf

; 243  : #if defined(SLOW_MUL)
; 244  :    k = (n << 11) - n;

	mov	eax, DWORD PTR n$[rsp]
	shl	eax, 11
	sub	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR k$[rsp], eax

; 245  :    k = (k <<  2) + k;

	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR k$[rsp], eax

; 246  :    k = (k <<  8) + n;

	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 8
	add	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR k$[rsp], eax

; 247  :    k = (k <<  5) - k;

	mov	eax, DWORD PTR k$[rsp]
	shl	eax, 5
	sub	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR k$[rsp], eax

; 248  : #else
; 249  :    k = n * 0x4d7651f;
; 250  : #endif
; 251  :    return n ? tab[k>>27] : 32;

	cmp	DWORD PTR n$[rsp], 0
	je	SHORT $LN3@ntz11
	mov	eax, DWORD PTR k$[rsp]
	shr	eax, 27
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?tab@?1??ntz11@@YAHI@Z@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN4@ntz11
$LN3@ntz11:
	mov	DWORD PTR tv82[rsp], 32			; 00000020H
$LN4@ntz11:
	mov	eax, DWORD PTR tv82[rsp]

; 252  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?ntz11@@YAHI@Z ENDP					; ntz11
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?ntz10@@YAHI@Z PROC					; ntz10

; 218  : int ntz10(unsigned x) {

$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 219  : 
; 220  :    static char table[32] =
; 221  :      { 0, 1, 2,24, 3,19, 6,25,  22, 4,20,10,16, 7,12,26,
; 222  :       31,23,18, 5,21, 9,15,11,  30,17, 8,14,29,13,28,27};
; 223  : 
; 224  :    if (x == 0) return 32;

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@ntz10
	mov	eax, 32					; 00000020H
	jmp	SHORT $LN1@ntz10
$LN2@ntz10:

; 225  :    x = (x & -x)*0x04D7651F;

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 81224991			; 04d7651fH
	mov	DWORD PTR x$[rsp], eax

; 226  :    return table[x >> 27];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 27
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??ntz10@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]
$LN1@ntz10:

; 227  : }

	pop	rdi
	ret	0
?ntz10@@YAHI@Z ENDP					; ntz10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?ntz9@@YAHI@Z PROC					; ntz9

; 201  : int ntz9(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 202  : 
; 203  :    static char table[37] = {32,  0,  1, 26,  2, 23, 27,
; 204  :                  u,  3, 16, 24, 30, 28, 11,  u, 13,  4,
; 205  :                  7, 17,  u, 25, 22, 31, 15, 29, 10, 12,
; 206  :                  6,  u, 21, 14,  9,  5, 20,  8, 19, 18};
; 207  : 
; 208  :    x = (x & -x)%37;

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	xor	edx, edx
	mov	ecx, 37					; 00000025H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR x$[rsp], eax

; 209  :    return table[x];

	mov	eax, DWORD PTR x$[rsp]
	lea	rcx, OFFSET FLAT:?table@?1??ntz9@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 210  : }

	pop	rdi
	ret	0
?ntz9@@YAHI@Z ENDP					; ntz9
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?ntz8a@@YAHI@Z PROC					; ntz8a

; 184  : {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 185  : 	static char table[64] =
; 186  : 		{32, 0, 1,12, 2, 6, u,13,   3, u, 7, u, u, u, u,14,
; 187  : 		10, 4, u, u, 8, u, u,25,   u, u, u, u, u,21,27,15,
; 188  : 		31,11, 5, u, u, u, u, u,   9, u, u,24, u, u,20,26,
; 189  : 		30, u, u, u, u,23, u,19,  29, u,22,18,28,17,16, u};
; 190  : 
; 191  : 	x = (x & -x);

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 192  : 	x = (x << 4) + x;    // x = x*17.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 193  : 	x = (x << 6) + x;    // x = x*65.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 6
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 194  : 	x = (x << 16) - x;   // x = x*65535.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	sub	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 195  : 	return table[x >> 26];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 26
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??ntz8a@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 196  : }

	pop	rdi
	ret	0
?ntz8a@@YAHI@Z ENDP					; ntz8a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?ntz8@@YAHI@Z PROC					; ntz8

; 169  : {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 170  : 	static char table[64] =
; 171  : 		{32, 0, 1,12, 2, 6, u,13,   3, u, 7, u, u, u, u,14,
; 172  : 		10, 4, u, u, 8, u, u,25,   u, u, u, u, u,21,27,15,
; 173  : 		31,11, 5, u, u, u, u, u,   9, u, u,24, u, u,20,26,
; 174  : 		30, u, u, u, u,23, u,19,  29, u,22,18,28,17,16, u};
; 175  : 
; 176  : 	x = (x & -x)*0x0450FBAF;

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 72416175			; 0450fbafH
	mov	DWORD PTR x$[rsp], eax

; 177  : 	return table[x >> 26];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 26
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??ntz8@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 178  : }

	pop	rdi
	ret	0
?ntz8@@YAHI@Z ENDP					; ntz8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
y$ = 0
bz$ = 4
b4$ = 8
b3$ = 12
b2$ = 16
b1$ = 20
b0$ = 24
tv67 = 28
tv70 = 32
tv73 = 36
tv76 = 40
tv80 = 44
tv83 = 48
tv87 = 52
tv90 = 56
tv94 = 60
tv129 = 64
tv133 = 68
tv136 = 72
x$ = 96
?ntz7_christophe@@YAHI@Z PROC				; ntz7_christophe

; 149  : {

$LN27:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 80					; 00000050H

; 150  : 	unsigned y, bz, b4, b3, b2, b1, b0;
; 151  : 
; 152  : 	y = x & -x;               // Isolate rightmost 1-bit.

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 153  : 	bz = unsigned(!bool(y));           // 1 if y = 0.

	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@ntz7_chris
	mov	BYTE PTR tv67[rsp], 1
	jmp	SHORT $LN4@ntz7_chris
$LN3@ntz7_chris:
	mov	BYTE PTR tv67[rsp], 0
$LN4@ntz7_chris:
	movzx	eax, BYTE PTR tv67[rsp]
	test	eax, eax
	jne	SHORT $LN5@ntz7_chris
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN6@ntz7_chris
$LN5@ntz7_chris:
	mov	DWORD PTR tv70[rsp], 0
$LN6@ntz7_chris:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR bz$[rsp], eax

; 154  : 	b4 = unsigned(!bool(y & 0x0000FFFF)) * 16;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 65535				; 0000ffffH
	test	eax, eax
	je	SHORT $LN7@ntz7_chris
	mov	BYTE PTR tv73[rsp], 1
	jmp	SHORT $LN8@ntz7_chris
$LN7@ntz7_chris:
	mov	BYTE PTR tv73[rsp], 0
$LN8@ntz7_chris:
	movzx	eax, BYTE PTR tv73[rsp]
	test	eax, eax
	jne	SHORT $LN9@ntz7_chris
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN10@ntz7_chris
$LN9@ntz7_chris:
	mov	DWORD PTR tv76[rsp], 0
$LN10@ntz7_chris:
	imul	eax, DWORD PTR tv76[rsp], 16
	mov	DWORD PTR b4$[rsp], eax

; 155  : 	b3 = unsigned(!bool(y & 0x00FF00FF)) * 8;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 16711935				; 00ff00ffH
	test	eax, eax
	je	SHORT $LN11@ntz7_chris
	mov	BYTE PTR tv80[rsp], 1
	jmp	SHORT $LN12@ntz7_chris
$LN11@ntz7_chris:
	mov	BYTE PTR tv80[rsp], 0
$LN12@ntz7_chris:
	movzx	eax, BYTE PTR tv80[rsp]
	test	eax, eax
	jne	SHORT $LN13@ntz7_chris
	mov	DWORD PTR tv83[rsp], 1
	jmp	SHORT $LN14@ntz7_chris
$LN13@ntz7_chris:
	mov	DWORD PTR tv83[rsp], 0
$LN14@ntz7_chris:
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, 3
	mov	DWORD PTR b3$[rsp], eax

; 156  : 	b2 = unsigned(!bool(y & 0x0F0F0F0F)) * 4;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 252645135				; 0f0f0f0fH
	test	eax, eax
	je	SHORT $LN15@ntz7_chris
	mov	BYTE PTR tv87[rsp], 1
	jmp	SHORT $LN16@ntz7_chris
$LN15@ntz7_chris:
	mov	BYTE PTR tv87[rsp], 0
$LN16@ntz7_chris:
	movzx	eax, BYTE PTR tv87[rsp]
	test	eax, eax
	jne	SHORT $LN17@ntz7_chris
	mov	DWORD PTR tv90[rsp], 1
	jmp	SHORT $LN18@ntz7_chris
$LN17@ntz7_chris:
	mov	DWORD PTR tv90[rsp], 0
$LN18@ntz7_chris:
	mov	eax, DWORD PTR tv90[rsp]
	shl	eax, 2
	mov	DWORD PTR b2$[rsp], eax

; 157  : 	b1 = unsigned(!bool(y & 0x33333333)) * 2;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 858993459				; 33333333H
	test	eax, eax
	je	SHORT $LN19@ntz7_chris
	mov	BYTE PTR tv94[rsp], 1
	jmp	SHORT $LN20@ntz7_chris
$LN19@ntz7_chris:
	mov	BYTE PTR tv94[rsp], 0
$LN20@ntz7_chris:
	movzx	eax, BYTE PTR tv94[rsp]
	test	eax, eax
	jne	SHORT $LN21@ntz7_chris
	mov	DWORD PTR tv129[rsp], 1
	jmp	SHORT $LN22@ntz7_chris
$LN21@ntz7_chris:
	mov	DWORD PTR tv129[rsp], 0
$LN22@ntz7_chris:
	mov	eax, DWORD PTR tv129[rsp]
	shl	eax, 1
	mov	DWORD PTR b1$[rsp], eax

; 158  : 	b0 = unsigned(!bool(y & 0x55555555)) * 1;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 1431655765				; 55555555H
	test	eax, eax
	je	SHORT $LN23@ntz7_chris
	mov	BYTE PTR tv133[rsp], 1
	jmp	SHORT $LN24@ntz7_chris
$LN23@ntz7_chris:
	mov	BYTE PTR tv133[rsp], 0
$LN24@ntz7_chris:
	movzx	eax, BYTE PTR tv133[rsp]
	test	eax, eax
	jne	SHORT $LN25@ntz7_chris
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN26@ntz7_chris
$LN25@ntz7_chris:
	mov	DWORD PTR tv136[rsp], 0
$LN26@ntz7_chris:
	mov	eax, DWORD PTR tv136[rsp]
	mov	DWORD PTR b0$[rsp], eax

; 159  : 	return bz + b4 + b3 + b2 + b1 + b0;

	mov	eax, DWORD PTR b4$[rsp]
	mov	ecx, DWORD PTR bz$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR b3$[rsp]
	add	eax, DWORD PTR b2$[rsp]
	add	eax, DWORD PTR b1$[rsp]
	add	eax, DWORD PTR b0$[rsp]

; 160  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?ntz7_christophe@@YAHI@Z ENDP				; ntz7_christophe
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
y$ = 0
bz$ = 4
b4$ = 8
b3$ = 12
b2$ = 16
b1$ = 20
b0$ = 24
tv67 = 28
tv70 = 32
tv73 = 36
tv76 = 40
tv79 = 44
tv82 = 48
x$ = 80
?ntz7@@YAHI@Z PROC					; ntz7

; 135  : {

$LN15:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H

; 136  : 	unsigned y, bz, b4, b3, b2, b1, b0;
; 137  : 
; 138  : 	y = x & -x;               // Isolate rightmost 1-bit.

	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$[rsp], eax

; 139  : 	bz = y ? 0 : 1;           // 1 if y = 0.

	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@ntz7
	mov	DWORD PTR tv67[rsp], 0
	jmp	SHORT $LN4@ntz7
$LN3@ntz7:
	mov	DWORD PTR tv67[rsp], 1
$LN4@ntz7:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR bz$[rsp], eax

; 140  : 	b4 = (y & 0x0000FFFF) ? 0 : 16;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 65535				; 0000ffffH
	test	eax, eax
	je	SHORT $LN5@ntz7
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN6@ntz7
$LN5@ntz7:
	mov	DWORD PTR tv70[rsp], 16
$LN6@ntz7:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b4$[rsp], eax

; 141  : 	b3 = (y & 0x00FF00FF) ? 0 : 8;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 16711935				; 00ff00ffH
	test	eax, eax
	je	SHORT $LN7@ntz7
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@ntz7
$LN7@ntz7:
	mov	DWORD PTR tv73[rsp], 8
$LN8@ntz7:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR b3$[rsp], eax

; 142  : 	b2 = (y & 0x0F0F0F0F) ? 0 : 4;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 252645135				; 0f0f0f0fH
	test	eax, eax
	je	SHORT $LN9@ntz7
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN10@ntz7
$LN9@ntz7:
	mov	DWORD PTR tv76[rsp], 4
$LN10@ntz7:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR b2$[rsp], eax

; 143  : 	b1 = (y & 0x33333333) ? 0 : 2;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 858993459				; 33333333H
	test	eax, eax
	je	SHORT $LN11@ntz7
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN12@ntz7
$LN11@ntz7:
	mov	DWORD PTR tv79[rsp], 2
$LN12@ntz7:
	mov	eax, DWORD PTR tv79[rsp]
	mov	DWORD PTR b1$[rsp], eax

; 144  : 	b0 = (y & 0x55555555) ? 0 : 1;

	mov	eax, DWORD PTR y$[rsp]
	and	eax, 1431655765				; 55555555H
	test	eax, eax
	je	SHORT $LN13@ntz7
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN14@ntz7
$LN13@ntz7:
	mov	DWORD PTR tv82[rsp], 1
$LN14@ntz7:
	mov	eax, DWORD PTR tv82[rsp]
	mov	DWORD PTR b0$[rsp], eax

; 145  : 	return bz + b4 + b3 + b2 + b1 + b0;

	mov	eax, DWORD PTR b4$[rsp]
	mov	ecx, DWORD PTR bz$[rsp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR b3$[rsp]
	add	eax, DWORD PTR b2$[rsp]
	add	eax, DWORD PTR b1$[rsp]
	add	eax, DWORD PTR b0$[rsp]

; 146  : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?ntz7@@YAHI@Z ENDP					; ntz7
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
n$ = 0
x$ = 32
?ntz6a@@YAHI@Z PROC					; ntz6a

; 108  : {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 109  : 	int n = 32;

	mov	DWORD PTR n$[rsp], 32			; 00000020H
$LN2@ntz6a:

; 110  : 
; 111  : 	while (x != 0) {

	cmp	DWORD PTR x$[rsp], 0
	je	SHORT $LN3@ntz6a

; 112  : 		n = n - 1;

	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax

; 113  : 		x = x + x;

	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 114  : 	}

	jmp	SHORT $LN2@ntz6a
$LN3@ntz6a:

; 115  : 	return n;

	mov	eax, DWORD PTR n$[rsp]

; 116  : }

	add	rsp, 16
	pop	rdi
	ret	0
?ntz6a@@YAHI@Z ENDP					; ntz6a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
n$ = 0
x$ = 32
?ntz6@@YAHI@Z PROC					; ntz6

; 95   : int ntz6(unsigned x) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 96   :    int n;
; 97   : 
; 98   :    x = ~x & (x - 1);

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	dec	ecx
	and	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 99   :    n = 0;                       // n = 32;

	mov	DWORD PTR n$[rsp], 0
$LN2@ntz6:

; 100  :    while(x != 0) {              // while (x != 0) {

	cmp	DWORD PTR x$[rsp], 0
	je	SHORT $LN3@ntz6

; 101  :       n = n + 1;                //    n = n - 1;

	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax

; 102  :       x = x >> 1;               //    x = x + x;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	DWORD PTR x$[rsp], eax

; 103  :    }                            // }

	jmp	SHORT $LN2@ntz6
$LN3@ntz6:

; 104  :    return n;                    // return n;

	mov	eax, DWORD PTR n$[rsp]

; 105  : }

	add	rsp, 16
	pop	rdi
	ret	0
?ntz6@@YAHI@Z ENDP					; ntz6
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?ntz5@@YAHD@Z PROC					; ntz5

; 77   : {

$LN19:
	mov	BYTE PTR [rsp+8], cl
	push	rdi

; 78   : 	if (x & 15) {

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 15
	test	eax, eax
	je	SHORT $LN2@ntz5

; 79   : 		if (x & 3) {

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 3
	test	eax, eax
	je	SHORT $LN4@ntz5

; 80   : 			if (x & 1) return 0;

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@ntz5
	xor	eax, eax
	jmp	SHORT $LN1@ntz5
	jmp	SHORT $LN7@ntz5
$LN6@ntz5:

; 81   : 			else return 1;

	mov	eax, 1
	jmp	SHORT $LN1@ntz5
$LN7@ntz5:

; 82   : 		}

	jmp	SHORT $LN5@ntz5
$LN4@ntz5:

; 83   : 		else if (x & 4) return 2;

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN8@ntz5
	mov	eax, 2
	jmp	SHORT $LN1@ntz5
	jmp	SHORT $LN9@ntz5
$LN8@ntz5:

; 84   : 		else return 3;

	mov	eax, 3
	jmp	SHORT $LN1@ntz5
$LN9@ntz5:
$LN5@ntz5:

; 85   : 	}

	jmp	SHORT $LN3@ntz5
$LN2@ntz5:

; 86   : 	else if (x & 0x30) {

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 48					; 00000030H
	test	eax, eax
	je	SHORT $LN10@ntz5

; 87   : 		if (x & 0x10) return 4;

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN12@ntz5
	mov	eax, 4
	jmp	SHORT $LN1@ntz5
	jmp	SHORT $LN13@ntz5
$LN12@ntz5:

; 88   : 		else return 5;

	mov	eax, 5
	jmp	SHORT $LN1@ntz5
$LN13@ntz5:

; 89   : 	}

	jmp	SHORT $LN11@ntz5
$LN10@ntz5:

; 90   : 	else if (x & 0x40) return 6;

	movsx	eax, BYTE PTR x$[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN14@ntz5
	mov	eax, 6
	jmp	SHORT $LN1@ntz5
	jmp	SHORT $LN15@ntz5
$LN14@ntz5:

; 91   : 	else if (x) return 7;

	movsx	eax, BYTE PTR x$[rsp]
	test	eax, eax
	je	SHORT $LN16@ntz5
	mov	eax, 7
	jmp	SHORT $LN1@ntz5
	jmp	SHORT $LN17@ntz5
$LN16@ntz5:

; 92   : 	else return 8;

	mov	eax, 8
$LN17@ntz5:
$LN15@ntz5:
$LN11@ntz5:
$LN3@ntz5:
$LN1@ntz5:

; 93   : }

	pop	rdi
	ret	0
?ntz5@@YAHD@Z ENDP					; ntz5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
x$ = 32
?ntz4a@@YAHI@Z PROC					; ntz4a

; 62   : int ntz4a(unsigned x) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 63   :    unsigned y;
; 64   :    int n;
; 65   : 
; 66   :    if (x == 0) return 32;

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@ntz4a
	mov	eax, 32					; 00000020H
	jmp	$LN1@ntz4a
$LN2@ntz4a:

; 67   :    n = 31;

	mov	DWORD PTR n$[rsp], 31

; 68   :    y = x <<16;  if (y != 0) {n = n -16;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@ntz4a
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN3@ntz4a:

; 69   :    y = x << 8;  if (y != 0) {n = n - 8;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN4@ntz4a
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN4@ntz4a:

; 70   :    y = x << 4;  if (y != 0) {n = n - 4;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN5@ntz4a
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN5@ntz4a:

; 71   :    y = x << 2;  if (y != 0) {n = n - 2;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN6@ntz4a
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN6@ntz4a:

; 72   :    n = n - ((x << 1) >> 31);

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 1
	shr	eax, 31
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 73   :    return n;

	mov	eax, DWORD PTR n$[rsp]
$LN1@ntz4a:

; 74   : }

	add	rsp, 16
	pop	rdi
	ret	0
?ntz4a@@YAHI@Z ENDP					; ntz4a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
x$ = 32
?ntz4@@YAHI@Z PROC					; ntz4

; 48   : int ntz4(unsigned x) {

$LN9:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 49   :    unsigned y;
; 50   :    int n;
; 51   : 
; 52   :    if (x == 0) return 32;

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@ntz4
	mov	eax, 32					; 00000020H
	jmp	$LN1@ntz4
$LN2@ntz4:

; 53   :    n = 31;

	mov	DWORD PTR n$[rsp], 31

; 54   :    y = x <<16;  if (y != 0) {n = n -16;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@ntz4
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN3@ntz4:

; 55   :    y = x << 8;  if (y != 0) {n = n - 8;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN4@ntz4
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN4@ntz4:

; 56   :    y = x << 4;  if (y != 0) {n = n - 4;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN5@ntz4
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN5@ntz4:

; 57   :    y = x << 2;  if (y != 0) {n = n - 2;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN6@ntz4
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN6@ntz4:

; 58   :    y = x << 1;  if (y != 0) {n = n - 1;}

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 1
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN7@ntz4
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@ntz4:

; 59   :    return n;

	mov	eax, DWORD PTR n$[rsp]
$LN1@ntz4:

; 60   : }

	add	rsp, 16
	pop	rdi
	ret	0
?ntz4@@YAHI@Z ENDP					; ntz4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
n$ = 0
x$ = 32
?ntz3@@YAHI@Z PROC					; ntz3

; 36   : int ntz3(unsigned x) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 37   :    int n;
; 38   : 
; 39   :    if (x == 0) return(32);

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@ntz3
	mov	eax, 32					; 00000020H
	jmp	$LN1@ntz3
$LN2@ntz3:

; 40   :    n = 1;

	mov	DWORD PTR n$[rsp], 1

; 41   :    if ((x & 0x0000FFFF) == 0) {n = n +16; x = x >>16;}

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 65535				; 0000ffffH
	test	eax, eax
	jne	SHORT $LN3@ntz3
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	DWORD PTR x$[rsp], eax
$LN3@ntz3:

; 42   :    if ((x & 0x000000FF) == 0) {n = n + 8; x = x >> 8;}

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	jne	SHORT $LN4@ntz3
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	DWORD PTR x$[rsp], eax
$LN4@ntz3:

; 43   :    if ((x & 0x0000000F) == 0) {n = n + 4; x = x >> 4;}

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 15
	test	eax, eax
	jne	SHORT $LN5@ntz3
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	DWORD PTR x$[rsp], eax
$LN5@ntz3:

; 44   :    if ((x & 0x00000003) == 0) {n = n + 2; x = x >> 2;}

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 3
	test	eax, eax
	jne	SHORT $LN6@ntz3
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	DWORD PTR x$[rsp], eax
$LN6@ntz3:

; 45   :    return n - (x & 1);

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
$LN1@ntz3:

; 46   : }

	add	rsp, 16
	pop	rdi
	ret	0
?ntz3@@YAHI@Z ENDP					; ntz3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 48
?ntz2@@YAHI@Z PROC					; ntz2

; 32   : int ntz2(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 33   :    return pop(~x & (x - 1));

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	dec	ecx
	and	eax, ecx
	mov	ecx, eax
	call	?pop@@YAHI@Z				; pop

; 34   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ntz2@@YAHI@Z ENDP					; ntz2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 48
?ntz1@@YAHI@Z PROC					; ntz1

; 28   : int ntz1(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 29   :    return 32 - nlz(~x & (x-1));

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	dec	ecx
	and	eax, ecx
	mov	ecx, eax
	call	?nlz@@YAHI@Z				; nlz
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx

; 30   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?ntz1@@YAHI@Z ENDP					; ntz1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 16
?pop@@YAHI@Z PROC					; pop

; 19   : int pop(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 20   :    x = x - ((x >> 1) & 0x55555555);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 21   :    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR x$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 22   :    x = (x + (x >> 4)) & 0x0F0F0F0F;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR x$[rsp], eax

; 23   :    x = x + (x << 8);

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 24   :    x = x + (x << 16);

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 25   :    return x >> 24;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 24

; 26   : }

	pop	rdi
	ret	0
?pop@@YAHI@Z ENDP					; pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_lsb.cpp
_TEXT	SEGMENT
x$ = 48
?nlz@@YAHI@Z PROC					; nlz

; 8    : int nlz(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 9    :    int pop(unsigned x);
; 10   : 
; 11   :    x = x | (x >> 1);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 12   :    x = x | (x >> 2);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 13   :    x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 14   :    x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 15   :    x = x | (x >>16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 16   :    return pop(~x);

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, eax
	call	?pop@@YAHI@Z				; pop

; 17   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?nlz@@YAHI@Z ENDP					; nlz
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
