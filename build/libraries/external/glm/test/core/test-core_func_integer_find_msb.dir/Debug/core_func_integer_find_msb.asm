; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD

PUBLIC	?errors@@3HA					; errors
_BSS	SEGMENT
?errors@@3HA DD	01H DUP (?)				; errors
_BSS	ENDS
CONST	SEGMENT
$SG5547	DB	'Error for x = %08x, got %d', 0aH, 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	?pop@@YAHI@Z					; pop
PUBLIC	?nlz1@@YAHI@Z					; nlz1
PUBLIC	?nlz1a@@YAHI@Z					; nlz1a
PUBLIC	?nlz2@@YAHI@Z					; nlz2
PUBLIC	?nlz2a@@YAHI@Z					; nlz2a
PUBLIC	?nlz3@@YAHH@Z					; nlz3
PUBLIC	?nlz4@@YAHI@Z					; nlz4
PUBLIC	?nlz5@@YAHI@Z					; nlz5
PUBLIC	?nlz6@@YAHI@Z					; nlz6
PUBLIC	?nlz7@@YAHI@Z					; nlz7
PUBLIC	?nlz8@@YAHI@Z					; nlz8
PUBLIC	?nlz9@@YAHI@Z					; nlz9
PUBLIC	?nlz10@@YAHI@Z					; nlz10
PUBLIC	?nlz10a@@YAHI@Z					; nlz10a
PUBLIC	?nlz10b@@YAHI@Z					; nlz10b
PUBLIC	?error@@YAXHH@Z					; error
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@3f000000
PUBLIC	__real@3fe0000000000000
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$?pop@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?pop@@YAHI@Z
$pdata$?nlz1@@YAHI@Z DD imagerel $LN9
	DD	imagerel $LN9+180
	DD	imagerel $unwind$?nlz1@@YAHI@Z
$pdata$?nlz1a@@YAHI@Z DD imagerel $LN8
	DD	imagerel $LN8+190
	DD	imagerel $unwind$?nlz1a@@YAHI@Z
$pdata$?nlz2@@YAHI@Z DD imagerel $LN8
	DD	imagerel $LN8+195
	DD	imagerel $unwind$?nlz2@@YAHI@Z
$pdata$?nlz2a@@YAHI@Z DD imagerel $LN7
	DD	imagerel $LN7+105
	DD	imagerel $unwind$?nlz2a@@YAHI@Z
$pdata$?nlz3@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$?nlz3@@YAHH@Z
$pdata$?nlz4@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+283
	DD	imagerel $unwind$?nlz4@@YAHI@Z
$pdata$?nlz5@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?nlz5@@YAHI@Z
$pdata$?nlz6@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$?nlz6@@YAHI@Z
$pdata$?nlz7@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$?nlz7@@YAHI@Z
$pdata$?nlz8@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?nlz8@@YAHI@Z
$pdata$?nlz9@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?nlz9@@YAHI@Z
$pdata$?nlz10@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$?nlz10@@YAHI@Z
$pdata$?nlz10a@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$?nlz10a@@YAHI@Z
$pdata$?nlz10b@@YAHI@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?nlz10b@@YAHI@Z
$pdata$?error@@YAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?error@@YAXHH@Z
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+6
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ?table@?1??nlz10b@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??nlz10b@@YAHI@Z@4PADA DB 020H			; `nlz10b'::`2'::table
	DB	014H
	DB	013H
	DB	063H
	DB	063H
	DB	012H
	DB	063H
	DB	07H
	DB	0aH
	DB	011H
	DB	063H
	DB	063H
	DB	0eH
	DB	063H
	DB	06H
	DB	063H
	DB	063H
	DB	09H
	DB	063H
	DB	010H
	DB	063H
	DB	063H
	DB	01H
	DB	01aH
	DB	063H
	DB	0dH
	DB	063H
	DB	063H
	DB	018H
	DB	05H
	DB	063H
	DB	063H
	DB	063H
	DB	015H
	DB	063H
	DB	08H
	DB	0bH
	DB	063H
	DB	0fH
	DB	063H
	DB	063H
	DB	063H
	DB	063H
	DB	02H
	DB	01bH
	DB	00H
	DB	019H
	DB	063H
	DB	016H
	DB	063H
	DB	0cH
	DB	063H
	DB	063H
	DB	03H
	DB	01cH
	DB	063H
	DB	017H
	DB	063H
	DB	04H
	DB	01dH
	DB	063H
	DB	063H
	DB	01eH
	DB	01fH
_DATA	ENDS
;	COMDAT ?table@?1??nlz10a@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??nlz10a@@YAHI@Z@4PADA DB 020H			; `nlz10a'::`2'::table
	DB	01fH
	DB	063H
	DB	010H
	DB	063H
	DB	01eH
	DB	03H
	DB	063H
	DB	0fH
	DB	063H
	DB	063H
	DB	063H
	DB	01dH
	DB	0aH
	DB	02H
	DB	063H
	DB	063H
	DB	063H
	DB	0cH
	DB	0eH
	DB	015H
	DB	063H
	DB	013H
	DB	063H
	DB	063H
	DB	01cH
	DB	063H
	DB	019H
	DB	063H
	DB	09H
	DB	01H
	DB	063H
	DB	011H
	DB	063H
	DB	04H
	DB	063H
	DB	063H
	DB	063H
	DB	0bH
	DB	063H
	DB	0dH
	DB	016H
	DB	014H
	DB	063H
	DB	01aH
	DB	063H
	DB	063H
	DB	012H
	DB	05H
	DB	063H
	DB	063H
	DB	017H
	DB	063H
	DB	01bH
	DB	063H
	DB	06H
	DB	063H
	DB	018H
	DB	07H
	DB	063H
	DB	08H
	DB	063H
	DB	00H
	DB	063H
_DATA	ENDS
;	COMDAT ?table@?1??nlz10@@YAHI@Z@4PADA
_DATA	SEGMENT
?table@?1??nlz10@@YAHI@Z@4PADA DB 020H			; `nlz10'::`2'::table
	DB	01fH
	DB	063H
	DB	010H
	DB	063H
	DB	01eH
	DB	03H
	DB	063H
	DB	0fH
	DB	063H
	DB	063H
	DB	063H
	DB	01dH
	DB	0aH
	DB	02H
	DB	063H
	DB	063H
	DB	063H
	DB	0cH
	DB	0eH
	DB	015H
	DB	063H
	DB	013H
	DB	063H
	DB	063H
	DB	01cH
	DB	063H
	DB	019H
	DB	063H
	DB	09H
	DB	01H
	DB	063H
	DB	011H
	DB	063H
	DB	04H
	DB	063H
	DB	063H
	DB	063H
	DB	0bH
	DB	063H
	DB	0dH
	DB	016H
	DB	014H
	DB	063H
	DB	01aH
	DB	063H
	DB	063H
	DB	012H
	DB	05H
	DB	063H
	DB	063H
	DB	017H
	DB	063H
	DB	01bH
	DB	063H
	DB	06H
	DB	063H
	DB	018H
	DB	07H
	DB	063H
	DB	08H
	DB	063H
	DB	00H
	DB	063H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?nlz7@@YAHI@Z
	DD	028H
	DD	084H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?nlz6@@YAHI@Z
	DD	028H
	DD	078H
voltbl	ENDS
CONST	SEGMENT
?nlz6@@YAHI@Z$rtcName$0 DB 024H				; nlz6
	DB	053H
	DB	031H
	DB	00H
?nlz6@@YAHI@Z$rtcVarDesc DD 028H			; nlz6
	DD	08H
	DQ	FLAT:?nlz6@@YAHI@Z$rtcName$0
	ORG $+48
?nlz6@@YAHI@Z$rtcFrameData DD 01H			; nlz6
	DD	00H
	DQ	FLAT:?nlz6@@YAHI@Z$rtcVarDesc
?nlz7@@YAHI@Z$rtcName$0 DB 024H				; nlz7
	DB	053H
	DB	032H
	DB	00H
?nlz8@@YAHI@Z$rtcName$0 DB 024H				; nlz8
	DB	053H
	DB	033H
	DB	00H
?nlz9@@YAHI@Z$rtcName$0 DB 024H				; nlz9
	DB	053H
	DB	034H
	DB	00H
	ORG $+4
?nlz7@@YAHI@Z$rtcVarDesc DD 028H			; nlz7
	DD	08H
	DQ	FLAT:?nlz7@@YAHI@Z$rtcName$0
	ORG $+48
?nlz7@@YAHI@Z$rtcFrameData DD 01H			; nlz7
	DD	00H
	DQ	FLAT:?nlz7@@YAHI@Z$rtcVarDesc
?nlz8@@YAHI@Z$rtcVarDesc DD 024H			; nlz8
	DD	04H
	DQ	FLAT:?nlz8@@YAHI@Z$rtcName$0
	ORG $+48
?nlz8@@YAHI@Z$rtcFrameData DD 01H			; nlz8
	DD	00H
	DQ	FLAT:?nlz8@@YAHI@Z$rtcVarDesc
?nlz9@@YAHI@Z$rtcVarDesc DD 024H			; nlz9
	DD	04H
	DQ	FLAT:?nlz9@@YAHI@Z$rtcName$0
	ORG $+48
?nlz9@@YAHI@Z$rtcFrameData DD 01H			; nlz9
	DD	00H
	DQ	FLAT:?nlz9@@YAHI@Z$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$?pop@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?nlz1@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?nlz1a@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?nlz2@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?nlz2a@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?nlz3@@YAHH@Z DD 020901H
	DD	070051209H
$unwind$?nlz4@@YAHI@Z DD 020901H
	DD	070051209H
$unwind$?nlz5@@YAHI@Z DD 020901H
	DD	070053209H
$unwind$?nlz6@@YAHI@Z DD 022d19H
	DD	070059209H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?nlz7@@YAHI@Z DD 022d19H
	DD	070059209H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?nlz8@@YAHI@Z DD 021e01H
	DD	070057209H
$unwind$?nlz9@@YAHI@Z DD 021e01H
	DD	070057209H
$unwind$?nlz10@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?nlz10a@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?nlz10b@@YAHI@Z DD 010501H
	DD	07005H
$unwind$?error@@YAXHH@Z DD 020d01H
	DD	07009320dH
$unwind$main DD	010201H
	DD	07002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022f01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 021901H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
main	PROC

; 303  : {

$LN3:
	push	rdi

; 304  : #	ifdef NDEBUG
; 305  : 
; 306  : 	int i, n;
; 307  : 	static unsigned test[] = {0,32, 1,31, 2,30, 3,30, 4,29, 5,29, 6,29,
; 308  : 		7,29, 8,28, 9,28, 16,27, 32,26, 64,25, 128,24, 255,24, 256,23,
; 309  : 		512,22, 1024,21, 2048,20, 4096,19, 8192,18, 16384,17, 32768,16,
; 310  : 		65536,15, 0x20000,14, 0x40000,13, 0x80000,12, 0x100000,11,
; 311  : 		0x200000,10, 0x400000,9, 0x800000,8, 0x1000000,7, 0x2000000,6,
; 312  : 		0x4000000,5, 0x8000000,4, 0x0FFFFFFF,4, 0x10000000,3,
; 313  : 		0x3000FFFF,2, 0x50003333,1, 0x7FFFFFFF,1, 0x80000000,0,
; 314  : 		0xFFFFFFFF,0};
; 315  : 	std::size_t const Count = 1000;
; 316  : 
; 317  : 	n = sizeof(test)/4;
; 318  : 
; 319  : 	std::clock_t TimestampBeg = 0;
; 320  : 	std::clock_t TimestampEnd = 0;
; 321  : 
; 322  : 	TimestampBeg = std::clock();
; 323  : 	for (std::size_t k = 0; k < Count; ++k)
; 324  : 	for (i = 0; i < n; i += 2) {
; 325  : 		if (nlz1(test[i]) != test[i+1]) error(test[i], nlz1(test[i]));}
; 326  : 	TimestampEnd = std::clock();
; 327  : 
; 328  : 	printf("nlz1: %d clocks\n", TimestampEnd - TimestampBeg);
; 329  : 
; 330  : 	TimestampBeg = std::clock();
; 331  : 	for (std::size_t k = 0; k < Count; ++k)
; 332  : 	for (i = 0; i < n; i += 2) {
; 333  : 		if (nlz1a(test[i]) != test[i+1]) error(test[i], nlz1a(test[i]));}
; 334  : 	TimestampEnd = std::clock();
; 335  : 
; 336  : 	printf("nlz1a: %d clocks\n", TimestampEnd - TimestampBeg);
; 337  : 
; 338  : 	TimestampBeg = std::clock();
; 339  : 	for (std::size_t k = 0; k < Count; ++k)
; 340  : 	for (i = 0; i < n; i += 2) {
; 341  : 		if (nlz2(test[i]) != test[i+1]) error(test[i], nlz2(test[i]));}
; 342  : 	TimestampEnd = std::clock();
; 343  : 
; 344  : 	printf("nlz2: %d clocks\n", TimestampEnd - TimestampBeg);
; 345  : 
; 346  : 	TimestampBeg = std::clock();
; 347  : 	for (std::size_t k = 0; k < Count; ++k)
; 348  : 	for (i = 0; i < n; i += 2) {
; 349  : 		if (nlz2a(test[i]) != test[i+1]) error(test[i], nlz2a(test[i]));}
; 350  : 	TimestampEnd = std::clock();
; 351  : 
; 352  : 	printf("nlz2a: %d clocks\n", TimestampEnd - TimestampBeg);
; 353  : 
; 354  : 	TimestampBeg = std::clock();
; 355  : 	for (std::size_t k = 0; k < Count; ++k)
; 356  : 	for (i = 0; i < n; i += 2) {
; 357  : 		if (nlz3(test[i]) != test[i+1]) error(test[i], nlz3(test[i]));}
; 358  : 	TimestampEnd = std::clock();
; 359  : 
; 360  : 	printf("nlz3: %d clocks\n", TimestampEnd - TimestampBeg);
; 361  : 
; 362  : 	TimestampBeg = std::clock();
; 363  : 	for (std::size_t k = 0; k < Count; ++k)
; 364  : 	for (i = 0; i < n; i += 2) {
; 365  : 		if (nlz4(test[i]) != test[i+1]) error(test[i], nlz4(test[i]));}
; 366  : 	TimestampEnd = std::clock();
; 367  : 
; 368  : 	printf("nlz4: %d clocks\n", TimestampEnd - TimestampBeg);
; 369  : 
; 370  : 	TimestampBeg = std::clock();
; 371  : 	for (std::size_t k = 0; k < Count; ++k)
; 372  : 	for (i = 0; i < n; i += 2) {
; 373  : 		if (nlz5(test[i]) != test[i+1]) error(test[i], nlz5(test[i]));}
; 374  : 	TimestampEnd = std::clock();
; 375  : 
; 376  : 	printf("nlz5: %d clocks\n", TimestampEnd - TimestampBeg);
; 377  : 
; 378  : 	TimestampBeg = std::clock();
; 379  : 	for (std::size_t k = 0; k < Count; ++k)
; 380  : 	for (i = 0; i < n; i += 2) {
; 381  : 		if (nlz6(test[i]) != test[i+1]) error(test[i], nlz6(test[i]));}
; 382  : 	TimestampEnd = std::clock();
; 383  : 
; 384  : 	printf("nlz6: %d clocks\n", TimestampEnd - TimestampBeg);
; 385  : 
; 386  : 	TimestampBeg = std::clock();
; 387  : 	for (std::size_t k = 0; k < Count; ++k)
; 388  : 	for (i = 0; i < n; i += 2) {
; 389  : 		if (nlz7(test[i]) != test[i+1]) error(test[i], nlz7(test[i]));}
; 390  : 	TimestampEnd = std::clock();
; 391  : 
; 392  : 	printf("nlz7: %d clocks\n", TimestampEnd - TimestampBeg);
; 393  : 
; 394  : 	TimestampBeg = std::clock();
; 395  : 	for (std::size_t k = 0; k < Count; ++k)
; 396  : 	for (i = 0; i < n; i += 2) {
; 397  : 		if (nlz8(test[i]) != test[i+1]) error(test[i], nlz8(test[i]));}
; 398  : 	TimestampEnd = std::clock();
; 399  : 
; 400  : 	printf("nlz8: %d clocks\n", TimestampEnd - TimestampBeg);
; 401  : 
; 402  : 	TimestampBeg = std::clock();
; 403  : 	for (std::size_t k = 0; k < Count; ++k)
; 404  : 	for (i = 0; i < n; i += 2) {
; 405  : 		if (nlz9(test[i]) != test[i+1]) error(test[i], nlz9(test[i]));}
; 406  : 	TimestampEnd = std::clock();
; 407  : 
; 408  : 	printf("nlz9: %d clocks\n", TimestampEnd - TimestampBeg);
; 409  : 
; 410  : 	TimestampBeg = std::clock();
; 411  : 	for (std::size_t k = 0; k < Count; ++k)
; 412  : 	for (i = 0; i < n; i += 2) {
; 413  : 		if (nlz10(test[i]) != test[i+1]) error(test[i], nlz10(test[i]));}
; 414  : 	TimestampEnd = std::clock();
; 415  : 
; 416  : 	printf("nlz10: %d clocks\n", TimestampEnd - TimestampBeg);
; 417  : 
; 418  : 	TimestampBeg = std::clock();
; 419  : 	for (std::size_t k = 0; k < Count; ++k)
; 420  : 	for (i = 0; i < n; i += 2) {
; 421  : 		if (nlz10a(test[i]) != test[i+1]) error(test[i], nlz10a(test[i]));}
; 422  : 	TimestampEnd = std::clock();
; 423  : 
; 424  : 	printf("nlz10a: %d clocks\n", TimestampEnd - TimestampBeg);
; 425  : 
; 426  : 	TimestampBeg = std::clock();
; 427  : 	for (std::size_t k = 0; k < Count; ++k)
; 428  : 	for (i = 0; i < n; i += 2) {
; 429  : 		if (nlz10b(test[i]) != test[i+1]) error(test[i], nlz10b(test[i]));}
; 430  : 	TimestampEnd = std::clock();
; 431  : 
; 432  : 	printf("nlz10b: %d clocks\n", TimestampEnd - TimestampBeg);
; 433  : 
; 434  : 	if (errors == 0)
; 435  : 		printf("Passed all %d cases.\n", sizeof(test)/8);
; 436  : 
; 437  : #	endif//NDEBUG
; 438  : }

	xor	eax, eax
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 48
y$ = 56
?error@@YAXHH@Z PROC					; error

; 297  : void error(int x, int y) {

$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 298  :    errors = errors + 1;

	mov	eax, DWORD PTR ?errors@@3HA		; errors
	inc	eax
	mov	DWORD PTR ?errors@@3HA, eax		; errors

; 299  :    printf("Error for x = %08x, got %d\n", x, y);

	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, OFFSET FLAT:$SG5547
	call	printf

; 300  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?error@@YAXHH@Z ENDP					; error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 16
?nlz10b@@YAHI@Z PROC					; nlz10b

; 276  : int nlz10b(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 277  : 
; 278  :    static char table[64] =
; 279  :      {32,20,19, u, u,18, u, 7,  10,17, u, u,14, u, 6, u,
; 280  :        u, 9, u,16, u, u, 1,26,   u,13, u, u,24, 5, u, u,
; 281  :        u,21, u, 8,11, u,15, u,   u, u, u, 2,27, 0,25, u,
; 282  :       22, u,12, u, u, 3,28, u,  23, u, 4,29, u, u,30,31};
; 283  : 
; 284  :    x = x | (x >> 1);    // Propagate leftmost

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 285  :    x = x | (x >> 2);    // 1-bit to the right.

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 286  :    x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 287  :    x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 288  :    x = x & ~(x >> 16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	not	eax
	mov	ecx, DWORD PTR x$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 289  :    x = x*0xFD7049FF;    // Activate this line or the following 3.

	imul	eax, DWORD PTR x$[rsp], -42972673	; fd7049ffH
	mov	DWORD PTR x$[rsp], eax

; 290  : // x = (x << 9) - x;    // Multiply by 511.
; 291  : // x = (x << 11) - x;   // Multiply by 2047.
; 292  : // x = (x << 14) - x;   // Multiply by 16383.
; 293  :    return table[x >> 26];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 26
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??nlz10b@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 294  : }

	pop	rdi
	ret	0
?nlz10b@@YAHI@Z ENDP					; nlz10b
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 16
?nlz10a@@YAHI@Z PROC					; nlz10a

; 252  : int nlz10a(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 253  : 
; 254  :    static char table[64] =
; 255  :      {32,31, u,16, u,30, 3, u,  15, u, u, u,29,10, 2, u,
; 256  :        u, u,12,14,21, u,19, u,   u,28, u,25, u, 9, 1, u,
; 257  :       17, u, 4, u, u, u,11, u,  13,22,20, u,26, u, u,18,
; 258  :        5, u, u,23, u,27, u, 6,   u,24, 7, u, 8, u, 0, u};
; 259  : 
; 260  :    x = x | (x >> 1);    // Propagate leftmost

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 261  :    x = x | (x >> 2);    // 1-bit to the right.

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 262  :    x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 263  :    x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 264  :    x = x | (x >> 16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 265  :    x = (x << 3) - x;    // Multiply by 7.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 3
	sub	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 266  :    x = (x << 8) - x;    // Multiply by 255.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	sub	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 267  :    x = (x << 8) - x;    // Again.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	sub	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 268  :    x = (x << 8) - x;    // Again.

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	sub	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR x$[rsp], eax

; 269  :    return table[x >> 26];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 26
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??nlz10a@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 270  : }

	pop	rdi
	ret	0
?nlz10a@@YAHI@Z ENDP					; nlz10a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 16
?nlz10@@YAHI@Z PROC					; nlz10

; 232  : int nlz10(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 233  : 
; 234  :    static char table[64] =
; 235  :      {32,31, u,16, u,30, 3, u,  15, u, u, u,29,10, 2, u,
; 236  :        u, u,12,14,21, u,19, u,   u,28, u,25, u, 9, 1, u,
; 237  :       17, u, 4, u, u, u,11, u,  13,22,20, u,26, u, u,18,
; 238  :        5, u, u,23, u,27, u, 6,   u,24, 7, u, 8, u, 0, u};
; 239  : 
; 240  :    x = x | (x >> 1);    // Propagate leftmost

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 241  :    x = x | (x >> 2);    // 1-bit to the right.

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 242  :    x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 243  :    x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 244  :    x = x | (x >>16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 245  :    x = x*0x06EB14F9;    // Multiplier is 7*255**3.

	imul	eax, DWORD PTR x$[rsp], 116069625	; 06eb14f9H
	mov	DWORD PTR x$[rsp], eax

; 246  :    return table[x >> 26];

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 26
	mov	eax, eax
	lea	rcx, OFFSET FLAT:?table@?1??nlz10@@YAHI@Z@4PADA
	movsx	eax, BYTE PTR [rcx+rax]

; 247  : }

	pop	rdi
	ret	0
?nlz10@@YAHI@Z ENDP					; nlz10
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
$S4$ = 36
n$ = 52
k$ = 80
?nlz9@@YAHI@Z PROC					; nlz9

; 199  : int nlz9(unsigned k) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 200  :    union {
; 201  :       unsigned asInt;
; 202  :       float asFloat;
; 203  :    };
; 204  :    int n;
; 205  : 
; 206  :    k = k & ~(k >> 1);           /* Fix problem with rounding. */

	mov	eax, DWORD PTR k$[rsp]
	shr	eax, 1
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax

; 207  :    asFloat = (float)k;

	mov	eax, DWORD PTR k$[rsp]
	cvtsi2ss xmm0, rax
	movss	DWORD PTR $S4$[rsp], xmm0

; 208  :    n = 158 - (asInt >> 23);

	mov	eax, DWORD PTR $S4$[rsp]
	shr	eax, 23
	mov	ecx, 158				; 0000009eH
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 209  :    n = (n & 31) + (n >> 6);     /* Fix problem with k = 0. */

	mov	eax, DWORD PTR n$[rsp]
	and	eax, 31
	mov	ecx, DWORD PTR n$[rsp]
	sar	ecx, 6
	add	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 210  :    return n;

	mov	eax, DWORD PTR n$[rsp]

; 211  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?nlz9@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?nlz9@@YAHI@Z ENDP					; nlz9
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
$S3$ = 36
n$ = 52
k$ = 80
?nlz8@@YAHI@Z PROC					; nlz8

; 178  : int nlz8(unsigned k) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 64					; 00000040H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+80]

; 179  :    union {
; 180  :       unsigned asInt;
; 181  :       float asFloat;
; 182  :    };
; 183  :    int n;
; 184  : 
; 185  :    k = k & ~(k >> 1);           /* Fix problem with rounding. */

	mov	eax, DWORD PTR k$[rsp]
	shr	eax, 1
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax

; 186  :    asFloat = (float)k + 0.5f;

	mov	eax, DWORD PTR k$[rsp]
	cvtsi2ss xmm0, rax
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR $S3$[rsp], xmm0

; 187  :    n = 158 - (asInt >> 23);

	mov	eax, DWORD PTR $S3$[rsp]
	shr	eax, 23
	mov	ecx, 158				; 0000009eH
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 188  :    return n;

	mov	eax, DWORD PTR n$[rsp]

; 189  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?nlz8@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
?nlz8@@YAHI@Z ENDP					; nlz8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
$S2$ = 40
n$ = 52
__$ArrayPad$ = 64
k$ = 96
?nlz7@@YAHI@Z PROC					; nlz7

; 156  : int nlz7(unsigned k) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+96]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 157  :    union {
; 158  :       unsigned asInt[2];
; 159  :       double asDouble;
; 160  :    };
; 161  :    int n;
; 162  : 
; 163  :    asDouble = (double)k;

	mov	eax, DWORD PTR k$[rsp]
	cvtsi2sd xmm0, rax
	movsd	QWORD PTR $S2$[rsp], xmm0

; 164  :    n = 1054 - (asInt[LE] >> 20);

	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR $S2$[rsp+rax]
	shr	eax, 20
	mov	ecx, 1054				; 0000041eH
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 165  :    n = (n & 31) + (n >> 9);

	mov	eax, DWORD PTR n$[rsp]
	and	eax, 31
	mov	ecx, DWORD PTR n$[rsp]
	sar	ecx, 9
	add	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 166  :    return n;

	mov	eax, DWORD PTR n$[rsp]

; 167  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?nlz7@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?nlz7@@YAHI@Z ENDP					; nlz7
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
$S1$ = 40
n$ = 52
__$ArrayPad$ = 64
k$ = 96
?nlz6@@YAHI@Z PROC					; nlz6

; 144  : int nlz6(unsigned k) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+96]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 145  :    union {
; 146  :       unsigned asInt[2];
; 147  :       double asDouble;
; 148  :    };
; 149  :    int n;
; 150  : 
; 151  :    asDouble = (double)k + 0.5;

	mov	eax, DWORD PTR k$[rsp]
	cvtsi2sd xmm0, rax
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR $S1$[rsp], xmm0

; 152  :    n = 1054 - (asInt[LE] >> 20);

	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR $S1$[rsp+rax]
	shr	eax, 20
	mov	ecx, 1054				; 0000041eH
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 153  :    return n;

	mov	eax, DWORD PTR n$[rsp]

; 154  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:?nlz6@@YAHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?nlz6@@YAHI@Z ENDP					; nlz6
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 48
?nlz5@@YAHI@Z PROC					; nlz5

; 117  : int nlz5(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H

; 118  :    int pop(unsigned x);
; 119  : 
; 120  :    x = x | (x >> 1);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 121  :    x = x | (x >> 2);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 122  :    x = x | (x >> 4);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 123  :    x = x | (x >> 8);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 124  :    x = x | (x >>16);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 125  :    return pop(~x);

	mov	eax, DWORD PTR x$[rsp]
	not	eax
	mov	ecx, eax
	call	?pop@@YAHI@Z				; pop

; 126  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?nlz5@@YAHI@Z ENDP					; nlz5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
y$ = 0
m$ = 4
n$ = 8
x$ = 32
?nlz4@@YAHI@Z PROC					; nlz4

; 89   : int nlz4(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 90   :    int y, m, n;
; 91   : 
; 92   :    y = -(x >> 16);      // If left half of x is 0,

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	neg	eax
	mov	DWORD PTR y$[rsp], eax

; 93   :    m = (y >> 16) & 16;  // set n = 16.  If left half

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 16
	mov	DWORD PTR m$[rsp], eax

; 94   :    n = 16 - m;          // is nonzero, set n = 0 and

	mov	eax, 16
	sub	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR n$[rsp], eax

; 95   :    x = x >> m;          // shift x right 16.

	mov	eax, DWORD PTR m$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, cl
	mov	DWORD PTR x$[rsp], eax

; 96   :                         // Now x is of the form 0000xxxx.
; 97   :    y = x - 0x100;       // If positions 8-15 are 0,

	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 256				; 00000100H
	mov	DWORD PTR y$[rsp], eax

; 98   :    m = (y >> 16) & 8;   // add 8 to n and shift x left 8.

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 8
	mov	DWORD PTR m$[rsp], eax

; 99   :    n = n + m;

	mov	eax, DWORD PTR m$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 100  :    x = x << m;

	mov	eax, DWORD PTR m$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, cl
	mov	DWORD PTR x$[rsp], eax

; 101  : 
; 102  :    y = x - 0x1000;      // If positions 12-15 are 0,

	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 4096				; 00001000H
	mov	DWORD PTR y$[rsp], eax

; 103  :    m = (y >> 16) & 4;   // add 4 to n and shift x left 4.

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 4
	mov	DWORD PTR m$[rsp], eax

; 104  :    n = n + m;

	mov	eax, DWORD PTR m$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 105  :    x = x << m;

	mov	eax, DWORD PTR m$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, cl
	mov	DWORD PTR x$[rsp], eax

; 106  : 
; 107  :    y = x - 0x4000;      // If positions 14-15 are 0,

	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 16384				; 00004000H
	mov	DWORD PTR y$[rsp], eax

; 108  :    m = (y >> 16) & 2;   // add 2 to n and shift x left 2.

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 2
	mov	DWORD PTR m$[rsp], eax

; 109  :    n = n + m;

	mov	eax, DWORD PTR m$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 110  :    x = x << m;

	mov	eax, DWORD PTR m$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, cl
	mov	DWORD PTR x$[rsp], eax

; 111  : 
; 112  :    y = x >> 14;         // Set y = 0, 1, 2, or 3.

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 14
	mov	DWORD PTR y$[rsp], eax

; 113  :    m = y & ~(y >> 1);   // Set m = 0, 1, 2, or 2 resp.

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 1
	not	eax
	mov	ecx, DWORD PTR y$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rsp], eax

; 114  :    return n + 2 - m;

	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	sub	eax, DWORD PTR m$[rsp]

; 115  : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz4@@YAHI@Z ENDP					; nlz4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
x$ = 32
?nlz3@@YAHH@Z PROC					; nlz3

; 76   : int nlz3(int x) {

$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 77   :    int y, n;
; 78   : 
; 79   :    n = 0;

	mov	DWORD PTR n$[rsp], 0

; 80   :    y = x;

	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR y$[rsp], eax
$L$6:

; 81   : L: if (x < 0) return n;

	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@nlz3
	mov	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@nlz3
$LN2@nlz3:

; 82   :    if (y == 0) return 32 - n;

	cmp	DWORD PTR y$[rsp], 0
	jne	SHORT $LN3@nlz3
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR n$[rsp]
	jmp	SHORT $LN1@nlz3
$LN3@nlz3:

; 83   :    n = n + 1;

	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax

; 84   :    x = x << 1;

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 1
	mov	DWORD PTR x$[rsp], eax

; 85   :    y = y >> 1;

	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 1
	mov	DWORD PTR y$[rsp], eax

; 86   :    goto L;

	jmp	SHORT $L$6
$LN1@nlz3:

; 87   : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz3@@YAHH@Z ENDP					; nlz3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
c$ = 8
x$ = 32
?nlz2a@@YAHI@Z PROC					; nlz2a

; 63   : int nlz2a(unsigned x) {

$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 64   :    unsigned y;
; 65   :    int n, c;
; 66   : 
; 67   :    n = 32;

	mov	DWORD PTR n$[rsp], 32			; 00000020H

; 68   :    c = 16;

	mov	DWORD PTR c$[rsp], 16
$LN4@nlz2a:

; 69   :    do {
; 70   :       y = x >> c;  if (y != 0) {n = n - c;  x = y;}

	mov	eax, DWORD PTR c$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, cl
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN5@nlz2a
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN5@nlz2a:

; 71   :       c = c >> 1;

	mov	eax, DWORD PTR c$[rsp]
	sar	eax, 1
	mov	DWORD PTR c$[rsp], eax

; 72   :    } while (c != 0);

	cmp	DWORD PTR c$[rsp], 0
	jne	SHORT $LN4@nlz2a

; 73   :    return n - x;

	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx

; 74   : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz2a@@YAHI@Z ENDP					; nlz2a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
y$ = 0
n$ = 4
x$ = 32
?nlz2@@YAHI@Z PROC					; nlz2

; 48   : int nlz2(unsigned x) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 49   :    unsigned y;
; 50   :    int n;
; 51   : 
; 52   :    n = 32;

	mov	DWORD PTR n$[rsp], 32			; 00000020H

; 53   :    y = x >>16;  if (y != 0) {n = n -16;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN2@nlz2
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN2@nlz2:

; 54   :    y = x >> 8;  if (y != 0) {n = n - 8;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 8
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN3@nlz2
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN3@nlz2:

; 55   :    y = x >> 4;  if (y != 0) {n = n - 4;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN4@nlz2
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN4@nlz2:

; 56   :    y = x >> 2;  if (y != 0) {n = n - 2;  x = y;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 2
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN5@nlz2
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
$LN5@nlz2:

; 57   :    y = x >> 1;  if (y != 0) return n - 2;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	mov	DWORD PTR y$[rsp], eax
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN6@nlz2
	mov	eax, DWORD PTR n$[rsp]
	sub	eax, 2
	jmp	SHORT $LN1@nlz2
$LN6@nlz2:

; 58   :    return n - x;

	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
$LN1@nlz2:

; 59   : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz2@@YAHI@Z ENDP					; nlz2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
n$ = 0
x$ = 32
?nlz1a@@YAHI@Z PROC					; nlz1a

; 33   : int nlz1a(unsigned x) {

$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 34   :    int n;
; 35   : 
; 36   : /* if (x == 0) return(32); */
; 37   :    if ((int)x <= 0) return (~x >> 26) & 32;

	cmp	DWORD PTR x$[rsp], 0
	jg	SHORT $LN2@nlz1a
	mov	eax, DWORD PTR x$[rsp]
	not	eax
	shr	eax, 26
	and	eax, 32					; 00000020H
	jmp	$LN1@nlz1a
$LN2@nlz1a:

; 38   :    n = 1;

	mov	DWORD PTR n$[rsp], 1

; 39   :    if ((x >> 16) == 0) {n = n +16; x = x <<16;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 16
	test	eax, eax
	jne	SHORT $LN3@nlz1a
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR x$[rsp], eax
$LN3@nlz1a:

; 40   :    if ((x >> 24) == 0) {n = n + 8; x = x << 8;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 24
	test	eax, eax
	jne	SHORT $LN4@nlz1a
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR x$[rsp], eax
$LN4@nlz1a:

; 41   :    if ((x >> 28) == 0) {n = n + 4; x = x << 4;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 28
	test	eax, eax
	jne	SHORT $LN5@nlz1a
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR x$[rsp], eax
$LN5@nlz1a:

; 42   :    if ((x >> 30) == 0) {n = n + 2; x = x << 2;}

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 30
	test	eax, eax
	jne	SHORT $LN6@nlz1a
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR x$[rsp], eax
$LN6@nlz1a:

; 43   :    n = n - (x >> 31);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 31
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax

; 44   :    return n;

	mov	eax, DWORD PTR n$[rsp]
$LN1@nlz1a:

; 45   : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz1a@@YAHI@Z ENDP					; nlz1a
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
n$ = 0
x$ = 32
?nlz1@@YAHI@Z PROC					; nlz1

; 20   : int nlz1(unsigned x) {

$LN9:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16

; 21   :    int n;
; 22   : 
; 23   :    if (x == 0) return(32);

	cmp	DWORD PTR x$[rsp], 0
	jne	SHORT $LN2@nlz1
	mov	eax, 32					; 00000020H
	jmp	$LN1@nlz1
$LN2@nlz1:

; 24   :    n = 0;

	mov	DWORD PTR n$[rsp], 0

; 25   :    if (x <= 0x0000FFFF) {n = n +16; x = x <<16;}

	cmp	DWORD PTR x$[rsp], 65535		; 0000ffffH
	ja	SHORT $LN3@nlz1
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	DWORD PTR x$[rsp], eax
$LN3@nlz1:

; 26   :    if (x <= 0x00FFFFFF) {n = n + 8; x = x << 8;}

	cmp	DWORD PTR x$[rsp], 16777215		; 00ffffffH
	ja	SHORT $LN4@nlz1
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	DWORD PTR x$[rsp], eax
$LN4@nlz1:

; 27   :    if (x <= 0x0FFFFFFF) {n = n + 4; x = x << 4;}

	cmp	DWORD PTR x$[rsp], 268435455		; 0fffffffH
	ja	SHORT $LN5@nlz1
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 4
	mov	DWORD PTR x$[rsp], eax
$LN5@nlz1:

; 28   :    if (x <= 0x3FFFFFFF) {n = n + 2; x = x << 2;}

	cmp	DWORD PTR x$[rsp], 1073741823		; 3fffffffH
	ja	SHORT $LN6@nlz1
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	mov	DWORD PTR x$[rsp], eax
$LN6@nlz1:

; 29   :    if (x <= 0x7FFFFFFF) {n = n + 1;}

	cmp	DWORD PTR x$[rsp], 2147483647		; 7fffffffH
	ja	SHORT $LN7@nlz1
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@nlz1:

; 30   :    return n;

	mov	eax, DWORD PTR n$[rsp]
$LN1@nlz1:

; 31   : }

	add	rsp, 16
	pop	rdi
	ret	0
?nlz1@@YAHI@Z ENDP					; nlz1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\ksart\OneDrive\Desktop\FlappyBird\libraries\external\glm\test\core\core_func_integer_find_msb.cpp
_TEXT	SEGMENT
x$ = 16
?pop@@YAHI@Z PROC					; pop

; 11   : int pop(unsigned x) {

$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rdi

; 12   :    x = x - ((x >> 1) & 0x55555555);

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 1
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR x$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 13   :    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);

	mov	eax, DWORD PTR x$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR x$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 14   :    x = (x + (x >> 4)) & 0x0F0F0F0F;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR x$[rsp], eax

; 15   :    x = x + (x << 8);

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 8
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 16   :    x = x + (x << 16);

	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 16
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax

; 17   :    return x >> 24;

	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 24

; 18   : }

	pop	rdi
	ret	0
?pop@@YAHI@Z ENDP					; pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 956  :     {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 963  :     }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 90   :     {

$LN3:
	push	rdi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
